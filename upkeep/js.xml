<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="38" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="41" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="38" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="41" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<iterator public="1" get="inline" set="null" line="88">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/local/lib/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="DateTools" params="" file="/usr/local/lib/haxe/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="35" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="40" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="44" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="105" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="144" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "g" flag is used with the regular expression.</haxe_doc>
		</global>
		<ignoreCase public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "i" flag is used with the regular expression.</haxe_doc>
		</ignoreCase>
		<multiline public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "m" flag is used with the regular expression.</haxe_doc>
		</multiline>
		<source public="1" set="null">
			<c path="String"/>
			<haxe_doc>The source text of the regexp object, it doesn't contain the two forward slashes on both sides and any flags.</haxe_doc>
		</source>
		<lastIndex public="1">
			<x path="Int"/>
			<haxe_doc>The index at which to start the next match.</haxe_doc>
		</lastIndex>
		<exec public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Null"><c path="js.lib.RegExpMatch"/></x>
			</f>
			<haxe_doc>Execute a search for a match in a specified string.
		Returns a result array, or null.</haxe_doc>
		</exec>
		<test public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute a search for a match between a regular expression and a specified string.
		Returns true or false.</haxe_doc>
		</test>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return a string representing the regular expression.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="pattern:?flags">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a regular expression object for matching text with a pattern.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).

	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp>]]></haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/usr/local/lib/haxe/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"RegExp"</e></m>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.Syntax" params="" file="/usr/local/lib/haxe/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```

		Emits a compilation error if the count of `args` does not match the count of placeholders in `code`.</haxe_doc>
		</code>
		<plainCode public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.
		The same as `js.Syntax.code` except this one does not provide code interpolation.</haxe_doc>
		</plainCode>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<x path="haxe.extern.Rest"><d/></x>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="js.lib.Date" params="" file="/usr/local/lib/haxe/std/js/lib/Date.hx" extern="1">
		<fromHaxeDate public="1" get="inline" set="null" line="40" static="1">
			<f a="date">
				<t path="_Date.HaxeDate"/>
				<c path="js.lib.Date"/>
			</f>
			<haxe_doc>Cast Haxe's Date to js.lib.Date.</haxe_doc>
		</fromHaxeDate>
		<toHaxeDate public="1" get="inline" set="null" line="47" static="1">
			<f a="date">
				<c path="js.lib.Date"/>
				<t path="_Date.HaxeDate"/>
			</f>
			<haxe_doc>Cast js.lib.Date to Haxe's Date.</haxe_doc>
		</toHaxeDate>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored</haxe_doc>
		</now>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored.</haxe_doc>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</haxe_doc>
		</UTC>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the month (1-31) for the specified date according to local time.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) for the specified date according to local time.</haxe_doc>
		</getDay>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) of the specified date according to local time.</haxe_doc>
		</getFullYear>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hour (0-23) in the specified date according to local time.</haxe_doc>
		</getHours>
		<getMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to local time.</haxe_doc>
		</getMilliseconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to local time.</haxe_doc>
		</getMinutes>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to local time.</haxe_doc>
		</getMonth>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to local time.</haxe_doc>
		</getSeconds>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).</haxe_doc>
		</getTime>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time-zone offset in minutes for the current locale.</haxe_doc>
		</getTimezoneOffset>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day (date) of the month (1-31) in the specified date according to universal time.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) in the specified date according to universal time.</haxe_doc>
		</getUTCDay>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) in the specified date according to universal time.</haxe_doc>
		</getUTCFullYear>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours (0-23) in the specified date according to universal time.</haxe_doc>
		</getUTCHours>
		<getUTCMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to universal time.</haxe_doc>
		</getUTCMilliseconds>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCMinutes>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to universal time.</haxe_doc>
		</getUTCMonth>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCSeconds>
		<setDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to local time.</haxe_doc>
		</setDate>
		<setFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.</haxe_doc>
		</setFullYear>
		<setHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hours for a specified date according to local time.</haxe_doc>
		</setHours>
		<setMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to local time.</haxe_doc>
		</setMilliseconds>
		<setMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to local time.</haxe_doc>
		</setMinutes>
		<setMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to local time.</haxe_doc>
		</setMonth>
		<setSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to local time.</haxe_doc>
		</setSeconds>
		<setTime public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.</haxe_doc>
		</setTime>
		<setUTCDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to universal time.</haxe_doc>
		</setUTCDate>
		<setUTCFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.</haxe_doc>
		</setUTCFullYear>
		<setUTCHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hour for a specified date according to universal time.</haxe_doc>
		</setUTCHours>
		<setUTCMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to universal time.</haxe_doc>
		</setUTCMilliseconds>
		<setUTCMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to universal time.</haxe_doc>
		</setUTCMinutes>
		<setUTCMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to universal time.</haxe_doc>
		</setUTCMonth>
		<setUTCSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to universal time.</haxe_doc>
		</setUTCSeconds>
		<toDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "date" portion of the Date as a human-readable string.</haxe_doc>
		</toDateString>
		<toISOString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string following the ISO 8601 Extended Format.</haxe_doc>
		</toISOString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the Date using toISOString(). Intended for use by JSON.stringify().</haxe_doc>
		</toJSON>
		<toLocaleDateString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleDateString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
</toLocaleDateString></overloads>
		</toLocaleDateString>
		<toLocaleFormat public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a date to a string, using a format string.</haxe_doc>
		</toLocaleFormat>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
			<overloads><toLocaleString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
</toLocaleString></overloads>
		</toLocaleString>
		<toLocaleTimeString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleTimeString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
</toLocaleTimeString></overloads>
		</toLocaleTimeString>
		<toSource public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.</haxe_doc>
		</toSource>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the specified Date object. Overrides the Object.prototype.toString() method.</haxe_doc>
		</toString>
		<toTimeString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "time" portion of the Date as a human-readable string.</haxe_doc>
		</toTimeString>
		<toUTCString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string using the UTC timezone.</haxe_doc>
		</toUTCString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="dateString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Date"</e></m>
		</meta>
	</class>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/js/_std/Math.hx" extern="1">
		<ceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="/usr/local/lib/haxe/std/js/_std/Reflect.hx">
		<field public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<isFunction public="1" set="method" line="74" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>js.Boot</e></m></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compareMethods public="1" set="method" line="82" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/js/_std/Std.hx">
		<string public="1" set="method" line="46" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<parseInt public="1" set="method" line="55" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<lpad public="1" set="method" line="357" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="folderNode.folder.HomeFiles" params="" file="/usr/local/lib/haxeLibrary/folderNode/git/src/folderNode/folder/HomeFiles.hx">
		<getLocalPath public="1" get="inline" set="null" line="58" static="1"><f a=""><c path="String"/></f></getLocalPath>
		<log public="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></log>
		<homeDir public="1"><c path="String"/></homeDir>
		<appName public="1"><c path="String"/></appName>
		<createHome public="1" set="method" line="12">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</createHome>
		<createFolder public="1" set="method" line="17"><f a="str">
	<c path="String"/>
	<x path="Bool"/>
</f></createFolder>
		<createFileIfNeeded public="1" set="method" line="27"><f a="fileName:content">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></createFileIfNeeded>
		<pathTo public="1" set="method" line="33"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></pathTo>
		<getBytes public="1" set="method" line="36"><f a="str">
	<c path="String"/>
	<x path="Null"><c path="haxe.io.Bytes"/></x>
</f></getBytes>
		<saveBytes public="1" set="method" line="43"><f a="fileName:bytes">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></saveBytes>
		<saveToFile public="1" set="method" line="47"><f a="fileName:content">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></saveToFile>
		<readFile public="1" set="method" line="51"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></readFile>
		<new public="1" set="method" line="8"><f a="appName_">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.DynamicAccess" params="T" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="haxe.Exception" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Exception.hx">
		<extends path="haxe._Exception.NativeException"/>
		<caught set="method" line="18" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="28" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</thrown>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__skipStack>
			<x path="Int"/>
			<meta>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="70"><f a=""><x path="Any"/></f></unwrap>
		<get_native final="1" set="method" line="96"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="40">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.Http" params="" file="/usr/local/lib/haxe/std/haxe/Http.hx"><c path="haxe.http.HttpNodeJs"/></typedef>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe.Json" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Json.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" set="method" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":native"><e>"JSON"</e></m>
		</meta>
	</class>
	<class path="haxe._NativeStackTrace.V8Error" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/NativeStackTrace.hx" private="1" module="haxe.NativeStackTrace" extern="1">
		<prepareStackTrace public="1" static="1"><f a="error:structuredStackTrace">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareStackTrace>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="haxe.V8CallSite" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/NativeStackTrace.hx" module="haxe.NativeStackTrace"><a>
	<getLineNumber set="method"><f a=""><x path="Int"/></f></getLineNumber>
	<getFunctionName set="method"><f a=""><c path="String"/></f></getFunctionName>
	<getFileName set="method"><f a=""><c path="String"/></f></getFileName>
	<getColumnNumber set="method"><f a=""><x path="Int"/></f></getColumnNumber>
</a></typedef>
	<class path="haxe.ValueException" params="" file="/usr/local/lib/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Bytes.hx">
		<ofString public="1" set="method" line="206" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="243" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the `Bytes` representation of the given `BytesData`.</haxe_doc>
		</ofData>
		<length public="1" set="null"><x path="Int"/></length>
		<b><c path="js.lib.Uint8Array"/></b>
		<getString public="1" set="method" line="134">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<toString public="1" set="method" line="180">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<new set="method" line="32">
			<f a="data">
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="haxe.io.Encoding" params="" file="/usr/local/lib/haxe/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="js.lib.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.Uint8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8Array"/>
	</f>
	<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8Array` typed array represents an array of 8-bit unsigned integers. The contents
	are initialized to 0. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint8Array"</e></m>
		</meta>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/usr/local/lib/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<encode public="1" set="method" line="35" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<haxe_doc>Allows one to encode/decode String and bytes using Base64 encoding.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/usr/local/lib/haxe/std/haxe/crypto/BaseCode.hx">
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows one to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.http._HttpBase.StringKeyValue" params="" file="/usr/local/lib/haxe/std/haxe/http/HttpBase.hx" private="1" module="haxe.http.HttpBase"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
</a></typedef>
	<class path="haxe.http.HttpBase" params="" file="/usr/local/lib/haxe/std/haxe/http/HttpBase.hx">
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the `request()` method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></responseData>
		<responseBytes public="1" set="null"><x path="Null"><c path="haxe.io.Bytes"/></x></responseBytes>
		<responseAsString><x path="Null"><c path="String"/></x></responseAsString>
		<postData><x path="Null"><c path="String"/></x></postData>
		<postBytes><x path="Null"><c path="haxe.io.Bytes"/></x></postBytes>
		<headers><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></headers>
		<params><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></params>
		<emptyOnData final="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></emptyOnData>
		<setHeader public="1" set="method" line="85">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the header identified as `header` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="98"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addHeader>
		<setPostData public="1" set="method" line="142">
			<f a="data">
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` string.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostBytes()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<onData public="1" set="dynamic" line="196">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onBytes public="1" set="dynamic" line="205">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onBytes = function(data) { // handle result }`</haxe_doc>
		</onBytes>
		<onError public="1" set="dynamic" line="214">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="223">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<hasOnData set="method" line="228">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Override this if extending `haxe.Http` with overriding `onData`</haxe_doc>
		</hasOnData>
		<success set="method" line="232"><f a="data">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></success>
		<get_responseData set="method" line="241"><f a=""><x path="Null"><c path="String"/></x></f></get_responseData>
		<new public="1" set="method" line="71">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until `request()` is called.

		If `url` is null, the field url must be set to a value before making the
		call to `request()`, or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call `haxe.Http.requestUrl(url)` and receive the result as a `String`
	(not available on flash)
	- create a `new haxe.Http(url)`, register your callbacks for `onData`,
	`onError` and `onStatus`, then call `request()`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.http.HttpNodeJs" params="" file="/usr/local/lib/haxe/std/haxe/http/HttpNodeJs.hx">
		<extends path="haxe.http.HttpBase"/>
		<req><c path="js.node.http.ClientRequest"/></req>
		<request public="1" set="method" line="47">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</request>
		<new public="1" set="method" line="32"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="js.lib.ArrayBufferView"/></typedef>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="js.lib.ArrayBuffer"/></typedef>
	<class path="haxe.io.Eof" params="" file="/usr/local/lib/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.io.Error" params="" file="/usr/local/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="js.lib.ArrayBuffer" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"ArrayBuffer"</e></m>
		</meta>
	</class>
	<class path="js.lib.DataView" params="" file="/usr/local/lib/haxe/std/js/lib/DataView.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<getInt8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?byteLength">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"DataView"</e></m></meta>
	</class>
	<class path="haxe.io.Input" params="" file="/usr/local/lib/haxe/std/haxe/io/Input.hx">
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="/usr/local/lib/haxe/std/haxe/io/Output.hx">
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><c path="js.lib.Uint8Array"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="51">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="hxTShopify.api.CallStrings" params="" file="src/hxTShopify/api/Calls.hx" module="hxTShopify.api.Calls">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.api._Calls.CallStrings_Impl_" params="" file="src/hxTShopify/api/Calls.hx" private="1" module="hxTShopify.api.Calls" extern="1" final="1">
	<BALANCE public="1" get="inline" set="null" expr="cast &quot;shopify_payments/balance&quot;" line="4" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "shopify_payments/balance"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BALANCE>
	<DISPUTES public="1" get="inline" set="null" expr="cast &quot;shopify_payments/disputes&quot;" line="5" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "shopify_payments/disputes"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DISPUTES>
	<PAYOUTS public="1" get="inline" set="null" expr="cast &quot;shopify_payments/payouts&quot;" line="6" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "shopify_payments/payouts"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PAYOUTS>
	<ACCESS_SCOPE public="1" get="inline" set="null" expr="cast &quot;oauth/access_scopes&quot;" line="7" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "oauth/access_scopes"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACCESS_SCOPE>
	<STORE_FRONT_ACCESS public="1" get="inline" set="null" expr="cast &quot;storefront_access_tokens&quot;" line="8" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "storefront_access_tokens"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STORE_FRONT_ACCESS>
	<APPLICATION_CHARGE public="1" get="inline" set="null" expr="cast &quot;application_charges&quot;" line="9" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "application_charges"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</APPLICATION_CHARGE>
	<APPLICATION_CREDIT public="1" get="inline" set="null" expr="cast &quot;application_credits&quot;" line="10" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "application_credits"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</APPLICATION_CREDIT>
	<CHARGES public="1" get="inline" set="null" expr="cast &quot;application_charge&quot;" line="11" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "application_charge"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHARGES>
	<PRODUCT public="1" get="inline" set="null" expr="cast &quot;products&quot;" line="12" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "products"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PRODUCT>
	<PRODUCT_COUNT public="1" get="inline" set="null" expr="cast &quot;products/count&quot;" line="13" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "products/count"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PRODUCT_COUNT>
	<PRODUCT_PAGE public="1" get="inline" set="null" expr="cast &quot;?limit=250&amp;page=&quot;" line="14" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e><![CDATA[cast "?limit=250&page="]]></e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PRODUCT_PAGE>
	<ORDER public="1" get="inline" set="null" expr="cast &quot;orders&quot;" line="15" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "orders"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ORDER>
	<ORDER_COUNT public="1" get="inline" set="null" expr="cast &quot;orders/count&quot;" line="16" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "orders/count"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ORDER_COUNT>
	<ORDER_PAGE public="1" get="inline" set="null" expr="cast &quot;?limit=100&amp;page=&quot;" line="17" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e><![CDATA[cast "?limit=100&page="]]></e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ORDER_PAGE>
	<CUSTOMER public="1" get="inline" set="null" expr="cast &quot;customers&quot;" line="18" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "customers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CUSTOMER>
	<CUSTOMER_COUNT public="1" get="inline" set="null" expr="cast &quot;customers/count&quot;" line="19" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "customers/count"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CUSTOMER_COUNT>
	<CUSTOMER_PAGE public="1" get="inline" set="null" expr="cast &quot;?limit=250&amp;page=&quot;" line="20" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e><![CDATA[cast "?limit=250&page="]]></e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CUSTOMER_PAGE>
	<CURRENCY public="1" get="inline" set="null" expr="cast &quot;currencies&quot;" line="21" static="1">
		<x path="hxTShopify.api.CallStrings"/>
		<meta>
			<m n=":value"><e>cast "currencies"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CURRENCY>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.api._Calls.CallStrings_Impl_" params="" file="src/hxTShopify/api/Calls.hx" private="1" module="hxTShopify.api.Calls" extern="1" final="1">
		<BALANCE public="1" get="inline" set="null" expr="cast &quot;shopify_payments/balance&quot;" line="4" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "shopify_payments/balance"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BALANCE>
		<DISPUTES public="1" get="inline" set="null" expr="cast &quot;shopify_payments/disputes&quot;" line="5" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "shopify_payments/disputes"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DISPUTES>
		<PAYOUTS public="1" get="inline" set="null" expr="cast &quot;shopify_payments/payouts&quot;" line="6" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "shopify_payments/payouts"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PAYOUTS>
		<ACCESS_SCOPE public="1" get="inline" set="null" expr="cast &quot;oauth/access_scopes&quot;" line="7" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "oauth/access_scopes"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACCESS_SCOPE>
		<STORE_FRONT_ACCESS public="1" get="inline" set="null" expr="cast &quot;storefront_access_tokens&quot;" line="8" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "storefront_access_tokens"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STORE_FRONT_ACCESS>
		<APPLICATION_CHARGE public="1" get="inline" set="null" expr="cast &quot;application_charges&quot;" line="9" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "application_charges"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</APPLICATION_CHARGE>
		<APPLICATION_CREDIT public="1" get="inline" set="null" expr="cast &quot;application_credits&quot;" line="10" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "application_credits"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</APPLICATION_CREDIT>
		<CHARGES public="1" get="inline" set="null" expr="cast &quot;application_charge&quot;" line="11" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "application_charge"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHARGES>
		<PRODUCT public="1" get="inline" set="null" expr="cast &quot;products&quot;" line="12" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "products"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PRODUCT>
		<PRODUCT_COUNT public="1" get="inline" set="null" expr="cast &quot;products/count&quot;" line="13" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "products/count"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PRODUCT_COUNT>
		<PRODUCT_PAGE public="1" get="inline" set="null" expr="cast &quot;?limit=250&amp;page=&quot;" line="14" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e><![CDATA[cast "?limit=250&page="]]></e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PRODUCT_PAGE>
		<ORDER public="1" get="inline" set="null" expr="cast &quot;orders&quot;" line="15" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "orders"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ORDER>
		<ORDER_COUNT public="1" get="inline" set="null" expr="cast &quot;orders/count&quot;" line="16" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "orders/count"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ORDER_COUNT>
		<ORDER_PAGE public="1" get="inline" set="null" expr="cast &quot;?limit=100&amp;page=&quot;" line="17" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e><![CDATA[cast "?limit=100&page="]]></e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ORDER_PAGE>
		<CUSTOMER public="1" get="inline" set="null" expr="cast &quot;customers&quot;" line="18" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "customers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CUSTOMER>
		<CUSTOMER_COUNT public="1" get="inline" set="null" expr="cast &quot;customers/count&quot;" line="19" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "customers/count"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CUSTOMER_COUNT>
		<CUSTOMER_PAGE public="1" get="inline" set="null" expr="cast &quot;?limit=250&amp;page=&quot;" line="20" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e><![CDATA[cast "?limit=250&page="]]></e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CUSTOMER_PAGE>
		<CURRENCY public="1" get="inline" set="null" expr="cast &quot;currencies&quot;" line="21" static="1">
			<x path="hxTShopify.api.CallStrings"/>
			<meta>
				<m n=":value"><e>cast "currencies"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CURRENCY>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxTShopify.api.PageSizes" params="" file="src/hxTShopify/api/Calls.hx" module="hxTShopify.api.Calls">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.api._Calls.PageSizes_Impl_" params="" file="src/hxTShopify/api/Calls.hx" private="1" module="hxTShopify.api.Calls" extern="1" final="1">
	<productPageSize public="1" get="inline" set="null" expr="cast 250" line="24" static="1">
		<x path="hxTShopify.api.PageSizes"/>
		<meta>
			<m n=":value"><e>cast 250</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</productPageSize>
	<orderPageSize public="1" get="inline" set="null" expr="cast 100" line="25" static="1">
		<x path="hxTShopify.api.PageSizes"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</orderPageSize>
	<customerPageSize public="1" get="inline" set="null" expr="cast 250" line="26" static="1">
		<x path="hxTShopify.api.PageSizes"/>
		<meta>
			<m n=":value"><e>cast 250</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</customerPageSize>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.api._Calls.PageSizes_Impl_" params="" file="src/hxTShopify/api/Calls.hx" private="1" module="hxTShopify.api.Calls" extern="1" final="1">
		<productPageSize public="1" get="inline" set="null" expr="cast 250" line="24" static="1">
			<x path="hxTShopify.api.PageSizes"/>
			<meta>
				<m n=":value"><e>cast 250</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</productPageSize>
		<orderPageSize public="1" get="inline" set="null" expr="cast 100" line="25" static="1">
			<x path="hxTShopify.api.PageSizes"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</orderPageSize>
		<customerPageSize public="1" get="inline" set="null" expr="cast 250" line="26" static="1">
			<x path="hxTShopify.api.PageSizes"/>
			<meta>
				<m n=":value"><e>cast 250</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</customerPageSize>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="hxTShopify.api.Calls" params="" file="src/hxTShopify/api/Calls.hx"><byId public="1" set="method" line="29" static="1"><f a="callString:id">
	<x path="hxTShopify.api.CallStrings"/>
	<c path="String"/>
	<c path="String"/>
</f></byId></class>
	<class path="hxTShopify.api.Delete" params="" file="src/hxTShopify/api/Delete.hx">
		<finished public="1" static="1"><f a=""><x path="Void"/></f></finished>
		<productsRemove public="1" set="method" line="12" static="1"><f a="shop:productNames:log">
	<c path="hxTShopify.store.Shop"/>
	<c path="Array"><c path="String"/></c>
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></productsRemove>
		<productDelete public="1" set="method" line="20" static="1"><f a="shop:searchString:log">
	<c path="hxTShopify.store.Shop"/>
	<c path="String"/>
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></productDelete>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxTShopify.api.ManyPages" params="" file="src/hxTShopify/api/ManyPages.hx">
		<shop public="1"><c path="hxTShopify.store.Shop"/></shop>
		<ordersLoadProgress public="1"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></ordersLoadProgress>
		<ordersLoaded public="1"><f a="">
	<c path="Array"><t path="hxTShopify.t.Order"/></c>
	<x path="Void"/>
</f></ordersLoaded>
		<productsLoadProgress public="1"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></productsLoadProgress>
		<productsLoaded public="1"><f a="">
	<c path="Array"><t path="hxTShopify.t.Product"/></c>
	<x path="Void"/>
</f></productsLoaded>
		<customersLoadProgress public="1"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></customersLoadProgress>
		<customersLoaded public="1"><f a="">
	<c path="Array"><t path="hxTShopify.t.Customer"/></c>
	<x path="Void"/>
</f></customersLoaded>
		<getProducts public="1" set="method" line="49">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[// example use:
        var manyPages = new ManyPages( shop );
        manyPages.screenLog = screenLog;
        manyPages.productsLoadProgress = function( percent: Float ){
            screenLog( Std.string( percent ) + '%' );
        }
        manyPages.productsLoaded = function( products: Array<Product> ){
            var str: String = '';
            var product: Product;
            var variant: Variant;
            for( i in 0...products.length ){
                product = products[ i ];
                if( product.tags.indexOf( 'cool' ) != -1  || product.tags.indexOf( 'COOL' ) != -1 ){
                    str += product.title + ': ';
                    for( j in 0...product.variants.length ){
                        variant = product.variants[ j ];
                        str += variant.title + '( ' + variant.inventory_quantity + ' ), ';
                    }
                    str += '\n';
                }
            }
            str = str.substr( 0, str.length - 2 );
            screenLog( products.length );
            screenLog( str );
        }
        manyPages.getProducts();]]></haxe_doc>
		</getProducts>
		<getOrders public="1" set="method" line="65"><f a=""><x path="Void"/></f></getOrders>
		<getCustomers public="1" set="method" line="80"><f a=""><x path="Void"/></f></getCustomers>
		<allowLogs expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</allowLogs>
		<screenLog public="1" set="accessor"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></screenLog>
		<set_screenLog public="1" set="method" line="98"><f a="screenLog_">
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
</f></set_screenLog>
		<log public="1" get="inline" set="null" line="104"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></log>
		<new public="1" set="method" line="15"><f a="shop_">
	<c path="hxTShopify.store.Shop"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="hxTShopify.api.Search" params="" file="src/hxTShopify/api/Search.hx">
		<log public="1" static="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></log>
		<searchProducts public="1" set="method" line="8" static="1"><f a="shop:searchString:cb">
	<c path="hxTShopify.store.Shop"/>
	<c path="String"/>
	<f a="">
		<c path="Array"><t path="hxTShopify.t.Product"/></c>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></searchProducts>
		<searchCustomers public="1" set="method" line="22" static="1"><f a="shop:searchString:cb">
	<c path="hxTShopify.store.Shop"/>
	<c path="String"/>
	<f a="">
		<c path="Array"><t path="hxTShopify.t.Customer"/></c>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></searchCustomers>
		<searchOrders public="1" set="method" line="35" static="1"><f a="shop:searchString:cb">
	<c path="hxTShopify.store.Shop"/>
	<c path="String"/>
	<f a="">
		<c path="Array"><t path="hxTShopify.t.Order"/></c>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></searchOrders>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxTShopify.api.Transfer" params="" file="src/hxTShopify/api/Transfer.hx">
		<productsCreation public="1" set="method" line="9" static="1"><f a="from_:to_:productNames:productTransformation:variantTransformation:loaded:log">
	<c path="hxTShopify.store.Shop"/>
	<c path="hxTShopify.store.Shop"/>
	<c path="Array"><c path="String"/></c>
	<f a="">
		<t path="hxTShopify.t.Product"/>
		<t path="hxTShopify.t.Product"/>
	</f>
	<f a=":">
		<t path="hxTShopify.t.Variant"/>
		<t path="hxTShopify.t.Variant"/>
		<t path="hxTShopify.t.Variant"/>
	</f>
	<f a=":">
		<t path="hxTShopify.t.Product"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></productsCreation>
		<productCreate public="1" set="method" line="21" static="1"><f a="from_:to_:searchString:productTransformation:variantTransformation:loaded:log">
	<c path="hxTShopify.store.Shop"/>
	<c path="hxTShopify.store.Shop"/>
	<c path="String"/>
	<f a="">
		<t path="hxTShopify.t.Product"/>
		<t path="hxTShopify.t.Product"/>
	</f>
	<f a=":">
		<t path="hxTShopify.t.Variant"/>
		<t path="hxTShopify.t.Variant"/>
		<t path="hxTShopify.t.Variant"/>
	</f>
	<f a=":">
		<t path="hxTShopify.t.Product"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></productCreate>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxTShopify.connection.Https" params="THolder" file="src/hxTShopify/connection/Https.hx">
		<onError public="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></onError>
		<onStatus public="1"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></onStatus>
		<onLoad public="1"><f a="">
	<c path="hxTShopify.connection.Https.THolder"/>
	<x path="Void"/>
</f></onLoad>
		<onDelete public="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></onDelete>
		<get public="1" set="method" line="20">
			<f a="url:pass">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[// example:
        var https = new Https<Products>();
        https.onLoad = function( ps: ProductHolder ){
            var p: Array<Product> = ps.products;
            screenLog( 'loaded ' + Std.string( p[0] ) );
        }
        ttps.get( shop.constructPath( PRODUCT ), shop.getKeyPass() );]]></haxe_doc>
		</get>
		<post public="1" set="method" line="51">
			<f a="url:payload:pass">
				<c path="String"/>
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[// example:
        var https = new Https<ProductHolder>();
        https.onLoad = function( ps: ProductHolder ){
            var p: Product = ps.product;
            screenLog( 'loaded ' + Std.string( p ) );
        }
        https.onError = function( error: String ) screenLog( error );
        var payload = {
            "product" :{
                "title": "Burton Custom Freestyle 151",
                "body_html": "<strong>Good snowboard!</strong>",
                "vendor": "Burton",
                "product_type": "Snowboard",
                "published": false
            }
        };
        https.post( shop.constructPath( PRODUCT ), payload, shop.getKeyPass() );]]></haxe_doc>
		</post>
		<put public="1" set="method" line="95">
			<f a="url:payload:pass">
				<c path="String"/>
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[// example:
        var https = new Https<ProductHolder>();
        https.onLoad = function( ps: ProductHolder ){
            var p: Product = ps.product;
            var id: String = Std.string( p.id );
            var payload = {
                "product": {
                "id": id,
                "title": 'Burton Custom Frestyle 151 updated'
              }
            };
            https.onLoad = function( ps: ProductHolder ){
                var p: Product = ps.product;
                screenLog( 'loaded ' + Std.string( p ) );
            }
            https.put( shop.constructItemPath( PRODUCT, id ), payload, shop.getKeyPass() );
        }
        https.onError = function( error: String ) screenLog( error );
        https.onDelete = function( id: String ) screenLog( 'deleted ' + id );
        var payload = {
            "product" :{
                "title": "Burton Custom Freestyle 151",
                "body_html": "<strong>Good snowboard!</strong>",
                "vendor": "Burton",
                "product_type": "Snowboard",
                "published": false
            }
        };
        https.post( shop.constructPath( PRODUCT ), payload, shop.getKeyPass() );]]></haxe_doc>
		</put>
		<delete public="1" set="method" line="134">
			<f a="url:id:pass">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[// example:
        var https = new Https<ProductHolder>();
        https.onLoad = function( ps: ProductHolder ){
            var p: Product = ps.product;
            var id: String = Std.string( p.id );
            https.delete( shop.constructItemPath( PRODUCT, id ), id, shop.getKeyPass() );
        }
        https.onError = function( error: String ) screenLog( error );
        https.onDelete = function( id: String ) screenLog( 'deleted ' + id );
        var payload = {
            "product" :{
                "title": "Burton Custom Freestyle 151",
                "body_html": "<strong>Good snowboard!</strong>",
                "vendor": "Burton",
                "product_type": "Snowboard",
                "published": false
            }
        };
        https.post( shop.constructPath( PRODUCT ), payload, shop.getKeyPass() );]]></haxe_doc>
		</delete>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxTShopify.connection.SectionHttps" params="T:THolder" file="src/hxTShopify/connection/SectionHttps.hx">
		<extends path="hxTShopify.connection.Https"><c path="hxTShopify.connection.SectionHttps.THolder"/></extends>
		<totalItems><x path="Int"/></totalItems>
		<totalPages><x path="Int"/></totalPages>
		<currPage><x path="Int"/></currPage>
		<sections><c path="Array"><c path="hxTShopify.connection.SectionHttps.T"/></c></sections>
		<countUrl><f a=""><c path="String"/></f></countUrl>
		<pageUrl><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></pageUrl>
		<getSection><f a="">
	<c path="hxTShopify.connection.SectionHttps.THolder"/>
	<c path="Array"><c path="hxTShopify.connection.SectionHttps.T"/></c>
</f></getSection>
		<pageSize><x path="Int"/></pageSize>
		<onPage public="1"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></onPage>
		<countHttps expr="new Https&lt;Count&gt;()">
			<c path="hxTShopify.connection.Https"><t path="hxTShopify.t.Count"/></c>
			<meta><m n=":value"><e><![CDATA[new Https<Count>()]]></e></m></meta>
		</countHttps>
		<sectionHttps expr="new Https&lt;THolder&gt;()">
			<c path="hxTShopify.connection.Https"><c path="hxTShopify.connection.SectionHttps.THolder"/></c>
			<meta><m n=":value"><e><![CDATA[new Https<THolder>()]]></e></m></meta>
		</sectionHttps>
		<pass><c path="String"/></pass>
		<onFinish public="1"><f a="">
	<c path="Array"><c path="hxTShopify.connection.SectionHttps.T"/></c>
	<x path="Void"/>
</f></onFinish>
		<onPercent public="1"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></onPercent>
		<onItemTotal public="1"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></onItemTotal>
		<onPageTotal public="1"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></onPageTotal>
		<getSections public="1" set="method" line="36"><f a=""><x path="Void"/></f></getSections>
		<loadSections public="1" set="method" line="44"><f a="counter">
	<t path="hxTShopify.t.Count"/>
	<x path="Void"/>
</f></loadSections>
		<addFirstPage set="method" line="48"><f a="noItems">
	<x path="Int"/>
	<x path="Void"/>
</f></addFirstPage>
		<nextPage set="method" line="56"><f a="sectionsHolder">
	<c path="hxTShopify.connection.SectionHttps.THolder"/>
	<x path="Void"/>
</f></nextPage>
		<getSectionPage set="method" line="67"><f a="pageNo">
	<x path="Int"/>
	<x path="Void"/>
</f></getSectionPage>
		<addSections get="inline" set="null" line="73"><f a="sectionsHolder">
	<c path="hxTShopify.connection.SectionHttps.THolder"/>
	<x path="Void"/>
</f></addSections>
		<new public="1" set="method" line="23">
			<f a="countUrl_:pageUrl_:getSection_:pass_:?pageSize_" v="::::250">
				<f a=""><c path="String"/></f>
				<f a="">
					<x path="Int"/>
					<c path="String"/>
				</f>
				<f a="">
					<c path="hxTShopify.connection.SectionHttps.THolder"/>
					<c path="Array"><c path="hxTShopify.connection.SectionHttps.T"/></c>
				</f>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pageSize_ : 250 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxTShopify.demo.Shoppy" params="" file="src/hxTShopify/demo/Shoppy.hx">
		<log public="1" static="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></log>
		<clear public="1" static="1"><f a=""><x path="Void"/></f></clear>
		<shops><c path="Array"><c path="hxTShopify.store.Shop"/></c></shops>
		<homeFiles><c path="Array"><c path="folderNode.folder.HomeFiles"/></c></homeFiles>
		<testProducts><c path="hxTShopify.demo.TestProducts"/></testProducts>
		<testProducts2><c path="hxTShopify.demo.TestProducts"/></testProducts2>
		<deleteProducts0 get="inline" set="null" line="47"><f a=""><x path="Void"/></f></deleteProducts0>
		<loadProduct get="inline" set="null" line="58"><f a=""><x path="Void"/></f></loadProduct>
		<deleteProduct2 get="inline" set="null" line="71"><f a="productTitle">
	<c path="String"/>
	<x path="Void"/>
</f></deleteProduct2>
		<transferProduct2 get="inline" set="null" line="87"><f a=""><x path="Void"/></f></transferProduct2>
		<makeHome get="inline" set="null" line="101"><f a="shop">
	<c path="hxTShopify.store.Shop"/>
	<c path="folderNode.folder.HomeFiles"/>
</f></makeHome>
		<new public="1" set="method" line="36"><f a="shops_">
	<c path="Array"><c path="hxTShopify.store.Shop"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="hxTShopify.demo.TestPictures" params="" file="src/hxTShopify/demo/TestImages.hx" module="hxTShopify.demo.TestImages">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.demo._TestImages.TestPictures_Impl_" params="" file="src/hxTShopify/demo/TestImages.hx" private="1" module="hxTShopify.demo.TestImages" extern="1" final="1">
	<babyYellowBlueSock public="1" get="inline" set="null" expr="cast &quot;babyYellowBlueSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "babyYellowBlueSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</babyYellowBlueSock>
	<blackDress public="1" get="inline" set="null" expr="cast &quot;blackDress&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blackDress"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blackDress>
	<blackHat public="1" get="inline" set="null" expr="cast &quot;blackHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blackHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blackHat>
	<blackJumper public="1" get="inline" set="null" expr="cast &quot;blackJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blackJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blackJumper>
	<blackPants public="1" get="inline" set="null" expr="cast &quot;blackPants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blackPants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blackPants>
	<blackSock public="1" get="inline" set="null" expr="cast &quot;blackSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blackSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blackSock>
	<blackTie public="1" get="inline" set="null" expr="cast &quot;blackTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blackTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blackTie>
	<blackTrousers public="1" get="inline" set="null" expr="cast &quot;blackTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blackTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blackTrousers>
	<blueHat public="1" get="inline" set="null" expr="cast &quot;blueHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blueHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blueHat>
	<blueJumper public="1" get="inline" set="null" expr="cast &quot;blueJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blueJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blueJumper>
	<bluePants public="1" get="inline" set="null" expr="cast &quot;bluePants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "bluePants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</bluePants>
	<blueSkirt public="1" get="inline" set="null" expr="cast &quot;blueSkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blueSkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blueSkirt>
	<blueSock public="1" get="inline" set="null" expr="cast &quot;blueSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blueSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blueSock>
	<blueTie public="1" get="inline" set="null" expr="cast &quot;blueTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blueTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blueTie>
	<blueTrousers public="1" get="inline" set="null" expr="cast &quot;blueTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "blueTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</blueTrousers>
	<darkGrayHat public="1" get="inline" set="null" expr="cast &quot;darkGrayHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "darkGrayHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</darkGrayHat>
	<darkGrayJumper public="1" get="inline" set="null" expr="cast &quot;darkGrayJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "darkGrayJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</darkGrayJumper>
	<darkGreyPants public="1" get="inline" set="null" expr="cast &quot;darkGreyPants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "darkGreyPants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</darkGreyPants>
	<darkGreyPinkSock public="1" get="inline" set="null" expr="cast &quot;darkGreyPinkSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "darkGreyPinkSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</darkGreyPinkSock>
	<darkGreySkirt public="1" get="inline" set="null" expr="cast &quot;darkGreySkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "darkGreySkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</darkGreySkirt>
	<darkGreySock public="1" get="inline" set="null" expr="cast &quot;darkGreySock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "darkGreySock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</darkGreySock>
	<darkGreyTie public="1" get="inline" set="null" expr="cast &quot;darkGreyTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "darkGreyTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</darkGreyTie>
	<darkGreyTrousers public="1" get="inline" set="null" expr="cast &quot;darkGreyTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "darkGreyTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</darkGreyTrousers>
	<darkPurpleJumper public="1" get="inline" set="null" expr="cast &quot;darkPurpleJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "darkPurpleJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</darkPurpleJumper>
	<denimTrousers public="1" get="inline" set="null" expr="cast &quot;denimTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "denimTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</denimTrousers>
	<giraffeTie public="1" get="inline" set="null" expr="cast &quot;giraffeTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "giraffeTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</giraffeTie>
	<greenHat public="1" get="inline" set="null" expr="cast &quot;greenHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "greenHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</greenHat>
	<greenJumper public="1" get="inline" set="null" expr="cast &quot;greenJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "greenJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</greenJumper>
	<greenPants public="1" get="inline" set="null" expr="cast &quot;greenPants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "greenPants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</greenPants>
	<greenSkirt public="1" get="inline" set="null" expr="cast &quot;greenSkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "greenSkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</greenSkirt>
	<greenSock public="1" get="inline" set="null" expr="cast &quot;greenSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "greenSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</greenSock>
	<greenTie public="1" get="inline" set="null" expr="cast &quot;greenTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "greenTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</greenTie>
	<greenTrousers public="1" get="inline" set="null" expr="cast &quot;greenTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "greenTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</greenTrousers>
	<greenVioletHat public="1" get="inline" set="null" expr="cast &quot;greenVioletHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "greenVioletHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</greenVioletHat>
	<greenyTie public="1" get="inline" set="null" expr="cast &quot;greenyTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "greenyTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</greenyTie>
	<indigoHat public="1" get="inline" set="null" expr="cast &quot;indigoHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "indigoHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</indigoHat>
	<indigoJumper public="1" get="inline" set="null" expr="cast &quot;indigoJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "indigoJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</indigoJumper>
	<indigoPants public="1" get="inline" set="null" expr="cast &quot;indigoPants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "indigoPants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</indigoPants>
	<indigoSkirt public="1" get="inline" set="null" expr="cast &quot;indigoSkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "indigoSkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</indigoSkirt>
	<indigoSock public="1" get="inline" set="null" expr="cast &quot;indigoSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "indigoSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</indigoSock>
	<indigoTie public="1" get="inline" set="null" expr="cast &quot;indigoTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "indigoTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</indigoTie>
	<indigoTrousers public="1" get="inline" set="null" expr="cast &quot;indigoTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "indigoTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</indigoTrousers>
	<lightGreyHat public="1" get="inline" set="null" expr="cast &quot;lightGreyHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "lightGreyHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</lightGreyHat>
	<lightGreyJumper public="1" get="inline" set="null" expr="cast &quot;lightGreyJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "lightGreyJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</lightGreyJumper>
	<lightGreyPants public="1" get="inline" set="null" expr="cast &quot;lightGreyPants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "lightGreyPants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</lightGreyPants>
	<lightGreySkirt public="1" get="inline" set="null" expr="cast &quot;lightGreySkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "lightGreySkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</lightGreySkirt>
	<lightGreySock public="1" get="inline" set="null" expr="cast &quot;lightGreySock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "lightGreySock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</lightGreySock>
	<lightGreyTie public="1" get="inline" set="null" expr="cast &quot;lightGreyTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "lightGreyTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</lightGreyTie>
	<lightGreyTrousers public="1" get="inline" set="null" expr="cast &quot;lightGreyTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "lightGreyTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</lightGreyTrousers>
	<lightPlumAndGreenJumper public="1" get="inline" set="null" expr="cast &quot;lightPlumAndGreenJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "lightPlumAndGreenJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</lightPlumAndGreenJumper>
	<mediumGreyHat public="1" get="inline" set="null" expr="cast &quot;mediumGreyHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "mediumGreyHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</mediumGreyHat>
	<mediumGreyJumper public="1" get="inline" set="null" expr="cast &quot;mediumGreyJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "mediumGreyJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</mediumGreyJumper>
	<mediumGreyPants public="1" get="inline" set="null" expr="cast &quot;mediumGreyPants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "mediumGreyPants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</mediumGreyPants>
	<mediumGreySkirt public="1" get="inline" set="null" expr="cast &quot;mediumGreySkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "mediumGreySkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</mediumGreySkirt>
	<mediumGreySock public="1" get="inline" set="null" expr="cast &quot;mediumGreySock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "mediumGreySock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</mediumGreySock>
	<mediumGreyTie public="1" get="inline" set="null" expr="cast &quot;mediumGreyTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "mediumGreyTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</mediumGreyTie>
	<mediumGreyTrousers public="1" get="inline" set="null" expr="cast &quot;mediumGreyTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "mediumGreyTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</mediumGreyTrousers>
	<oliveOrangePants public="1" get="inline" set="null" expr="cast &quot;oliveOrangePants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "oliveOrangePants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</oliveOrangePants>
	<orangeHat public="1" get="inline" set="null" expr="cast &quot;orangeHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "orangeHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</orangeHat>
	<orangeJumper public="1" get="inline" set="null" expr="cast &quot;orangeJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "orangeJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</orangeJumper>
	<orangePants public="1" get="inline" set="null" expr="cast &quot;orangePants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "orangePants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</orangePants>
	<orangeSkirt public="1" get="inline" set="null" expr="cast &quot;orangeSkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "orangeSkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</orangeSkirt>
	<orangeSock public="1" get="inline" set="null" expr="cast &quot;orangeSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "orangeSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</orangeSock>
	<orangeTie public="1" get="inline" set="null" expr="cast &quot;orangeTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "orangeTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</orangeTie>
	<orangeTrousers public="1" get="inline" set="null" expr="cast &quot;orangeTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "orangeTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</orangeTrousers>
	<pinkAndMauveSkirt public="1" get="inline" set="null" expr="cast &quot;pinkAndMauveSkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "pinkAndMauveSkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pinkAndMauveSkirt>
	<pinkBabyBlueSkirt public="1" get="inline" set="null" expr="cast &quot;pinkBabyBlueSkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "pinkBabyBlueSkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pinkBabyBlueSkirt>
	<pinkHat public="1" get="inline" set="null" expr="cast &quot;pinkHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "pinkHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pinkHat>
	<purpleCyanPants public="1" get="inline" set="null" expr="cast &quot;purpleCyanPants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "purpleCyanPants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</purpleCyanPants>
	<redHat public="1" get="inline" set="null" expr="cast &quot;redHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "redHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</redHat>
	<redJumper public="1" get="inline" set="null" expr="cast &quot;redJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "redJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</redJumper>
	<redPants public="1" get="inline" set="null" expr="cast &quot;redPants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "redPants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</redPants>
	<redSkirt public="1" get="inline" set="null" expr="cast &quot;redSkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "redSkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</redSkirt>
	<redSock public="1" get="inline" set="null" expr="cast &quot;redSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "redSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</redSock>
	<redTie public="1" get="inline" set="null" expr="cast &quot;redTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "redTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</redTie>
	<redTrousers public="1" get="inline" set="null" expr="cast &quot;redTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "redTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</redTrousers>
	<violetHat public="1" get="inline" set="null" expr="cast &quot;violetHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "violetHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</violetHat>
	<violetJumper public="1" get="inline" set="null" expr="cast &quot;violetJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "violetJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</violetJumper>
	<violetPants public="1" get="inline" set="null" expr="cast &quot;violetPants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "violetPants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</violetPants>
	<violetSkirt public="1" get="inline" set="null" expr="cast &quot;violetSkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "violetSkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</violetSkirt>
	<violetSock public="1" get="inline" set="null" expr="cast &quot;violetSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "violetSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</violetSock>
	<violetTie public="1" get="inline" set="null" expr="cast &quot;violetTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "violetTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</violetTie>
	<violetTrousers public="1" get="inline" set="null" expr="cast &quot;violetTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "violetTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</violetTrousers>
	<whiteHat public="1" get="inline" set="null" expr="cast &quot;whiteHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "whiteHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</whiteHat>
	<whiteJumper public="1" get="inline" set="null" expr="cast &quot;whiteJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "whiteJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</whiteJumper>
	<whitePants public="1" get="inline" set="null" expr="cast &quot;whitePants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "whitePants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</whitePants>
	<whiteSkirt public="1" get="inline" set="null" expr="cast &quot;whiteSkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "whiteSkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</whiteSkirt>
	<whiteSock public="1" get="inline" set="null" expr="cast &quot;whiteSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "whiteSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</whiteSock>
	<whiteTie public="1" get="inline" set="null" expr="cast &quot;whiteTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "whiteTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</whiteTie>
	<whiteTrousers public="1" get="inline" set="null" expr="cast &quot;whiteTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "whiteTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</whiteTrousers>
	<yellowAndRedTrousers public="1" get="inline" set="null" expr="cast &quot;yellowAndRedTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "yellowAndRedTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</yellowAndRedTrousers>
	<yellowHat public="1" get="inline" set="null" expr="cast &quot;yellowHat&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "yellowHat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</yellowHat>
	<yellowJumper public="1" get="inline" set="null" expr="cast &quot;yellowJumper&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "yellowJumper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</yellowJumper>
	<yellowPants public="1" get="inline" set="null" expr="cast &quot;yellowPants&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "yellowPants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</yellowPants>
	<yellowSkirt public="1" get="inline" set="null" expr="cast &quot;yellowSkirt&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "yellowSkirt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</yellowSkirt>
	<yellowSock public="1" get="inline" set="null" expr="cast &quot;yellowSock&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "yellowSock"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</yellowSock>
	<yellowTie public="1" get="inline" set="null" expr="cast &quot;yellowTie&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "yellowTie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</yellowTie>
	<yellowTrousers public="1" get="inline" set="null" expr="cast &quot;yellowTrousers&quot;" line="1" static="1">
		<x path="hxTShopify.demo.TestPictures"/>
		<meta>
			<m n=":value"><e>cast "yellowTrousers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</yellowTrousers>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.demo._TestImages.TestPictures_Impl_" params="" file="src/hxTShopify/demo/TestImages.hx" private="1" module="hxTShopify.demo.TestImages" extern="1" final="1">
		<babyYellowBlueSock public="1" get="inline" set="null" expr="cast &quot;babyYellowBlueSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "babyYellowBlueSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</babyYellowBlueSock>
		<blackDress public="1" get="inline" set="null" expr="cast &quot;blackDress&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blackDress"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blackDress>
		<blackHat public="1" get="inline" set="null" expr="cast &quot;blackHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blackHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blackHat>
		<blackJumper public="1" get="inline" set="null" expr="cast &quot;blackJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blackJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blackJumper>
		<blackPants public="1" get="inline" set="null" expr="cast &quot;blackPants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blackPants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blackPants>
		<blackSock public="1" get="inline" set="null" expr="cast &quot;blackSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blackSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blackSock>
		<blackTie public="1" get="inline" set="null" expr="cast &quot;blackTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blackTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blackTie>
		<blackTrousers public="1" get="inline" set="null" expr="cast &quot;blackTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blackTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blackTrousers>
		<blueHat public="1" get="inline" set="null" expr="cast &quot;blueHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blueHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blueHat>
		<blueJumper public="1" get="inline" set="null" expr="cast &quot;blueJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blueJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blueJumper>
		<bluePants public="1" get="inline" set="null" expr="cast &quot;bluePants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "bluePants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</bluePants>
		<blueSkirt public="1" get="inline" set="null" expr="cast &quot;blueSkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blueSkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blueSkirt>
		<blueSock public="1" get="inline" set="null" expr="cast &quot;blueSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blueSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blueSock>
		<blueTie public="1" get="inline" set="null" expr="cast &quot;blueTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blueTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blueTie>
		<blueTrousers public="1" get="inline" set="null" expr="cast &quot;blueTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "blueTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</blueTrousers>
		<darkGrayHat public="1" get="inline" set="null" expr="cast &quot;darkGrayHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "darkGrayHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</darkGrayHat>
		<darkGrayJumper public="1" get="inline" set="null" expr="cast &quot;darkGrayJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "darkGrayJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</darkGrayJumper>
		<darkGreyPants public="1" get="inline" set="null" expr="cast &quot;darkGreyPants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "darkGreyPants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</darkGreyPants>
		<darkGreyPinkSock public="1" get="inline" set="null" expr="cast &quot;darkGreyPinkSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "darkGreyPinkSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</darkGreyPinkSock>
		<darkGreySkirt public="1" get="inline" set="null" expr="cast &quot;darkGreySkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "darkGreySkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</darkGreySkirt>
		<darkGreySock public="1" get="inline" set="null" expr="cast &quot;darkGreySock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "darkGreySock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</darkGreySock>
		<darkGreyTie public="1" get="inline" set="null" expr="cast &quot;darkGreyTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "darkGreyTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</darkGreyTie>
		<darkGreyTrousers public="1" get="inline" set="null" expr="cast &quot;darkGreyTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "darkGreyTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</darkGreyTrousers>
		<darkPurpleJumper public="1" get="inline" set="null" expr="cast &quot;darkPurpleJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "darkPurpleJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</darkPurpleJumper>
		<denimTrousers public="1" get="inline" set="null" expr="cast &quot;denimTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "denimTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</denimTrousers>
		<giraffeTie public="1" get="inline" set="null" expr="cast &quot;giraffeTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "giraffeTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</giraffeTie>
		<greenHat public="1" get="inline" set="null" expr="cast &quot;greenHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "greenHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</greenHat>
		<greenJumper public="1" get="inline" set="null" expr="cast &quot;greenJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "greenJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</greenJumper>
		<greenPants public="1" get="inline" set="null" expr="cast &quot;greenPants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "greenPants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</greenPants>
		<greenSkirt public="1" get="inline" set="null" expr="cast &quot;greenSkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "greenSkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</greenSkirt>
		<greenSock public="1" get="inline" set="null" expr="cast &quot;greenSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "greenSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</greenSock>
		<greenTie public="1" get="inline" set="null" expr="cast &quot;greenTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "greenTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</greenTie>
		<greenTrousers public="1" get="inline" set="null" expr="cast &quot;greenTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "greenTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</greenTrousers>
		<greenVioletHat public="1" get="inline" set="null" expr="cast &quot;greenVioletHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "greenVioletHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</greenVioletHat>
		<greenyTie public="1" get="inline" set="null" expr="cast &quot;greenyTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "greenyTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</greenyTie>
		<indigoHat public="1" get="inline" set="null" expr="cast &quot;indigoHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "indigoHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</indigoHat>
		<indigoJumper public="1" get="inline" set="null" expr="cast &quot;indigoJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "indigoJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</indigoJumper>
		<indigoPants public="1" get="inline" set="null" expr="cast &quot;indigoPants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "indigoPants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</indigoPants>
		<indigoSkirt public="1" get="inline" set="null" expr="cast &quot;indigoSkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "indigoSkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</indigoSkirt>
		<indigoSock public="1" get="inline" set="null" expr="cast &quot;indigoSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "indigoSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</indigoSock>
		<indigoTie public="1" get="inline" set="null" expr="cast &quot;indigoTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "indigoTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</indigoTie>
		<indigoTrousers public="1" get="inline" set="null" expr="cast &quot;indigoTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "indigoTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</indigoTrousers>
		<lightGreyHat public="1" get="inline" set="null" expr="cast &quot;lightGreyHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "lightGreyHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</lightGreyHat>
		<lightGreyJumper public="1" get="inline" set="null" expr="cast &quot;lightGreyJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "lightGreyJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</lightGreyJumper>
		<lightGreyPants public="1" get="inline" set="null" expr="cast &quot;lightGreyPants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "lightGreyPants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</lightGreyPants>
		<lightGreySkirt public="1" get="inline" set="null" expr="cast &quot;lightGreySkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "lightGreySkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</lightGreySkirt>
		<lightGreySock public="1" get="inline" set="null" expr="cast &quot;lightGreySock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "lightGreySock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</lightGreySock>
		<lightGreyTie public="1" get="inline" set="null" expr="cast &quot;lightGreyTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "lightGreyTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</lightGreyTie>
		<lightGreyTrousers public="1" get="inline" set="null" expr="cast &quot;lightGreyTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "lightGreyTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</lightGreyTrousers>
		<lightPlumAndGreenJumper public="1" get="inline" set="null" expr="cast &quot;lightPlumAndGreenJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "lightPlumAndGreenJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</lightPlumAndGreenJumper>
		<mediumGreyHat public="1" get="inline" set="null" expr="cast &quot;mediumGreyHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "mediumGreyHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</mediumGreyHat>
		<mediumGreyJumper public="1" get="inline" set="null" expr="cast &quot;mediumGreyJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "mediumGreyJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</mediumGreyJumper>
		<mediumGreyPants public="1" get="inline" set="null" expr="cast &quot;mediumGreyPants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "mediumGreyPants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</mediumGreyPants>
		<mediumGreySkirt public="1" get="inline" set="null" expr="cast &quot;mediumGreySkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "mediumGreySkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</mediumGreySkirt>
		<mediumGreySock public="1" get="inline" set="null" expr="cast &quot;mediumGreySock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "mediumGreySock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</mediumGreySock>
		<mediumGreyTie public="1" get="inline" set="null" expr="cast &quot;mediumGreyTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "mediumGreyTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</mediumGreyTie>
		<mediumGreyTrousers public="1" get="inline" set="null" expr="cast &quot;mediumGreyTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "mediumGreyTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</mediumGreyTrousers>
		<oliveOrangePants public="1" get="inline" set="null" expr="cast &quot;oliveOrangePants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "oliveOrangePants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</oliveOrangePants>
		<orangeHat public="1" get="inline" set="null" expr="cast &quot;orangeHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "orangeHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</orangeHat>
		<orangeJumper public="1" get="inline" set="null" expr="cast &quot;orangeJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "orangeJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</orangeJumper>
		<orangePants public="1" get="inline" set="null" expr="cast &quot;orangePants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "orangePants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</orangePants>
		<orangeSkirt public="1" get="inline" set="null" expr="cast &quot;orangeSkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "orangeSkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</orangeSkirt>
		<orangeSock public="1" get="inline" set="null" expr="cast &quot;orangeSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "orangeSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</orangeSock>
		<orangeTie public="1" get="inline" set="null" expr="cast &quot;orangeTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "orangeTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</orangeTie>
		<orangeTrousers public="1" get="inline" set="null" expr="cast &quot;orangeTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "orangeTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</orangeTrousers>
		<pinkAndMauveSkirt public="1" get="inline" set="null" expr="cast &quot;pinkAndMauveSkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "pinkAndMauveSkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pinkAndMauveSkirt>
		<pinkBabyBlueSkirt public="1" get="inline" set="null" expr="cast &quot;pinkBabyBlueSkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "pinkBabyBlueSkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pinkBabyBlueSkirt>
		<pinkHat public="1" get="inline" set="null" expr="cast &quot;pinkHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "pinkHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pinkHat>
		<purpleCyanPants public="1" get="inline" set="null" expr="cast &quot;purpleCyanPants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "purpleCyanPants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</purpleCyanPants>
		<redHat public="1" get="inline" set="null" expr="cast &quot;redHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "redHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</redHat>
		<redJumper public="1" get="inline" set="null" expr="cast &quot;redJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "redJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</redJumper>
		<redPants public="1" get="inline" set="null" expr="cast &quot;redPants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "redPants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</redPants>
		<redSkirt public="1" get="inline" set="null" expr="cast &quot;redSkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "redSkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</redSkirt>
		<redSock public="1" get="inline" set="null" expr="cast &quot;redSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "redSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</redSock>
		<redTie public="1" get="inline" set="null" expr="cast &quot;redTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "redTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</redTie>
		<redTrousers public="1" get="inline" set="null" expr="cast &quot;redTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "redTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</redTrousers>
		<violetHat public="1" get="inline" set="null" expr="cast &quot;violetHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "violetHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</violetHat>
		<violetJumper public="1" get="inline" set="null" expr="cast &quot;violetJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "violetJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</violetJumper>
		<violetPants public="1" get="inline" set="null" expr="cast &quot;violetPants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "violetPants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</violetPants>
		<violetSkirt public="1" get="inline" set="null" expr="cast &quot;violetSkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "violetSkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</violetSkirt>
		<violetSock public="1" get="inline" set="null" expr="cast &quot;violetSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "violetSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</violetSock>
		<violetTie public="1" get="inline" set="null" expr="cast &quot;violetTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "violetTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</violetTie>
		<violetTrousers public="1" get="inline" set="null" expr="cast &quot;violetTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "violetTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</violetTrousers>
		<whiteHat public="1" get="inline" set="null" expr="cast &quot;whiteHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "whiteHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</whiteHat>
		<whiteJumper public="1" get="inline" set="null" expr="cast &quot;whiteJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "whiteJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</whiteJumper>
		<whitePants public="1" get="inline" set="null" expr="cast &quot;whitePants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "whitePants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</whitePants>
		<whiteSkirt public="1" get="inline" set="null" expr="cast &quot;whiteSkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "whiteSkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</whiteSkirt>
		<whiteSock public="1" get="inline" set="null" expr="cast &quot;whiteSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "whiteSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</whiteSock>
		<whiteTie public="1" get="inline" set="null" expr="cast &quot;whiteTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "whiteTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</whiteTie>
		<whiteTrousers public="1" get="inline" set="null" expr="cast &quot;whiteTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "whiteTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</whiteTrousers>
		<yellowAndRedTrousers public="1" get="inline" set="null" expr="cast &quot;yellowAndRedTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "yellowAndRedTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</yellowAndRedTrousers>
		<yellowHat public="1" get="inline" set="null" expr="cast &quot;yellowHat&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "yellowHat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</yellowHat>
		<yellowJumper public="1" get="inline" set="null" expr="cast &quot;yellowJumper&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "yellowJumper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</yellowJumper>
		<yellowPants public="1" get="inline" set="null" expr="cast &quot;yellowPants&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "yellowPants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</yellowPants>
		<yellowSkirt public="1" get="inline" set="null" expr="cast &quot;yellowSkirt&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "yellowSkirt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</yellowSkirt>
		<yellowSock public="1" get="inline" set="null" expr="cast &quot;yellowSock&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "yellowSock"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</yellowSock>
		<yellowTie public="1" get="inline" set="null" expr="cast &quot;yellowTie&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "yellowTie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</yellowTie>
		<yellowTrousers public="1" get="inline" set="null" expr="cast &quot;yellowTrousers&quot;" line="1" static="1">
			<x path="hxTShopify.demo.TestPictures"/>
			<meta>
				<m n=":value"><e>cast "yellowTrousers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</yellowTrousers>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="hxTShopify.demo.TestImages" params="" file="src/hxTShopify/demo/TestImages.hx">
		<srcPath public="1" get="inline" set="null" expr="&quot;https://nanjizal.github.io/TestProduct/assets/&quot;" line="106" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"https://nanjizal.github.io/TestProduct/assets/"</e></m></meta>
		</srcPath>
		<create public="1" set="method" line="108" static="1"><f a="col">
	<c path="String"/>
	<c path="Array"><t path="hxTShopify.t.Image"/></c>
</f></create>
		<getImage public="1" get="inline" set="null" line="119" static="1">
			<f a="no:col:pic:?width:?height" v=":::500:500">
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="hxTShopify.t.Image"/>
			</f>
			<meta><m n=":value"><e>{ height : 500, width : 500 }</e></m></meta>
		</getImage>
	</class>
	<abstract path="hxTShopify.demo.TestColors" params="" file="src/hxTShopify/demo/TestOptions.hx" module="hxTShopify.demo.TestOptions">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.demo._TestOptions.TestColors_Impl_" params="" file="src/hxTShopify/demo/TestOptions.hx" private="1" module="hxTShopify.demo.TestOptions" extern="1" final="1">
	<VIOLET public="1" get="inline" set="null" expr="cast 0x9400D3" line="6" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0x9400D3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VIOLET>
	<INDIGO public="1" get="inline" set="null" expr="cast 0x4B0082" line="7" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0x4B0082</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INDIGO>
	<BLUE public="1" get="inline" set="null" expr="cast 0x0000FF" line="8" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0x0000FF</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BLUE>
	<GREEN public="1" get="inline" set="null" expr="cast 0x00FF00" line="9" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0x00FF00</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GREEN>
	<YELLOW public="1" get="inline" set="null" expr="cast 0xFFFF00" line="10" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF00</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YELLOW>
	<ORANGE public="1" get="inline" set="null" expr="cast 0xFF7F00" line="11" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0xFF7F00</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ORANGE>
	<RED public="1" get="inline" set="null" expr="cast 0xFF0000" line="12" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0xFF0000</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RED>
	<BLACK public="1" get="inline" set="null" expr="cast 0x000000" line="13" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0x000000</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BLACK>
	<LIGHTGREY public="1" get="inline" set="null" expr="cast 0x444444" line="14" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0x444444</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LIGHTGREY>
	<MIDGREY public="1" get="inline" set="null" expr="cast 0x333333" line="15" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0x333333</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MIDGREY>
	<DARKGREY public="1" get="inline" set="null" expr="cast 0x0C0C0C" line="16" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0x0C0C0C</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DARKGREY>
	<NEARLYBLACK public="1" get="inline" set="null" expr="cast 0x111111" line="17" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0x111111</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEARLYBLACK>
	<WHITE public="1" get="inline" set="null" expr="cast 0xFFFFFF" line="18" static="1">
		<x path="hxTShopify.demo.TestColors"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFF</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WHITE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.demo._TestOptions.TestColors_Impl_" params="" file="src/hxTShopify/demo/TestOptions.hx" private="1" module="hxTShopify.demo.TestOptions" extern="1" final="1">
		<VIOLET public="1" get="inline" set="null" expr="cast 0x9400D3" line="6" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0x9400D3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VIOLET>
		<INDIGO public="1" get="inline" set="null" expr="cast 0x4B0082" line="7" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0x4B0082</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INDIGO>
		<BLUE public="1" get="inline" set="null" expr="cast 0x0000FF" line="8" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0x0000FF</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BLUE>
		<GREEN public="1" get="inline" set="null" expr="cast 0x00FF00" line="9" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0x00FF00</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GREEN>
		<YELLOW public="1" get="inline" set="null" expr="cast 0xFFFF00" line="10" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF00</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YELLOW>
		<ORANGE public="1" get="inline" set="null" expr="cast 0xFF7F00" line="11" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0xFF7F00</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ORANGE>
		<RED public="1" get="inline" set="null" expr="cast 0xFF0000" line="12" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0xFF0000</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RED>
		<BLACK public="1" get="inline" set="null" expr="cast 0x000000" line="13" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0x000000</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BLACK>
		<LIGHTGREY public="1" get="inline" set="null" expr="cast 0x444444" line="14" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0x444444</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LIGHTGREY>
		<MIDGREY public="1" get="inline" set="null" expr="cast 0x333333" line="15" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0x333333</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MIDGREY>
		<DARKGREY public="1" get="inline" set="null" expr="cast 0x0C0C0C" line="16" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0x0C0C0C</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DARKGREY>
		<NEARLYBLACK public="1" get="inline" set="null" expr="cast 0x111111" line="17" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0x111111</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEARLYBLACK>
		<WHITE public="1" get="inline" set="null" expr="cast 0xFFFFFF" line="18" static="1">
			<x path="hxTShopify.demo.TestColors"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFF</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WHITE>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxTShopify.demo.UkSizes" params="" file="src/hxTShopify/demo/TestOptions.hx" module="hxTShopify.demo.TestOptions">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.demo._TestOptions.UkSizes_Impl_" params="" file="src/hxTShopify/demo/TestOptions.hx" private="1" module="hxTShopify.demo.TestOptions" extern="1" final="1">
	<size6 public="1" get="inline" set="null" expr="cast &quot;size 6&quot;" line="22" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 6"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size6>
	<size8 public="1" get="inline" set="null" expr="cast &quot;size 8&quot;" line="23" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 8"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size8>
	<size10 public="1" get="inline" set="null" expr="cast &quot;size 10&quot;" line="24" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 10"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size10>
	<size12 public="1" get="inline" set="null" expr="cast &quot;size 12&quot;" line="25" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 12"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size12>
	<size14 public="1" get="inline" set="null" expr="cast &quot;size 14&quot;" line="26" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 14"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size14>
	<size16 public="1" get="inline" set="null" expr="cast &quot;size 16&quot;" line="27" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 16"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size16>
	<size18 public="1" get="inline" set="null" expr="cast &quot;size 18&quot;" line="28" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 18"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size18>
	<size20 public="1" get="inline" set="null" expr="cast &quot;size 20&quot;" line="29" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 20"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size20>
	<size22 public="1" get="inline" set="null" expr="cast &quot;size 22&quot;" line="30" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 22"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size22>
	<size24 public="1" get="inline" set="null" expr="cast &quot;size 24&quot;" line="31" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 24"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size24>
	<size26 public="1" get="inline" set="null" expr="cast &quot;size 26&quot;" line="32" static="1">
		<x path="hxTShopify.demo.UkSizes"/>
		<meta>
			<m n=":value"><e>cast "size 26"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</size26>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.demo._TestOptions.UkSizes_Impl_" params="" file="src/hxTShopify/demo/TestOptions.hx" private="1" module="hxTShopify.demo.TestOptions" extern="1" final="1">
		<size6 public="1" get="inline" set="null" expr="cast &quot;size 6&quot;" line="22" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 6"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size6>
		<size8 public="1" get="inline" set="null" expr="cast &quot;size 8&quot;" line="23" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 8"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size8>
		<size10 public="1" get="inline" set="null" expr="cast &quot;size 10&quot;" line="24" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 10"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size10>
		<size12 public="1" get="inline" set="null" expr="cast &quot;size 12&quot;" line="25" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 12"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size12>
		<size14 public="1" get="inline" set="null" expr="cast &quot;size 14&quot;" line="26" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 14"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size14>
		<size16 public="1" get="inline" set="null" expr="cast &quot;size 16&quot;" line="27" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 16"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size16>
		<size18 public="1" get="inline" set="null" expr="cast &quot;size 18&quot;" line="28" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 18"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size18>
		<size20 public="1" get="inline" set="null" expr="cast &quot;size 20&quot;" line="29" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 20"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size20>
		<size22 public="1" get="inline" set="null" expr="cast &quot;size 22&quot;" line="30" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 22"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size22>
		<size24 public="1" get="inline" set="null" expr="cast &quot;size 24&quot;" line="31" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 24"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size24>
		<size26 public="1" get="inline" set="null" expr="cast &quot;size 26&quot;" line="32" static="1">
			<x path="hxTShopify.demo.UkSizes"/>
			<meta>
				<m n=":value"><e>cast "size 26"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</size26>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxTShopify.demo.ColorNames" params="" file="src/hxTShopify/demo/TestOptions.hx" module="hxTShopify.demo.TestOptions">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.demo._TestOptions.ColorNames_Impl_" params="" file="src/hxTShopify/demo/TestOptions.hx" private="1" module="hxTShopify.demo.TestOptions" extern="1" final="1">
	<Violet public="1" get="inline" set="null" expr="cast &quot;Violet&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "Violet"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Violet>
	<Indigo public="1" get="inline" set="null" expr="cast &quot;Indigo&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "Indigo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Indigo>
	<Blue public="1" get="inline" set="null" expr="cast &quot;Blue&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "Blue"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Blue>
	<Green public="1" get="inline" set="null" expr="cast &quot;Green&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "Green"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Green>
	<Yellow public="1" get="inline" set="null" expr="cast &quot;Yellow&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "Yellow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Yellow>
	<Orange public="1" get="inline" set="null" expr="cast &quot;Orange&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "Orange"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Orange>
	<Red public="1" get="inline" set="null" expr="cast &quot;Red&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "Red"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Red>
	<Black public="1" get="inline" set="null" expr="cast &quot;Black&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "Black"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Black>
	<LightGrey public="1" get="inline" set="null" expr="cast &quot;LightGrey&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "LightGrey"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LightGrey>
	<MidGrey public="1" get="inline" set="null" expr="cast &quot;MidGrey&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "MidGrey"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MidGrey>
	<DarkGrey public="1" get="inline" set="null" expr="cast &quot;DarkGrey&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "DarkGrey"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DarkGrey>
	<NearlyBlack public="1" get="inline" set="null" expr="cast &quot;NearlyBlack&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "NearlyBlack"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NearlyBlack>
	<White public="1" get="inline" set="null" expr="cast &quot;White&quot;" line="1" static="1">
		<x path="hxTShopify.demo.ColorNames"/>
		<meta>
			<m n=":value"><e>cast "White"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</White>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.demo._TestOptions.ColorNames_Impl_" params="" file="src/hxTShopify/demo/TestOptions.hx" private="1" module="hxTShopify.demo.TestOptions" extern="1" final="1">
		<Violet public="1" get="inline" set="null" expr="cast &quot;Violet&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "Violet"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Violet>
		<Indigo public="1" get="inline" set="null" expr="cast &quot;Indigo&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "Indigo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Indigo>
		<Blue public="1" get="inline" set="null" expr="cast &quot;Blue&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "Blue"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Blue>
		<Green public="1" get="inline" set="null" expr="cast &quot;Green&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "Green"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Green>
		<Yellow public="1" get="inline" set="null" expr="cast &quot;Yellow&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "Yellow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Yellow>
		<Orange public="1" get="inline" set="null" expr="cast &quot;Orange&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "Orange"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Orange>
		<Red public="1" get="inline" set="null" expr="cast &quot;Red&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "Red"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Red>
		<Black public="1" get="inline" set="null" expr="cast &quot;Black&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "Black"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Black>
		<LightGrey public="1" get="inline" set="null" expr="cast &quot;LightGrey&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "LightGrey"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LightGrey>
		<MidGrey public="1" get="inline" set="null" expr="cast &quot;MidGrey&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "MidGrey"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MidGrey>
		<DarkGrey public="1" get="inline" set="null" expr="cast &quot;DarkGrey&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "DarkGrey"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DarkGrey>
		<NearlyBlack public="1" get="inline" set="null" expr="cast &quot;NearlyBlack&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "NearlyBlack"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NearlyBlack>
		<White public="1" get="inline" set="null" expr="cast &quot;White&quot;" line="1" static="1">
			<x path="hxTShopify.demo.ColorNames"/>
			<meta>
				<m n=":value"><e>cast "White"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</White>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="hxTShopify.demo.OptionLight" params="" file="src/hxTShopify/demo/TestOptions.hx" module="hxTShopify.demo.TestOptions"><a>
	<size><x path="hxTShopify.demo.UkSizes"/></size>
	<quantity><x path="Int"/></quantity>
	<color><x path="hxTShopify.demo.ColorNames"/></color>
</a></typedef>
	<class path="hxTShopify.demo.TestOptions" params="" file="src/hxTShopify/demo/TestOptions.hx">
		<ukSizes public="1" get="accessor" set="null" static="1"><c path="Array"><x path="hxTShopify.demo.UkSizes"/></c></ukSizes>
		<get_ukSizes public="1" get="inline" set="null" line="59" static="1"><f a=""><c path="Array"><x path="hxTShopify.demo.UkSizes"/></c></f></get_ukSizes>
		<approxSizes public="1" get="accessor" set="null" static="1"><c path="Array"><c path="String"/></c></approxSizes>
		<get_approxSizes public="1" get="inline" set="null" line="76" static="1"><f a=""><c path="Array"><c path="String"/></c></f></get_approxSizes>
		<convertToApprox public="1" set="method" line="86" static="1"><f a="size">
	<x path="hxTShopify.demo.UkSizes"/>
	<c path="String"/>
</f></convertToApprox>
		<testColors public="1" get="accessor" set="null" static="1"><c path="Array"><x path="hxTShopify.demo.ColorNames"/></c></testColors>
		<get_testColors public="1" get="inline" set="null" line="116" static="1"><f a=""><c path="Array"><x path="hxTShopify.demo.ColorNames"/></c></f></get_testColors>
		<testColorToInt public="1" set="method" line="133" static="1"><f a="str">
	<x path="hxTShopify.demo.ColorNames"/>
	<x path="hxTShopify.demo.TestColors"/>
</f></testColorToInt>
		<create public="1" set="method" line="163" static="1">
			<f a="?useUkSizes" v="true">
				<x path="Bool"/>
				<c path="Array"><t path="hxTShopify.t.Option"/></c>
			</f>
			<meta><m n=":value"><e>{ useUkSizes : true }</e></m></meta>
		</create>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxTShopify.demo.TestProducts" params="" file="src/hxTShopify/demo/TestProducts.hx">
		<log public="1" static="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></log>
		<testVariants><c path="hxTShopify.demo.TestVariants"/></testVariants>
		<onLoad public="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></onLoad>
		<onDelete public="1"><f a=""><x path="Void"/></f></onDelete>
		<shop><c path="hxTShopify.store.Shop"/></shop>
		<imageColors expr="[&quot;violet&quot;, &quot;black&quot;, &quot;indigo&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;red&quot;, &quot;lightGrey&quot;, &quot;mediumGrey&quot;, &quot;darkGrey&quot;, &quot;white&quot;]">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["violet", "black", "indigo", "blue", "green", "yellow", "orange", "red", "lightGrey", "mediumGrey", "darkGrey", "white"]</e></m></meta>
		</imageColors>
		<countDeleted set="method" line="32"><f a=""><x path="Void"/></f></countDeleted>
		<deletedCount public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</deletedCount>
		<deleteHat public="1" set="method" line="40"><f a=""><x path="Void"/></f></deleteHat>
		<moveHat public="1" set="method" line="43"><f a="targetShop">
	<c path="hxTShopify.store.Shop"/>
	<x path="Void"/>
</f></moveHat>
		<hat public="1" set="method" line="46"><f a=""><x path="Void"/></f></hat>
		<deleteTie public="1" set="method" line="60"><f a=""><x path="Void"/></f></deleteTie>
		<moveTie public="1" set="method" line="63"><f a="targetShop">
	<c path="hxTShopify.store.Shop"/>
	<x path="Void"/>
</f></moveTie>
		<tie public="1" set="method" line="66"><f a=""><x path="Void"/></f></tie>
		<deleteJumper public="1" set="method" line="80"><f a=""><x path="Void"/></f></deleteJumper>
		<moveJumper public="1" set="method" line="83"><f a="targetShop">
	<c path="hxTShopify.store.Shop"/>
	<x path="Void"/>
</f></moveJumper>
		<jumper public="1" set="method" line="86"><f a=""><x path="Void"/></f></jumper>
		<deletePants public="1" set="method" line="100"><f a=""><x path="Void"/></f></deletePants>
		<movePants public="1" set="method" line="103"><f a="targetShop">
	<c path="hxTShopify.store.Shop"/>
	<x path="Void"/>
</f></movePants>
		<pants public="1" set="method" line="106"><f a=""><x path="Void"/></f></pants>
		<deleteSock public="1" set="method" line="120"><f a=""><x path="Void"/></f></deleteSock>
		<moveSock public="1" set="method" line="123"><f a="targetShop">
	<c path="hxTShopify.store.Shop"/>
	<x path="Void"/>
</f></moveSock>
		<sock public="1" set="method" line="126"><f a=""><x path="Void"/></f></sock>
		<deleteSkirt public="1" set="method" line="140"><f a=""><x path="Void"/></f></deleteSkirt>
		<moveSkirt public="1" set="method" line="143"><f a="targetShop">
	<c path="hxTShopify.store.Shop"/>
	<x path="Void"/>
</f></moveSkirt>
		<skirt public="1" set="method" line="146"><f a=""><x path="Void"/></f></skirt>
		<deleteTrousers public="1" set="method" line="161"><f a=""><x path="Void"/></f></deleteTrousers>
		<moveTrousers public="1" set="method" line="164"><f a="targetShop">
	<c path="hxTShopify.store.Shop"/>
	<x path="Void"/>
</f></moveTrousers>
		<trousers public="1" set="method" line="167"><f a=""><x path="Void"/></f></trousers>
		<loadCount public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</loadCount>
		<createProduct public="1" set="method" line="183"><f a="shop:product">
	<c path="hxTShopify.store.Shop"/>
	<t path="hxTShopify.t.Product"/>
	<x path="Void"/>
</f></createProduct>
		<createTestProduct public="1" set="method" line="197"><f a="title:optionLight:price:compareFactor:tags:images">
	<c path="String"/>
	<c path="Array"><t path="hxTShopify.demo.OptionLight"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><t path="hxTShopify.t.Image"/></c>
	<t path="hxTShopify.t.Product"/>
</f></createTestProduct>
		<moveProduct public="1" set="method" line="218"><f a="targetShop:searchString">
	<c path="hxTShopify.store.Shop"/>
	<c path="String"/>
	<x path="Void"/>
</f></moveProduct>
		<new public="1" set="method" line="27"><f a="shop_">
	<c path="hxTShopify.store.Shop"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxTShopify.demo.TestVariants" params="" file="src/hxTShopify/demo/TestVariants.hx">
		<inventoryManagement public="1" expr="&quot;shopify&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"shopify"</e></m></meta>
		</inventoryManagement>
		<fulfillmentService public="1" expr="&quot;manual&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"manual"</e></m></meta>
		</fulfillmentService>
		<inventoryPolicy public="1" expr="&quot;deny&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"deny"</e></m></meta>
		</inventoryPolicy>
		<weightUnit public="1" expr="&quot;kg&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"kg"</e></m></meta>
		</weightUnit>
		<defaultWeight public="1" expr="0.4">
			<x path="Float"/>
			<meta><m n=":value"><e>0.4</e></m></meta>
		</defaultWeight>
		<requireShipping public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</requireShipping>
		<taxable public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</taxable>
		<publishScope public="1" expr="&quot;web&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"web"</e></m></meta>
		</publishScope>
		<vendor public="1" expr="&quot;Nanjizal&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"Nanjizal"</e></m></meta>
		</vendor>
		<productType public="1" expr="&quot;Clothing&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"Clothing"</e></m></meta>
		</productType>
		<create public="1" get="inline" set="null" line="16"><f a="optionLight:price:compareFactor">
	<c path="Array"><t path="hxTShopify.demo.OptionLight"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><t path="hxTShopify.t.Variant"/></c>
</f></create>
		<createVariant public="1" get="inline" set="null" line="25"><f a="i:optionLight:price:compareFactor">
	<x path="Int"/>
	<t path="hxTShopify.demo.OptionLight"/>
	<x path="Float"/>
	<x path="Float"/>
	<t path="hxTShopify.t.Variant"/>
</f></createVariant>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxTShopify.store.IStore" params="" file="src/hxTShopify/store/IStore.hx" interface="1">
		<apiKey public="1"><c path="String"/></apiKey>
		<password public="1"><c path="String"/></password>
		<name public="1"><c path="String"/></name>
	</class>
	<class path="hxTShopify.store.DemoStore" params="" file="src/hxTShopify/store/DemoStore.hx">
		<implements path="hxTShopify.store.IStore"/>
		<apiKey public="1" expr="&quot;apikey&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"apikey"</e></m></meta>
		</apiKey>
		<password public="1" expr="&quot;pass&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"pass"</e></m></meta>
		</password>
		<name public="1" expr="&quot;shop&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"shop"</e></m></meta>
		</name>
		<new public="1" set="method" line="5"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="hxTShopify.store.Shop" params="" file="src/hxTShopify/store/Shop.hx">
		<screenLog public="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></screenLog>
		<apiKey><c path="String"/></apiKey>
		<password><c path="String"/></password>
		<name public="1"><c path="String"/></name>
		<constructItemPathWithHash public="1" set="method" line="9"><f a="path_:resource_:?extra_">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></constructItemPathWithHash>
		<constructItemPath public="1" set="method" line="18"><f a="path_:resource_:?extra_">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></constructItemPath>
		<constructPath public="1" set="method" line="27"><f a="resource_:?extra_">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></constructPath>
		<getKeyPass public="1" set="method" line="35"><f a=""><c path="String"/></f></getKeyPass>
		<new public="1" set="method" line="38"><f a="store_">
	<c path="hxTShopify.store.IStore"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="hxTShopify.t.Address" params="" file="src/hxTShopify/t/Address.hx"><a>
	<zip><c path="String"/></zip>
	<province_code><x path="Null"><c path="String"/></x></province_code>
	<province><x path="Null"><c path="String"/></x></province>
	<phone><c path="String"/></phone>
	<name><c path="String"/></name>
	<longitude><x path="Float"/></longitude>
	<latitude><x path="Float"/></latitude>
	<last_name><c path="String"/></last_name>
	<first_name><c path="String"/></first_name>
	<country_code><c path="String"/></country_code>
	<country><c path="String"/></country>
	<company><c path="String"/></company>
	<city><c path="String"/></city>
	<address2><c path="String"/></address2>
	<address1><c path="String"/></address1>
</a></typedef>
	<abstract path="hxTShopify.t.ArrayImage" params="" file="src/hxTShopify/t/ArrayImage.hx">
		<this><c path="Array"><t path="hxTShopify.t.Image"/></c></this>
		<to><icast><c path="Array"><t path="hxTShopify.t.Image"/></c></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="hxTShopify.t._ArrayImage.ArrayImage_Impl_" params="" file="src/hxTShopify/t/ArrayImage.hx" private="1" module="hxTShopify.t.ArrayImage" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="?images">
			<c path="Array"><t path="hxTShopify.t.Image"/></c>
			<x path="hxTShopify.t.ArrayImage"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<empty get="inline" set="null" line="9" static="1"><f a=""><c path="Array"><t path="hxTShopify.t.Image"/></c></f></empty>
	<stringDimensions public="1" get="inline" set="null" line="12" static="1">
		<f a="this">
			<c path="Array"><t path="hxTShopify.t.Image"/></c>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</stringDimensions>
	<imageLocations public="1" get="inline" set="null" line="21" static="1">
		<f a="this">
			<c path="Array"><t path="hxTShopify.t.Image"/></c>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</imageLocations>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._ArrayImage.ArrayImage_Impl_" params="" file="src/hxTShopify/t/ArrayImage.hx" private="1" module="hxTShopify.t.ArrayImage" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="?images">
				<c path="Array"><t path="hxTShopify.t.Image"/></c>
				<x path="hxTShopify.t.ArrayImage"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<empty get="inline" set="null" line="9" static="1"><f a=""><c path="Array"><t path="hxTShopify.t.Image"/></c></f></empty>
		<stringDimensions public="1" get="inline" set="null" line="12" static="1">
			<f a="this">
				<c path="Array"><t path="hxTShopify.t.Image"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</stringDimensions>
		<imageLocations public="1" get="inline" set="null" line="21" static="1">
			<f a="this">
				<c path="Array"><t path="hxTShopify.t.Image"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</imageLocations>
	</class>
	<abstract path="hxTShopify.t.ArrayOption" params="" file="src/hxTShopify/t/ArrayOption.hx">
		<this><c path="Array"><t path="hxTShopify.t.Option"/></c></this>
		<to><icast><c path="Array"><t path="hxTShopify.t.Option"/></c></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="hxTShopify.t._ArrayOption.ArrayOption_Impl_" params="" file="src/hxTShopify/t/ArrayOption.hx" private="1" module="hxTShopify.t.ArrayOption" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="?options">
			<c path="Array"><t path="hxTShopify.t.Option"/></c>
			<x path="hxTShopify.t.ArrayOption"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<empty get="inline" set="null" line="9" static="1"><f a=""><c path="Array"><t path="hxTShopify.t.Option"/></c></f></empty>
	<notNumbers public="1" get="inline" set="null" line="13" static="1">
		<f a="this">
			<c path="Array"><t path="hxTShopify.t.Option"/></c>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</notNumbers>
	<isNumbers public="1" get="inline" set="null" line="34" static="1">
		<f a="this">
			<c path="Array"><t path="hxTShopify.t.Option"/></c>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</isNumbers>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._ArrayOption.ArrayOption_Impl_" params="" file="src/hxTShopify/t/ArrayOption.hx" private="1" module="hxTShopify.t.ArrayOption" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="?options">
				<c path="Array"><t path="hxTShopify.t.Option"/></c>
				<x path="hxTShopify.t.ArrayOption"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<empty get="inline" set="null" line="9" static="1"><f a=""><c path="Array"><t path="hxTShopify.t.Option"/></c></f></empty>
		<notNumbers public="1" get="inline" set="null" line="13" static="1">
			<f a="this">
				<c path="Array"><t path="hxTShopify.t.Option"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</notNumbers>
		<isNumbers public="1" get="inline" set="null" line="34" static="1">
			<f a="this">
				<c path="Array"><t path="hxTShopify.t.Option"/></c>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</isNumbers>
	</class>
	<abstract path="hxTShopify.t.ArrayVariant" params="" file="src/hxTShopify/t/ArrayVariant.hx">
		<this><c path="Array"><t path="hxTShopify.t.Variant"/></c></this>
		<to><icast><c path="Array"><t path="hxTShopify.t.Variant"/></c></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="hxTShopify.t._ArrayVariant.ArrayVariant_Impl_" params="" file="src/hxTShopify/t/ArrayVariant.hx" private="1" module="hxTShopify.t.ArrayVariant" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="?variants">
			<c path="Array"><t path="hxTShopify.t.Variant"/></c>
			<x path="hxTShopify.t.ArrayVariant"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<empty get="inline" set="null" line="9" static="1"><f a=""><c path="Array"><t path="hxTShopify.t.Variant"/></c></f></empty>
	<stringQuanitiesBelow public="1" get="inline" set="null" line="12" static="1">
		<f a="this:max">
			<c path="Array"><t path="hxTShopify.t.Variant"/></c>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</stringQuanitiesBelow>
	<quanitiesBelow public="1" get="inline" set="null" line="21" static="1">
		<f a="this:max">
			<c path="Array"><t path="hxTShopify.t.Variant"/></c>
			<x path="Int"/>
			<x path="hxTShopify.t.ArrayVariant"/>
		</f>
		<meta><m n=":impl"/></meta>
	</quanitiesBelow>
	<stringQuanitiesAbove public="1" get="inline" set="null" line="30" static="1">
		<f a="this:min">
			<c path="Array"><t path="hxTShopify.t.Variant"/></c>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</stringQuanitiesAbove>
	<quanitiesAbove public="1" get="inline" set="null" line="39" static="1">
		<f a="this:min">
			<c path="Array"><t path="hxTShopify.t.Variant"/></c>
			<x path="Int"/>
			<x path="hxTShopify.t.ArrayVariant"/>
		</f>
		<meta><m n=":impl"/></meta>
	</quanitiesAbove>
	<stringQuanities public="1" get="inline" set="null" line="48" static="1">
		<f a="this">
			<c path="Array"><t path="hxTShopify.t.Variant"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</stringQuanities>
	<emptyVariants public="1" get="inline" set="null" line="57" static="1">
		<f a="this">
			<c path="Array"><t path="hxTShopify.t.Variant"/></c>
			<x path="hxTShopify.t.ArrayVariant"/>
		</f>
		<meta><m n=":impl"/></meta>
	</emptyVariants>
	<emptyVariantIds public="1" get="inline" set="null" line="66" static="1">
		<f a="this">
			<c path="Array"><t path="hxTShopify.t.Variant"/></c>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</emptyVariantIds>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._ArrayVariant.ArrayVariant_Impl_" params="" file="src/hxTShopify/t/ArrayVariant.hx" private="1" module="hxTShopify.t.ArrayVariant" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="?variants">
				<c path="Array"><t path="hxTShopify.t.Variant"/></c>
				<x path="hxTShopify.t.ArrayVariant"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<empty get="inline" set="null" line="9" static="1"><f a=""><c path="Array"><t path="hxTShopify.t.Variant"/></c></f></empty>
		<stringQuanitiesBelow public="1" get="inline" set="null" line="12" static="1">
			<f a="this:max">
				<c path="Array"><t path="hxTShopify.t.Variant"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</stringQuanitiesBelow>
		<quanitiesBelow public="1" get="inline" set="null" line="21" static="1">
			<f a="this:max">
				<c path="Array"><t path="hxTShopify.t.Variant"/></c>
				<x path="Int"/>
				<x path="hxTShopify.t.ArrayVariant"/>
			</f>
			<meta><m n=":impl"/></meta>
		</quanitiesBelow>
		<stringQuanitiesAbove public="1" get="inline" set="null" line="30" static="1">
			<f a="this:min">
				<c path="Array"><t path="hxTShopify.t.Variant"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</stringQuanitiesAbove>
		<quanitiesAbove public="1" get="inline" set="null" line="39" static="1">
			<f a="this:min">
				<c path="Array"><t path="hxTShopify.t.Variant"/></c>
				<x path="Int"/>
				<x path="hxTShopify.t.ArrayVariant"/>
			</f>
			<meta><m n=":impl"/></meta>
		</quanitiesAbove>
		<stringQuanities public="1" get="inline" set="null" line="48" static="1">
			<f a="this">
				<c path="Array"><t path="hxTShopify.t.Variant"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</stringQuanities>
		<emptyVariants public="1" get="inline" set="null" line="57" static="1">
			<f a="this">
				<c path="Array"><t path="hxTShopify.t.Variant"/></c>
				<x path="hxTShopify.t.ArrayVariant"/>
			</f>
			<meta><m n=":impl"/></meta>
		</emptyVariants>
		<emptyVariantIds public="1" get="inline" set="null" line="66" static="1">
			<f a="this">
				<c path="Array"><t path="hxTShopify.t.Variant"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</emptyVariantIds>
	</class>
	<typedef path="hxTShopify.t.Balance" params="" file="src/hxTShopify/t/Balance.hx">
		<a><balance><c path="Array"><t path="hxTShopify.t.BalanceDetail"/></c></balance></a>
		<haxe_doc>*  https://help.shopify.com/en/api/reference/shopify_payments/balance</haxe_doc>
	</typedef>
	<typedef path="hxTShopify.t.BalanceDetail" params="" file="src/hxTShopify/t/BalanceDetail.hx">
		<a>
			<currency><x path="hxTShopify.t.CurrencyType"/></currency>
			<amount><x path="Float"/></amount>
		</a>
		<haxe_doc>*  https://help.shopify.com/en/api/reference/shopify_payments/balance</haxe_doc>
	</typedef>
	<typedef path="hxTShopify.t.Charge" params="" file="src/hxTShopify/t/Charge.hx">
		<a>
			<update_at><x path="hxTShopify.t.StringDate"/></update_at>
			<test><x path="Bool"/></test>
			<status><x path="hxTShopify.t.ChargeStatus"/></status>
			<return_url><c path="String"/></return_url>
			<price><x path="Float"/></price>
			<id><c path="String"/></id>
			<decorated_return_url><c path="String"/></decorated_return_url>
			<created_at><x path="hxTShopify.t.StringDate"/></created_at>
			<charge_type><x path="Null"><c path="String"/></x></charge_type>
			<api_client_id><c path="String"/></api_client_id>
		</a>
		<haxe_doc>*</haxe_doc>
	</typedef>
	<abstract path="hxTShopify.t.ChargeStatus" params="" file="src/hxTShopify/t/Charge.hx" module="hxTShopify.t.Charge">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.t._Charge.ChargeStatus_Impl_" params="" file="src/hxTShopify/t/Charge.hx" private="1" module="hxTShopify.t.Charge" extern="1" final="1">
	<pending public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="1" static="1">
		<x path="hxTShopify.t.ChargeStatus"/>
		<meta>
			<m n=":value"><e>cast "pending"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pending>
	<accepted public="1" get="inline" set="null" expr="cast &quot;accepted&quot;" line="1" static="1">
		<x path="hxTShopify.t.ChargeStatus"/>
		<meta>
			<m n=":value"><e>cast "accepted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</accepted>
	<active public="1" get="inline" set="null" expr="cast &quot;active&quot;" line="1" static="1">
		<x path="hxTShopify.t.ChargeStatus"/>
		<meta>
			<m n=":value"><e>cast "active"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</active>
	<declined public="1" get="inline" set="null" expr="cast &quot;declined&quot;" line="1" static="1">
		<x path="hxTShopify.t.ChargeStatus"/>
		<meta>
			<m n=":value"><e>cast "declined"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</declined>
	<expired public="1" get="inline" set="null" expr="cast &quot;expired&quot;" line="1" static="1">
		<x path="hxTShopify.t.ChargeStatus"/>
		<meta>
			<m n=":value"><e>cast "expired"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</expired>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Charge.ChargeStatus_Impl_" params="" file="src/hxTShopify/t/Charge.hx" private="1" module="hxTShopify.t.Charge" extern="1" final="1">
		<pending public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="1" static="1">
			<x path="hxTShopify.t.ChargeStatus"/>
			<meta>
				<m n=":value"><e>cast "pending"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pending>
		<accepted public="1" get="inline" set="null" expr="cast &quot;accepted&quot;" line="1" static="1">
			<x path="hxTShopify.t.ChargeStatus"/>
			<meta>
				<m n=":value"><e>cast "accepted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</accepted>
		<active public="1" get="inline" set="null" expr="cast &quot;active&quot;" line="1" static="1">
			<x path="hxTShopify.t.ChargeStatus"/>
			<meta>
				<m n=":value"><e>cast "active"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</active>
		<declined public="1" get="inline" set="null" expr="cast &quot;declined&quot;" line="1" static="1">
			<x path="hxTShopify.t.ChargeStatus"/>
			<meta>
				<m n=":value"><e>cast "declined"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</declined>
		<expired public="1" get="inline" set="null" expr="cast &quot;expired&quot;" line="1" static="1">
			<x path="hxTShopify.t.ChargeStatus"/>
			<meta>
				<m n=":value"><e>cast "expired"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</expired>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="hxTShopify.t.Charges" params="" file="src/hxTShopify/t/Charges.hx">
		<a><application_charges><c path="Array"><t path="hxTShopify.t.Charge"/></c></application_charges></a>
		<haxe_doc>*</haxe_doc>
	</typedef>
	<typedef path="hxTShopify.t.Count" params="" file="src/hxTShopify/t/Count.hx"><a><count><x path="Int"/></count></a></typedef>
	<abstract path="hxTShopify.t.Country" params="" file="src/hxTShopify/t/Country.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>*  ISO 3166-1 alpha-2
 *  https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.t._Country.Country_Impl_" params="" file="src/hxTShopify/t/Country.hx" private="1" module="hxTShopify.t.Country" extern="1" final="1">
	<AD public="1" get="inline" set="null" expr="cast &quot;AD&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AD>
	<AE public="1" get="inline" set="null" expr="cast &quot;AE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AE>
	<AF public="1" get="inline" set="null" expr="cast &quot;AF&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AF>
	<AG public="1" get="inline" set="null" expr="cast &quot;AG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AG>
	<AI public="1" get="inline" set="null" expr="cast &quot;AI&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AI>
	<AL public="1" get="inline" set="null" expr="cast &quot;AL&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AL>
	<AM public="1" get="inline" set="null" expr="cast &quot;AM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AM>
	<AO public="1" get="inline" set="null" expr="cast &quot;AO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AO>
	<AQ public="1" get="inline" set="null" expr="cast &quot;AQ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AQ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AQ>
	<AR public="1" get="inline" set="null" expr="cast &quot;AR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AR>
	<AS public="1" get="inline" set="null" expr="cast &quot;AS&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AS>
	<AT public="1" get="inline" set="null" expr="cast &quot;AT&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AT>
	<AU public="1" get="inline" set="null" expr="cast &quot;AU&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AU>
	<AW public="1" get="inline" set="null" expr="cast &quot;AW&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AW>
	<AX public="1" get="inline" set="null" expr="cast &quot;AX&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AX"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AX>
	<AZ public="1" get="inline" set="null" expr="cast &quot;AZ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "AZ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AZ>
	<BA public="1" get="inline" set="null" expr="cast &quot;BA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BA>
	<BB public="1" get="inline" set="null" expr="cast &quot;BB&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BB>
	<BD public="1" get="inline" set="null" expr="cast &quot;BD&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BD>
	<BE public="1" get="inline" set="null" expr="cast &quot;BE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BE>
	<BF public="1" get="inline" set="null" expr="cast &quot;BF&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BF>
	<BG public="1" get="inline" set="null" expr="cast &quot;BG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BG>
	<BH public="1" get="inline" set="null" expr="cast &quot;BH&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BH>
	<BI public="1" get="inline" set="null" expr="cast &quot;BI&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BI>
	<BJ public="1" get="inline" set="null" expr="cast &quot;BJ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BJ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BJ>
	<BL public="1" get="inline" set="null" expr="cast &quot;BL&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BL>
	<BM public="1" get="inline" set="null" expr="cast &quot;BM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BM>
	<BN public="1" get="inline" set="null" expr="cast &quot;BN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BN>
	<BO public="1" get="inline" set="null" expr="cast &quot;BO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BO>
	<BQ public="1" get="inline" set="null" expr="cast &quot;BQ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BQ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BQ>
	<BR public="1" get="inline" set="null" expr="cast &quot;BR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BR>
	<BS public="1" get="inline" set="null" expr="cast &quot;BS&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BS>
	<BT public="1" get="inline" set="null" expr="cast &quot;BT&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BT>
	<BV public="1" get="inline" set="null" expr="cast &quot;BV&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BV>
	<BW public="1" get="inline" set="null" expr="cast &quot;BW&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BW>
	<BY public="1" get="inline" set="null" expr="cast &quot;BY&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BY>
	<BZ public="1" get="inline" set="null" expr="cast &quot;BZ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "BZ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BZ>
	<CA public="1" get="inline" set="null" expr="cast &quot;CA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CA>
	<CC public="1" get="inline" set="null" expr="cast &quot;CC&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CC>
	<CD public="1" get="inline" set="null" expr="cast &quot;CD&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CD>
	<CF public="1" get="inline" set="null" expr="cast &quot;CF&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CF>
	<CG public="1" get="inline" set="null" expr="cast &quot;CG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CG>
	<CH public="1" get="inline" set="null" expr="cast &quot;CH&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CH>
	<CI public="1" get="inline" set="null" expr="cast &quot;CI&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CI>
	<CK public="1" get="inline" set="null" expr="cast &quot;CK&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CK>
	<CL public="1" get="inline" set="null" expr="cast &quot;CL&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CL>
	<CM public="1" get="inline" set="null" expr="cast &quot;CM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CM>
	<CN public="1" get="inline" set="null" expr="cast &quot;CN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CN>
	<CO public="1" get="inline" set="null" expr="cast &quot;CO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CO>
	<CR public="1" get="inline" set="null" expr="cast &quot;CR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CR>
	<CU public="1" get="inline" set="null" expr="cast &quot;CU&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CU>
	<CV public="1" get="inline" set="null" expr="cast &quot;CV&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CV>
	<CW public="1" get="inline" set="null" expr="cast &quot;CW&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CW>
	<CX public="1" get="inline" set="null" expr="cast &quot;CX&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CX"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CX>
	<CY public="1" get="inline" set="null" expr="cast &quot;CY&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CY>
	<CZ public="1" get="inline" set="null" expr="cast &quot;CZ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "CZ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CZ>
	<DE public="1" get="inline" set="null" expr="cast &quot;DE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "DE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DE>
	<DJ public="1" get="inline" set="null" expr="cast &quot;DJ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "DJ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DJ>
	<DK public="1" get="inline" set="null" expr="cast &quot;DK&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "DK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DK>
	<DM public="1" get="inline" set="null" expr="cast &quot;DM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "DM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DM>
	<DO public="1" get="inline" set="null" expr="cast &quot;DO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "DO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DO>
	<DZ public="1" get="inline" set="null" expr="cast &quot;DZ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "DZ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DZ>
	<EC public="1" get="inline" set="null" expr="cast &quot;EC&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "EC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EC>
	<EE public="1" get="inline" set="null" expr="cast &quot;EE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "EE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EE>
	<EG public="1" get="inline" set="null" expr="cast &quot;EG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "EG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EG>
	<EH public="1" get="inline" set="null" expr="cast &quot;EH&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "EH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EH>
	<ER public="1" get="inline" set="null" expr="cast &quot;ER&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "ER"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ER>
	<ES public="1" get="inline" set="null" expr="cast &quot;ES&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "ES"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ES>
	<ET public="1" get="inline" set="null" expr="cast &quot;ET&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "ET"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ET>
	<FI public="1" get="inline" set="null" expr="cast &quot;FI&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "FI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FI>
	<FJ public="1" get="inline" set="null" expr="cast &quot;FJ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "FJ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FJ>
	<FK public="1" get="inline" set="null" expr="cast &quot;FK&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "FK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FK>
	<FM public="1" get="inline" set="null" expr="cast &quot;FM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "FM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FM>
	<FO public="1" get="inline" set="null" expr="cast &quot;FO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "FO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FO>
	<FR public="1" get="inline" set="null" expr="cast &quot;FR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "FR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FR>
	<GA public="1" get="inline" set="null" expr="cast &quot;GA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GA>
	<GB public="1" get="inline" set="null" expr="cast &quot;GB&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GB>
	<GD public="1" get="inline" set="null" expr="cast &quot;GD&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GD>
	<GE public="1" get="inline" set="null" expr="cast &quot;GE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GE>
	<GF public="1" get="inline" set="null" expr="cast &quot;GF&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GF>
	<GG public="1" get="inline" set="null" expr="cast &quot;GG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GG>
	<GH public="1" get="inline" set="null" expr="cast &quot;GH&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GH>
	<GI public="1" get="inline" set="null" expr="cast &quot;GI&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GI>
	<GL public="1" get="inline" set="null" expr="cast &quot;GL&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GL>
	<GM public="1" get="inline" set="null" expr="cast &quot;GM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GM>
	<GN public="1" get="inline" set="null" expr="cast &quot;GN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GN>
	<GP public="1" get="inline" set="null" expr="cast &quot;GP&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GP>
	<GQ public="1" get="inline" set="null" expr="cast &quot;GQ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GQ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GQ>
	<GR public="1" get="inline" set="null" expr="cast &quot;GR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GR>
	<GS public="1" get="inline" set="null" expr="cast &quot;GS&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GS>
	<GT public="1" get="inline" set="null" expr="cast &quot;GT&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GT>
	<GU public="1" get="inline" set="null" expr="cast &quot;GU&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GU>
	<GW public="1" get="inline" set="null" expr="cast &quot;GW&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GW>
	<GY public="1" get="inline" set="null" expr="cast &quot;GY&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "GY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GY>
	<HK public="1" get="inline" set="null" expr="cast &quot;HK&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "HK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HK>
	<HM public="1" get="inline" set="null" expr="cast &quot;HM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "HM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HM>
	<HN public="1" get="inline" set="null" expr="cast &quot;HN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "HN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HN>
	<HR public="1" get="inline" set="null" expr="cast &quot;HR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "HR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HR>
	<HT public="1" get="inline" set="null" expr="cast &quot;HT&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "HT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HT>
	<HU public="1" get="inline" set="null" expr="cast &quot;HU&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "HU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HU>
	<ID public="1" get="inline" set="null" expr="cast &quot;ID&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "ID"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ID>
	<IE public="1" get="inline" set="null" expr="cast &quot;IE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "IE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IE>
	<IL public="1" get="inline" set="null" expr="cast &quot;IL&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "IL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IL>
	<IM public="1" get="inline" set="null" expr="cast &quot;IM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "IM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IM>
	<IN public="1" get="inline" set="null" expr="cast &quot;IN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "IN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IN>
	<IO public="1" get="inline" set="null" expr="cast &quot;IO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "IO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IO>
	<IQ public="1" get="inline" set="null" expr="cast &quot;IQ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "IQ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IQ>
	<IR public="1" get="inline" set="null" expr="cast &quot;IR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "IR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IR>
	<IS public="1" get="inline" set="null" expr="cast &quot;IS&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "IS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IS>
	<IT public="1" get="inline" set="null" expr="cast &quot;IT&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "IT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IT>
	<JE public="1" get="inline" set="null" expr="cast &quot;JE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "JE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</JE>
	<JM public="1" get="inline" set="null" expr="cast &quot;JM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "JM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</JM>
	<JO public="1" get="inline" set="null" expr="cast &quot;JO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "JO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</JO>
	<JP public="1" get="inline" set="null" expr="cast &quot;JP&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "JP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</JP>
	<KE public="1" get="inline" set="null" expr="cast &quot;KE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KE>
	<KG public="1" get="inline" set="null" expr="cast &quot;KG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KG>
	<KH public="1" get="inline" set="null" expr="cast &quot;KH&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KH>
	<KI public="1" get="inline" set="null" expr="cast &quot;KI&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KI>
	<KM public="1" get="inline" set="null" expr="cast &quot;KM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KM>
	<KN public="1" get="inline" set="null" expr="cast &quot;KN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KN>
	<KP public="1" get="inline" set="null" expr="cast &quot;KP&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KP>
	<KR public="1" get="inline" set="null" expr="cast &quot;KR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KR>
	<KW public="1" get="inline" set="null" expr="cast &quot;KW&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KW>
	<KY public="1" get="inline" set="null" expr="cast &quot;KY&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KY>
	<KZ public="1" get="inline" set="null" expr="cast &quot;KZ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "KZ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KZ>
	<LA public="1" get="inline" set="null" expr="cast &quot;LA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LA>
	<LB public="1" get="inline" set="null" expr="cast &quot;LB&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LB>
	<LC public="1" get="inline" set="null" expr="cast &quot;LC&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LC>
	<LI public="1" get="inline" set="null" expr="cast &quot;LI&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LI>
	<LK public="1" get="inline" set="null" expr="cast &quot;LK&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LK>
	<LR public="1" get="inline" set="null" expr="cast &quot;LR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LR>
	<LS public="1" get="inline" set="null" expr="cast &quot;LS&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LS>
	<LT public="1" get="inline" set="null" expr="cast &quot;LT&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LT>
	<LU public="1" get="inline" set="null" expr="cast &quot;LU&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LU>
	<LV public="1" get="inline" set="null" expr="cast &quot;LV&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LV>
	<LY public="1" get="inline" set="null" expr="cast &quot;LY&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "LY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LY>
	<MA public="1" get="inline" set="null" expr="cast &quot;MA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MA>
	<MC public="1" get="inline" set="null" expr="cast &quot;MC&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MC>
	<MD public="1" get="inline" set="null" expr="cast &quot;MD&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MD>
	<ME public="1" get="inline" set="null" expr="cast &quot;ME&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "ME"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ME>
	<MF public="1" get="inline" set="null" expr="cast &quot;MF&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MF>
	<MG public="1" get="inline" set="null" expr="cast &quot;MG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MG>
	<MH public="1" get="inline" set="null" expr="cast &quot;MH&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MH>
	<MK public="1" get="inline" set="null" expr="cast &quot;MK&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MK>
	<ML public="1" get="inline" set="null" expr="cast &quot;ML&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "ML"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ML>
	<MM public="1" get="inline" set="null" expr="cast &quot;MM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MM>
	<MN public="1" get="inline" set="null" expr="cast &quot;MN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MN>
	<MO public="1" get="inline" set="null" expr="cast &quot;MO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MO>
	<MP public="1" get="inline" set="null" expr="cast &quot;MP&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MP>
	<MQ public="1" get="inline" set="null" expr="cast &quot;MQ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MQ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MQ>
	<MR public="1" get="inline" set="null" expr="cast &quot;MR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MR>
	<MS public="1" get="inline" set="null" expr="cast &quot;MS&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MS>
	<MT public="1" get="inline" set="null" expr="cast &quot;MT&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MT>
	<MU public="1" get="inline" set="null" expr="cast &quot;MU&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MU>
	<MV public="1" get="inline" set="null" expr="cast &quot;MV&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MV>
	<MW public="1" get="inline" set="null" expr="cast &quot;MW&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MW>
	<MX public="1" get="inline" set="null" expr="cast &quot;MX&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MX"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MX>
	<MY public="1" get="inline" set="null" expr="cast &quot;MY&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MY>
	<MZ public="1" get="inline" set="null" expr="cast &quot;MZ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "MZ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MZ>
	<NA public="1" get="inline" set="null" expr="cast &quot;NA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NA>
	<NC public="1" get="inline" set="null" expr="cast &quot;NC&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NC>
	<NE public="1" get="inline" set="null" expr="cast &quot;NE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NE>
	<NF public="1" get="inline" set="null" expr="cast &quot;NF&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NF>
	<NG public="1" get="inline" set="null" expr="cast &quot;NG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NG>
	<NI public="1" get="inline" set="null" expr="cast &quot;NI&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NI>
	<NL public="1" get="inline" set="null" expr="cast &quot;NL&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NL>
	<NO public="1" get="inline" set="null" expr="cast &quot;NO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO>
	<NP public="1" get="inline" set="null" expr="cast &quot;NP&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NP>
	<NR public="1" get="inline" set="null" expr="cast &quot;NR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NR>
	<NU public="1" get="inline" set="null" expr="cast &quot;NU&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NU>
	<NZ public="1" get="inline" set="null" expr="cast &quot;NZ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "NZ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NZ>
	<OM public="1" get="inline" set="null" expr="cast &quot;OM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "OM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OM>
	<PA public="1" get="inline" set="null" expr="cast &quot;PA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PA>
	<PE public="1" get="inline" set="null" expr="cast &quot;PE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PE>
	<PF public="1" get="inline" set="null" expr="cast &quot;PF&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PF>
	<PG public="1" get="inline" set="null" expr="cast &quot;PG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PG>
	<PH public="1" get="inline" set="null" expr="cast &quot;PH&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PH>
	<PK public="1" get="inline" set="null" expr="cast &quot;PK&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PK>
	<PL public="1" get="inline" set="null" expr="cast &quot;PL&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PL>
	<PM public="1" get="inline" set="null" expr="cast &quot;PM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PM>
	<PN public="1" get="inline" set="null" expr="cast &quot;PN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PN>
	<PR public="1" get="inline" set="null" expr="cast &quot;PR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PR>
	<PS public="1" get="inline" set="null" expr="cast &quot;PS&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PS>
	<PT public="1" get="inline" set="null" expr="cast &quot;PT&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PT>
	<PW public="1" get="inline" set="null" expr="cast &quot;PW&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PW>
	<PY public="1" get="inline" set="null" expr="cast &quot;PY&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "PY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PY>
	<QA public="1" get="inline" set="null" expr="cast &quot;QA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "QA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</QA>
	<RE public="1" get="inline" set="null" expr="cast &quot;RE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "RE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RE>
	<RO public="1" get="inline" set="null" expr="cast &quot;RO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "RO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RO>
	<RS public="1" get="inline" set="null" expr="cast &quot;RS&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "RS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RS>
	<RU public="1" get="inline" set="null" expr="cast &quot;RU&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "RU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RU>
	<RW public="1" get="inline" set="null" expr="cast &quot;RW&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "RW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RW>
	<SA public="1" get="inline" set="null" expr="cast &quot;SA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SA>
	<SB public="1" get="inline" set="null" expr="cast &quot;SB&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SB>
	<SC public="1" get="inline" set="null" expr="cast &quot;SC&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SC>
	<SD public="1" get="inline" set="null" expr="cast &quot;SD&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SD>
	<SE public="1" get="inline" set="null" expr="cast &quot;SE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SE>
	<SG public="1" get="inline" set="null" expr="cast &quot;SG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SG>
	<SH public="1" get="inline" set="null" expr="cast &quot;SH&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SH>
	<SI public="1" get="inline" set="null" expr="cast &quot;SI&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SI>
	<SJ public="1" get="inline" set="null" expr="cast &quot;SJ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SJ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SJ>
	<SK public="1" get="inline" set="null" expr="cast &quot;SK&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SK>
	<SL public="1" get="inline" set="null" expr="cast &quot;SL&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SL>
	<SM public="1" get="inline" set="null" expr="cast &quot;SM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SM>
	<SN public="1" get="inline" set="null" expr="cast &quot;SN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SN>
	<SO public="1" get="inline" set="null" expr="cast &quot;SO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SO>
	<SR public="1" get="inline" set="null" expr="cast &quot;SR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SR>
	<SS public="1" get="inline" set="null" expr="cast &quot;SS&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SS>
	<ST public="1" get="inline" set="null" expr="cast &quot;ST&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "ST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ST>
	<SV public="1" get="inline" set="null" expr="cast &quot;SV&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SV>
	<SX public="1" get="inline" set="null" expr="cast &quot;SX&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SX"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SX>
	<SY public="1" get="inline" set="null" expr="cast &quot;SY&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SY>
	<SZ public="1" get="inline" set="null" expr="cast &quot;SZ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "SZ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SZ>
	<TC public="1" get="inline" set="null" expr="cast &quot;TC&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TC>
	<TD public="1" get="inline" set="null" expr="cast &quot;TD&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TD>
	<TF public="1" get="inline" set="null" expr="cast &quot;TF&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TF>
	<TG public="1" get="inline" set="null" expr="cast &quot;TG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TG>
	<TH public="1" get="inline" set="null" expr="cast &quot;TH&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TH>
	<TJ public="1" get="inline" set="null" expr="cast &quot;TJ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TJ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TJ>
	<TK public="1" get="inline" set="null" expr="cast &quot;TK&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TK>
	<TL public="1" get="inline" set="null" expr="cast &quot;TL&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TL>
	<TM public="1" get="inline" set="null" expr="cast &quot;TM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TM>
	<TN public="1" get="inline" set="null" expr="cast &quot;TN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TN>
	<TO public="1" get="inline" set="null" expr="cast &quot;TO&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TO>
	<TR public="1" get="inline" set="null" expr="cast &quot;TR&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TR>
	<TT public="1" get="inline" set="null" expr="cast &quot;TT&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TT>
	<TV public="1" get="inline" set="null" expr="cast &quot;TV&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TV>
	<TW public="1" get="inline" set="null" expr="cast &quot;TW&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TW>
	<TZ public="1" get="inline" set="null" expr="cast &quot;TZ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "TZ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TZ>
	<UA public="1" get="inline" set="null" expr="cast &quot;UA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "UA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UA>
	<UG public="1" get="inline" set="null" expr="cast &quot;UG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "UG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UG>
	<UM public="1" get="inline" set="null" expr="cast &quot;UM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "UM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UM>
	<US public="1" get="inline" set="null" expr="cast &quot;US&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "US"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</US>
	<UY public="1" get="inline" set="null" expr="cast &quot;UY&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "UY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UY>
	<UZ public="1" get="inline" set="null" expr="cast &quot;UZ&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "UZ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UZ>
	<VA public="1" get="inline" set="null" expr="cast &quot;VA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "VA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VA>
	<VC public="1" get="inline" set="null" expr="cast &quot;VC&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "VC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VC>
	<VE public="1" get="inline" set="null" expr="cast &quot;VE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "VE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VE>
	<VG public="1" get="inline" set="null" expr="cast &quot;VG&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "VG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VG>
	<VI public="1" get="inline" set="null" expr="cast &quot;VI&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "VI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VI>
	<VN public="1" get="inline" set="null" expr="cast &quot;VN&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "VN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VN>
	<VU public="1" get="inline" set="null" expr="cast &quot;VU&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "VU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VU>
	<WF public="1" get="inline" set="null" expr="cast &quot;WF&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "WF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WF>
	<WS public="1" get="inline" set="null" expr="cast &quot;WS&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "WS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WS>
	<YE public="1" get="inline" set="null" expr="cast &quot;YE&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "YE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YE>
	<YT public="1" get="inline" set="null" expr="cast &quot;YT&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "YT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YT>
	<ZA public="1" get="inline" set="null" expr="cast &quot;ZA&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "ZA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZA>
	<ZM public="1" get="inline" set="null" expr="cast &quot;ZM&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "ZM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZM>
	<ZW public="1" get="inline" set="null" expr="cast &quot;ZW&quot;" line="1" static="1">
		<x path="hxTShopify.t.Country"/>
		<meta>
			<m n=":value"><e>cast "ZW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZW>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Country.Country_Impl_" params="" file="src/hxTShopify/t/Country.hx" private="1" module="hxTShopify.t.Country" extern="1" final="1">
		<AD public="1" get="inline" set="null" expr="cast &quot;AD&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AD>
		<AE public="1" get="inline" set="null" expr="cast &quot;AE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AE>
		<AF public="1" get="inline" set="null" expr="cast &quot;AF&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AF>
		<AG public="1" get="inline" set="null" expr="cast &quot;AG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AG>
		<AI public="1" get="inline" set="null" expr="cast &quot;AI&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AI>
		<AL public="1" get="inline" set="null" expr="cast &quot;AL&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AL>
		<AM public="1" get="inline" set="null" expr="cast &quot;AM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AM>
		<AO public="1" get="inline" set="null" expr="cast &quot;AO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AO>
		<AQ public="1" get="inline" set="null" expr="cast &quot;AQ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AQ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AQ>
		<AR public="1" get="inline" set="null" expr="cast &quot;AR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AR>
		<AS public="1" get="inline" set="null" expr="cast &quot;AS&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AS>
		<AT public="1" get="inline" set="null" expr="cast &quot;AT&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AT>
		<AU public="1" get="inline" set="null" expr="cast &quot;AU&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AU>
		<AW public="1" get="inline" set="null" expr="cast &quot;AW&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AW>
		<AX public="1" get="inline" set="null" expr="cast &quot;AX&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AX"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AX>
		<AZ public="1" get="inline" set="null" expr="cast &quot;AZ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "AZ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AZ>
		<BA public="1" get="inline" set="null" expr="cast &quot;BA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BA>
		<BB public="1" get="inline" set="null" expr="cast &quot;BB&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BB>
		<BD public="1" get="inline" set="null" expr="cast &quot;BD&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BD>
		<BE public="1" get="inline" set="null" expr="cast &quot;BE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BE>
		<BF public="1" get="inline" set="null" expr="cast &quot;BF&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BF>
		<BG public="1" get="inline" set="null" expr="cast &quot;BG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BG>
		<BH public="1" get="inline" set="null" expr="cast &quot;BH&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BH>
		<BI public="1" get="inline" set="null" expr="cast &quot;BI&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BI>
		<BJ public="1" get="inline" set="null" expr="cast &quot;BJ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BJ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BJ>
		<BL public="1" get="inline" set="null" expr="cast &quot;BL&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BL>
		<BM public="1" get="inline" set="null" expr="cast &quot;BM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BM>
		<BN public="1" get="inline" set="null" expr="cast &quot;BN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BN>
		<BO public="1" get="inline" set="null" expr="cast &quot;BO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BO>
		<BQ public="1" get="inline" set="null" expr="cast &quot;BQ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BQ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BQ>
		<BR public="1" get="inline" set="null" expr="cast &quot;BR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BR>
		<BS public="1" get="inline" set="null" expr="cast &quot;BS&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BS>
		<BT public="1" get="inline" set="null" expr="cast &quot;BT&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BT>
		<BV public="1" get="inline" set="null" expr="cast &quot;BV&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BV>
		<BW public="1" get="inline" set="null" expr="cast &quot;BW&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BW>
		<BY public="1" get="inline" set="null" expr="cast &quot;BY&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BY>
		<BZ public="1" get="inline" set="null" expr="cast &quot;BZ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "BZ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BZ>
		<CA public="1" get="inline" set="null" expr="cast &quot;CA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CA>
		<CC public="1" get="inline" set="null" expr="cast &quot;CC&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CC>
		<CD public="1" get="inline" set="null" expr="cast &quot;CD&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CD>
		<CF public="1" get="inline" set="null" expr="cast &quot;CF&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CF>
		<CG public="1" get="inline" set="null" expr="cast &quot;CG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CG>
		<CH public="1" get="inline" set="null" expr="cast &quot;CH&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CH>
		<CI public="1" get="inline" set="null" expr="cast &quot;CI&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CI>
		<CK public="1" get="inline" set="null" expr="cast &quot;CK&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CK>
		<CL public="1" get="inline" set="null" expr="cast &quot;CL&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CL>
		<CM public="1" get="inline" set="null" expr="cast &quot;CM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CM>
		<CN public="1" get="inline" set="null" expr="cast &quot;CN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CN>
		<CO public="1" get="inline" set="null" expr="cast &quot;CO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CO>
		<CR public="1" get="inline" set="null" expr="cast &quot;CR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CR>
		<CU public="1" get="inline" set="null" expr="cast &quot;CU&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CU>
		<CV public="1" get="inline" set="null" expr="cast &quot;CV&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CV>
		<CW public="1" get="inline" set="null" expr="cast &quot;CW&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CW>
		<CX public="1" get="inline" set="null" expr="cast &quot;CX&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CX"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CX>
		<CY public="1" get="inline" set="null" expr="cast &quot;CY&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CY>
		<CZ public="1" get="inline" set="null" expr="cast &quot;CZ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "CZ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CZ>
		<DE public="1" get="inline" set="null" expr="cast &quot;DE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "DE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DE>
		<DJ public="1" get="inline" set="null" expr="cast &quot;DJ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "DJ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DJ>
		<DK public="1" get="inline" set="null" expr="cast &quot;DK&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "DK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DK>
		<DM public="1" get="inline" set="null" expr="cast &quot;DM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "DM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DM>
		<DO public="1" get="inline" set="null" expr="cast &quot;DO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "DO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DO>
		<DZ public="1" get="inline" set="null" expr="cast &quot;DZ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "DZ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DZ>
		<EC public="1" get="inline" set="null" expr="cast &quot;EC&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "EC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EC>
		<EE public="1" get="inline" set="null" expr="cast &quot;EE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "EE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EE>
		<EG public="1" get="inline" set="null" expr="cast &quot;EG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "EG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EG>
		<EH public="1" get="inline" set="null" expr="cast &quot;EH&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "EH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EH>
		<ER public="1" get="inline" set="null" expr="cast &quot;ER&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "ER"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ER>
		<ES public="1" get="inline" set="null" expr="cast &quot;ES&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "ES"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ES>
		<ET public="1" get="inline" set="null" expr="cast &quot;ET&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "ET"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ET>
		<FI public="1" get="inline" set="null" expr="cast &quot;FI&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "FI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FI>
		<FJ public="1" get="inline" set="null" expr="cast &quot;FJ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "FJ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FJ>
		<FK public="1" get="inline" set="null" expr="cast &quot;FK&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "FK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FK>
		<FM public="1" get="inline" set="null" expr="cast &quot;FM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "FM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FM>
		<FO public="1" get="inline" set="null" expr="cast &quot;FO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "FO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FO>
		<FR public="1" get="inline" set="null" expr="cast &quot;FR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "FR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FR>
		<GA public="1" get="inline" set="null" expr="cast &quot;GA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GA>
		<GB public="1" get="inline" set="null" expr="cast &quot;GB&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GB>
		<GD public="1" get="inline" set="null" expr="cast &quot;GD&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GD>
		<GE public="1" get="inline" set="null" expr="cast &quot;GE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GE>
		<GF public="1" get="inline" set="null" expr="cast &quot;GF&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GF>
		<GG public="1" get="inline" set="null" expr="cast &quot;GG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GG>
		<GH public="1" get="inline" set="null" expr="cast &quot;GH&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GH>
		<GI public="1" get="inline" set="null" expr="cast &quot;GI&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GI>
		<GL public="1" get="inline" set="null" expr="cast &quot;GL&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GL>
		<GM public="1" get="inline" set="null" expr="cast &quot;GM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GM>
		<GN public="1" get="inline" set="null" expr="cast &quot;GN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GN>
		<GP public="1" get="inline" set="null" expr="cast &quot;GP&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GP>
		<GQ public="1" get="inline" set="null" expr="cast &quot;GQ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GQ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GQ>
		<GR public="1" get="inline" set="null" expr="cast &quot;GR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GR>
		<GS public="1" get="inline" set="null" expr="cast &quot;GS&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GS>
		<GT public="1" get="inline" set="null" expr="cast &quot;GT&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GT>
		<GU public="1" get="inline" set="null" expr="cast &quot;GU&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GU>
		<GW public="1" get="inline" set="null" expr="cast &quot;GW&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GW>
		<GY public="1" get="inline" set="null" expr="cast &quot;GY&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "GY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GY>
		<HK public="1" get="inline" set="null" expr="cast &quot;HK&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "HK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HK>
		<HM public="1" get="inline" set="null" expr="cast &quot;HM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "HM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HM>
		<HN public="1" get="inline" set="null" expr="cast &quot;HN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "HN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HN>
		<HR public="1" get="inline" set="null" expr="cast &quot;HR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "HR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HR>
		<HT public="1" get="inline" set="null" expr="cast &quot;HT&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "HT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HT>
		<HU public="1" get="inline" set="null" expr="cast &quot;HU&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "HU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HU>
		<ID public="1" get="inline" set="null" expr="cast &quot;ID&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "ID"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ID>
		<IE public="1" get="inline" set="null" expr="cast &quot;IE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "IE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IE>
		<IL public="1" get="inline" set="null" expr="cast &quot;IL&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "IL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IL>
		<IM public="1" get="inline" set="null" expr="cast &quot;IM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "IM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IM>
		<IN public="1" get="inline" set="null" expr="cast &quot;IN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "IN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IN>
		<IO public="1" get="inline" set="null" expr="cast &quot;IO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "IO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IO>
		<IQ public="1" get="inline" set="null" expr="cast &quot;IQ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "IQ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IQ>
		<IR public="1" get="inline" set="null" expr="cast &quot;IR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "IR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IR>
		<IS public="1" get="inline" set="null" expr="cast &quot;IS&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "IS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IS>
		<IT public="1" get="inline" set="null" expr="cast &quot;IT&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "IT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IT>
		<JE public="1" get="inline" set="null" expr="cast &quot;JE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "JE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</JE>
		<JM public="1" get="inline" set="null" expr="cast &quot;JM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "JM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</JM>
		<JO public="1" get="inline" set="null" expr="cast &quot;JO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "JO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</JO>
		<JP public="1" get="inline" set="null" expr="cast &quot;JP&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "JP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</JP>
		<KE public="1" get="inline" set="null" expr="cast &quot;KE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KE>
		<KG public="1" get="inline" set="null" expr="cast &quot;KG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KG>
		<KH public="1" get="inline" set="null" expr="cast &quot;KH&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KH>
		<KI public="1" get="inline" set="null" expr="cast &quot;KI&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KI>
		<KM public="1" get="inline" set="null" expr="cast &quot;KM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KM>
		<KN public="1" get="inline" set="null" expr="cast &quot;KN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KN>
		<KP public="1" get="inline" set="null" expr="cast &quot;KP&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KP>
		<KR public="1" get="inline" set="null" expr="cast &quot;KR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KR>
		<KW public="1" get="inline" set="null" expr="cast &quot;KW&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KW>
		<KY public="1" get="inline" set="null" expr="cast &quot;KY&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KY>
		<KZ public="1" get="inline" set="null" expr="cast &quot;KZ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "KZ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KZ>
		<LA public="1" get="inline" set="null" expr="cast &quot;LA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LA>
		<LB public="1" get="inline" set="null" expr="cast &quot;LB&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LB>
		<LC public="1" get="inline" set="null" expr="cast &quot;LC&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LC>
		<LI public="1" get="inline" set="null" expr="cast &quot;LI&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LI>
		<LK public="1" get="inline" set="null" expr="cast &quot;LK&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LK>
		<LR public="1" get="inline" set="null" expr="cast &quot;LR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LR>
		<LS public="1" get="inline" set="null" expr="cast &quot;LS&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LS>
		<LT public="1" get="inline" set="null" expr="cast &quot;LT&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LT>
		<LU public="1" get="inline" set="null" expr="cast &quot;LU&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LU>
		<LV public="1" get="inline" set="null" expr="cast &quot;LV&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LV>
		<LY public="1" get="inline" set="null" expr="cast &quot;LY&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "LY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LY>
		<MA public="1" get="inline" set="null" expr="cast &quot;MA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MA>
		<MC public="1" get="inline" set="null" expr="cast &quot;MC&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MC>
		<MD public="1" get="inline" set="null" expr="cast &quot;MD&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MD>
		<ME public="1" get="inline" set="null" expr="cast &quot;ME&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "ME"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ME>
		<MF public="1" get="inline" set="null" expr="cast &quot;MF&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MF>
		<MG public="1" get="inline" set="null" expr="cast &quot;MG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MG>
		<MH public="1" get="inline" set="null" expr="cast &quot;MH&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MH>
		<MK public="1" get="inline" set="null" expr="cast &quot;MK&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MK>
		<ML public="1" get="inline" set="null" expr="cast &quot;ML&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "ML"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ML>
		<MM public="1" get="inline" set="null" expr="cast &quot;MM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MM>
		<MN public="1" get="inline" set="null" expr="cast &quot;MN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MN>
		<MO public="1" get="inline" set="null" expr="cast &quot;MO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MO>
		<MP public="1" get="inline" set="null" expr="cast &quot;MP&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MP>
		<MQ public="1" get="inline" set="null" expr="cast &quot;MQ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MQ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MQ>
		<MR public="1" get="inline" set="null" expr="cast &quot;MR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MR>
		<MS public="1" get="inline" set="null" expr="cast &quot;MS&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MS>
		<MT public="1" get="inline" set="null" expr="cast &quot;MT&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MT>
		<MU public="1" get="inline" set="null" expr="cast &quot;MU&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MU>
		<MV public="1" get="inline" set="null" expr="cast &quot;MV&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MV>
		<MW public="1" get="inline" set="null" expr="cast &quot;MW&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MW>
		<MX public="1" get="inline" set="null" expr="cast &quot;MX&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MX"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MX>
		<MY public="1" get="inline" set="null" expr="cast &quot;MY&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MY>
		<MZ public="1" get="inline" set="null" expr="cast &quot;MZ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "MZ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MZ>
		<NA public="1" get="inline" set="null" expr="cast &quot;NA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NA>
		<NC public="1" get="inline" set="null" expr="cast &quot;NC&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NC>
		<NE public="1" get="inline" set="null" expr="cast &quot;NE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NE>
		<NF public="1" get="inline" set="null" expr="cast &quot;NF&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NF>
		<NG public="1" get="inline" set="null" expr="cast &quot;NG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NG>
		<NI public="1" get="inline" set="null" expr="cast &quot;NI&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NI>
		<NL public="1" get="inline" set="null" expr="cast &quot;NL&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NL>
		<NO public="1" get="inline" set="null" expr="cast &quot;NO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO>
		<NP public="1" get="inline" set="null" expr="cast &quot;NP&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NP>
		<NR public="1" get="inline" set="null" expr="cast &quot;NR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NR>
		<NU public="1" get="inline" set="null" expr="cast &quot;NU&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NU>
		<NZ public="1" get="inline" set="null" expr="cast &quot;NZ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "NZ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NZ>
		<OM public="1" get="inline" set="null" expr="cast &quot;OM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "OM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OM>
		<PA public="1" get="inline" set="null" expr="cast &quot;PA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PA>
		<PE public="1" get="inline" set="null" expr="cast &quot;PE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PE>
		<PF public="1" get="inline" set="null" expr="cast &quot;PF&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PF>
		<PG public="1" get="inline" set="null" expr="cast &quot;PG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PG>
		<PH public="1" get="inline" set="null" expr="cast &quot;PH&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PH>
		<PK public="1" get="inline" set="null" expr="cast &quot;PK&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PK>
		<PL public="1" get="inline" set="null" expr="cast &quot;PL&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PL>
		<PM public="1" get="inline" set="null" expr="cast &quot;PM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PM>
		<PN public="1" get="inline" set="null" expr="cast &quot;PN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PN>
		<PR public="1" get="inline" set="null" expr="cast &quot;PR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PR>
		<PS public="1" get="inline" set="null" expr="cast &quot;PS&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PS>
		<PT public="1" get="inline" set="null" expr="cast &quot;PT&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PT>
		<PW public="1" get="inline" set="null" expr="cast &quot;PW&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PW>
		<PY public="1" get="inline" set="null" expr="cast &quot;PY&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "PY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PY>
		<QA public="1" get="inline" set="null" expr="cast &quot;QA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "QA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</QA>
		<RE public="1" get="inline" set="null" expr="cast &quot;RE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "RE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RE>
		<RO public="1" get="inline" set="null" expr="cast &quot;RO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "RO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RO>
		<RS public="1" get="inline" set="null" expr="cast &quot;RS&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "RS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RS>
		<RU public="1" get="inline" set="null" expr="cast &quot;RU&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "RU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RU>
		<RW public="1" get="inline" set="null" expr="cast &quot;RW&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "RW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RW>
		<SA public="1" get="inline" set="null" expr="cast &quot;SA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SA>
		<SB public="1" get="inline" set="null" expr="cast &quot;SB&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SB>
		<SC public="1" get="inline" set="null" expr="cast &quot;SC&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SC>
		<SD public="1" get="inline" set="null" expr="cast &quot;SD&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SD>
		<SE public="1" get="inline" set="null" expr="cast &quot;SE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SE>
		<SG public="1" get="inline" set="null" expr="cast &quot;SG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SG>
		<SH public="1" get="inline" set="null" expr="cast &quot;SH&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SH>
		<SI public="1" get="inline" set="null" expr="cast &quot;SI&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SI>
		<SJ public="1" get="inline" set="null" expr="cast &quot;SJ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SJ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SJ>
		<SK public="1" get="inline" set="null" expr="cast &quot;SK&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SK>
		<SL public="1" get="inline" set="null" expr="cast &quot;SL&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SL>
		<SM public="1" get="inline" set="null" expr="cast &quot;SM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SM>
		<SN public="1" get="inline" set="null" expr="cast &quot;SN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SN>
		<SO public="1" get="inline" set="null" expr="cast &quot;SO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SO>
		<SR public="1" get="inline" set="null" expr="cast &quot;SR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SR>
		<SS public="1" get="inline" set="null" expr="cast &quot;SS&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SS>
		<ST public="1" get="inline" set="null" expr="cast &quot;ST&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "ST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ST>
		<SV public="1" get="inline" set="null" expr="cast &quot;SV&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SV>
		<SX public="1" get="inline" set="null" expr="cast &quot;SX&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SX"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SX>
		<SY public="1" get="inline" set="null" expr="cast &quot;SY&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SY>
		<SZ public="1" get="inline" set="null" expr="cast &quot;SZ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "SZ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SZ>
		<TC public="1" get="inline" set="null" expr="cast &quot;TC&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TC>
		<TD public="1" get="inline" set="null" expr="cast &quot;TD&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TD>
		<TF public="1" get="inline" set="null" expr="cast &quot;TF&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TF>
		<TG public="1" get="inline" set="null" expr="cast &quot;TG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TG>
		<TH public="1" get="inline" set="null" expr="cast &quot;TH&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TH>
		<TJ public="1" get="inline" set="null" expr="cast &quot;TJ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TJ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TJ>
		<TK public="1" get="inline" set="null" expr="cast &quot;TK&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TK>
		<TL public="1" get="inline" set="null" expr="cast &quot;TL&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TL>
		<TM public="1" get="inline" set="null" expr="cast &quot;TM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TM>
		<TN public="1" get="inline" set="null" expr="cast &quot;TN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TN>
		<TO public="1" get="inline" set="null" expr="cast &quot;TO&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TO>
		<TR public="1" get="inline" set="null" expr="cast &quot;TR&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TR>
		<TT public="1" get="inline" set="null" expr="cast &quot;TT&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TT>
		<TV public="1" get="inline" set="null" expr="cast &quot;TV&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TV>
		<TW public="1" get="inline" set="null" expr="cast &quot;TW&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TW>
		<TZ public="1" get="inline" set="null" expr="cast &quot;TZ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "TZ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TZ>
		<UA public="1" get="inline" set="null" expr="cast &quot;UA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "UA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UA>
		<UG public="1" get="inline" set="null" expr="cast &quot;UG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "UG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UG>
		<UM public="1" get="inline" set="null" expr="cast &quot;UM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "UM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UM>
		<US public="1" get="inline" set="null" expr="cast &quot;US&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "US"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</US>
		<UY public="1" get="inline" set="null" expr="cast &quot;UY&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "UY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UY>
		<UZ public="1" get="inline" set="null" expr="cast &quot;UZ&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "UZ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UZ>
		<VA public="1" get="inline" set="null" expr="cast &quot;VA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "VA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VA>
		<VC public="1" get="inline" set="null" expr="cast &quot;VC&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "VC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VC>
		<VE public="1" get="inline" set="null" expr="cast &quot;VE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "VE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VE>
		<VG public="1" get="inline" set="null" expr="cast &quot;VG&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "VG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VG>
		<VI public="1" get="inline" set="null" expr="cast &quot;VI&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "VI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VI>
		<VN public="1" get="inline" set="null" expr="cast &quot;VN&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "VN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VN>
		<VU public="1" get="inline" set="null" expr="cast &quot;VU&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "VU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VU>
		<WF public="1" get="inline" set="null" expr="cast &quot;WF&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "WF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WF>
		<WS public="1" get="inline" set="null" expr="cast &quot;WS&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "WS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WS>
		<YE public="1" get="inline" set="null" expr="cast &quot;YE&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "YE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YE>
		<YT public="1" get="inline" set="null" expr="cast &quot;YT&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "YT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YT>
		<ZA public="1" get="inline" set="null" expr="cast &quot;ZA&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "ZA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZA>
		<ZM public="1" get="inline" set="null" expr="cast &quot;ZM&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "ZM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZM>
		<ZW public="1" get="inline" set="null" expr="cast &quot;ZW&quot;" line="1" static="1">
			<x path="hxTShopify.t.Country"/>
			<meta>
				<m n=":value"><e>cast "ZW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZW>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="hxTShopify.t.Currency" params="" file="src/hxTShopify/t/Currency.hx"><a>
	<rate_updated_at><x path="hxTShopify.t.StringDate"/></rate_updated_at>
	<enabled><x path="Bool"/></enabled>
	<currency><x path="hxTShopify.t.CurrencyType"/></currency>
</a></typedef>
	<abstract path="hxTShopify.t.CurrencyType" params="" file="src/hxTShopify/t/CurrencyType.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>*  ISO 4217
 *  https://en.wikipedia.org/wiki/ISO_4217</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.t._CurrencyType.CurrencyType_Impl_" params="" file="src/hxTShopify/t/CurrencyType.hx" private="1" module="hxTShopify.t.CurrencyType" extern="1" final="1">
	<AED public="1" get="inline" set="null" expr="cast &quot;AED&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "AED"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AED>
	<AFN public="1" get="inline" set="null" expr="cast &quot;AFN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "AFN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AFN>
	<ALL public="1" get="inline" set="null" expr="cast &quot;ALL&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "ALL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALL>
	<AMD public="1" get="inline" set="null" expr="cast &quot;AMD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "AMD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AMD>
	<ANG public="1" get="inline" set="null" expr="cast &quot;ANG&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "ANG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANG>
	<AOA public="1" get="inline" set="null" expr="cast &quot;AOA&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "AOA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AOA>
	<ARS public="1" get="inline" set="null" expr="cast &quot;ARS&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "ARS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ARS>
	<AUD public="1" get="inline" set="null" expr="cast &quot;AUD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "AUD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUD>
	<AWG public="1" get="inline" set="null" expr="cast &quot;AWG&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "AWG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AWG>
	<AZN public="1" get="inline" set="null" expr="cast &quot;AZN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "AZN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AZN>
	<BAM public="1" get="inline" set="null" expr="cast &quot;BAM&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BAM"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BAM>
	<BBD public="1" get="inline" set="null" expr="cast &quot;BBD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BBD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BBD>
	<BDT public="1" get="inline" set="null" expr="cast &quot;BDT&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BDT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BDT>
	<BGN public="1" get="inline" set="null" expr="cast &quot;BGN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BGN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BGN>
	<BHD public="1" get="inline" set="null" expr="cast &quot;BHD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BHD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BHD>
	<BIF public="1" get="inline" set="null" expr="cast &quot;BIF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BIF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BIF>
	<BMD public="1" get="inline" set="null" expr="cast &quot;BMD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BMD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BMD>
	<BND public="1" get="inline" set="null" expr="cast &quot;BND&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BND"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BND>
	<BOB public="1" get="inline" set="null" expr="cast &quot;BOB&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BOB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BOB>
	<BOV public="1" get="inline" set="null" expr="cast &quot;BOV&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BOV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BOV>
	<BRL public="1" get="inline" set="null" expr="cast &quot;BRL&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BRL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BRL>
	<BSD public="1" get="inline" set="null" expr="cast &quot;BSD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BSD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BSD>
	<BTN public="1" get="inline" set="null" expr="cast &quot;BTN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BTN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BTN>
	<BWP public="1" get="inline" set="null" expr="cast &quot;BWP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BWP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BWP>
	<BYN public="1" get="inline" set="null" expr="cast &quot;BYN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BYN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BYN>
	<BZD public="1" get="inline" set="null" expr="cast &quot;BZD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "BZD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BZD>
	<CAD public="1" get="inline" set="null" expr="cast &quot;CAD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CAD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CAD>
	<CDF public="1" get="inline" set="null" expr="cast &quot;CDF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CDF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CDF>
	<CHE public="1" get="inline" set="null" expr="cast &quot;CHE&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CHE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHE>
	<CHF public="1" get="inline" set="null" expr="cast &quot;CHF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CHF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHF>
	<CHW public="1" get="inline" set="null" expr="cast &quot;CHW&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CHW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHW>
	<CLF public="1" get="inline" set="null" expr="cast &quot;CLF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CLF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLF>
	<CLP public="1" get="inline" set="null" expr="cast &quot;CLP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CLP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLP>
	<CNY public="1" get="inline" set="null" expr="cast &quot;CNY&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CNY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CNY>
	<COP public="1" get="inline" set="null" expr="cast &quot;COP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "COP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COP>
	<COU public="1" get="inline" set="null" expr="cast &quot;COU&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "COU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COU>
	<CRC public="1" get="inline" set="null" expr="cast &quot;CRC&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CRC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CRC>
	<CUC public="1" get="inline" set="null" expr="cast &quot;CUC&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CUC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CUC>
	<CUP public="1" get="inline" set="null" expr="cast &quot;CUP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CUP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CUP>
	<CVE public="1" get="inline" set="null" expr="cast &quot;CVE&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CVE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CVE>
	<CZK public="1" get="inline" set="null" expr="cast &quot;CZK&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "CZK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CZK>
	<DJF public="1" get="inline" set="null" expr="cast &quot;DJF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "DJF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DJF>
	<DKK public="1" get="inline" set="null" expr="cast &quot;DKK&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "DKK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DKK>
	<DOP public="1" get="inline" set="null" expr="cast &quot;DOP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "DOP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DOP>
	<DZD public="1" get="inline" set="null" expr="cast &quot;DZD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "DZD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DZD>
	<EGP public="1" get="inline" set="null" expr="cast &quot;EGP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "EGP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EGP>
	<ERN public="1" get="inline" set="null" expr="cast &quot;ERN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "ERN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ERN>
	<ETB public="1" get="inline" set="null" expr="cast &quot;ETB&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "ETB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ETB>
	<EUR public="1" get="inline" set="null" expr="cast &quot;EUR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "EUR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EUR>
	<FJD public="1" get="inline" set="null" expr="cast &quot;FJD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "FJD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FJD>
	<FKP public="1" get="inline" set="null" expr="cast &quot;FKP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "FKP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FKP>
	<GBP public="1" get="inline" set="null" expr="cast &quot;GBP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "GBP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GBP>
	<GEL public="1" get="inline" set="null" expr="cast &quot;GEL&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "GEL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GEL>
	<GHS public="1" get="inline" set="null" expr="cast &quot;GHS&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "GHS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GHS>
	<GIP public="1" get="inline" set="null" expr="cast &quot;GIP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "GIP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GIP>
	<GMD public="1" get="inline" set="null" expr="cast &quot;GMD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "GMD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GMD>
	<GNF public="1" get="inline" set="null" expr="cast &quot;GNF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "GNF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GNF>
	<GTQ public="1" get="inline" set="null" expr="cast &quot;GTQ&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "GTQ"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GTQ>
	<GYD public="1" get="inline" set="null" expr="cast &quot;GYD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "GYD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GYD>
	<HKD public="1" get="inline" set="null" expr="cast &quot;HKD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "HKD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HKD>
	<HNL public="1" get="inline" set="null" expr="cast &quot;HNL&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "HNL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HNL>
	<HRK public="1" get="inline" set="null" expr="cast &quot;HRK&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "HRK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HRK>
	<HTG public="1" get="inline" set="null" expr="cast &quot;HTG&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "HTG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HTG>
	<HUF public="1" get="inline" set="null" expr="cast &quot;HUF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "HUF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HUF>
	<IDR public="1" get="inline" set="null" expr="cast &quot;IDR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "IDR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IDR>
	<ILS public="1" get="inline" set="null" expr="cast &quot;ILS&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "ILS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ILS>
	<INR public="1" get="inline" set="null" expr="cast &quot;INR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "INR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INR>
	<IQD public="1" get="inline" set="null" expr="cast &quot;IQD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "IQD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IQD>
	<IRR public="1" get="inline" set="null" expr="cast &quot;IRR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "IRR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IRR>
	<ISK public="1" get="inline" set="null" expr="cast &quot;ISK&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "ISK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ISK>
	<JMD public="1" get="inline" set="null" expr="cast &quot;JMD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "JMD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</JMD>
	<JOD public="1" get="inline" set="null" expr="cast &quot;JOD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "JOD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</JOD>
	<JPY public="1" get="inline" set="null" expr="cast &quot;JPY&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "JPY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</JPY>
	<KES public="1" get="inline" set="null" expr="cast &quot;KES&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "KES"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KES>
	<KGS public="1" get="inline" set="null" expr="cast &quot;KGS&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "KGS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KGS>
	<KHR public="1" get="inline" set="null" expr="cast &quot;KHR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "KHR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KHR>
	<KMF public="1" get="inline" set="null" expr="cast &quot;KMF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "KMF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KMF>
	<KPW public="1" get="inline" set="null" expr="cast &quot;KPW&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "KPW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KPW>
	<KRW public="1" get="inline" set="null" expr="cast &quot;KRW&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "KRW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KRW>
	<KWD public="1" get="inline" set="null" expr="cast &quot;KWD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "KWD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KWD>
	<KYD public="1" get="inline" set="null" expr="cast &quot;KYD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "KYD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KYD>
	<KZT public="1" get="inline" set="null" expr="cast &quot;KZT&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "KZT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KZT>
	<LAK public="1" get="inline" set="null" expr="cast &quot;LAK&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "LAK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LAK>
	<LBP public="1" get="inline" set="null" expr="cast &quot;LBP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "LBP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LBP>
	<LKR public="1" get="inline" set="null" expr="cast &quot;LKR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "LKR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LKR>
	<LRD public="1" get="inline" set="null" expr="cast &quot;LRD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "LRD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LRD>
	<LSL public="1" get="inline" set="null" expr="cast &quot;LSL&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "LSL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LSL>
	<LYD public="1" get="inline" set="null" expr="cast &quot;LYD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "LYD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LYD>
	<MAD public="1" get="inline" set="null" expr="cast &quot;MAD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MAD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MAD>
	<MDL public="1" get="inline" set="null" expr="cast &quot;MDL&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MDL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MDL>
	<MGA public="1" get="inline" set="null" expr="cast &quot;MGA&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MGA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MGA>
	<MKD public="1" get="inline" set="null" expr="cast &quot;MKD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MKD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MKD>
	<MMK public="1" get="inline" set="null" expr="cast &quot;MMK&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MMK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MMK>
	<MNT public="1" get="inline" set="null" expr="cast &quot;MNT&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MNT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MNT>
	<MOP public="1" get="inline" set="null" expr="cast &quot;MOP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MOP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MOP>
	<MRU public="1" get="inline" set="null" expr="cast &quot;MRU&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MRU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MRU>
	<MUR public="1" get="inline" set="null" expr="cast &quot;MUR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MUR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MUR>
	<MVR public="1" get="inline" set="null" expr="cast &quot;MVR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MVR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MVR>
	<MWK public="1" get="inline" set="null" expr="cast &quot;MWK&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MWK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MWK>
	<MXN public="1" get="inline" set="null" expr="cast &quot;MXN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MXN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MXN>
	<MXV public="1" get="inline" set="null" expr="cast &quot;MXV&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MXV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MXV>
	<MYR public="1" get="inline" set="null" expr="cast &quot;MYR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MYR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MYR>
	<MZN public="1" get="inline" set="null" expr="cast &quot;MZN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "MZN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MZN>
	<NAD public="1" get="inline" set="null" expr="cast &quot;NAD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "NAD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NAD>
	<NGN public="1" get="inline" set="null" expr="cast &quot;NGN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "NGN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NGN>
	<NIO public="1" get="inline" set="null" expr="cast &quot;NIO&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "NIO"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NIO>
	<NOK public="1" get="inline" set="null" expr="cast &quot;NOK&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "NOK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NOK>
	<NPR public="1" get="inline" set="null" expr="cast &quot;NPR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "NPR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NPR>
	<NZD public="1" get="inline" set="null" expr="cast &quot;NZD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "NZD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NZD>
	<OMR public="1" get="inline" set="null" expr="cast &quot;OMR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "OMR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OMR>
	<PAB public="1" get="inline" set="null" expr="cast &quot;PAB&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "PAB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PAB>
	<PEN public="1" get="inline" set="null" expr="cast &quot;PEN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "PEN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PEN>
	<PGK public="1" get="inline" set="null" expr="cast &quot;PGK&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "PGK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PGK>
	<PHP public="1" get="inline" set="null" expr="cast &quot;PHP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "PHP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PHP>
	<PKR public="1" get="inline" set="null" expr="cast &quot;PKR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "PKR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PKR>
	<PLN public="1" get="inline" set="null" expr="cast &quot;PLN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "PLN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PLN>
	<PYG public="1" get="inline" set="null" expr="cast &quot;PYG&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "PYG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PYG>
	<QAR public="1" get="inline" set="null" expr="cast &quot;QAR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "QAR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</QAR>
	<RON public="1" get="inline" set="null" expr="cast &quot;RON&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "RON"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RON>
	<RSD public="1" get="inline" set="null" expr="cast &quot;RSD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "RSD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RSD>
	<RUB public="1" get="inline" set="null" expr="cast &quot;RUB&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "RUB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RUB>
	<RWF public="1" get="inline" set="null" expr="cast &quot;RWF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "RWF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RWF>
	<SAR public="1" get="inline" set="null" expr="cast &quot;SAR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SAR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SAR>
	<SBD public="1" get="inline" set="null" expr="cast &quot;SBD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SBD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SBD>
	<SCR public="1" get="inline" set="null" expr="cast &quot;SCR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SCR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SCR>
	<SDG public="1" get="inline" set="null" expr="cast &quot;SDG&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SDG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SDG>
	<SEK public="1" get="inline" set="null" expr="cast &quot;SEK&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SEK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SEK>
	<SGD public="1" get="inline" set="null" expr="cast &quot;SGD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SGD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SGD>
	<SHP public="1" get="inline" set="null" expr="cast &quot;SHP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SHP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHP>
	<SLL public="1" get="inline" set="null" expr="cast &quot;SLL&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SLL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SLL>
	<SOS public="1" get="inline" set="null" expr="cast &quot;SOS&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SOS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SOS>
	<SRD public="1" get="inline" set="null" expr="cast &quot;SRD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SRD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SRD>
	<SSP public="1" get="inline" set="null" expr="cast &quot;SSP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SSP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SSP>
	<STN public="1" get="inline" set="null" expr="cast &quot;STN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "STN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STN>
	<SVC public="1" get="inline" set="null" expr="cast &quot;SVC&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SVC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SVC>
	<SYP public="1" get="inline" set="null" expr="cast &quot;SYP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SYP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SYP>
	<SZL public="1" get="inline" set="null" expr="cast &quot;SZL&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "SZL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SZL>
	<THB public="1" get="inline" set="null" expr="cast &quot;THB&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "THB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</THB>
	<TJS public="1" get="inline" set="null" expr="cast &quot;TJS&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "TJS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TJS>
	<TMT public="1" get="inline" set="null" expr="cast &quot;TMT&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "TMT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TMT>
	<TND public="1" get="inline" set="null" expr="cast &quot;TND&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "TND"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TND>
	<TOP public="1" get="inline" set="null" expr="cast &quot;TOP&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "TOP"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TOP>
	<TRY public="1" get="inline" set="null" expr="cast &quot;TRY&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "TRY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TRY>
	<TTD public="1" get="inline" set="null" expr="cast &quot;TTD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "TTD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TTD>
	<TWD public="1" get="inline" set="null" expr="cast &quot;TWD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "TWD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TWD>
	<TZS public="1" get="inline" set="null" expr="cast &quot;TZS&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "TZS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TZS>
	<UAH public="1" get="inline" set="null" expr="cast &quot;UAH&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "UAH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UAH>
	<UGX public="1" get="inline" set="null" expr="cast &quot;UGX&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "UGX"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UGX>
	<USD public="1" get="inline" set="null" expr="cast &quot;USD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "USD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</USD>
	<USN public="1" get="inline" set="null" expr="cast &quot;USN&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "USN"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</USN>
	<UYI public="1" get="inline" set="null" expr="cast &quot;UYI&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "UYI"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UYI>
	<UYU public="1" get="inline" set="null" expr="cast &quot;UYU&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "UYU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UYU>
	<UYW public="1" get="inline" set="null" expr="cast &quot;UYW&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "UYW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UYW>
	<UZS public="1" get="inline" set="null" expr="cast &quot;UZS&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "UZS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UZS>
	<VES public="1" get="inline" set="null" expr="cast &quot;VES&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "VES"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VES>
	<VND public="1" get="inline" set="null" expr="cast &quot;VND&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "VND"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VND>
	<VUV public="1" get="inline" set="null" expr="cast &quot;VUV&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "VUV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VUV>
	<WST public="1" get="inline" set="null" expr="cast &quot;WST&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "WST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WST>
	<XAF public="1" get="inline" set="null" expr="cast &quot;XAF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XAF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XAF>
	<XAG public="1" get="inline" set="null" expr="cast &quot;XAG&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XAG"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XAG>
	<XAU public="1" get="inline" set="null" expr="cast &quot;XAU&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XAU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XAU>
	<XBA public="1" get="inline" set="null" expr="cast &quot;XBA&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XBA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XBA>
	<XBB public="1" get="inline" set="null" expr="cast &quot;XBB&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XBB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XBB>
	<XBC public="1" get="inline" set="null" expr="cast &quot;XBC&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XBC"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XBC>
	<XBD public="1" get="inline" set="null" expr="cast &quot;XBD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XBD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XBD>
	<XCD public="1" get="inline" set="null" expr="cast &quot;XCD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XCD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XCD>
	<XDR public="1" get="inline" set="null" expr="cast &quot;XDR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XDR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XDR>
	<XOF public="1" get="inline" set="null" expr="cast &quot;XOF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XOF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XOF>
	<XPD public="1" get="inline" set="null" expr="cast &quot;XPD&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XPD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XPD>
	<XPF public="1" get="inline" set="null" expr="cast &quot;XPF&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XPF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XPF>
	<XPT public="1" get="inline" set="null" expr="cast &quot;XPT&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XPT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XPT>
	<XSU public="1" get="inline" set="null" expr="cast &quot;XSU&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XSU"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XSU>
	<XTS public="1" get="inline" set="null" expr="cast &quot;XTS&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XTS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XTS>
	<XUA public="1" get="inline" set="null" expr="cast &quot;XUA&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XUA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XUA>
	<XXX public="1" get="inline" set="null" expr="cast &quot;XXX&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "XXX"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XXX>
	<YER public="1" get="inline" set="null" expr="cast &quot;YER&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "YER"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YER>
	<ZAR public="1" get="inline" set="null" expr="cast &quot;ZAR&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "ZAR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZAR>
	<ZMW public="1" get="inline" set="null" expr="cast &quot;ZMW&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "ZMW"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZMW>
	<ZWL public="1" get="inline" set="null" expr="cast &quot;ZWL&quot;" line="1" static="1">
		<x path="hxTShopify.t.CurrencyType"/>
		<meta>
			<m n=":value"><e>cast "ZWL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZWL>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._CurrencyType.CurrencyType_Impl_" params="" file="src/hxTShopify/t/CurrencyType.hx" private="1" module="hxTShopify.t.CurrencyType" extern="1" final="1">
		<AED public="1" get="inline" set="null" expr="cast &quot;AED&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "AED"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AED>
		<AFN public="1" get="inline" set="null" expr="cast &quot;AFN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "AFN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AFN>
		<ALL public="1" get="inline" set="null" expr="cast &quot;ALL&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "ALL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALL>
		<AMD public="1" get="inline" set="null" expr="cast &quot;AMD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "AMD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AMD>
		<ANG public="1" get="inline" set="null" expr="cast &quot;ANG&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "ANG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANG>
		<AOA public="1" get="inline" set="null" expr="cast &quot;AOA&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "AOA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AOA>
		<ARS public="1" get="inline" set="null" expr="cast &quot;ARS&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "ARS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ARS>
		<AUD public="1" get="inline" set="null" expr="cast &quot;AUD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "AUD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUD>
		<AWG public="1" get="inline" set="null" expr="cast &quot;AWG&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "AWG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AWG>
		<AZN public="1" get="inline" set="null" expr="cast &quot;AZN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "AZN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AZN>
		<BAM public="1" get="inline" set="null" expr="cast &quot;BAM&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BAM"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BAM>
		<BBD public="1" get="inline" set="null" expr="cast &quot;BBD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BBD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BBD>
		<BDT public="1" get="inline" set="null" expr="cast &quot;BDT&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BDT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BDT>
		<BGN public="1" get="inline" set="null" expr="cast &quot;BGN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BGN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BGN>
		<BHD public="1" get="inline" set="null" expr="cast &quot;BHD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BHD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BHD>
		<BIF public="1" get="inline" set="null" expr="cast &quot;BIF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BIF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BIF>
		<BMD public="1" get="inline" set="null" expr="cast &quot;BMD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BMD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BMD>
		<BND public="1" get="inline" set="null" expr="cast &quot;BND&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BND"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BND>
		<BOB public="1" get="inline" set="null" expr="cast &quot;BOB&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BOB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BOB>
		<BOV public="1" get="inline" set="null" expr="cast &quot;BOV&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BOV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BOV>
		<BRL public="1" get="inline" set="null" expr="cast &quot;BRL&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BRL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BRL>
		<BSD public="1" get="inline" set="null" expr="cast &quot;BSD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BSD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BSD>
		<BTN public="1" get="inline" set="null" expr="cast &quot;BTN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BTN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BTN>
		<BWP public="1" get="inline" set="null" expr="cast &quot;BWP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BWP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BWP>
		<BYN public="1" get="inline" set="null" expr="cast &quot;BYN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BYN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BYN>
		<BZD public="1" get="inline" set="null" expr="cast &quot;BZD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "BZD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BZD>
		<CAD public="1" get="inline" set="null" expr="cast &quot;CAD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CAD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CAD>
		<CDF public="1" get="inline" set="null" expr="cast &quot;CDF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CDF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CDF>
		<CHE public="1" get="inline" set="null" expr="cast &quot;CHE&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CHE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHE>
		<CHF public="1" get="inline" set="null" expr="cast &quot;CHF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CHF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHF>
		<CHW public="1" get="inline" set="null" expr="cast &quot;CHW&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CHW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHW>
		<CLF public="1" get="inline" set="null" expr="cast &quot;CLF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CLF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLF>
		<CLP public="1" get="inline" set="null" expr="cast &quot;CLP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CLP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLP>
		<CNY public="1" get="inline" set="null" expr="cast &quot;CNY&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CNY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CNY>
		<COP public="1" get="inline" set="null" expr="cast &quot;COP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "COP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COP>
		<COU public="1" get="inline" set="null" expr="cast &quot;COU&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "COU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COU>
		<CRC public="1" get="inline" set="null" expr="cast &quot;CRC&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CRC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CRC>
		<CUC public="1" get="inline" set="null" expr="cast &quot;CUC&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CUC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CUC>
		<CUP public="1" get="inline" set="null" expr="cast &quot;CUP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CUP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CUP>
		<CVE public="1" get="inline" set="null" expr="cast &quot;CVE&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CVE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CVE>
		<CZK public="1" get="inline" set="null" expr="cast &quot;CZK&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "CZK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CZK>
		<DJF public="1" get="inline" set="null" expr="cast &quot;DJF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "DJF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DJF>
		<DKK public="1" get="inline" set="null" expr="cast &quot;DKK&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "DKK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DKK>
		<DOP public="1" get="inline" set="null" expr="cast &quot;DOP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "DOP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DOP>
		<DZD public="1" get="inline" set="null" expr="cast &quot;DZD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "DZD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DZD>
		<EGP public="1" get="inline" set="null" expr="cast &quot;EGP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "EGP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EGP>
		<ERN public="1" get="inline" set="null" expr="cast &quot;ERN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "ERN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ERN>
		<ETB public="1" get="inline" set="null" expr="cast &quot;ETB&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "ETB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ETB>
		<EUR public="1" get="inline" set="null" expr="cast &quot;EUR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "EUR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EUR>
		<FJD public="1" get="inline" set="null" expr="cast &quot;FJD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "FJD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FJD>
		<FKP public="1" get="inline" set="null" expr="cast &quot;FKP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "FKP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FKP>
		<GBP public="1" get="inline" set="null" expr="cast &quot;GBP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "GBP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GBP>
		<GEL public="1" get="inline" set="null" expr="cast &quot;GEL&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "GEL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GEL>
		<GHS public="1" get="inline" set="null" expr="cast &quot;GHS&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "GHS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GHS>
		<GIP public="1" get="inline" set="null" expr="cast &quot;GIP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "GIP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GIP>
		<GMD public="1" get="inline" set="null" expr="cast &quot;GMD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "GMD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GMD>
		<GNF public="1" get="inline" set="null" expr="cast &quot;GNF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "GNF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GNF>
		<GTQ public="1" get="inline" set="null" expr="cast &quot;GTQ&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "GTQ"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GTQ>
		<GYD public="1" get="inline" set="null" expr="cast &quot;GYD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "GYD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GYD>
		<HKD public="1" get="inline" set="null" expr="cast &quot;HKD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "HKD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HKD>
		<HNL public="1" get="inline" set="null" expr="cast &quot;HNL&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "HNL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HNL>
		<HRK public="1" get="inline" set="null" expr="cast &quot;HRK&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "HRK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HRK>
		<HTG public="1" get="inline" set="null" expr="cast &quot;HTG&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "HTG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HTG>
		<HUF public="1" get="inline" set="null" expr="cast &quot;HUF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "HUF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HUF>
		<IDR public="1" get="inline" set="null" expr="cast &quot;IDR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "IDR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IDR>
		<ILS public="1" get="inline" set="null" expr="cast &quot;ILS&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "ILS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ILS>
		<INR public="1" get="inline" set="null" expr="cast &quot;INR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "INR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INR>
		<IQD public="1" get="inline" set="null" expr="cast &quot;IQD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "IQD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IQD>
		<IRR public="1" get="inline" set="null" expr="cast &quot;IRR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "IRR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IRR>
		<ISK public="1" get="inline" set="null" expr="cast &quot;ISK&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "ISK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ISK>
		<JMD public="1" get="inline" set="null" expr="cast &quot;JMD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "JMD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</JMD>
		<JOD public="1" get="inline" set="null" expr="cast &quot;JOD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "JOD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</JOD>
		<JPY public="1" get="inline" set="null" expr="cast &quot;JPY&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "JPY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</JPY>
		<KES public="1" get="inline" set="null" expr="cast &quot;KES&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "KES"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KES>
		<KGS public="1" get="inline" set="null" expr="cast &quot;KGS&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "KGS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KGS>
		<KHR public="1" get="inline" set="null" expr="cast &quot;KHR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "KHR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KHR>
		<KMF public="1" get="inline" set="null" expr="cast &quot;KMF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "KMF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KMF>
		<KPW public="1" get="inline" set="null" expr="cast &quot;KPW&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "KPW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KPW>
		<KRW public="1" get="inline" set="null" expr="cast &quot;KRW&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "KRW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KRW>
		<KWD public="1" get="inline" set="null" expr="cast &quot;KWD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "KWD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KWD>
		<KYD public="1" get="inline" set="null" expr="cast &quot;KYD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "KYD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KYD>
		<KZT public="1" get="inline" set="null" expr="cast &quot;KZT&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "KZT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KZT>
		<LAK public="1" get="inline" set="null" expr="cast &quot;LAK&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "LAK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LAK>
		<LBP public="1" get="inline" set="null" expr="cast &quot;LBP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "LBP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LBP>
		<LKR public="1" get="inline" set="null" expr="cast &quot;LKR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "LKR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LKR>
		<LRD public="1" get="inline" set="null" expr="cast &quot;LRD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "LRD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LRD>
		<LSL public="1" get="inline" set="null" expr="cast &quot;LSL&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "LSL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LSL>
		<LYD public="1" get="inline" set="null" expr="cast &quot;LYD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "LYD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LYD>
		<MAD public="1" get="inline" set="null" expr="cast &quot;MAD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MAD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MAD>
		<MDL public="1" get="inline" set="null" expr="cast &quot;MDL&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MDL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MDL>
		<MGA public="1" get="inline" set="null" expr="cast &quot;MGA&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MGA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MGA>
		<MKD public="1" get="inline" set="null" expr="cast &quot;MKD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MKD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MKD>
		<MMK public="1" get="inline" set="null" expr="cast &quot;MMK&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MMK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MMK>
		<MNT public="1" get="inline" set="null" expr="cast &quot;MNT&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MNT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MNT>
		<MOP public="1" get="inline" set="null" expr="cast &quot;MOP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MOP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MOP>
		<MRU public="1" get="inline" set="null" expr="cast &quot;MRU&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MRU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MRU>
		<MUR public="1" get="inline" set="null" expr="cast &quot;MUR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MUR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MUR>
		<MVR public="1" get="inline" set="null" expr="cast &quot;MVR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MVR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MVR>
		<MWK public="1" get="inline" set="null" expr="cast &quot;MWK&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MWK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MWK>
		<MXN public="1" get="inline" set="null" expr="cast &quot;MXN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MXN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MXN>
		<MXV public="1" get="inline" set="null" expr="cast &quot;MXV&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MXV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MXV>
		<MYR public="1" get="inline" set="null" expr="cast &quot;MYR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MYR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MYR>
		<MZN public="1" get="inline" set="null" expr="cast &quot;MZN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "MZN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MZN>
		<NAD public="1" get="inline" set="null" expr="cast &quot;NAD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "NAD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NAD>
		<NGN public="1" get="inline" set="null" expr="cast &quot;NGN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "NGN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NGN>
		<NIO public="1" get="inline" set="null" expr="cast &quot;NIO&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "NIO"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NIO>
		<NOK public="1" get="inline" set="null" expr="cast &quot;NOK&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "NOK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NOK>
		<NPR public="1" get="inline" set="null" expr="cast &quot;NPR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "NPR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NPR>
		<NZD public="1" get="inline" set="null" expr="cast &quot;NZD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "NZD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NZD>
		<OMR public="1" get="inline" set="null" expr="cast &quot;OMR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "OMR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OMR>
		<PAB public="1" get="inline" set="null" expr="cast &quot;PAB&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "PAB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PAB>
		<PEN public="1" get="inline" set="null" expr="cast &quot;PEN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "PEN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PEN>
		<PGK public="1" get="inline" set="null" expr="cast &quot;PGK&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "PGK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PGK>
		<PHP public="1" get="inline" set="null" expr="cast &quot;PHP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "PHP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PHP>
		<PKR public="1" get="inline" set="null" expr="cast &quot;PKR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "PKR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PKR>
		<PLN public="1" get="inline" set="null" expr="cast &quot;PLN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "PLN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PLN>
		<PYG public="1" get="inline" set="null" expr="cast &quot;PYG&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "PYG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PYG>
		<QAR public="1" get="inline" set="null" expr="cast &quot;QAR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "QAR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</QAR>
		<RON public="1" get="inline" set="null" expr="cast &quot;RON&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "RON"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RON>
		<RSD public="1" get="inline" set="null" expr="cast &quot;RSD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "RSD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RSD>
		<RUB public="1" get="inline" set="null" expr="cast &quot;RUB&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "RUB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RUB>
		<RWF public="1" get="inline" set="null" expr="cast &quot;RWF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "RWF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RWF>
		<SAR public="1" get="inline" set="null" expr="cast &quot;SAR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SAR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SAR>
		<SBD public="1" get="inline" set="null" expr="cast &quot;SBD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SBD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SBD>
		<SCR public="1" get="inline" set="null" expr="cast &quot;SCR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SCR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SCR>
		<SDG public="1" get="inline" set="null" expr="cast &quot;SDG&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SDG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SDG>
		<SEK public="1" get="inline" set="null" expr="cast &quot;SEK&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SEK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SEK>
		<SGD public="1" get="inline" set="null" expr="cast &quot;SGD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SGD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SGD>
		<SHP public="1" get="inline" set="null" expr="cast &quot;SHP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SHP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHP>
		<SLL public="1" get="inline" set="null" expr="cast &quot;SLL&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SLL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SLL>
		<SOS public="1" get="inline" set="null" expr="cast &quot;SOS&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SOS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SOS>
		<SRD public="1" get="inline" set="null" expr="cast &quot;SRD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SRD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SRD>
		<SSP public="1" get="inline" set="null" expr="cast &quot;SSP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SSP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SSP>
		<STN public="1" get="inline" set="null" expr="cast &quot;STN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "STN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STN>
		<SVC public="1" get="inline" set="null" expr="cast &quot;SVC&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SVC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SVC>
		<SYP public="1" get="inline" set="null" expr="cast &quot;SYP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SYP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SYP>
		<SZL public="1" get="inline" set="null" expr="cast &quot;SZL&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "SZL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SZL>
		<THB public="1" get="inline" set="null" expr="cast &quot;THB&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "THB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</THB>
		<TJS public="1" get="inline" set="null" expr="cast &quot;TJS&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "TJS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TJS>
		<TMT public="1" get="inline" set="null" expr="cast &quot;TMT&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "TMT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TMT>
		<TND public="1" get="inline" set="null" expr="cast &quot;TND&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "TND"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TND>
		<TOP public="1" get="inline" set="null" expr="cast &quot;TOP&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "TOP"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TOP>
		<TRY public="1" get="inline" set="null" expr="cast &quot;TRY&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "TRY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TRY>
		<TTD public="1" get="inline" set="null" expr="cast &quot;TTD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "TTD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TTD>
		<TWD public="1" get="inline" set="null" expr="cast &quot;TWD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "TWD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TWD>
		<TZS public="1" get="inline" set="null" expr="cast &quot;TZS&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "TZS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TZS>
		<UAH public="1" get="inline" set="null" expr="cast &quot;UAH&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "UAH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UAH>
		<UGX public="1" get="inline" set="null" expr="cast &quot;UGX&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "UGX"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UGX>
		<USD public="1" get="inline" set="null" expr="cast &quot;USD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "USD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</USD>
		<USN public="1" get="inline" set="null" expr="cast &quot;USN&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "USN"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</USN>
		<UYI public="1" get="inline" set="null" expr="cast &quot;UYI&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "UYI"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UYI>
		<UYU public="1" get="inline" set="null" expr="cast &quot;UYU&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "UYU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UYU>
		<UYW public="1" get="inline" set="null" expr="cast &quot;UYW&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "UYW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UYW>
		<UZS public="1" get="inline" set="null" expr="cast &quot;UZS&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "UZS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UZS>
		<VES public="1" get="inline" set="null" expr="cast &quot;VES&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "VES"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VES>
		<VND public="1" get="inline" set="null" expr="cast &quot;VND&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "VND"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VND>
		<VUV public="1" get="inline" set="null" expr="cast &quot;VUV&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "VUV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VUV>
		<WST public="1" get="inline" set="null" expr="cast &quot;WST&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "WST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WST>
		<XAF public="1" get="inline" set="null" expr="cast &quot;XAF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XAF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XAF>
		<XAG public="1" get="inline" set="null" expr="cast &quot;XAG&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XAG"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XAG>
		<XAU public="1" get="inline" set="null" expr="cast &quot;XAU&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XAU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XAU>
		<XBA public="1" get="inline" set="null" expr="cast &quot;XBA&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XBA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XBA>
		<XBB public="1" get="inline" set="null" expr="cast &quot;XBB&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XBB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XBB>
		<XBC public="1" get="inline" set="null" expr="cast &quot;XBC&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XBC"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XBC>
		<XBD public="1" get="inline" set="null" expr="cast &quot;XBD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XBD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XBD>
		<XCD public="1" get="inline" set="null" expr="cast &quot;XCD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XCD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XCD>
		<XDR public="1" get="inline" set="null" expr="cast &quot;XDR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XDR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XDR>
		<XOF public="1" get="inline" set="null" expr="cast &quot;XOF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XOF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XOF>
		<XPD public="1" get="inline" set="null" expr="cast &quot;XPD&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XPD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XPD>
		<XPF public="1" get="inline" set="null" expr="cast &quot;XPF&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XPF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XPF>
		<XPT public="1" get="inline" set="null" expr="cast &quot;XPT&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XPT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XPT>
		<XSU public="1" get="inline" set="null" expr="cast &quot;XSU&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XSU"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XSU>
		<XTS public="1" get="inline" set="null" expr="cast &quot;XTS&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XTS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XTS>
		<XUA public="1" get="inline" set="null" expr="cast &quot;XUA&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XUA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XUA>
		<XXX public="1" get="inline" set="null" expr="cast &quot;XXX&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "XXX"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XXX>
		<YER public="1" get="inline" set="null" expr="cast &quot;YER&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "YER"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YER>
		<ZAR public="1" get="inline" set="null" expr="cast &quot;ZAR&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "ZAR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZAR>
		<ZMW public="1" get="inline" set="null" expr="cast &quot;ZMW&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "ZMW"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZMW>
		<ZWL public="1" get="inline" set="null" expr="cast &quot;ZWL&quot;" line="1" static="1">
			<x path="hxTShopify.t.CurrencyType"/>
			<meta>
				<m n=":value"><e>cast "ZWL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZWL>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="hxTShopify.t.Currencys" params="" file="src/hxTShopify/t/Currencys.hx"><a><currencies><c path="Array"><t path="hxTShopify.t.Currency"/></c></currencies></a></typedef>
	<typedef path="hxTShopify.t.Customer" params="" file="src/hxTShopify/t/Customer.hx">
		<a>
			<verified_email><x path="Bool"/></verified_email>
			<updated_at><x path="hxTShopify.t.StringDate"/></updated_at>
			<total_spent><x path="Float"/></total_spent>
			<tax_exempt><x path="Bool"/></tax_exempt>
			<tags><c path="String"/></tags>
			<state><c path="String"/></state>
			<phone><c path="String"/></phone>
			<orders_count><x path="Int"/></orders_count>
			<note><c path="String"/></note>
			<multipass_identifier><x path="Null"><c path="String"/></x></multipass_identifier>
			<last_order_name><c path="String"/></last_order_name>
			<last_order_id><x path="Int"/></last_order_id>
			<last_name><c path="String"/></last_name>
			<id><c path="String"/></id>
			<first_name><c path="String"/></first_name>
			<email><c path="String"/></email>
			<default_address><t path="hxTShopify.t.DefaultAddress"/></default_address>
			<currency><c path="String"/></currency>
			<created_at><x path="hxTShopify.t.StringDate"/></created_at>
			<admin_graphql_api_id><c path="String"/></admin_graphql_api_id>
			<accepts_marketing><x path="Bool"/></accepts_marketing>
		</a>
		<haxe_doc>*  https://help.shopify.com/en/api/reference/customers/customer</haxe_doc>
	</typedef>
	<typedef path="hxTShopify.t.Customers" params="" file="src/hxTShopify/t/Customers.hx"><a><customers><c path="Array"><t path="hxTShopify.t.Customer"/></c></customers></a></typedef>
	<typedef path="hxTShopify.t.DefaultAddress" params="" file="src/hxTShopify/t/DefaultAddress.hx"><a>
	<zip><c path="String"/></zip>
	<province_code><x path="Null"><c path="String"/></x></province_code>
	<province><x path="Null"><c path="String"/></x></province>
	<phone><c path="String"/></phone>
	<name><c path="String"/></name>
	<last_name><c path="String"/></last_name>
	<id><c path="String"/></id>
	<first_name><c path="String"/></first_name>
	<customer_id><c path="String"/></customer_id>
	<country_name><c path="String"/></country_name>
	<country_code><c path="String"/></country_code>
	<country><c path="String"/></country>
	<company><c path="String"/></company>
	<city><c path="String"/></city>
	<address2><c path="String"/></address2>
	<address1><c path="String"/></address1>
	<_default><x path="Bool"/></_default>
</a></typedef>
	<typedef path="hxTShopify.t.Dispute" params="" file="src/hxTShopify/t/Dispute.hx">
		<a>
			<type><x path="hxTShopify.t.DisputeType"/></type>
			<status><x path="hxTShopify.t.DisputeReason"/></status>
			<reason><x path="hxTShopify.t.DisputeReason"/></reason>
			<order_id><x path="Int"/></order_id>
			<network_reason_code><x path="Int"/></network_reason_code>
			<initiated_at><x path="hxTShopify.t.StringDate"/></initiated_at>
			<id><x path="Int"/></id>
			<finalized_on><x path="hxTShopify.t.StringDate"/></finalized_on>
			<evidence_sent_on><x path="hxTShopify.t.StringDate"/></evidence_sent_on>
			<evidence_due_by><x path="hxTShopify.t.StringDate"/></evidence_due_by>
			<currency><x path="hxTShopify.t.CurrencyType"/></currency>
			<amount><x path="Float"/></amount>
		</a>
		<haxe_doc>*  https://help.shopify.com/en/api/reference/shopify_payments/dispute</haxe_doc>
	</typedef>
	<abstract path="hxTShopify.t.DisputeType" params="" file="src/hxTShopify/t/Dispute.hx" module="hxTShopify.t.Dispute">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.t._Dispute.DisputeType_Impl_" params="" file="src/hxTShopify/t/Dispute.hx" private="1" module="hxTShopify.t.Dispute" extern="1" final="1">
	<inquiry public="1" get="inline" set="null" expr="cast &quot;inquiry&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeType"/>
		<meta>
			<m n=":value"><e>cast "inquiry"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</inquiry>
	<chargeback public="1" get="inline" set="null" expr="cast &quot;chargeback&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeType"/>
		<meta>
			<m n=":value"><e>cast "chargeback"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</chargeback>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Dispute.DisputeType_Impl_" params="" file="src/hxTShopify/t/Dispute.hx" private="1" module="hxTShopify.t.Dispute" extern="1" final="1">
		<inquiry public="1" get="inline" set="null" expr="cast &quot;inquiry&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeType"/>
			<meta>
				<m n=":value"><e>cast "inquiry"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</inquiry>
		<chargeback public="1" get="inline" set="null" expr="cast &quot;chargeback&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeType"/>
			<meta>
				<m n=":value"><e>cast "chargeback"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</chargeback>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxTShopify.t.DisputeReason" params="" file="src/hxTShopify/t/Dispute.hx" module="hxTShopify.t.Dispute">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.t._Dispute.DisputeReason_Impl_" params="" file="src/hxTShopify/t/Dispute.hx" private="1" module="hxTShopify.t.Dispute" extern="1" final="1">
	<bank_not_process public="1" get="inline" set="null" expr="cast &quot;bank_not_process&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "bank_not_process"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</bank_not_process>
	<credit_not_processed public="1" get="inline" set="null" expr="cast &quot;credit_not_processed&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "credit_not_processed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</credit_not_processed>
	<customer_initiated public="1" get="inline" set="null" expr="cast &quot;customer_initiated&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "customer_initiated"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</customer_initiated>
	<debit_not_authorized public="1" get="inline" set="null" expr="cast &quot;debit_not_authorized&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "debit_not_authorized"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</debit_not_authorized>
	<duplicate public="1" get="inline" set="null" expr="cast &quot;duplicate&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "duplicate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</duplicate>
	<fraudulent public="1" get="inline" set="null" expr="cast &quot;fraudulent&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "fraudulent"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</fraudulent>
	<general public="1" get="inline" set="null" expr="cast &quot;general&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "general"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</general>
	<incorrect_account_details public="1" get="inline" set="null" expr="cast &quot;incorrect_account_details&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "incorrect_account_details"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</incorrect_account_details>
	<insufficient_funds public="1" get="inline" set="null" expr="cast &quot;insufficient_funds&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "insufficient_funds"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</insufficient_funds>
	<product_not_received public="1" get="inline" set="null" expr="cast &quot;product_not_received&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "product_not_received"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</product_not_received>
	<product_unacceptable public="1" get="inline" set="null" expr="cast &quot;product_unacceptable&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "product_unacceptable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</product_unacceptable>
	<subscription_cancelled public="1" get="inline" set="null" expr="cast &quot;subscription_cancelled&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "subscription_cancelled"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</subscription_cancelled>
	<unrecognized public="1" get="inline" set="null" expr="cast &quot;unrecognized&quot;" line="1" static="1">
		<x path="hxTShopify.t.DisputeReason"/>
		<meta>
			<m n=":value"><e>cast "unrecognized"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</unrecognized>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Dispute.DisputeReason_Impl_" params="" file="src/hxTShopify/t/Dispute.hx" private="1" module="hxTShopify.t.Dispute" extern="1" final="1">
		<bank_not_process public="1" get="inline" set="null" expr="cast &quot;bank_not_process&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "bank_not_process"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</bank_not_process>
		<credit_not_processed public="1" get="inline" set="null" expr="cast &quot;credit_not_processed&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "credit_not_processed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</credit_not_processed>
		<customer_initiated public="1" get="inline" set="null" expr="cast &quot;customer_initiated&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "customer_initiated"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</customer_initiated>
		<debit_not_authorized public="1" get="inline" set="null" expr="cast &quot;debit_not_authorized&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "debit_not_authorized"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</debit_not_authorized>
		<duplicate public="1" get="inline" set="null" expr="cast &quot;duplicate&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "duplicate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</duplicate>
		<fraudulent public="1" get="inline" set="null" expr="cast &quot;fraudulent&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "fraudulent"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</fraudulent>
		<general public="1" get="inline" set="null" expr="cast &quot;general&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "general"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</general>
		<incorrect_account_details public="1" get="inline" set="null" expr="cast &quot;incorrect_account_details&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "incorrect_account_details"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</incorrect_account_details>
		<insufficient_funds public="1" get="inline" set="null" expr="cast &quot;insufficient_funds&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "insufficient_funds"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</insufficient_funds>
		<product_not_received public="1" get="inline" set="null" expr="cast &quot;product_not_received&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "product_not_received"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</product_not_received>
		<product_unacceptable public="1" get="inline" set="null" expr="cast &quot;product_unacceptable&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "product_unacceptable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</product_unacceptable>
		<subscription_cancelled public="1" get="inline" set="null" expr="cast &quot;subscription_cancelled&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "subscription_cancelled"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</subscription_cancelled>
		<unrecognized public="1" get="inline" set="null" expr="cast &quot;unrecognized&quot;" line="1" static="1">
			<x path="hxTShopify.t.DisputeReason"/>
			<meta>
				<m n=":value"><e>cast "unrecognized"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</unrecognized>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="hxTShopify.t.Disputes" params="" file="src/hxTShopify/t/Disputes.hx"><a><disputes><c path="Array"><t path="hxTShopify.t.Dispute"/></c></disputes></a></typedef>
	<typedef path="hxTShopify.t.Image" params="" file="src/hxTShopify/t/Image.hx"><a>
	<width><x path="Int"/></width>
	<updated_at>
		<x path="Null"><x path="hxTShopify.t.StringDate"/></x>
		<meta><m n=":optional"/></meta>
	</updated_at>
	<src><c path="String"/></src>
	<product_id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</product_id>
	<position><x path="Int"/></position>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<height><x path="Int"/></height>
	<created_at>
		<x path="Null"><x path="hxTShopify.t.StringDate"/></x>
		<meta><m n=":optional"/></meta>
	</created_at>
	<alt><c path="String"/></alt>
	<admin_graphjl_api_id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</admin_graphjl_api_id>
</a></typedef>
	<abstract path="hxTShopify.t.ImageWrapper" params="" file="src/hxTShopify/t/Image.hx" module="hxTShopify.t.Image">
		<this><t path="hxTShopify.t.Image"/></this>
		<to><icast><t path="hxTShopify.t.Image"/></icast></to>
		<impl><class path="hxTShopify.t._Image.ImageWrapper_Impl_" params="" file="src/hxTShopify/t/Image.hx" private="1" module="hxTShopify.t.Image" final="1"><_new public="1" get="inline" set="null" line="16" static="1">
	<f a="img">
		<t path="hxTShopify.t.Image"/>
		<x path="hxTShopify.t.ImageWrapper"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="hxTShopify.t._Image.ImageWrapper_Impl_" params="" file="src/hxTShopify/t/Image.hx" private="1" module="hxTShopify.t.Image" final="1"><_new public="1" get="inline" set="null" line="16" static="1">
	<f a="img">
		<t path="hxTShopify.t.Image"/>
		<x path="hxTShopify.t.ImageWrapper"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="hxTShopify.t.ImageCloner" params="" file="src/hxTShopify/t/Image.hx" module="hxTShopify.t.Image">
		<from><icast field="fromImage"><t path="hxTShopify.t.Image"/></icast></from>
		<this><t path="hxTShopify.t.Image"/></this>
		<to><icast><t path="hxTShopify.t.Image"/></icast></to>
		<impl><class path="hxTShopify.t._Image.ImageCloner_Impl_" params="" file="src/hxTShopify/t/Image.hx" private="1" module="hxTShopify.t.Image" final="1">
	<_new public="1" get="inline" set="null" line="24" static="1">
		<f a="i">
			<t path="hxTShopify.t.Image"/>
			<x path="hxTShopify.t.ImageCloner"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromImage public="1" get="inline" set="null" line="33" static="1">
		<f a="i">
			<t path="hxTShopify.t.Image"/>
			<x path="hxTShopify.t.ImageCloner"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromImage>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Image.ImageCloner_Impl_" params="" file="src/hxTShopify/t/Image.hx" private="1" module="hxTShopify.t.Image" final="1">
		<_new public="1" get="inline" set="null" line="24" static="1">
			<f a="i">
				<t path="hxTShopify.t.Image"/>
				<x path="hxTShopify.t.ImageCloner"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromImage public="1" get="inline" set="null" line="33" static="1">
			<f a="i">
				<t path="hxTShopify.t.Image"/>
				<x path="hxTShopify.t.ImageCloner"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromImage>
	</class>
	<typedef path="hxTShopify.t.Inventory" params="" file="src/hxTShopify/t/Inventory.hx"><a>
	<updated_at><x path="hxTShopify.t.StringDate"/></updated_at>
	<tracked><x path="Bool"/></tracked>
	<sku><c path="String"/></sku>
	<requires_shipping><x path="Bool"/></requires_shipping>
	<id><x path="Int"/></id>
	<created_at><x path="hxTShopify.t.StringDate"/></created_at>
	<cost><x path="Float"/></cost>
	<admin_graphql_api_id><c path="String"/></admin_graphql_api_id>
</a></typedef>
	<typedef path="hxTShopify.t.Inventorys" params="" file="src/hxTShopify/t/Inventorys.hx"><a><inventory><c path="Array"><t path="hxTShopify.t.Inventory"/></c></inventory></a></typedef>
	<typedef path="hxTShopify.t.LineItem" params="" file="src/hxTShopify/t/LineItem.hx"><a>
	<vendor><c path="String"/></vendor>
	<variant_title><c path="String"/></variant_title>
	<variant_inventory_management><c path="String"/></variant_inventory_management>
	<variant_id><x path="Int"/></variant_id>
	<total_discount_set><t path="hxTShopify.t.PriceSet"/></total_discount_set>
	<total_discount><x path="Float"/></total_discount>
	<title><c path="String"/></title>
	<taxable><x path="Bool"/></taxable>
	<tax_lines><c path="Array"><t path="hxTShopify.t.TaxLines"/></c></tax_lines>
	<sku><c path="String"/></sku>
	<shipping_lines><c path="Array"><c path="String"/></c></shipping_lines>
	<shipping_address><t path="hxTShopify.t.Address"/></shipping_address>
	<requires_shipping><x path="Bool"/></requires_shipping>
	<refunds><c path="Array"><c path="String"/></c></refunds>
	<quantity><x path="Int"/></quantity>
	<properties><c path="String"/></properties>
	<product_id><x path="Int"/></product_id>
	<product_exists><x path="Bool"/></product_exists>
	<price_set><t path="hxTShopify.t.PriceSet"/></price_set>
	<price><x path="Float"/></price>
	<origin_location><t path="hxTShopify.t.OriginLocation"/></origin_location>
	<name><c path="String"/></name>
	<id><x path="Int"/></id>
	<grams><x path="Float"/></grams>
	<gift_card><x path="Bool"/></gift_card>
	<fulfillments><c path="Array"><c path="String"/></c></fulfillments>
	<fulfillment_status><x path="Null"><c path="String"/></x></fulfillment_status>
	<fulfillment_service><c path="String"/></fulfillment_service>
	<fulfillable_quantity><x path="Int"/></fulfillable_quantity>
	<discount_allocations><c path="Array"><c path="String"/></c></discount_allocations>
	<customer><t path="hxTShopify.t.Customer"/></customer>
	<billing_address><t path="hxTShopify.t.Address"/></billing_address>
	<admin_graphql_api_id><c path="String"/></admin_graphql_api_id>
</a></typedef>
	<typedef path="hxTShopify.t.MetaField" params="" file="src/hxTShopify/t/MetaField.hx"><a>
	<value_type><c path="String"/></value_type>
	<value><c path="String"/></value>
	<updated_at>
		<x path="Null"><x path="hxTShopify.t.StringDate"/></x>
		<meta><m n=":optional"/></meta>
	</updated_at>
	<owner_resource>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</owner_resource>
	<owner_id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</owner_id>
	<namespace><c path="String"/></namespace>
	<key><c path="String"/></key>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<description>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</description>
	<created_at>
		<x path="Null"><x path="hxTShopify.t.StringDate"/></x>
		<meta><m n=":optional"/></meta>
	</created_at>
	<admin_graphql_api_id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</admin_graphql_api_id>
</a></typedef>
	<typedef path="hxTShopify.t.Money" params="" file="src/hxTShopify/t/Money.hx"><a>
	<currency_code><x path="hxTShopify.t.CurrencyType"/></currency_code>
	<amount><x path="Float"/></amount>
</a></typedef>
	<typedef path="hxTShopify.t.Option" params="" file="src/hxTShopify/t/Option.hx"><a>
	<values><c path="Array"><c path="String"/></c></values>
	<product_id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</product_id>
	<position>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</position>
	<name><c path="String"/></name>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
</a></typedef>
	<abstract path="hxTShopify.t.OptionWrapper" params="" file="src/hxTShopify/t/Option.hx" module="hxTShopify.t.Option">
		<this><t path="hxTShopify.t.Option"/></this>
		<to><icast><t path="hxTShopify.t.Option"/></icast></to>
		<impl><class path="hxTShopify.t._Option.OptionWrapper_Impl_" params="" file="src/hxTShopify/t/Option.hx" private="1" module="hxTShopify.t.Option" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="op">
		<t path="hxTShopify.t.Option"/>
		<x path="hxTShopify.t.OptionWrapper"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="hxTShopify.t._Option.OptionWrapper_Impl_" params="" file="src/hxTShopify/t/Option.hx" private="1" module="hxTShopify.t.Option" final="1"><_new public="1" get="inline" set="null" line="10" static="1">
	<f a="op">
		<t path="hxTShopify.t.Option"/>
		<x path="hxTShopify.t.OptionWrapper"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="hxTShopify.t.OptionCloner" params="" file="src/hxTShopify/t/Option.hx" module="hxTShopify.t.Option">
		<from><icast field="fromOption"><t path="hxTShopify.t.Option"/></icast></from>
		<this><t path="hxTShopify.t.Option"/></this>
		<to><icast><t path="hxTShopify.t.Option"/></icast></to>
		<impl><class path="hxTShopify.t._Option.OptionCloner_Impl_" params="" file="src/hxTShopify/t/Option.hx" private="1" module="hxTShopify.t.Option" final="1">
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="o">
			<t path="hxTShopify.t.Option"/>
			<x path="hxTShopify.t.OptionCloner"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromOption public="1" get="inline" set="null" line="28" static="1">
		<f a="o">
			<t path="hxTShopify.t.Option"/>
			<x path="hxTShopify.t.OptionCloner"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromOption>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Option.OptionCloner_Impl_" params="" file="src/hxTShopify/t/Option.hx" private="1" module="hxTShopify.t.Option" final="1">
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="o">
				<t path="hxTShopify.t.Option"/>
				<x path="hxTShopify.t.OptionCloner"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromOption public="1" get="inline" set="null" line="28" static="1">
			<f a="o">
				<t path="hxTShopify.t.Option"/>
				<x path="hxTShopify.t.OptionCloner"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromOption>
	</class>
	<typedef path="hxTShopify.t.Order" params="" file="src/hxTShopify/t/Order.hx"><a>
	<user_id><x path="Null"><c path="String"/></x></user_id>
	<updated_at><x path="hxTShopify.t.StringDate"/></updated_at>
	<total_weight><x path="Int"/></total_weight>
	<total_tip_received><x path="Float"/></total_tip_received>
	<total_tax_set><t path="hxTShopify.t.PriceSet"/></total_tax_set>
	<total_tax><x path="Float"/></total_tax>
	<total_shipping_price_set><t path="hxTShopify.t.PriceSet"/></total_shipping_price_set>
	<total_price_usd><x path="Float"/></total_price_usd>
	<total_price_set><t path="hxTShopify.t.PriceSet"/></total_price_set>
	<total_price><x path="Float"/></total_price>
	<total_line_items_price_set><t path="hxTShopify.t.PriceSet"/></total_line_items_price_set>
	<total_line_items_price><x path="Float"/></total_line_items_price>
	<total_discounts_set><t path="hxTShopify.t.PriceSet"/></total_discounts_set>
	<total_discounts><x path="Float"/></total_discounts>
	<token><c path="String"/></token>
	<test><x path="Bool"/></test>
	<taxes_included><x path="Float"/></taxes_included>
	<tax_lines><c path="Array"><t path="hxTShopify.t.TaxLines"/></c></tax_lines>
	<tags><c path="String"/></tags>
	<subtotal_price_set><t path="hxTShopify.t.PriceSet"/></subtotal_price_set>
	<subtotal_price><x path="Float"/></subtotal_price>
	<source_url><x path="Null"><c path="String"/></x></source_url>
	<source_name><c path="String"/></source_name>
	<source_identifier><x path="Null"><c path="String"/></x></source_identifier>
	<referring_site><c path="String"/></referring_site>
	<reference><x path="Null"><c path="String"/></x></reference>
	<processing_method><c path="String"/></processing_method>
	<processed_at><x path="hxTShopify.t.StringDate"/></processed_at>
	<presentment_currency><x path="hxTShopify.t.CurrencyType"/></presentment_currency>
	<phone><x path="Null"><c path="String"/></x></phone>
	<payment_gateway_names><c path="Array"><c path="String"/></c></payment_gateway_names>
	<order_status_url><c path="String"/></order_status_url>
	<order_number><x path="Int"/></order_number>
	<number><x path="Int"/></number>
	<note_attributes><c path="Array"><c path="String"/></c></note_attributes>
	<note><c path="String"/></note>
	<name><c path="String"/></name>
	<location_id><x path="Null"><c path="String"/></x></location_id>
	<line_items><c path="Array"><t path="hxTShopify.t.LineItem"/></c></line_items>
	<landing_site_ref><x path="Null"><c path="String"/></x></landing_site_ref>
	<landing_site><c path="String"/></landing_site>
	<id><c path="String"/></id>
	<gateway><c path="String"/></gateway>
	<fulfillment_status><x path="Null"><c path="String"/></x></fulfillment_status>
	<financial_status><c path="String"/></financial_status>
	<email><c path="String"/></email>
	<discount_codes><c path="Array"><c path="String"/></c></discount_codes>
	<discount_applications><c path="Array"><c path="String"/></c></discount_applications>
	<device_id><x path="Null"><c path="String"/></x></device_id>
	<customer_locale><c path="String"/></customer_locale>
	<currency><c path="String"/></currency>
	<created_at><x path="hxTShopify.t.StringDate"/></created_at>
	<contact_email><c path="String"/></contact_email>
	<confirmed><x path="Bool"/></confirmed>
	<closed_at><x path="Null"><c path="String"/></x></closed_at>
	<checkout_token><c path="String"/></checkout_token>
	<checkout_id><x path="Int"/></checkout_id>
	<cart_token><c path="String"/></cart_token>
	<cancelled_at><x path="Null"><c path="String"/></x></cancelled_at>
	<cancel_reason><x path="Null"><c path="String"/></x></cancel_reason>
	<buyer_accepts_marketing><x path="Bool"/></buyer_accepts_marketing>
	<browser_ip><x path="Null"><c path="String"/></x></browser_ip>
	<app_id><x path="Int"/></app_id>
	<admin_graphql_api_id><c path="String"/></admin_graphql_api_id>
</a></typedef>
	<typedef path="hxTShopify.t.Orders" params="" file="src/hxTShopify/t/Orders.hx"><a><orders><c path="Array"><t path="hxTShopify.t.Order"/></c></orders></a></typedef>
	<typedef path="hxTShopify.t.OriginLocation" params="" file="src/hxTShopify/t/OriginLocation.hx"><a>
	<zip><c path="String"/></zip>
	<province_code><c path="String"/></province_code>
	<name><c path="String"/></name>
	<id><x path="Int"/></id>
	<country_code><c path="String"/></country_code>
	<city><c path="String"/></city>
	<address2><c path="String"/></address2>
	<address1><c path="String"/></address1>
</a></typedef>
	<abstract path="hxTShopify.t.PayoutStatus" params="" file="src/hxTShopify/t/Payout.hx" module="hxTShopify.t.Payout">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.t._Payout.PayoutStatus_Impl_" params="" file="src/hxTShopify/t/Payout.hx" private="1" module="hxTShopify.t.Payout" extern="1" final="1">
	<scheduled public="1" get="inline" set="null" expr="cast &quot;scheduled&quot;" line="1" static="1">
		<x path="hxTShopify.t.PayoutStatus"/>
		<meta>
			<m n=":value"><e>cast "scheduled"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</scheduled>
	<in_transit public="1" get="inline" set="null" expr="cast &quot;in_transit&quot;" line="1" static="1">
		<x path="hxTShopify.t.PayoutStatus"/>
		<meta>
			<m n=":value"><e>cast "in_transit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</in_transit>
	<paid public="1" get="inline" set="null" expr="cast &quot;paid&quot;" line="1" static="1">
		<x path="hxTShopify.t.PayoutStatus"/>
		<meta>
			<m n=":value"><e>cast "paid"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</paid>
	<failed public="1" get="inline" set="null" expr="cast &quot;failed&quot;" line="1" static="1">
		<x path="hxTShopify.t.PayoutStatus"/>
		<meta>
			<m n=":value"><e>cast "failed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</failed>
	<canceled public="1" get="inline" set="null" expr="cast &quot;canceled&quot;" line="1" static="1">
		<x path="hxTShopify.t.PayoutStatus"/>
		<meta>
			<m n=":value"><e>cast "canceled"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</canceled>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Payout.PayoutStatus_Impl_" params="" file="src/hxTShopify/t/Payout.hx" private="1" module="hxTShopify.t.Payout" extern="1" final="1">
		<scheduled public="1" get="inline" set="null" expr="cast &quot;scheduled&quot;" line="1" static="1">
			<x path="hxTShopify.t.PayoutStatus"/>
			<meta>
				<m n=":value"><e>cast "scheduled"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</scheduled>
		<in_transit public="1" get="inline" set="null" expr="cast &quot;in_transit&quot;" line="1" static="1">
			<x path="hxTShopify.t.PayoutStatus"/>
			<meta>
				<m n=":value"><e>cast "in_transit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</in_transit>
		<paid public="1" get="inline" set="null" expr="cast &quot;paid&quot;" line="1" static="1">
			<x path="hxTShopify.t.PayoutStatus"/>
			<meta>
				<m n=":value"><e>cast "paid"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</paid>
		<failed public="1" get="inline" set="null" expr="cast &quot;failed&quot;" line="1" static="1">
			<x path="hxTShopify.t.PayoutStatus"/>
			<meta>
				<m n=":value"><e>cast "failed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</failed>
		<canceled public="1" get="inline" set="null" expr="cast &quot;canceled&quot;" line="1" static="1">
			<x path="hxTShopify.t.PayoutStatus"/>
			<meta>
				<m n=":value"><e>cast "canceled"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</canceled>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="hxTShopify.t.Payout" params="" file="src/hxTShopify/t/Payout.hx"><a>
	<summary><t path="hxTShopify.t.Summary"/></summary>
	<status><x path="hxTShopify.t.PayoutStatus"/></status>
	<id><x path="Int"/></id>
	<date><x path="hxTShopify.t.StringDate"/></date>
	<currency><x path="hxTShopify.t.CurrencyType"/></currency>
	<amount><x path="Float"/></amount>
</a></typedef>
	<typedef path="hxTShopify.t.Payouts" params="" file="src/hxTShopify/t/Payouts.hx"><a><payouts><c path="Array"><t path="hxTShopify.t.Payout"/></c></payouts></a></typedef>
	<typedef path="hxTShopify.t.PriceSet" params="" file="src/hxTShopify/t/PriceSet.hx"><a>
	<shop_money><t path="hxTShopify.t.Money"/></shop_money>
	<presentment_money><t path="hxTShopify.t.Money"/></presentment_money>
</a></typedef>
	<typedef path="hxTShopify.t.Product" params="" file="src/hxTShopify/t/Product.hx"><a>
	<vendor><c path="String"/></vendor>
	<variants><c path="Array"><t path="hxTShopify.t.Variant"/></c></variants>
	<updated_at>
		<x path="Null"><x path="hxTShopify.t.StringDate"/></x>
		<meta><m n=":optional"/></meta>
	</updated_at>
	<title><c path="String"/></title>
	<template_suffix>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</template_suffix>
	<tags><c path="Array"><c path="String"/></c></tags>
	<published_scope><c path="String"/></published_scope>
	<published_at>
		<x path="Null"><x path="hxTShopify.t.StringDate"/></x>
		<meta><m n=":optional"/></meta>
	</published_at>
	<product_type><c path="String"/></product_type>
	<options><c path="Array"><t path="hxTShopify.t.Option"/></c></options>
	<images><c path="Array"><t path="hxTShopify.t.Image"/></c></images>
	<image><t path="hxTShopify.t.Image"/></image>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<handle><c path="String"/></handle>
	<created_at>
		<x path="Null"><x path="hxTShopify.t.StringDate"/></x>
		<meta><m n=":optional"/></meta>
	</created_at>
	<body_html><c path="String"/></body_html>
	<admin_graphql_api_id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</admin_graphql_api_id>
</a></typedef>
	<abstract path="hxTShopify.t.ProductWrapper" params="" file="src/hxTShopify/t/Product.hx" module="hxTShopify.t.Product">
		<this><t path="hxTShopify.t.Product"/></this>
		<to><icast><t path="hxTShopify.t.Product"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="hxTShopify.t._Product.ProductWrapper_Impl_" params="" file="src/hxTShopify/t/Product.hx" private="1" module="hxTShopify.t.Product" final="1">
	<_new public="1" get="inline" set="null" line="29" static="1">
		<f a="p">
			<t path="hxTShopify.t.Product"/>
			<x path="hxTShopify.t.ProductWrapper"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<toJsonString public="1" get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="hxTShopify.t.Product"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toJsonString>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Product.ProductWrapper_Impl_" params="" file="src/hxTShopify/t/Product.hx" private="1" module="hxTShopify.t.Product" final="1">
		<_new public="1" get="inline" set="null" line="29" static="1">
			<f a="p">
				<t path="hxTShopify.t.Product"/>
				<x path="hxTShopify.t.ProductWrapper"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<toJsonString public="1" get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="hxTShopify.t.Product"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toJsonString>
	</class>
	<abstract path="hxTShopify.t.ProductCloner" params="" file="src/hxTShopify/t/Product.hx" module="hxTShopify.t.Product">
		<from><icast field="fromProduct"><t path="hxTShopify.t.Product"/></icast></from>
		<this><t path="hxTShopify.t.Product"/></this>
		<to><icast><t path="hxTShopify.t.Product"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="hxTShopify.t._Product.ProductCloner_Impl_" params="" file="src/hxTShopify/t/Product.hx" private="1" module="hxTShopify.t.Product" final="1">
	<_new public="1" get="inline" set="null" line="43" static="1">
		<f a="p">
			<t path="hxTShopify.t.Product"/>
			<x path="hxTShopify.t.ProductCloner"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<withNewPrice public="1" get="inline" set="null" line="68" static="1"><f a="p0:price">
	<t path="hxTShopify.t.Product"/>
	<x path="Float"/>
	<x path="hxTShopify.t.ProductCloner"/>
</f></withNewPrice>
	<withChanges public="1" get="inline" set="null" line="74" static="1"><f a="p0:productTransformation:variantTransformation">
	<t path="hxTShopify.t.Product"/>
	<f a="">
		<t path="hxTShopify.t.Product"/>
		<t path="hxTShopify.t.Product"/>
	</f>
	<f a=":">
		<t path="hxTShopify.t.Variant"/>
		<t path="hxTShopify.t.Variant"/>
		<t path="hxTShopify.t.Variant"/>
	</f>
	<t path="hxTShopify.t.Product"/>
</f></withChanges>
	<fromProduct public="1" get="inline" set="null" line="84" static="1">
		<f a="p">
			<t path="hxTShopify.t.Product"/>
			<x path="hxTShopify.t.ProductCloner"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromProduct>
	<toJsonString public="1" get="inline" set="null" line="85" static="1">
		<f a="this">
			<t path="hxTShopify.t.Product"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toJsonString>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Product.ProductCloner_Impl_" params="" file="src/hxTShopify/t/Product.hx" private="1" module="hxTShopify.t.Product" final="1">
		<_new public="1" get="inline" set="null" line="43" static="1">
			<f a="p">
				<t path="hxTShopify.t.Product"/>
				<x path="hxTShopify.t.ProductCloner"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<withNewPrice public="1" get="inline" set="null" line="68" static="1"><f a="p0:price">
	<t path="hxTShopify.t.Product"/>
	<x path="Float"/>
	<x path="hxTShopify.t.ProductCloner"/>
</f></withNewPrice>
		<withChanges public="1" get="inline" set="null" line="74" static="1"><f a="p0:productTransformation:variantTransformation">
	<t path="hxTShopify.t.Product"/>
	<f a="">
		<t path="hxTShopify.t.Product"/>
		<t path="hxTShopify.t.Product"/>
	</f>
	<f a=":">
		<t path="hxTShopify.t.Variant"/>
		<t path="hxTShopify.t.Variant"/>
		<t path="hxTShopify.t.Variant"/>
	</f>
	<t path="hxTShopify.t.Product"/>
</f></withChanges>
		<fromProduct public="1" get="inline" set="null" line="84" static="1">
			<f a="p">
				<t path="hxTShopify.t.Product"/>
				<x path="hxTShopify.t.ProductCloner"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromProduct>
		<toJsonString public="1" get="inline" set="null" line="85" static="1">
			<f a="this">
				<t path="hxTShopify.t.Product"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toJsonString>
	</class>
	<typedef path="hxTShopify.t.ProductHolder" params="" file="src/hxTShopify/t/ProductHolder.hx"><a><product><t path="hxTShopify.t.Product"/></product></a></typedef>
	<typedef path="hxTShopify.t.Products" params="" file="src/hxTShopify/t/Products.hx"><a><products><c path="Array"><t path="hxTShopify.t.Product"/></c></products></a></typedef>
	<abstract path="hxTShopify.t.ShopifyDate" params="" file="src/hxTShopify/t/ShopifyDate.hx">
		<from>
			<icast><c path="Date"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><c path="Date"/></this>
		<to><icast><c path="Date"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="hxTShopify.t._ShopifyDate.ShopifyDate_Impl_" params="" file="src/hxTShopify/t/ShopifyDate.hx" private="1" module="hxTShopify.t.ShopifyDate" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="d">
			<c path="Date"/>
			<x path="hxTShopify.t.ShopifyDate"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromString public="1" set="method" line="8" static="1">
		<f a="s">
			<c path="String"/>
			<x path="hxTShopify.t.ShopifyDate"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<parseInt public="1" set="method" line="26" static="1">
		<f a="str">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
	</parseInt>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._ShopifyDate.ShopifyDate_Impl_" params="" file="src/hxTShopify/t/ShopifyDate.hx" private="1" module="hxTShopify.t.ShopifyDate" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="hxTShopify.t.ShopifyDate"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromString public="1" set="method" line="8" static="1">
			<f a="s">
				<c path="String"/>
				<x path="hxTShopify.t.ShopifyDate"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<parseInt public="1" set="method" line="26" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</parseInt>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxTShopify.t.StringDate" params="" file="src/hxTShopify/t/StringDate.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to>
			<icast><c path="String"/></icast>
			<icast field="toShopifyDate"><x path="hxTShopify.t.ShopifyDate"/></icast>
			<icast field="toDate"><c path="Date"/></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="hxTShopify.t._StringDate.StringDate_Impl_" params="" file="src/hxTShopify/t/StringDate.hx" private="1" module="hxTShopify.t.StringDate" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="s">
			<c path="String"/>
			<x path="hxTShopify.t.StringDate"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<toShopifyDate public="1" get="inline" set="null" line="8" static="1">
		<f a="this">
			<c path="String"/>
			<x path="hxTShopify.t.ShopifyDate"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toShopifyDate>
	<toDate public="1" get="inline" set="null" line="13" static="1">
		<f a="this">
			<c path="String"/>
			<c path="Date"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toDate>
	<getEnglishDate public="1" get="inline" set="null" line="18" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getEnglishDate>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._StringDate.StringDate_Impl_" params="" file="src/hxTShopify/t/StringDate.hx" private="1" module="hxTShopify.t.StringDate" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="s">
				<c path="String"/>
				<x path="hxTShopify.t.StringDate"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<toShopifyDate public="1" get="inline" set="null" line="8" static="1">
			<f a="this">
				<c path="String"/>
				<x path="hxTShopify.t.ShopifyDate"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toShopifyDate>
		<toDate public="1" get="inline" set="null" line="13" static="1">
			<f a="this">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toDate>
		<getEnglishDate public="1" get="inline" set="null" line="18" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getEnglishDate>
	</class>
	<typedef path="hxTShopify.t.Summary" params="" file="src/hxTShopify/t/Summary.hx"><a>
	<retried_payouts_gross_amount><x path="Float"/></retried_payouts_gross_amount>
	<retried_payouts_fee_amount><x path="Float"/></retried_payouts_fee_amount>
	<reserved_funds_gross_amount><x path="Float"/></reserved_funds_gross_amount>
	<reserved_funds_fee_amount><x path="Float"/></reserved_funds_fee_amount>
	<refunds_gross_amount><x path="Float"/></refunds_gross_amount>
	<refunds_fee_amount><x path="Float"/></refunds_fee_amount>
	<charges_gross_amount><x path="Float"/></charges_gross_amount>
	<charges_fee_amount><x path="Float"/></charges_fee_amount>
	<adjustments_gross_amount><x path="Float"/></adjustments_gross_amount>
	<adjustments_fee_amount><x path="Float"/></adjustments_fee_amount>
</a></typedef>
	<typedef path="hxTShopify.t.TaxLines" params="" file="src/hxTShopify/t/TaxLines.hx"><a>
	<title><c path="String"/></title>
	<rate><x path="Float"/></rate>
	<price_set><t path="hxTShopify.t.PriceSet"/></price_set>
	<price><x path="Float"/></price>
</a></typedef>
	<typedef path="hxTShopify.t.Token" params="" file="src/hxTShopify/t/Token.hx"><a>
	<title><c path="String"/></title>
	<id><x path="Int"/></id>
	<created_at><x path="hxTShopify.t.StringDate"/></created_at>
	<admin_graphql_api_id><c path="String"/></admin_graphql_api_id>
	<access_token><c path="String"/></access_token>
	<access_scope><c path="String"/></access_scope>
</a></typedef>
	<typedef path="hxTShopify.t.Tokens" params="" file="src/hxTShopify/t/Tokens.hx"><a><storefront_access_tokens><c path="Array"><t path="hxTShopify.t.Token"/></c></storefront_access_tokens></a></typedef>
	<abstract path="hxTShopify.t.TransactionType" params="" file="src/hxTShopify/t/Transaction.hx" module="hxTShopify.t.Transaction">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.t._Transaction.TransactionType_Impl_" params="" file="src/hxTShopify/t/Transaction.hx" private="1" module="hxTShopify.t.Transaction" extern="1" final="1">
	<charge public="1" get="inline" set="null" expr="cast &quot;charge&quot;" line="1" static="1">
		<x path="hxTShopify.t.TransactionType"/>
		<meta>
			<m n=":value"><e>cast "charge"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</charge>
	<refund public="1" get="inline" set="null" expr="cast &quot;refund&quot;" line="1" static="1">
		<x path="hxTShopify.t.TransactionType"/>
		<meta>
			<m n=":value"><e>cast "refund"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</refund>
	<dispute public="1" get="inline" set="null" expr="cast &quot;dispute&quot;" line="1" static="1">
		<x path="hxTShopify.t.TransactionType"/>
		<meta>
			<m n=":value"><e>cast "dispute"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</dispute>
	<reserve public="1" get="inline" set="null" expr="cast &quot;reserve&quot;" line="1" static="1">
		<x path="hxTShopify.t.TransactionType"/>
		<meta>
			<m n=":value"><e>cast "reserve"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</reserve>
	<adjustment public="1" get="inline" set="null" expr="cast &quot;adjustment&quot;" line="1" static="1">
		<x path="hxTShopify.t.TransactionType"/>
		<meta>
			<m n=":value"><e>cast "adjustment"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</adjustment>
	<credit public="1" get="inline" set="null" expr="cast &quot;credit&quot;" line="1" static="1">
		<x path="hxTShopify.t.TransactionType"/>
		<meta>
			<m n=":value"><e>cast "credit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</credit>
	<debit public="1" get="inline" set="null" expr="cast &quot;debit&quot;" line="1" static="1">
		<x path="hxTShopify.t.TransactionType"/>
		<meta>
			<m n=":value"><e>cast "debit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</debit>
	<payout public="1" get="inline" set="null" expr="cast &quot;payout&quot;" line="1" static="1">
		<x path="hxTShopify.t.TransactionType"/>
		<meta>
			<m n=":value"><e>cast "payout"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</payout>
	<payout_failure public="1" get="inline" set="null" expr="cast &quot;payout_failure&quot;" line="1" static="1">
		<x path="hxTShopify.t.TransactionType"/>
		<meta>
			<m n=":value"><e>cast "payout_failure"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</payout_failure>
	<payout_cancellation public="1" get="inline" set="null" expr="cast &quot;payout_cancellation&quot;" line="1" static="1">
		<x path="hxTShopify.t.TransactionType"/>
		<meta>
			<m n=":value"><e>cast "payout_cancellation"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</payout_cancellation>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Transaction.TransactionType_Impl_" params="" file="src/hxTShopify/t/Transaction.hx" private="1" module="hxTShopify.t.Transaction" extern="1" final="1">
		<charge public="1" get="inline" set="null" expr="cast &quot;charge&quot;" line="1" static="1">
			<x path="hxTShopify.t.TransactionType"/>
			<meta>
				<m n=":value"><e>cast "charge"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</charge>
		<refund public="1" get="inline" set="null" expr="cast &quot;refund&quot;" line="1" static="1">
			<x path="hxTShopify.t.TransactionType"/>
			<meta>
				<m n=":value"><e>cast "refund"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</refund>
		<dispute public="1" get="inline" set="null" expr="cast &quot;dispute&quot;" line="1" static="1">
			<x path="hxTShopify.t.TransactionType"/>
			<meta>
				<m n=":value"><e>cast "dispute"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</dispute>
		<reserve public="1" get="inline" set="null" expr="cast &quot;reserve&quot;" line="1" static="1">
			<x path="hxTShopify.t.TransactionType"/>
			<meta>
				<m n=":value"><e>cast "reserve"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</reserve>
		<adjustment public="1" get="inline" set="null" expr="cast &quot;adjustment&quot;" line="1" static="1">
			<x path="hxTShopify.t.TransactionType"/>
			<meta>
				<m n=":value"><e>cast "adjustment"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</adjustment>
		<credit public="1" get="inline" set="null" expr="cast &quot;credit&quot;" line="1" static="1">
			<x path="hxTShopify.t.TransactionType"/>
			<meta>
				<m n=":value"><e>cast "credit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</credit>
		<debit public="1" get="inline" set="null" expr="cast &quot;debit&quot;" line="1" static="1">
			<x path="hxTShopify.t.TransactionType"/>
			<meta>
				<m n=":value"><e>cast "debit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</debit>
		<payout public="1" get="inline" set="null" expr="cast &quot;payout&quot;" line="1" static="1">
			<x path="hxTShopify.t.TransactionType"/>
			<meta>
				<m n=":value"><e>cast "payout"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</payout>
		<payout_failure public="1" get="inline" set="null" expr="cast &quot;payout_failure&quot;" line="1" static="1">
			<x path="hxTShopify.t.TransactionType"/>
			<meta>
				<m n=":value"><e>cast "payout_failure"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</payout_failure>
		<payout_cancellation public="1" get="inline" set="null" expr="cast &quot;payout_cancellation&quot;" line="1" static="1">
			<x path="hxTShopify.t.TransactionType"/>
			<meta>
				<m n=":value"><e>cast "payout_cancellation"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</payout_cancellation>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxTShopify.t.AbstractPayoutType" params="" file="src/hxTShopify/t/Transaction.hx" module="hxTShopify.t.Transaction">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.t._Transaction.AbstractPayoutType_Impl_" params="" file="src/hxTShopify/t/Transaction.hx" private="1" module="hxTShopify.t.Transaction" extern="1" final="1">
	<scheduled public="1" get="inline" set="null" expr="cast &quot;scheduled&quot;" line="1" static="1">
		<x path="hxTShopify.t.AbstractPayoutType"/>
		<meta>
			<m n=":value"><e>cast "scheduled"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</scheduled>
	<pending public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="1" static="1">
		<x path="hxTShopify.t.AbstractPayoutType"/>
		<meta>
			<m n=":value"><e>cast "pending"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pending>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Transaction.AbstractPayoutType_Impl_" params="" file="src/hxTShopify/t/Transaction.hx" private="1" module="hxTShopify.t.Transaction" extern="1" final="1">
		<scheduled public="1" get="inline" set="null" expr="cast &quot;scheduled&quot;" line="1" static="1">
			<x path="hxTShopify.t.AbstractPayoutType"/>
			<meta>
				<m n=":value"><e>cast "scheduled"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</scheduled>
		<pending public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="1" static="1">
			<x path="hxTShopify.t.AbstractPayoutType"/>
			<meta>
				<m n=":value"><e>cast "pending"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pending>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hxTShopify.t.SourceType" params="" file="src/hxTShopify/t/Transaction.hx" module="hxTShopify.t.Transaction">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxTShopify.t._Transaction.SourceType_Impl_" params="" file="src/hxTShopify/t/Transaction.hx" private="1" module="hxTShopify.t.Transaction" extern="1" final="1">
	<charge public="1" get="inline" set="null" expr="cast &quot;charge&quot;" line="1" static="1">
		<x path="hxTShopify.t.SourceType"/>
		<meta>
			<m n=":value"><e>cast "charge"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</charge>
	<refund public="1" get="inline" set="null" expr="cast &quot;refund&quot;" line="1" static="1">
		<x path="hxTShopify.t.SourceType"/>
		<meta>
			<m n=":value"><e>cast "refund"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</refund>
	<dispute public="1" get="inline" set="null" expr="cast &quot;dispute&quot;" line="1" static="1">
		<x path="hxTShopify.t.SourceType"/>
		<meta>
			<m n=":value"><e>cast "dispute"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</dispute>
	<reserve public="1" get="inline" set="null" expr="cast &quot;reserve&quot;" line="1" static="1">
		<x path="hxTShopify.t.SourceType"/>
		<meta>
			<m n=":value"><e>cast "reserve"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</reserve>
	<adjustment public="1" get="inline" set="null" expr="cast &quot;adjustment&quot;" line="1" static="1">
		<x path="hxTShopify.t.SourceType"/>
		<meta>
			<m n=":value"><e>cast "adjustment"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</adjustment>
	<payout public="1" get="inline" set="null" expr="cast &quot;payout&quot;" line="1" static="1">
		<x path="hxTShopify.t.SourceType"/>
		<meta>
			<m n=":value"><e>cast "payout"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</payout>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Transaction.SourceType_Impl_" params="" file="src/hxTShopify/t/Transaction.hx" private="1" module="hxTShopify.t.Transaction" extern="1" final="1">
		<charge public="1" get="inline" set="null" expr="cast &quot;charge&quot;" line="1" static="1">
			<x path="hxTShopify.t.SourceType"/>
			<meta>
				<m n=":value"><e>cast "charge"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</charge>
		<refund public="1" get="inline" set="null" expr="cast &quot;refund&quot;" line="1" static="1">
			<x path="hxTShopify.t.SourceType"/>
			<meta>
				<m n=":value"><e>cast "refund"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</refund>
		<dispute public="1" get="inline" set="null" expr="cast &quot;dispute&quot;" line="1" static="1">
			<x path="hxTShopify.t.SourceType"/>
			<meta>
				<m n=":value"><e>cast "dispute"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</dispute>
		<reserve public="1" get="inline" set="null" expr="cast &quot;reserve&quot;" line="1" static="1">
			<x path="hxTShopify.t.SourceType"/>
			<meta>
				<m n=":value"><e>cast "reserve"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</reserve>
		<adjustment public="1" get="inline" set="null" expr="cast &quot;adjustment&quot;" line="1" static="1">
			<x path="hxTShopify.t.SourceType"/>
			<meta>
				<m n=":value"><e>cast "adjustment"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</adjustment>
		<payout public="1" get="inline" set="null" expr="cast &quot;payout&quot;" line="1" static="1">
			<x path="hxTShopify.t.SourceType"/>
			<meta>
				<m n=":value"><e>cast "payout"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</payout>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="hxTShopify.t.Transaction" params="" file="src/hxTShopify/t/Transaction.hx"><a>
	<type><x path="hxTShopify.t.TransactionType"/></type>
	<test><x path="Bool"/></test>
	<source_type><x path="hxTShopify.t.SourceType"/></source_type>
	<source_order_transaction_id><x path="Int"/></source_order_transaction_id>
	<source_order_id><x path="Int"/></source_order_id>
	<source_id><x path="Int"/></source_id>
	<processed_at><x path="hxTShopify.t.StringDate"/></processed_at>
	<payout_status><x path="hxTShopify.t.PayoutStatus"/></payout_status>
	<payout_id><x path="Int"/></payout_id>
	<id><x path="Int"/></id>
	<fee><x path="Float"/></fee>
	<currency><t path="hxTShopify.t.Currency"/></currency>
	<amount><x path="Float"/></amount>
</a></typedef>
	<typedef path="hxTShopify.t.Transactions" params="" file="src/hxTShopify/t/Transactions.hx"><a><transactions><c path="Array"><t path="hxTShopify.t.Transaction"/></c></transactions></a></typedef>
	<typedef path="hxTShopify.t.Variant" params="" file="src/hxTShopify/t/Variant.hx">
		<a>
			<weight_unit><c path="String"/></weight_unit>
			<weight><x path="Float"/></weight>
			<updated_at>
				<x path="Null"><x path="hxTShopify.t.StringDate"/></x>
				<meta><m n=":optional"/></meta>
			</updated_at>
			<title><c path="String"/></title>
			<taxable><x path="Bool"/></taxable>
			<sku><c path="String"/></sku>
			<requires_shipping><x path="Bool"/></requires_shipping>
			<product_id>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</product_id>
			<price>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
			</price>
			<position>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</position>
			<option3><x path="Null"><c path="String"/></x></option3>
			<option2><x path="Null"><c path="String"/></x></option2>
			<option1><x path="Null"><c path="String"/></x></option1>
			<old_inventory_quantity>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</old_inventory_quantity>
			<inventory_quantity><x path="Float"/></inventory_quantity>
			<inventory_policy>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</inventory_policy>
			<inventory_management>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</inventory_management>
			<inventory_item_id>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</inventory_item_id>
			<image_id>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</image_id>
			<id>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</id>
			<grams><x path="Float"/></grams>
			<fulfillment_service>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</fulfillment_service>
			<created_at>
				<x path="Null"><x path="hxTShopify.t.StringDate"/></x>
				<meta><m n=":optional"/></meta>
			</created_at>
			<compare_at_price>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
			</compare_at_price>
			<barcode><c path="String"/></barcode>
			<admin_graphql_api_id>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</admin_graphql_api_id>
		</a>
		<haxe_doc><![CDATA[* Variants are covered within a product as an Array<Variant> and covers different sizes and colors.
 *
 * https://help.shopify.com/en/api/reference/products/product]]></haxe_doc>
	</typedef>
	<abstract path="hxTShopify.t.VariantWrapper" params="" file="src/hxTShopify/t/Variant.hx" module="hxTShopify.t.Variant">
		<this><t path="hxTShopify.t.Variant"/></this>
		<to><icast><t path="hxTShopify.t.Variant"/></icast></to>
		<impl><class path="hxTShopify.t._Variant.VariantWrapper_Impl_" params="" file="src/hxTShopify/t/Variant.hx" private="1" module="hxTShopify.t.Variant" final="1"><_new public="1" get="inline" set="null" line="38" static="1">
	<f a="v">
		<t path="hxTShopify.t.Variant"/>
		<x path="hxTShopify.t.VariantWrapper"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="hxTShopify.t._Variant.VariantWrapper_Impl_" params="" file="src/hxTShopify/t/Variant.hx" private="1" module="hxTShopify.t.Variant" final="1"><_new public="1" get="inline" set="null" line="38" static="1">
	<f a="v">
		<t path="hxTShopify.t.Variant"/>
		<x path="hxTShopify.t.VariantWrapper"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="hxTShopify.t.VariantCloner" params="" file="src/hxTShopify/t/Variant.hx" module="hxTShopify.t.Variant">
		<from><icast field="fromVariant"><t path="hxTShopify.t.Variant"/></icast></from>
		<this><t path="hxTShopify.t.Variant"/></this>
		<to><icast><t path="hxTShopify.t.Variant"/></icast></to>
		<impl><class path="hxTShopify.t._Variant.VariantCloner_Impl_" params="" file="src/hxTShopify/t/Variant.hx" private="1" module="hxTShopify.t.Variant" final="1">
	<_new public="1" get="inline" set="null" line="47" static="1">
		<f a="v">
			<t path="hxTShopify.t.Variant"/>
			<x path="hxTShopify.t.VariantCloner"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromVariant public="1" get="inline" set="null" line="69" static="1">
		<f a="v">
			<t path="hxTShopify.t.Variant"/>
			<x path="hxTShopify.t.VariantCloner"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromVariant>
</class></impl>
	</abstract>
	<class path="hxTShopify.t._Variant.VariantCloner_Impl_" params="" file="src/hxTShopify/t/Variant.hx" private="1" module="hxTShopify.t.Variant" final="1">
		<_new public="1" get="inline" set="null" line="47" static="1">
			<f a="v">
				<t path="hxTShopify.t.Variant"/>
				<x path="hxTShopify.t.VariantCloner"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromVariant public="1" get="inline" set="null" line="69" static="1">
			<f a="v">
				<t path="hxTShopify.t.Variant"/>
				<x path="hxTShopify.t.VariantCloner"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromVariant>
	</class>
	<class path="hxTShopify.upkeep.Doc" params="" file="src/hxTShopify/upkeep/Doc.hx">
		<main public="1" set="method" line="64" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="67"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<class path="js.Boot" params="" file="/usr/local/lib/haxe/std/js/Boot.hx">
		<__string_rec set="method" line="58" static="1">
			<f a="o:s">
				<unknown/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.Browser" params="" file="/usr/local/lib/haxe/std/js/Browser.hx">
		<window public="1" get="accessor" set="null" static="1">
			<c path="js.html.Window"/>
			<haxe_doc>The global window object.</haxe_doc>
		</window>
		<get_window get="inline" set="null" line="39" static="1"><f a=""><c path="js.html.Window"/></f></get_window>
		<document public="1" get="accessor" set="null" static="1">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Shortcut to Window.document.</haxe_doc>
		</document>
		<get_document get="inline" set="null" line="45" static="1"><f a=""><c path="js.html.HTMLDocument"/></f></get_document>
		<location public="1" get="accessor" set="null" static="1">
			<c path="js.html.Location"/>
			<haxe_doc>Shortcut to Window.location.</haxe_doc>
		</location>
		<get_location get="inline" set="null" line="51" static="1"><f a=""><c path="js.html.Location"/></f></get_location>
		<navigator public="1" get="accessor" set="null" static="1">
			<c path="js.html.Navigator"/>
			<haxe_doc>Shortcut to Window.navigator.</haxe_doc>
		</navigator>
		<get_navigator get="inline" set="null" line="57" static="1"><f a=""><c path="js.html.Navigator"/></f></get_navigator>
		<console public="1" get="accessor" set="null" static="1">
			<c path="js.html.ConsoleInstance"/>
			<haxe_doc>Shortcut to Window.console.</haxe_doc>
		</console>
		<get_console get="inline" set="null" line="63" static="1"><f a=""><c path="js.html.ConsoleInstance"/></f></get_console>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.Lib" params="" file="/usr/local/lib/haxe/std/js/Lib.hx">
		<require public="1" get="inline" set="null" line="57" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<parseInt public="1" get="accessor" set="null" static="1">
			<f a="string:?radix">
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Native JavaScript `parseInt` function.

		Its specification is different from `Std.parseInt`, so one
		might want to access the native one.</haxe_doc>
		</parseInt>
		<get_parseInt get="inline" set="null" line="69" static="1"><f a=""><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></f></get_parseInt>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="100" static="1"><f a=""><d/></f></get_nativeThis>
		<typeof public="1" get="inline" set="null" line="110" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Call JavaScript `typeof` operator on the `o` value
		and return a string representing the JavaScript type of a value.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</haxe_doc>
		</typeof>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="122" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_global>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions
	for the JavaScript target.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.Node" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/Node.hx" extern="1">
		<__dirname public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>This variable may appear to be global but is not. See [__dirname](https://nodejs.org/api/modules.html#modules_dirname).</haxe_doc>
		</__dirname>
		<get___dirname get="inline" set="null" line="46" static="1"><f a=""><c path="String"/></f></get___dirname>
		<__filename public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>This variable may appear to be global but is not. See [__filename](https://nodejs.org/api/modules.html#modules_filename).</haxe_doc>
		</__filename>
		<get___filename get="inline" set="null" line="59" static="1"><f a=""><c path="String"/></f></get___filename>
		<clearImmediate public="1" set="method" static="1">
			<f a="immediate">
				<c path="js.node.Immediate"/>
				<x path="Void"/>
			</f>
			<haxe_doc>`clearImmediate` is described in the [timers](https://nodejs.org/api/timers.html) section.</haxe_doc>
		</clearImmediate>
		<clearInterval public="1" set="method" static="1">
			<f a="timeout">
				<c path="js.node.Timeout"/>
				<x path="Void"/>
			</f>
			<haxe_doc>`clearInterval` is described in the [timers](https://nodejs.org/api/timers.html) section.</haxe_doc>
		</clearInterval>
		<clearTimeout public="1" set="method" static="1">
			<f a="timeout">
				<c path="js.node.Timeout"/>
				<x path="Void"/>
			</f>
			<haxe_doc>`clearTimeout` is described in the [timers](https://nodejs.org/api/timers.html) section.</haxe_doc>
		</clearTimeout>
		<console public="1" get="accessor" set="null" static="1">
			<c path="js.node.console.Console"/>
			<haxe_doc>Used to print to stdout and stderr. See the [console](https://nodejs.org/api/console.html) section.</haxe_doc>
		</console>
		<get_console get="inline" set="null" line="87" static="1"><f a=""><c path="js.node.console.Console"/></f></get_console>
		<exports public="1" get="accessor" set="null" static="1">
			<d><d/></d>
			<haxe_doc>This variable may appear to be global but is not. See [exports](https://nodejs.org/api/modules.html#modules_exports).</haxe_doc>
		</exports>
		<get_exports get="inline" set="null" line="100" static="1"><f a=""><d><d/></d></f></get_exports>
		<global public="1" get="inline" set="null" expr="cast Node" line="114" static="1">
			<d><d/></d>
			<meta><m n=":value"><e>cast Node</e></m></meta>
			<haxe_doc>In browsers, the top-level scope is the global scope.
		This means that within the browser `var something` will define a new global variable.
		In Node.js this is different. The top-level scope is not the global scope; `var something` inside a Node.js module
		will be local to that module.</haxe_doc>
		</global>
		<module public="1" get="accessor" set="null" static="1">
			<c path="js.node.Module"/>
			<haxe_doc>This variable may appear to be global but is not. See [module](https://nodejs.org/api/modules.html#modules_module).</haxe_doc>
		</module>
		<get_module get="inline" set="null" line="121" static="1"><f a=""><c path="js.node.Module"/></f></get_module>
		<process public="1" get="accessor" set="null" static="1">
			<c path="js.node.Process"/>
			<haxe_doc>The process object. See the [process object](https://nodejs.org/api/process.html#process_process) section.</haxe_doc>
		</process>
		<get_process get="inline" set="null" line="134" static="1"><f a=""><c path="js.node.Process"/></f></get_process>
		<queueMicrotask public="1" set="method" static="1">
			<f a="callback">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>The `queueMicrotask()` method queues a microtask to invoke `callback`.
		If `callback` throws an exception, the [process object](https://nodejs.org/api/process.html#process_process) 'uncaughtException' event will be emitted.

		The microtask queue is managed by V8 and may be used in a similar manner to the `Process.nextTick()` queue,
		which is managed by Node.js.
		The `Process.nextTick()` queue is always processed before the microtask queue within each turn of the Node.js event loop.</haxe_doc>
		</queueMicrotask>
		<require public="1" get="inline" set="null" line="155" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>This variable may appear to be global but is not. See [require()](https://nodejs.org/api/modules.html#modules_require_id).</haxe_doc>
		</require>
		<setImmediate public="1" set="method" static="1">
			<f a="callback:args">
				<x path="haxe.Function"/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.node.Immediate"/>
			</f>
			<haxe_doc>`setImmediate` is described in the [timers](https://nodejs.org/api/timers.html) section.</haxe_doc>
		</setImmediate>
		<setInterval public="1" set="method" static="1">
			<f a="callback:delay:args">
				<x path="haxe.Function"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.node.Timeout"/>
			</f>
			<haxe_doc>`setInterval` is described in the [timers](https://nodejs.org/api/timers.html) section.</haxe_doc>
		</setInterval>
		<setTimeout public="1" set="method" static="1">
			<f a="callback:delay:args">
				<x path="haxe.Function"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.node.Timeout"/>
			</f>
			<haxe_doc>`setTimeout` is described in the [timers](https://nodejs.org/api/timers.html) section.</haxe_doc>
		</setTimeout>
		<haxe_doc>Node.js globals</haxe_doc>
		<meta><m n=":native"><e>"global"</e></m></meta>
	</class>
	<typedef path="js.TimeoutObject" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/Node.hx" module="js.Node">
		<c path="js.node.Timeout"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.IntervalObject" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/Node.hx" module="js.Node">
		<c path="js.node.Timeout"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.ImmediateObject" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/Node.hx" module="js.Node">
		<c path="js.node.Immediate"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.html.EventTarget" params="" file="/usr/local/lib/haxe/std/js/html/EventTarget.hx" extern="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?options:?wantsUntrusted">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="haxe.extern.EitherType">
					<t path="js.html.AddEventListenerOptions"/>
					<x path="Bool"/>
				</x>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Register an event handler of a specific event type on the `EventTarget`.
		@throws DOMError</haxe_doc>
			<overloads><addEventListener public="1" set="method">
	<f a="type:listener:?options:?wantsUntrusted">
		<c path="String"/>
		<t path="js.html.EventListener"/>
		<x path="haxe.extern.EitherType">
			<t path="js.html.AddEventListenerOptions"/>
			<x path="Bool"/>
		</x>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Register an event handler of a specific event type on the `EventTarget`.
		@throws DOMError</haxe_doc>
</addEventListener></overloads>
		</addEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?options">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="haxe.extern.EitherType">
					<t path="js.html.EventListenerOptions"/>
					<x path="Bool"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener from the `EventTarget`.
		@throws DOMError</haxe_doc>
			<overloads><removeEventListener public="1" set="method">
	<f a="type:listener:?options">
		<c path="String"/>
		<t path="js.html.EventListener"/>
		<x path="haxe.extern.EitherType">
			<t path="js.html.EventListenerOptions"/>
			<x path="Bool"/>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>Removes an event listener from the `EventTarget`.
		@throws DOMError</haxe_doc>
</removeEventListener></overloads>
		</removeEventListener>
		<dispatchEvent public="1" set="method">
			<f a="event">
				<c path="js.html.Event"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Dispatch an event to this `EventTarget`.
		@throws DOMError</haxe_doc>
		</dispatchEvent>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`EventTarget` is an interface implemented by objects that can receive events and may have listeners for them.

	Documentation [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventTarget>]]></haxe_doc>
		<meta><m n=":native"><e>"EventTarget"</e></m></meta>
	</class>
	<class path="js.html.AbortSignal" params="" file="/usr/local/lib/haxe/std/js/html/AbortSignal.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<aborted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that indicates whether the request(s) the signal is communicating with is/are aborted (`true`) or not (`false`).</haxe_doc>
		</aborted>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Invoked when an `abort_(dom_abort_api)` event fires, i.e. when the DOM request(s) the signal is communicating with is/are aborted.</haxe_doc>
		</onabort>
		<haxe_doc><![CDATA[The `AbortSignal` interface represents a signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an `AbortController` object.

	Documentation [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal>]]></haxe_doc>
		<meta><m n=":native"><e>"AbortSignal"</e></m></meta>
	</class>
	<typedef path="js.html.AddEventListenerOptions" params="" file="/usr/local/lib/haxe/std/js/html/AddEventListenerOptions.hx"><a>
	<passive>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</passive>
	<once>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</once>
	<capture>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</capture>
</a></typedef>
	<abstract path="js.html.AlignSetting" params="" file="/usr/local/lib/haxe/std/js/html/AlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AlignSetting.AlignSetting_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/AlignSetting.hx" private="1" module="js.html.AlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Node" params="" file="/usr/local/lib/haxe/std/js/html/Node.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ELEMENT_NODE public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ELEMENT_NODE>
		<ATTRIBUTE_NODE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ATTRIBUTE_NODE>
		<TEXT_NODE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TEXT_NODE>
		<CDATA_SECTION_NODE public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</CDATA_SECTION_NODE>
		<ENTITY_REFERENCE_NODE public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ENTITY_REFERENCE_NODE>
		<ENTITY_NODE public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</ENTITY_NODE>
		<PROCESSING_INSTRUCTION_NODE public="1" get="inline" set="null" expr="7" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</PROCESSING_INSTRUCTION_NODE>
		<COMMENT_NODE public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</COMMENT_NODE>
		<DOCUMENT_NODE public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOCUMENT_NODE>
		<DOCUMENT_TYPE_NODE public="1" get="inline" set="null" expr="10" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</DOCUMENT_TYPE_NODE>
		<DOCUMENT_FRAGMENT_NODE public="1" get="inline" set="null" expr="11" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</DOCUMENT_FRAGMENT_NODE>
		<NOTATION_NODE public="1" get="inline" set="null" expr="12" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</NOTATION_NODE>
		<DOCUMENT_POSITION_DISCONNECTED public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOCUMENT_POSITION_DISCONNECTED>
		<DOCUMENT_POSITION_PRECEDING public="1" get="inline" set="null" expr="2" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOCUMENT_POSITION_PRECEDING>
		<DOCUMENT_POSITION_FOLLOWING public="1" get="inline" set="null" expr="4" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DOCUMENT_POSITION_FOLLOWING>
		<DOCUMENT_POSITION_CONTAINS public="1" get="inline" set="null" expr="8" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOCUMENT_POSITION_CONTAINS>
		<DOCUMENT_POSITION_CONTAINED_BY public="1" get="inline" set="null" expr="16" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCUMENT_POSITION_CONTAINED_BY>
		<DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC public="1" get="inline" set="null" expr="32" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>
		<nodeType public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the type of the node. Possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    Name
		    Value
		   </tr>
		   <tr>
		    <td><code>ELEMENT_NODE</code></td>
		    <td><code>1</code></td>
		   </tr>
		   <tr>
		    <td><code>ATTRIBUTE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>2</code></td>
		   </tr>
		   <tr>
		    <td><code>TEXT_NODE</code></td>
		    <td><code>3</code></td>
		   </tr>
		   <tr>
		    <td><code>CDATA_SECTION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>4</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_REFERENCE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>5</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_NODE</code> <em>(deprecated)</em></td>
		    <td><code>6</code></td>
		   </tr>
		   <tr>
		    <td><code>PROCESSING_INSTRUCTION_NODE</code></td>
		    <td><code>7</code></td>
		   </tr>
		   <tr>
		    <td><code>COMMENT_NODE</code></td>
		    <td><code>8</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_NODE</code></td>
		    <td><code>9</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_TYPE_NODE</code></td>
		    <td><code>10</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_FRAGMENT_NODE</code></td>
		    <td><code>11</code></td>
		   </tr>
		   <tr>
		    <td><code>NOTATION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>12</code></td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</nodeType>
		<nodeName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the name of the `Node`. The structure of the name will differ with the node type. E.g. An `HTMLElement` will contain the name of the corresponding tag, like `'audio'` for an `HTMLAudioElement`, a `Text` node will have the `'#text'` string, or a `Document` node will have the `'#document'` string.</haxe_doc>
		</nodeName>
		<baseURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the base URL. The concept of base URL changes from one language to another; in HTML, it corresponds to the protocol, the domain name and the directory structure, that is all until the last `'/'`.</haxe_doc>
		</baseURI>
		<isConnected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a boolean indicating whether or not the Node is connected (directly or indirectly) to the context object, e.g. the `Document` object in the case of the normal DOM, or the `ShadowRoot` in the case of a shadow DOM.</haxe_doc>
		</isConnected>
		<ownerDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns the `Document` that this node belongs to. If the node is itself a document, returns `null`.</haxe_doc>
		</ownerDocument>
		<parentNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` that is the parent of this node. If there is no such node, like if this node is the top of the tree or if doesn't participate in a tree, this property returns `null`.</haxe_doc>
		</parentNode>
		<parentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns an `Element` that is the parent of this node. If the node has no parent, or if that parent is not an `Element`, this property returns `null`.</haxe_doc>
		</parentElement>
		<childNodes public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns a live `NodeList` containing all the children of this node. `NodeList` being live means that if the children of the `Node` change, the `NodeList` object is automatically updated.</haxe_doc>
		</childNodes>
		<firstChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the first direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</firstChild>
		<lastChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the last direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the previous node in the tree, or `null` if there isn't such node.</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the next node in the tree, or `null` if there isn't such node.</haxe_doc>
		</nextSibling>
		<nodeValue public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the value of the current node</haxe_doc>
		</nodeValue>
		<textContent public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the textual content of an element and all its descendants.</haxe_doc>
		</textContent>
		<getRootNode public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.GetRootNodeOptions"/></x>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns the context object's root which optionally includes the shadow root if it is available. </haxe_doc>
		</getRootNode>
		<hasChildNodes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has any child nodes, or not.</haxe_doc>
		</hasChildNodes>
		<insertBefore public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Inserts a `Node` before the reference node as a child of a specified parent node.
		@throws DOMError</haxe_doc>
		</insertBefore>
		<appendChild public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Adds the specified childNode argument as the last child to the current node.
		
		 If the argument referenced an existing node on the DOM tree, the node will be detached from its current position and attached at the new position.
		@throws DOMError</haxe_doc>
		</appendChild>
		<replaceChild public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Replaces one child `Node` of the current one with the second one given in parameter.
		@throws DOMError</haxe_doc>
		</replaceChild>
		<removeChild public="1" set="method">
			<f a="child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Removes a child node from the current element, which must be a child of the current node.
		@throws DOMError</haxe_doc>
		</removeChild>
		<normalize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clean up all the text nodes under this element (merge adjacent, remove empty).</haxe_doc>
		</normalize>
		<cloneNode public="1" set="method">
			<f a="?deep" v="false">
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>Clone a `Node`, and optionally, all of its contents. By default, it clones the content of the node.
		@throws DOMError</haxe_doc>
		</cloneNode>
		<isSameNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` value indicating whether or not the two nodes are the same (that is, they reference the same object).</haxe_doc>
		</isSameNode>
		<isEqualNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` which indicates whether or not two nodes are of the same type and all their defining data points match.</haxe_doc>
		</isEqualNode>
		<compareDocumentPosition public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares the position of the current node against another node in any other document.</haxe_doc>
		</compareDocumentPosition>
		<contains public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` value indicating whether a node is a descendant of a given node or not.</haxe_doc>
		</contains>
		<lookupPrefix public="1" set="method">
			<f a="namespace">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the prefix for a given namespace URI, if present, and `null` if not. When multiple prefixes are possible, the result is implementation-dependent.</haxe_doc>
		</lookupPrefix>
		<lookupNamespaceURI public="1" set="method">
			<f a="prefix">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Accepts a prefix and returns the namespace URI associated with it on the given node if found (and `null` if not). Supplying `null` for the prefix will return the default namespace.</haxe_doc>
		</lookupNamespaceURI>
		<isDefaultNamespace public="1" set="method">
			<f a="namespace">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Accepts a namespace URI as an argument and returns a `Boolean` with a value of `true` if the namespace is the default namespace on the given node or `false` if not.</haxe_doc>
		</isDefaultNamespace>
		<haxe_doc><![CDATA[`Node` is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.

	Documentation [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Node$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Node>]]></haxe_doc>
		<meta><m n=":native"><e>"Node"</e></m></meta>
	</class>
	<class path="js.html.DOMElement" params="" file="/usr/local/lib/haxe/std/js/html/DOMElement.hx" extern="1">
		<extends path="js.html.Node"/>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>The namespace URI of the element, or `null` if it is no namespace.
		 
		 Note: In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the `http://www.w3.org/1999/xhtml` namespace in both HTML and XML trees. `1.9.2`</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace prefix of the element, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the local part of the qualified name of the element.</haxe_doc>
		</localName>
		<tagName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `String` with the name of the tag for the given element.</haxe_doc>
		</tagName>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the id of the element.</haxe_doc>
		</id>
		<className public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the class of the element.</haxe_doc>
		</className>
		<classList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` containing the list of class attributes.</haxe_doc>
		</classList>
		<attributes public="1" set="null">
			<c path="js.html.NamedNodeMap"/>
			<haxe_doc>Returns a `NamedNodeMap` object containing the assigned attributes of the corresponding HTML element.</haxe_doc>
		</attributes>
		<title public="1"><c path="String"/></title>
		<lang public="1"><c path="String"/></lang>
		<dir public="1"><c path="String"/></dir>
		<dataset public="1" set="null"><c path="js.html.DOMStringMap"/></dataset>
		<innerText public="1"><c path="String"/></innerText>
		<itemScope public="1"><x path="Bool"/></itemScope>
		<itemType public="1" set="null"><c path="js.html.DOMTokenList"/></itemType>
		<itemId public="1"><c path="String"/></itemId>
		<itemRef public="1" set="null"><c path="js.html.DOMTokenList"/></itemRef>
		<itemProp public="1" set="null"><c path="js.html.DOMTokenList"/></itemProp>
		<properties public="1" set="null"><c path="js.html.HTMLPropertiesCollection"/></properties>
		<itemValue public="1"><d/></itemValue>
		<hidden public="1"><x path="Bool"/></hidden>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<accessKey public="1"><c path="String"/></accessKey>
		<accessKeyLabel public="1" set="null"><c path="String"/></accessKeyLabel>
		<draggable public="1"><x path="Bool"/></draggable>
		<contentEditable public="1"><c path="String"/></contentEditable>
		<isContentEditable public="1" set="null"><x path="Bool"/></isContentEditable>
		<contextMenu public="1" set="null"><c path="js.html.MenuElement"/></contextMenu>
		<spellcheck public="1"><x path="Bool"/></spellcheck>
		<style public="1" set="null"><c path="js.html.CSSStyleDeclaration"/></style>
		<oncopy public="1"><x path="haxe.Function"/></oncopy>
		<oncut public="1"><x path="haxe.Function"/></oncut>
		<onpaste public="1"><x path="haxe.Function"/></onpaste>
		<offsetParent public="1" set="null"><c path="js.html.Element"/></offsetParent>
		<offsetTop public="1" set="null"><x path="Int"/></offsetTop>
		<offsetLeft public="1" set="null"><x path="Int"/></offsetLeft>
		<offsetWidth public="1" set="null"><x path="Int"/></offsetWidth>
		<offsetHeight public="1" set="null"><x path="Int"/></offsetHeight>
		<scrollTop public="1">
			<x path="Int"/>
			<haxe_doc>A `Number` representing number of pixels the top of the document is scrolled vertically.</haxe_doc>
		</scrollTop>
		<scrollLeft public="1">
			<x path="Int"/>
			<haxe_doc>Is a `Number` representing the left scroll offset of the element.</haxe_doc>
		</scrollLeft>
		<scrollWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the scroll view width of the element.</haxe_doc>
		</scrollWidth>
		<scrollHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the scroll view height of an element.</haxe_doc>
		</scrollHeight>
		<clientTop public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the width of the top border of the element.</haxe_doc>
		</clientTop>
		<clientLeft public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the width of the left border of the element.</haxe_doc>
		</clientLeft>
		<clientWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the inner width of the element.</haxe_doc>
		</clientWidth>
		<clientHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the inner height of the element.</haxe_doc>
		</clientHeight>
		<scrollTopMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the maximum top scroll offset possible for the element.</haxe_doc>
		</scrollTopMax>
		<scrollLeftMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the maximum left scroll offset possible for the element.</haxe_doc>
		</scrollLeftMax>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the markup of the element's content.</haxe_doc>
		</innerHTML>
		<outerHTML public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.</haxe_doc>
		</outerHTML>
		<shadowRoot public="1" set="null">
			<c path="js.html.ShadowRoot"/>
			<haxe_doc>Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.</haxe_doc>
		</shadowRoot>
		<assignedSlot public="1" set="null"><c path="js.html.SlotElement"/></assignedSlot>
		<slot public="1">
			<c path="String"/>
			<haxe_doc>Returns the name of the shadow DOM slot the element is inserted in.</haxe_doc>
		</slot>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handling code for the `wheel` event. This is now implemented on `GlobalEventHandlers.onwheel`.</haxe_doc>
		</onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handler for the `gotpointercapture` event type.</haxe_doc>
		</ongotpointercapture>
		<onlostpointercapture public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handler for the `lostpointercapture` event type.</haxe_doc>
		</onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getAttributeNames public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an array of attribute names from the current element.</haxe_doc>
		</getAttributeNames>
		<getAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the value of the named attribute from the current node and returns it as an `Object`.</haxe_doc>
		</getAttribute>
		<getAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the value of the attribute with the specified name and namespace, from the current node and returns it as an `Object`.</haxe_doc>
		</getAttributeNS>
		<toggleAttribute public="1" set="method">
			<f a="name:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.
		@throws DOMError</haxe_doc>
		</toggleAttribute>
		<setAttribute public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of a named attribute of the current node.
		@throws DOMError</haxe_doc>
		</setAttribute>
		<setAttributeNS public="1" set="method">
			<f a="namespace:name:value">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNS>
		<removeAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</removeAttribute>
		<removeAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</removeAttributeNS>
		<hasAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the element has the specified attribute or not.</haxe_doc>
		</hasAttribute>
		<hasAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the element has the specified attribute, in the specified namespace, or not.</haxe_doc>
		</hasAttributeNS>
		<hasAttributes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has one or more HTML attributes present.</haxe_doc>
		</hasAttributes>
		<closest public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the `Element` which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.
		@throws DOMError</haxe_doc>
		</closest>
		<matches public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating whether or not the element would be selected by the specified selector string.
		@throws DOMError</haxe_doc>
		</matches>
		<webkitMatchesSelector public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</webkitMatchesSelector>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name, from the current element.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name and namespace, from the current element.
		@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` that contains all descendants of the current element that possess the list of classes given in the parameter.</haxe_doc>
		</getElementsByClassName>
		<insertAdjacentElement public="1" set="method">
			<f a="where:element">
				<c path="String"/>
				<c path="js.html.Element"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Inserts a given element node at a given position relative to the element it is invoked upon.
		@throws DOMError</haxe_doc>
		</insertAdjacentElement>
		<insertAdjacentText public="1" set="method">
			<f a="where:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a given text node at a given position relative to the element it is invoked upon.
		@throws DOMError</haxe_doc>
		</insertAdjacentText>
		<setPointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Designates a specific element as the capture target of future pointer events.
		@throws DOMError</haxe_doc>
		</setPointerCapture>
		<releasePointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Releases (stops) pointer capture that was previously set for a specific `PointerEvent`.
		@throws DOMError</haxe_doc>
		</releasePointerCapture>
		<hasPointerCapture public="1" set="method"><f a="pointerId">
	<x path="Int"/>
	<x path="Bool"/>
</f></hasPointerCapture>
		<setCapture public="1" set="method">
			<f a="?retargetToElement" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ retargetToElement : false }</e></m></meta>
			<haxe_doc>Sets up mouse event capture, redirecting all mouse events to this element.</haxe_doc>
		</setCapture>
		<releaseCapture public="1" set="method"><f a=""><x path="Void"/></f></releaseCapture>
		<getAttributeNode public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Retrieves the node representation of the named attribute from the current node and returns it as an `Attr`.</haxe_doc>
		</getAttributeNode>
		<setAttributeNode public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Sets the node representation of the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNode>
		<removeAttributeNode public="1" set="method">
			<f a="oldAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the node representation of the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</removeAttributeNode>
		<getAttributeNodeNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an `Attr`.</haxe_doc>
		</getAttributeNodeNS>
		<setAttributeNodeNS public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Sets the node representation of the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNodeNS>
		<click public="1" set="method"><f a=""><x path="Void"/></f></click>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<getClientRects public="1" set="method">
			<f a=""><c path="js.html.DOMRectList"/></f>
			<haxe_doc>Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.</haxe_doc>
		</getClientRects>
		<getBoundingClientRect public="1" set="method">
			<f a=""><c path="js.html.DOMRect"/></f>
			<haxe_doc>Returns the size of an element and its position relative to the viewport.</haxe_doc>
		</getBoundingClientRect>
		<scrollIntoView public="1" set="method">
			<f a="?arg">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the page until the element gets into the view.</haxe_doc>
			<overloads><scrollIntoView public="1" set="method">
	<f a="?arg">
		<x path="Null"><t path="js.html.ScrollIntoViewOptions"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the page until the element gets into the view.</haxe_doc>
</scrollIntoView></overloads>
		</scrollIntoView>
		<scroll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scroll public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scrollTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scrollBy public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollBy></overloads>
		</scrollBy>
		<insertAdjacentHTML public="1" set="method">
			<f a="position:text">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.
		@throws DOMError</haxe_doc>
		</insertAdjacentHTML>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Node` which matches the specified selector string relative to the element.
		@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>Returns a `NodeList` of nodes which match the specified selector string relative to the element.
		@throws DOMError</haxe_doc>
		</querySelectorAll>
		<attachShadow public="1" set="method">
			<f a="shadowRootInitDict">
				<t path="js.html.ShadowRootInit"/>
				<c path="js.html.ShadowRoot"/>
			</f>
			<haxe_doc>Attatches a shadow DOM tree to the specified element and returns a reference to its `ShadowRoot`.
		@throws DOMError</haxe_doc>
		</attachShadow>
		<requestFullscreen public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Asynchronously asks the browser to make the element full-screen.
		@throws DOMError</haxe_doc>
		</requestFullscreen>
		<requestPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Allows to asynchronously ask for the pointer to be locked on the given element.</haxe_doc>
		</requestPointerLock>
		<animate public="1" set="method">
			<f a="keyframes:?options">
				<d/>
				<x path="Float"/>
				<c path="js.html.Animation"/>
			</f>
			<haxe_doc>A shortcut method to create and run an animation on an element. Returns the created Animation object instance.
		@throws DOMError</haxe_doc>
			<overloads><animate public="1" set="method">
	<f a="keyframes:?options">
		<d/>
		<x path="Null"><t path="js.html.KeyframeAnimationOptions"/></x>
		<c path="js.html.Animation"/>
	</f>
	<haxe_doc>A shortcut method to create and run an animation on an element. Returns the created Animation object instance.
		@throws DOMError</haxe_doc>
</animate></overloads>
		</animate>
		<getAnimations public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="js.html.AnimationFilter"/></x>
				<c path="Array"><c path="js.html.Animation"/></c>
			</f>
			<haxe_doc>Returns an array of Animation objects currently active on the element.</haxe_doc>
		</getAnimations>
		<before public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<prepend public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<haxe_doc><![CDATA[`Element` is the most general base class from which all objects in a `Document` inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from `Element`.

	Documentation [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Element$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Element>]]></haxe_doc>
		<meta><m n=":native"><e>"Element"</e></m></meta>
	</class>
	<class path="js.html.Element" params="" file="/usr/local/lib/haxe/std/js/html/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<click public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sends a mouse click event to the element.</haxe_doc>
		</click>
		<focus public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Makes the element the current keyboard focus.
		@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes keyboard focus from the currently focused element.
		@throws DOMError</haxe_doc>
		</blur>
		<haxe_doc><![CDATA[The `HTMLElement` interface represents any HTML element. Some elements directly implement this interface, others implement it via an interface that inherits it.

	Documentation [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLElement"</e></m></meta>
	</class>
	<class path="js.html.AnchorElement" params="" file="/usr/local/lib/haxe/std/js/html/AnchorElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating where to display the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, specifying the relationship of the target object to the linked object.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `hreflang` HTML attribute, indicating the language of the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, indicating the MIME type of the linked resource.</haxe_doc>
		</type>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being a synonym for the `Node.textContent` property.</haxe_doc>
		</text>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a comma-separated list of coordinates.</haxe_doc>
		</coords>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding of the linked resource.</haxe_doc>
		</charset>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the anchor name.</haxe_doc>
		</name>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing that the `rev` HTML attribute, specifying the relationship of the link object to the target object.
		 Note: Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</haxe_doc>
		</rev>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the shape of the active area.</haxe_doc>
		</shape>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAnchorElement` interface represents hyperlink elements and provides special properties and methods (beyond those of the regular `HTMLElement` object interface that they inherit from) for manipulating the layout and presentation of such elements.

	Documentation [HTMLAnchorElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAnchorElement"</e></m></meta>
	</class>
	<class path="js.html.Animation" params="" file="/usr/local/lib/haxe/std/js/html/Animation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the `String` used to identify the animation.</haxe_doc>
		</id>
		<effect public="1">
			<c path="js.html.AnimationEffect"/>
			<haxe_doc>Gets and sets the `AnimationEffectReadOnly` associated with this animation. This will usually be a `KeyframeEffect` object.</haxe_doc>
		</effect>
		<timeline public="1">
			<c path="js.html.AnimationTimeline"/>
			<haxe_doc>Gets or sets the `AnimationTimeline` associated with this animation.</haxe_doc>
		</timeline>
		<startTime public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the scheduled time when an animation's playback should begin.</haxe_doc>
		</startTime>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a `AnimationTimeline`, is inactive or hasn't been played yet, its value is `null`.</haxe_doc>
		</currentTime>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the playback rate of the animation.</haxe_doc>
		</playbackRate>
		<playState public="1" set="null">
			<x path="js.html.AnimationPlayState"/>
			<haxe_doc>Returns an enumerated value describing the playback state of an animation.</haxe_doc>
		</playState>
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.</haxe_doc>
		</pending>
		<ready public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current ready Promise for this animation.</haxe_doc>
		</ready>
		<finished public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current finished Promise for this animation.</haxe_doc>
		</finished>
		<onfinish public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `finish` event.</haxe_doc>
		</onfinish>
		<oncancel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `cancel` event.</haxe_doc>
		</oncancel>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears all `KeyframeEffect` caused by this animation and aborts its playback.</haxe_doc>
		</cancel>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Seeks either end of an animation, depending on whether the animation is playing or reversing.
		@throws DOMError</haxe_doc>
		</finish>
		<play public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Starts or resumes playing of an animation, or begins the animation again if it previously finished.
		@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Suspends playing of an animation.
		@throws DOMError</haxe_doc>
		</pause>
		<updatePlaybackRate public="1" set="method">
			<f a="playbackRate">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the speed of an animation after first synchronizing its playback position.</haxe_doc>
		</updatePlaybackRate>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Reverses playback direction, stopping at the start of the animation. If the animation is finished or unplayed, it will play from end to beginning.
		@throws DOMError</haxe_doc>
		</reverse>
		<new public="1" set="method">
			<f a="?effect:?timeline">
				<c path="js.html.AnimationEffect"/>
				<c path="js.html.AnimationTimeline"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Animation` interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.

	Documentation [Animation](https://developer.mozilla.org/en-US/docs/Web/API/Animation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Animation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Animation>]]></haxe_doc>
		<meta><m n=":native"><e>"Animation"</e></m></meta>
	</class>
	<class path="js.html.AnimationEffect" params="" file="/usr/local/lib/haxe/std/js/html/AnimationEffect.hx" extern="1">
		<getTiming public="1" set="method"><f a=""><t path="js.html.EffectTiming"/></f></getTiming>
		<getComputedTiming public="1" set="method"><f a=""><t path="js.html.ComputedEffectTiming"/></f></getComputedTiming>
		<updateTiming public="1" set="method">
			<f a="?timing">
				<x path="Null"><t path="js.html.OptionalEffectTiming"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</updateTiming>
		<haxe_doc><![CDATA[The `AnimationEffect` interface of the Web Animations API defines current and future animation effects like `KeyframeEffect`, which can be passed to `Animation` objects for playing, and `KeyframeEffectReadOnly` (which is used by CSS Animations and Transitions).

	Documentation [AnimationEffect](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationEffect"</e></m></meta>
	</class>
	<typedef path="js.html.AnimationFilter" params="" file="/usr/local/lib/haxe/std/js/html/AnimationFilter.hx"><a><subtree>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</subtree></a></typedef>
	<abstract path="js.html.AnimationPlayState" params="" file="/usr/local/lib/haxe/std/js/html/AnimationPlayState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AnimationPlayState.AnimationPlayState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/AnimationPlayState.hx" private="1" module="js.html.AnimationPlayState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.AnimationTimeline" params="" file="/usr/local/lib/haxe/std/js/html/AnimationTimeline.hx" extern="1">
		<currentTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the time value in milliseconds for this timeline or `null` if this timeline is inactive.</haxe_doc>
		</currentTime>
		<haxe_doc><![CDATA[The `AnimationTimeline` interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features (inherited by `DocumentTimeline` and future timeline types) and is not itself directly used by developers. Anywhere you see `AnimationTimeline`, you should use `DocumentTimeline` or any other timeline type instead.

	Documentation [AnimationTimeline](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationTimeline"</e></m></meta>
	</class>
	<class path="js.html.AreaElement" params="" file="/usr/local/lib/haxe/std/js/html/AreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute, containing alternative text for the element.</haxe_doc>
		</alt>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `coords` HTML attribute, containing coordinates to define the hot-spot region.</haxe_doc>
		</coords>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `shape` HTML attribute, indicating the shape of the hot-spot, limited to known values.</haxe_doc>
		</shape>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating the browsing context in which to open the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use when fetching the linked resource.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens.</haxe_doc>
		</relList>
		<noHref public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` flag indicating if the area is inactive (`true`) or active (`false`).</haxe_doc>
		</noHref>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAreaElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.

	Documentation [HTMLAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAreaElement"</e></m></meta>
	</class>
	<typedef path="js.html.AssignedNodesOptions" params="" file="/usr/local/lib/haxe/std/js/html/AssignedNodesOptions.hx"><a><flatten>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</flatten></a></typedef>
	<class path="js.html.Attr" params="" file="/usr/local/lib/haxe/std/js/html/Attr.hx" extern="1">
		<extends path="js.html.Node"/>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the local part of the qualified name of the attribute.</haxe_doc>
		</localName>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The attribute's value.</haxe_doc>
		</value>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The attribute's name.</haxe_doc>
		</name>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace URI of the attribute, or `null` if there is no namespace.</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace prefix of the attribute, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<specified public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property always returns `true`. Originally, it returned `true `if the attribute was explicitly specified in the source code or by a script, and `false` if its value came from the default one defined in the document's DTD.</haxe_doc>
		</specified>
		<ownerElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element holding the attribute.
		
			
			Note: DOM Level 4 removed this property. The assumption was that since you get an `Attr` object from an `Element`, you should already know the associated element.
		
			As that doesn't hold true in cases like `Attr` objects being returned by `Document.evaluate`, the DOM Living Standard reintroduced the property.
		
			Gecko outputs a deprecation note starting from Gecko 7.0 `7.0`. This note was removed again in Gecko 49.0 `49.0`.</haxe_doc>
		</ownerElement>
		<haxe_doc><![CDATA[This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., `Element.getAttribute()`, but certain functions (e.g., `Element.getAttributeNode()`) or means of iterating give `Attr` types.

	Documentation [Attr](https://developer.mozilla.org/en-US/docs/Web/API/Attr) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Attr$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Attr>]]></haxe_doc>
		<meta><m n=":native"><e>"Attr"</e></m></meta>
	</class>
	<class path="js.html.MediaElement" params="" file="/usr/local/lib/haxe/std/js/html/MediaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NETWORK_EMPTY public="1" get="inline" set="null" expr="0" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NETWORK_EMPTY>
		<NETWORK_IDLE public="1" get="inline" set="null" expr="1" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NETWORK_IDLE>
		<NETWORK_LOADING public="1" get="inline" set="null" expr="2" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</NETWORK_LOADING>
		<NETWORK_NO_SOURCE public="1" get="inline" set="null" expr="3" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</NETWORK_NO_SOURCE>
		<HAVE_NOTHING public="1" get="inline" set="null" expr="0" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</HAVE_NOTHING>
		<HAVE_METADATA public="1" get="inline" set="null" expr="1" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</HAVE_METADATA>
		<HAVE_CURRENT_DATA public="1" get="inline" set="null" expr="2" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HAVE_CURRENT_DATA>
		<HAVE_FUTURE_DATA public="1" get="inline" set="null" expr="3" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HAVE_FUTURE_DATA>
		<HAVE_ENOUGH_DATA public="1" get="inline" set="null" expr="4" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</HAVE_ENOUGH_DATA>
		<error public="1" set="null">
			<c path="js.html.MediaError"/>
			<haxe_doc>Returns a `MediaError` object for the most recent error, or `null` if there has not been an error.</haxe_doc>
		</error>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, which contains the URL of a media resource to use.</haxe_doc>
		</src>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` with the absolute URL of the chosen media resource.</haxe_doc>
		</currentSrc>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the CORS setting for this media element.</haxe_doc>
		</crossOrigin>
		<networkState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the current state of fetching the media over the network.</haxe_doc>
		</networkState>
		<preload public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `preload` HTML attribute, indicating what data should be preloaded, if any. Possible values are: `none`, `metadata`, `auto`.</haxe_doc>
		</preload>
		<buffered public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the `buffered` property is accessed.</haxe_doc>
		</buffered>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the readiness state of the media.</haxe_doc>
		</readyState>
		<seeking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media is in the process of seeking to a new position.</haxe_doc>
		</seeking>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the current playback time in seconds. Setting this value seeks the media to the new time.</haxe_doc>
		</currentTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` indicating the length of the media in seconds, or 0 if no media data is available.</haxe_doc>
		</duration>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element is paused.</haxe_doc>
		</paused>
		<defaultPlaybackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the default playback rate for the media.</haxe_doc>
		</defaultPlaybackRate>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` that indicates the rate at which the media is being played back. </haxe_doc>
		</playbackRate>
		<played public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the ranges of the media source that the browser has played, if any.</haxe_doc>
		</played>
		<seekable public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the time ranges that the user is able to seek to, if any.</haxe_doc>
		</seekable>
		<ended public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element has finished playing.</haxe_doc>
		</ended>
		<autoplay public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that reflects the `autoplay` HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.
		 Sites which automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so it should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control.</haxe_doc>
		</autoplay>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `loop` HTML attribute, which indicates whether the media element should start over when it reaches the end.</haxe_doc>
		</loop>
		<controls public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `controls` HTML attribute, indicating whether user interface items for controlling the resource should be displayed.</haxe_doc>
		</controls>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).</haxe_doc>
		</volume>
		<muted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that determines whether audio is muted. `true` if the audio is muted and `false` otherwise.</haxe_doc>
		</muted>
		<defaultMuted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `muted` HTML attribute, which indicates whether the media element's audio output should be muted by default.</haxe_doc>
		</defaultMuted>
		<audioTracks public="1" set="null">
			<c path="js.html.AudioTrackList"/>
			<haxe_doc>A `AudioTrackList` that lists the `AudioTrack` objects contained in the element.</haxe_doc>
		</audioTracks>
		<videoTracks public="1" set="null">
			<c path="js.html.VideoTrackList"/>
			<haxe_doc>Returns the list of `VideoTrack` objects contained in the element.

		 Gecko supports only single track playback, and the parsing of tracks' metadata is only available for media with the Ogg container format.</haxe_doc>
		</videoTracks>
		<textTracks public="1" set="null">
			<c path="js.html.TextTrackList"/>
			<haxe_doc>Returns the list of `TextTrack` objects contained in the element.</haxe_doc>
		</textTracks>
		<srcObject public="1">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Is a `MediaStream` representing the media to play or that has played in the current `HTMLMediaElement`, or `null` if not assigned.</haxe_doc>
		</srcObject>
		<mediaKeys public="1" set="null">
			<c path="js.html.eme.MediaKeys"/>
			<haxe_doc>Returns a `MediaKeys` object or `null`. MediaKeys is a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.</haxe_doc>
		</mediaKeys>
		<onencrypted public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when the media is encrypted.</haxe_doc>
		</onencrypted>
		<onwaitingforkey public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when playback is blocked while waiting for an encryption key.</haxe_doc>
		</onwaitingforkey>
		<load public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the media element and restarts the media resource. Any pending events are discarded. How much media data is fetched is still affected by the `preload` attribute. This method can be useful for releasing resources after any `src` attribute and `source` element descendants have been removed. Otherwise, it is usually unnecessary to use this method, unless required to rescan `source` element children after dynamic changes.</haxe_doc>
		</load>
		<canPlayType public="1" set="method">
			<f a="type">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Determines whether the specified media type can be played back.</haxe_doc>
		</canPlayType>
		<fastSeek public="1" set="method">
			<f a="time">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Directly seeks to the given time.
		@throws DOMError</haxe_doc>
		</fastSeek>
		<play public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Begins playback of the media.
		@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses the media playback.
		@throws DOMError</haxe_doc>
		</pause>
		<addTextTrack public="1" set="method">
			<f a="kind:?label:?language" v=":&quot;&quot;:&quot;&quot;">
				<x path="js.html.TextTrackKind"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.TextTrack"/>
			</f>
			<meta><m n=":value"><e>{ language : "", label : "" }</e></m></meta>
			<haxe_doc>Adds a text track (such as a track for subtitles) to a media element.</haxe_doc>
		</addTextTrack>
		<setMediaKeys public="1" set="method">
			<f a="mediaKeys">
				<c path="js.html.eme.MediaKeys"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns `Promise`. Sets the `MediaKeys` keys to use when decrypting media during playback.</haxe_doc>
		</setMediaKeys>
		<haxe_doc><![CDATA[The `HTMLMediaElement` interface adds to `HTMLElement` the properties and methods needed to support basic media-related capabilities that are common to audio and video.

	Documentation [HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMediaElement"</e></m></meta>
	</class>
	<class path="js.html.AudioElement" params="" file="/usr/local/lib/haxe/std/js/html/AudioElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<haxe_doc><![CDATA[The `HTMLAudioElement` interface provides access to the properties of `audio` elements, as well as methods to manipulate them. It derives from the `HTMLMediaElement` interface.

	Documentation [HTMLAudioElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAudioElement"</e></m></meta>
	</class>
	<class path="js.html.MediaStreamTrack" params="" file="/usr/local/lib/haxe/std/js/html/MediaStreamTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` set to `"audio"` if the track is an audio track and to `"video"`, if it is a video track. It doesn't change if the track is deassociated from its source.</haxe_doc>
		</kind>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a unique identifier (GUID) for the track; it is generated by the browser.</haxe_doc>
		</id>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a user agent-assigned label that identifies the track source, as in `"internal microphone"`. The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.</haxe_doc>
		</label>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean whose value of `true` if the track is enabled, that is allowed to render the media source stream; or `false` if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.
		 Note: You can implement standard "mute" functionality by setting `enabled` to `false`. The `muted` property refers to a condition in which there's no media because of a technical issue.</haxe_doc>
		</enabled>
		<muted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue.
		 Note: You can implement standard "mute" functionality by setting `enabled` to `false`, and unmute the media by setting it back to `true` again.</haxe_doc>
		</muted>
		<onmute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `mute` event is fired on the object, that is when the streaming is terminating.</haxe_doc>
		</onmute>
		<onunmute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `unmute` event is fired on the object, that is when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onunmute>
		<readyState public="1" set="null">
			<x path="js.html.MediaStreamTrackState"/>
			<haxe_doc>Returns an enumerated value giving the status of the track. This will be one of the following values:

		  `"live"` which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the `MediaStreamTrack.enabled` attribute.
		  `"ended"` which indicates that the input is not giving any more data and will never provide new data.</haxe_doc>
		</readyState>
		<onended public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `ended_(MediaStream)` event is fired on the object, that is when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onended>
		<clone public="1" set="method">
			<f a=""><c path="js.html.MediaStreamTrack"/></f>
			<haxe_doc>Returns a duplicate of the `MediaStreamTrack`.</haxe_doc>
		</clone>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops playing the source associated to the track, both the source and the track are deassociated. The track state is set to `ended`.</haxe_doc>
		</stop>
		<getConstraints public="1" set="method">
			<f a=""><t path="js.html.MediaTrackConstraints"/></f>
			<haxe_doc>Returns a `MediaTrackConstraints` object containing the currently set constraints for the track; the returned value matches the constraints last set using `MediaStreamTrack.applyConstraints`.</haxe_doc>
		</getConstraints>
		<getSettings public="1" set="method">
			<f a=""><t path="js.html.MediaTrackSettings"/></f>
			<haxe_doc>Returns a `MediaTrackSettings` object containing the current values of each of the `MediaStreamTrack`'s constrainable properties.</haxe_doc>
		</getSettings>
		<applyConstraints public="1" set="method">
			<f a="?constraints">
				<x path="Null"><t path="js.html.MediaTrackConstraints"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the `MediaStreamTrack`.
		@throws DOMError</haxe_doc>
		</applyConstraints>
		<haxe_doc><![CDATA[The `MediaStreamTrack` interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.

	Documentation [MediaStreamTrack](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioStreamTrack" params="" file="/usr/local/lib/haxe/std/js/html/AudioStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"AudioStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrack" params="" file="/usr/local/lib/haxe/std/js/html/AudioTrack.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which uniquely identifies the track within the media. This ID can be used to locate a specific track within an audio track list by calling `AudioTrackList.getTrackById()`. The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification.</haxe_doc>
		</id>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the category into which the track falls. For example, the main audio track would have a `kind` of `"main"`.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` providing a human-readable label for the track. For example, an audio commentary track for a movie might have a `label` of `"Commentary with director John Q. Public and actors John Doe and Jane Eod."` This string is empty if no label is provided.</haxe_doc>
		</label>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the audio track's primary language, or an empty string if unknown. The language is specified as a BCP 47 ({{RFC(5646)}}) language code, such as `"en-US"` or `"pt-BR"`.</haxe_doc>
		</language>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean value which controls whether or not the audio track's sound is enabled. Setting this value to `false` mutes the track's audio.</haxe_doc>
		</enabled>
		<haxe_doc><![CDATA[The `AudioTrack` interface represents a single audio track from one of the HTML media elements, `audio` or `video`. 

	Documentation [AudioTrack](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrackList" params="" file="/usr/local/lib/haxe/std/js/html/AudioTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of tracks in the list.</haxe_doc>
		</length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.AudioTrack"/>
</f></getTrackById>
		<haxe_doc><![CDATA[The `AudioTrackList` interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate `AudioTrack` object in the list.

	Documentation [AudioTrackList](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.AutoKeyword" params="" file="/usr/local/lib/haxe/std/js/html/AutoKeyword.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AutoKeyword.AutoKeyword_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/AutoKeyword.hx" private="1" module="js.html.AutoKeyword" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.BRElement" params="" file="/usr/local/lib/haxe/std/js/html/BRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the flow of text around floating objects.</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `HTMLBRElement` interface represents a HTML line break element (`br`). It inherits from `HTMLElement`.

	Documentation [HTMLBRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBRElement"</e></m></meta>
	</class>
	<class path="js.html.BarProp" params="" file="/usr/local/lib/haxe/std/js/html/BarProp.hx" extern="1">
		<visible public="1"><x path="Bool"/></visible>
		<meta><m n=":native"><e>"BarProp"</e></m></meta>
	</class>
	<class path="js.html.BaseElement" params="" file="/usr/local/lib/haxe/std/js/html/BaseElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `href` HTML attribute, containing a base URL for relative URLs in the document.</haxe_doc>
		</href>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified.</haxe_doc>
		</target>
		<haxe_doc><![CDATA[The `HTMLBaseElement` interface contains the base URI for a document. This object inherits all of the properties and methods as described in the `HTMLElement` interface.

	Documentation [HTMLBaseElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBaseElement"</e></m></meta>
	</class>
	<class path="js.html.Blob" params="" file="/usr/local/lib/haxe/std/js/html/Blob.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The size, in bytes, of the data contained in the `Blob` object.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string indicating the MIME type of the data contained in the `Blob`. If the type is unknown, this string is empty.</haxe_doc>
		</type>
		<slice public="1" set="method">
			<f a="?start:?end:?contentType">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="js.html.Blob"/>
			</f>
			<haxe_doc>Returns a new `Blob` object containing the data in the specified range of bytes of the source `Blob`.
		@throws DOMError</haxe_doc>
		</slice>
		<new public="1" set="method">
			<f a="?blobParts:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.lib.ArrayBuffer"/>
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<x path="haxe.extern.EitherType">
			<c path="js.html.Blob"/>
			<c path="String"/>
		</x>
	</x>
</x></c>
				<x path="Null"><t path="js.html.BlobPropertyBag"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `Blob` object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The `File` interface is based on `Blob`, inheriting blob functionality and expanding it to support files on the user's system.

	Documentation [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Blob$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Blob>]]></haxe_doc>
		<meta><m n=":native"><e>"Blob"</e></m></meta>
	</class>
	<typedef path="js.html.BlobPropertyBag" params="" file="/usr/local/lib/haxe/std/js/html/BlobPropertyBag.hx"><a>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<endings>
		<x path="Null"><x path="js.html.EndingTypes"/></x>
		<meta><m n=":optional"/></meta>
	</endings>
</a></typedef>
	<class path="js.html.BodyElement" params="" file="/usr/local/lib/haxe/std/js/html/BodyElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the foreground color of text.</haxe_doc>
		</text>
		<link public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of unvisited links.</haxe_doc>
		</link>
		<vLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of visited links.</haxe_doc>
		</vLink>
		<aLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of active hyperlinks.</haxe_doc>
		</aLink>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the background color for the document.</haxe_doc>
		</bgColor>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it.</haxe_doc>
		</background>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLBodyElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating body elements.

	Documentation [HTMLBodyElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBodyElement"</e></m></meta>
	</class>
	<class path="js.html.ButtonElement" params="" file="/usr/local/lib/haxe/std/js/html/ButtonElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.</haxe_doc>
		</autofocus>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control is disabled, meaning that it does not accept any clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is the ID of that form element.
		
			If the button is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<formAction public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the `action` attribute of the `form` element that owns this element.</haxe_doc>
		</formAction>
		<formEnctype public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the type of content that is used to submit the form to the server. If specified, this attribute overrides the `enctype` attribute of the `form` element that owns this element.</haxe_doc>
		</formEnctype>
		<formMethod public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the `method` attribute of the `form` element that owns this element.</haxe_doc>
		</formMethod>
		<formNoValidate public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the `novalidate` attribute of the `form` element that owns this element.</haxe_doc>
		</formNoValidate>
		<formTarget public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the `target` attribute of the `form` element that owns this element.</haxe_doc>
		</formTarget>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the object when submitted with a form. {{HTMLVersionInline(5)}} If specified, it must not be the empty string.</haxe_doc>
		</name>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Is a `DOMString` indicating the behavior of the button. This is an enumerated attribute with the following possible values:
			
				`"submit"`: The button submits the form. This is the default value if the attribute is not specified, {{HTMLVersionInline(5)}} or if it is dynamically changed to an empty or invalid value.
				`"reset"`: The button resets the form.
				`"button"`: The button does nothing.
				`"menu"`: The button displays a menu. <em>(experimental)</em>]]></haxe_doc>
		</type>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the current form control value of the button.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the button is a candidate for constraint validation. It is `false` if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Is a `ValidityState` representing the validity states that this button is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Is a `NodeList` that represents a list of `label` elements that are labels for this button.</haxe_doc>
		</labels>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLButtonElement` interface provides properties and methods (beyond the `button` object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.

	Documentation [HTMLButtonElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLButtonElement"</e></m></meta>
	</class>
	<class path="js.html.CharacterData" params="" file="/usr/local/lib/haxe/std/js/html/CharacterData.hx" extern="1">
		<extends path="js.html.Node"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the textual data contained in this object.</haxe_doc>
		</data>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the size of the string contained in `CharacterData.data`.</haxe_doc>
		</length>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<substringData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the part of `CharacterData.data` of the specified length and starting at the specified offset.
		@throws DOMError</haxe_doc>
		</substringData>
		<appendData public="1" set="method">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the given `DOMString` to the `CharacterData.data` string; when this method returns, `data` contains the concatenated `DOMString`.
		@throws DOMError</haxe_doc>
		</appendData>
		<insertData public="1" set="method">
			<f a="offset:data">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the specified characters, at the specified offset, in the `CharacterData.data` string; when this method returns, `data` contains the modified `DOMString`.
		@throws DOMError</haxe_doc>
		</insertData>
		<deleteData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the specified amount of characters, starting at the specified offset, from the `CharacterData.data` string; when this method returns, `data` contains the shortened `DOMString`.
		@throws DOMError</haxe_doc>
		</deleteData>
		<replaceData public="1" set="method">
			<f a="offset:count:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the specified amount of characters, starting at the specified offset, with the specified `DOMString`; when this method returns, `data` contains the modified `DOMString`.
		@throws DOMError</haxe_doc>
		</replaceData>
		<before public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `CharacterData` abstract interface represents a `Node` object that contains characters. This is an abstract interface, meaning there aren't any object of type `CharacterData`: it is implemented by other interfaces, like `Text`, '. In XML, the character sequence '--' cannot be used within a comment.">`Comment`, or `ProcessingInstruction` which aren't abstract.

	Documentation [CharacterData](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CharacterData>]]></haxe_doc>
		<meta><m n=":native"><e>"CharacterData"</e></m></meta>
	</class>
	<class path="js.html.Text" params="" file="/usr/local/lib/haxe/std/js/html/Text.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<wholeText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the text of all `Text` nodes logically adjacent to this `Node`, concatenated in document order.</haxe_doc>
		</wholeText>
		<splitText public="1" set="method">
			<f a="offset">
				<x path="Int"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</splitText>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Text` interface represents the textual content of `Element` or `Attr`.  If an element has no markup within its content, it has a single child implementing `Text` that contains the element's text.  However, if the element contains markup, it is parsed into information items and `Text` nodes that form its children.

	Documentation [Text](https://developer.mozilla.org/en-US/docs/Web/API/Text) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Text$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Text>]]></haxe_doc>
		<meta><m n=":native"><e>"Text"</e></m></meta>
	</class>
	<class path="js.html.CDATASection" params="" file="/usr/local/lib/haxe/std/js/html/CDATASection.hx" extern="1">
		<extends path="js.html.Text"/>
		<haxe_doc><![CDATA[The `CDATASection` interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols `` and `&amp;` don’t need escaping as they normally do when inside a CDATA section.

	Documentation [CDATASection](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CDATASection>]]></haxe_doc>
		<meta><m n=":native"><e>"CDATASection"</e></m></meta>
	</class>
	<abstract path="js.html.CSSBoxType" params="" file="/usr/local/lib/haxe/std/js/html/CSSBoxType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CSSBoxType.CSSBoxType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/CSSBoxType.hx" private="1" module="js.html.CSSBoxType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.CSSRule" params="" file="/usr/local/lib/haxe/std/js/html/CSSRule.hx" extern="1">
		<STYLE_RULE public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STYLE_RULE>
		<CHARSET_RULE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CHARSET_RULE>
		<IMPORT_RULE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</IMPORT_RULE>
		<MEDIA_RULE public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_RULE>
		<FONT_FACE_RULE public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</FONT_FACE_RULE>
		<PAGE_RULE public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</PAGE_RULE>
		<NAMESPACE_RULE public="1" get="inline" set="null" expr="10" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</NAMESPACE_RULE>
		<KEYFRAMES_RULE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</KEYFRAMES_RULE>
		<KEYFRAME_RULE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</KEYFRAME_RULE>
		<COUNTER_STYLE_RULE public="1" get="inline" set="null" expr="11" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</COUNTER_STYLE_RULE>
		<SUPPORTS_RULE public="1" get="inline" set="null" expr="12" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SUPPORTS_RULE>
		<FONT_FEATURE_VALUES_RULE public="1" get="inline" set="null" expr="14" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</FONT_FEATURE_VALUES_RULE>
		<type public="1" set="null"><x path="Int"/></type>
		<cssText public="1"><c path="String"/></cssText>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<parentStyleSheet public="1" set="null"><c path="js.html.CSSStyleSheet"/></parentStyleSheet>
		<haxe_doc><![CDATA[The `CSSRule` interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.

	Documentation [CSSRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRule"</e></m></meta>
	</class>
	<class path="js.html.CSSRuleList" params="" file="/usr/local/lib/haxe/std/js/html/CSSRuleList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.CSSRule"/>
</f></item>
		<haxe_doc><![CDATA[A `CSSRuleList` is an (indirect-modify only) array-like object containing an ordered collection of `CSSRule` objects.

	Documentation [CSSRuleList](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRuleList"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleDeclaration" params="" file="/usr/local/lib/haxe/std/js/html/CSSStyleDeclaration.hx" extern="1">
		<cssText public="1"><c path="String"/></cssText>
		<length public="1" set="null"><x path="Int"/></length>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<alignContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-content" CSS property.</haxe_doc>
		</alignContent>
		<alignItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-items" CSS property.</haxe_doc>
		</alignItems>
		<alignSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-self" CSS property.</haxe_doc>
		</alignSelf>
		<alignmentAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-adjust" CSS property.</haxe_doc>
		</alignmentAdjust>
		<alignmentBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-baseline" CSS property.</haxe_doc>
		</alignmentBaseline>
		<all public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "all" CSS property.</haxe_doc>
		</all>
		<anchorPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "anchor-point" CSS property.</haxe_doc>
		</anchorPoint>
		<animation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation" CSS property.</haxe_doc>
		</animation>
		<animationDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-delay" CSS property.</haxe_doc>
		</animationDelay>
		<animationDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-direction" CSS property.</haxe_doc>
		</animationDirection>
		<animationDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-duration" CSS property.</haxe_doc>
		</animationDuration>
		<animationFillMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-fill-mode" CSS property.</haxe_doc>
		</animationFillMode>
		<animationIterationCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-iteration-count" CSS property.</haxe_doc>
		</animationIterationCount>
		<animationName public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-name" CSS property.</haxe_doc>
		</animationName>
		<animationPlayState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-play-state" CSS property.</haxe_doc>
		</animationPlayState>
		<animationTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-timing-function" CSS property.</haxe_doc>
		</animationTimingFunction>
		<azimuth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "azimuth" CSS property.</haxe_doc>
		</azimuth>
		<backfaceVisibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "backface-visibility" CSS property.</haxe_doc>
		</backfaceVisibility>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background" CSS property.</haxe_doc>
		</background>
		<backgroundAttachment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-attachment" CSS property.</haxe_doc>
		</backgroundAttachment>
		<backgroundBlendMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-blend-mode" CSS property.</haxe_doc>
		</backgroundBlendMode>
		<backgroundClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-clip" CSS property.</haxe_doc>
		</backgroundClip>
		<backgroundColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-color" CSS property.</haxe_doc>
		</backgroundColor>
		<backgroundImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-image" CSS property.</haxe_doc>
		</backgroundImage>
		<backgroundOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-origin" CSS property.</haxe_doc>
		</backgroundOrigin>
		<backgroundPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position" CSS property.</haxe_doc>
		</backgroundPosition>
		<backgroundPositionX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position-x" CSS property.</haxe_doc>
		</backgroundPositionX>
		<backgroundPositionY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position-y" CSS property.</haxe_doc>
		</backgroundPositionY>
		<backgroundRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat" CSS property.</haxe_doc>
		</backgroundRepeat>
		<backgroundRepeatX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat-x" CSS property.</haxe_doc>
		</backgroundRepeatX>
		<backgroundRepeatY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat-y" CSS property.</haxe_doc>
		</backgroundRepeatY>
		<backgroundSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-size" CSS property.</haxe_doc>
		</backgroundSize>
		<baselineShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "baseline-shift" CSS property.</haxe_doc>
		</baselineShift>
		<binding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "binding" CSS property.</haxe_doc>
		</binding>
		<bleed public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bleed" CSS property.</haxe_doc>
		</bleed>
		<blockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "block-size" CSS property.</haxe_doc>
		</blockSize>
		<bookmarkLabel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-label" CSS property.</haxe_doc>
		</bookmarkLabel>
		<bookmarkLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-level" CSS property.</haxe_doc>
		</bookmarkLevel>
		<bookmarkState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-state" CSS property.</haxe_doc>
		</bookmarkState>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border" CSS property.</haxe_doc>
		</border>
		<borderBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end" CSS property.</haxe_doc>
		</borderBlockEnd>
		<borderBlockEndColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-color" CSS property.</haxe_doc>
		</borderBlockEndColor>
		<borderBlockEndStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-style" CSS property.</haxe_doc>
		</borderBlockEndStyle>
		<borderBlockEndWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-width" CSS property.</haxe_doc>
		</borderBlockEndWidth>
		<borderBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start" CSS property.</haxe_doc>
		</borderBlockStart>
		<borderBlockStartColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-color" CSS property.</haxe_doc>
		</borderBlockStartColor>
		<borderBlockStartStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-style" CSS property.</haxe_doc>
		</borderBlockStartStyle>
		<borderBlockStartWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-width" CSS property.</haxe_doc>
		</borderBlockStartWidth>
		<borderBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom" CSS property.</haxe_doc>
		</borderBottom>
		<borderBottomColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-color" CSS property.</haxe_doc>
		</borderBottomColor>
		<borderBottomLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-left-radius" CSS property.</haxe_doc>
		</borderBottomLeftRadius>
		<borderBottomRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-right-radius" CSS property.</haxe_doc>
		</borderBottomRightRadius>
		<borderBottomStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-style" CSS property.</haxe_doc>
		</borderBottomStyle>
		<borderBottomWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-width" CSS property.</haxe_doc>
		</borderBottomWidth>
		<borderCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-collapse" CSS property.</haxe_doc>
		</borderCollapse>
		<borderColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-color" CSS property.</haxe_doc>
		</borderColor>
		<borderImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image" CSS property.</haxe_doc>
		</borderImage>
		<borderImageOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-outset" CSS property.</haxe_doc>
		</borderImageOutset>
		<borderImageRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-repeat" CSS property.</haxe_doc>
		</borderImageRepeat>
		<borderImageSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-slice" CSS property.</haxe_doc>
		</borderImageSlice>
		<borderImageSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-source" CSS property.</haxe_doc>
		</borderImageSource>
		<borderImageWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-width" CSS property.</haxe_doc>
		</borderImageWidth>
		<borderInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end" CSS property.</haxe_doc>
		</borderInlineEnd>
		<borderInlineEndColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-color" CSS property.</haxe_doc>
		</borderInlineEndColor>
		<borderInlineEndStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-style" CSS property.</haxe_doc>
		</borderInlineEndStyle>
		<borderInlineEndWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-width" CSS property.</haxe_doc>
		</borderInlineEndWidth>
		<borderInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start" CSS property.</haxe_doc>
		</borderInlineStart>
		<borderInlineStartColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-color" CSS property.</haxe_doc>
		</borderInlineStartColor>
		<borderInlineStartStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-style" CSS property.</haxe_doc>
		</borderInlineStartStyle>
		<borderInlineStartWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-width" CSS property.</haxe_doc>
		</borderInlineStartWidth>
		<borderLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left" CSS property.</haxe_doc>
		</borderLeft>
		<borderLeftColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-color" CSS property.</haxe_doc>
		</borderLeftColor>
		<borderLeftStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-style" CSS property.</haxe_doc>
		</borderLeftStyle>
		<borderLeftWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-width" CSS property.</haxe_doc>
		</borderLeftWidth>
		<borderRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-radius" CSS property.</haxe_doc>
		</borderRadius>
		<borderRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right" CSS property.</haxe_doc>
		</borderRight>
		<borderRightColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-color" CSS property.</haxe_doc>
		</borderRightColor>
		<borderRightStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-style" CSS property.</haxe_doc>
		</borderRightStyle>
		<borderRightWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-width" CSS property.</haxe_doc>
		</borderRightWidth>
		<borderSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-spacing" CSS property.</haxe_doc>
		</borderSpacing>
		<borderStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-style" CSS property.</haxe_doc>
		</borderStyle>
		<borderTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top" CSS property.</haxe_doc>
		</borderTop>
		<borderTopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-color" CSS property.</haxe_doc>
		</borderTopColor>
		<borderTopLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-left-radius" CSS property.</haxe_doc>
		</borderTopLeftRadius>
		<borderTopRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-right-radius" CSS property.</haxe_doc>
		</borderTopRightRadius>
		<borderTopStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-style" CSS property.</haxe_doc>
		</borderTopStyle>
		<borderTopWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-width" CSS property.</haxe_doc>
		</borderTopWidth>
		<borderWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-width" CSS property.</haxe_doc>
		</borderWidth>
		<bottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bottom" CSS property.</haxe_doc>
		</bottom>
		<boxDecorationBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-decoration-break" CSS property.</haxe_doc>
		</boxDecorationBreak>
		<boxShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-shadow" CSS property.</haxe_doc>
		</boxShadow>
		<boxSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-sizing" CSS property.</haxe_doc>
		</boxSizing>
		<boxSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-snap" CSS property.</haxe_doc>
		</boxSnap>
		<boxSuppress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-suppress" CSS property.</haxe_doc>
		</boxSuppress>
		<breakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-after" CSS property.</haxe_doc>
		</breakAfter>
		<breakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-before" CSS property.</haxe_doc>
		</breakBefore>
		<breakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-inside" CSS property.</haxe_doc>
		</breakInside>
		<bufferedRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "buffered-rendering" CSS property.</haxe_doc>
		</bufferedRendering>
		<captionSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caption-side" CSS property.</haxe_doc>
		</captionSide>
		<caretColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caret-color" CSS property.</haxe_doc>
		</caretColor>
		<chains public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "chains" CSS property.</haxe_doc>
		</chains>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clear" CSS property.</haxe_doc>
		</clear>
		<clip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip" CSS property.</haxe_doc>
		</clip>
		<clipPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-path" CSS property.</haxe_doc>
		</clipPath>
		<clipRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-rule" CSS property.</haxe_doc>
		</clipRule>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color" CSS property.</haxe_doc>
		</color>
		<colorAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-adjust" CSS property.</haxe_doc>
		</colorAdjust>
		<colorInterpolation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation" CSS property.</haxe_doc>
		</colorInterpolation>
		<colorInterpolationFilters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation-filters" CSS property.</haxe_doc>
		</colorInterpolationFilters>
		<colorRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-rendering" CSS property.</haxe_doc>
		</colorRendering>
		<columnCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-count" CSS property.</haxe_doc>
		</columnCount>
		<columnFill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-fill" CSS property.</haxe_doc>
		</columnFill>
		<columnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-gap" CSS property.</haxe_doc>
		</columnGap>
		<columnRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule" CSS property.</haxe_doc>
		</columnRule>
		<columnRuleColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-color" CSS property.</haxe_doc>
		</columnRuleColor>
		<columnRuleStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-style" CSS property.</haxe_doc>
		</columnRuleStyle>
		<columnRuleWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-width" CSS property.</haxe_doc>
		</columnRuleWidth>
		<columnSpan public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-span" CSS property.</haxe_doc>
		</columnSpan>
		<columnWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-width" CSS property.</haxe_doc>
		</columnWidth>
		<columns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "columns" CSS property.</haxe_doc>
		</columns>
		<contain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "contain" CSS property.</haxe_doc>
		</contain>
		<content public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "content" CSS property.</haxe_doc>
		</content>
		<counterIncrement public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-increment" CSS property.</haxe_doc>
		</counterIncrement>
		<counterReset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-reset" CSS property.</haxe_doc>
		</counterReset>
		<counterSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-set" CSS property.</haxe_doc>
		</counterSet>
		<crop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "crop" CSS property.</haxe_doc>
		</crop>
		<cssFloat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "css-float" CSS property.</haxe_doc>
		</cssFloat>
		<cue public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue" CSS property.</haxe_doc>
		</cue>
		<cueAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-after" CSS property.</haxe_doc>
		</cueAfter>
		<cueBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-before" CSS property.</haxe_doc>
		</cueBefore>
		<cursor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cursor" CSS property.</haxe_doc>
		</cursor>
		<cx public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cx" CSS property.</haxe_doc>
		</cx>
		<cy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cy" CSS property.</haxe_doc>
		</cy>
		<d public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "d" CSS property.</haxe_doc>
		</d>
		<direction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "direction" CSS property.</haxe_doc>
		</direction>
		<display public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display" CSS property.</haxe_doc>
		</display>
		<displayInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-inside" CSS property.</haxe_doc>
		</displayInside>
		<displayList public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-list" CSS property.</haxe_doc>
		</displayList>
		<displayOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-outside" CSS property.</haxe_doc>
		</displayOutside>
		<dominantBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "dominant-baseline" CSS property.</haxe_doc>
		</dominantBaseline>
		<elevation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "elevation" CSS property.</haxe_doc>
		</elevation>
		<emptyCells public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "empty-cells" CSS property.</haxe_doc>
		</emptyCells>
		<fill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill" CSS property.</haxe_doc>
		</fill>
		<fillOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill-opacity" CSS property.</haxe_doc>
		</fillOpacity>
		<fillRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill-rule" CSS property.</haxe_doc>
		</fillRule>
		<filter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "filter" CSS property.</haxe_doc>
		</filter>
		<flex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex" CSS property.</haxe_doc>
		</flex>
		<flexBasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-basis" CSS property.</haxe_doc>
		</flexBasis>
		<flexDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-direction" CSS property.</haxe_doc>
		</flexDirection>
		<flexFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-flow" CSS property.</haxe_doc>
		</flexFlow>
		<flexGrow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-grow" CSS property.</haxe_doc>
		</flexGrow>
		<flexShrink public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-shrink" CSS property.</haxe_doc>
		</flexShrink>
		<flexWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-wrap" CSS property.</haxe_doc>
		</flexWrap>
		<float public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float" CSS property.</haxe_doc>
		</float>
		<floatOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float-offset" CSS property.</haxe_doc>
		</floatOffset>
		<floodColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-color" CSS property.</haxe_doc>
		</floodColor>
		<floodOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-opacity" CSS property.</haxe_doc>
		</floodOpacity>
		<flowFrom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-from" CSS property.</haxe_doc>
		</flowFrom>
		<flowInto public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-into" CSS property.</haxe_doc>
		</flowInto>
		<font public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font" CSS property.</haxe_doc>
		</font>
		<fontDisplay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-display" CSS property.</haxe_doc>
		</fontDisplay>
		<fontFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-family" CSS property.</haxe_doc>
		</fontFamily>
		<fontFeatureSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-feature-settings" CSS property.</haxe_doc>
		</fontFeatureSettings>
		<fontKerning public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-kerning" CSS property.</haxe_doc>
		</fontKerning>
		<fontLanguageOverride public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-language-override" CSS property.</haxe_doc>
		</fontLanguageOverride>
		<fontOpticalSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-optical-sizing" CSS property.</haxe_doc>
		</fontOpticalSizing>
		<fontSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size" CSS property.</haxe_doc>
		</fontSize>
		<fontSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size-adjust" CSS property.</haxe_doc>
		</fontSizeAdjust>
		<fontStretch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-stretch" CSS property.</haxe_doc>
		</fontStretch>
		<fontStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-style" CSS property.</haxe_doc>
		</fontStyle>
		<fontSynthesis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-synthesis" CSS property.</haxe_doc>
		</fontSynthesis>
		<fontVariant public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant" CSS property.</haxe_doc>
		</fontVariant>
		<fontVariantAlternates public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-alternates" CSS property.</haxe_doc>
		</fontVariantAlternates>
		<fontVariantCaps public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-caps" CSS property.</haxe_doc>
		</fontVariantCaps>
		<fontVariantEastAsian public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-east-asian" CSS property.</haxe_doc>
		</fontVariantEastAsian>
		<fontVariantLigatures public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-ligatures" CSS property.</haxe_doc>
		</fontVariantLigatures>
		<fontVariantNumeric public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-numeric" CSS property.</haxe_doc>
		</fontVariantNumeric>
		<fontVariantPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-position" CSS property.</haxe_doc>
		</fontVariantPosition>
		<fontVariationSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variation-settings" CSS property.</haxe_doc>
		</fontVariationSettings>
		<fontWeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-weight" CSS property.</haxe_doc>
		</fontWeight>
		<gap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "gap" CSS property.</haxe_doc>
		</gap>
		<grid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid" CSS property.</haxe_doc>
		</grid>
		<gridArea public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-area" CSS property.</haxe_doc>
		</gridArea>
		<gridAutoColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-columns" CSS property.</haxe_doc>
		</gridAutoColumns>
		<gridAutoFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-flow" CSS property.</haxe_doc>
		</gridAutoFlow>
		<gridAutoRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-rows" CSS property.</haxe_doc>
		</gridAutoRows>
		<gridColumn public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column" CSS property.</haxe_doc>
		</gridColumn>
		<gridColumnEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-end" CSS property.</haxe_doc>
		</gridColumnEnd>
		<gridColumnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-gap" CSS property.</haxe_doc>
		</gridColumnGap>
		<gridColumnStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-start" CSS property.</haxe_doc>
		</gridColumnStart>
		<gridGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-gap" CSS property.</haxe_doc>
		</gridGap>
		<gridRow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row" CSS property.</haxe_doc>
		</gridRow>
		<gridRowEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-end" CSS property.</haxe_doc>
		</gridRowEnd>
		<gridRowGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-gap" CSS property.</haxe_doc>
		</gridRowGap>
		<gridRowStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-start" CSS property.</haxe_doc>
		</gridRowStart>
		<gridTemplate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template" CSS property.</haxe_doc>
		</gridTemplate>
		<gridTemplateAreas public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-areas" CSS property.</haxe_doc>
		</gridTemplateAreas>
		<gridTemplateColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-columns" CSS property.</haxe_doc>
		</gridTemplateColumns>
		<gridTemplateRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-rows" CSS property.</haxe_doc>
		</gridTemplateRows>
		<hangingPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hanging-punctuation" CSS property.</haxe_doc>
		</hangingPunctuation>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "height" CSS property.</haxe_doc>
		</height>
		<hyphens public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hyphens" CSS property.</haxe_doc>
		</hyphens>
		<icon public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "icon" CSS property.</haxe_doc>
		</icon>
		<imageOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-orientation" CSS property.</haxe_doc>
		</imageOrientation>
		<imageRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-rendering" CSS property.</haxe_doc>
		</imageRendering>
		<imageResolution public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-resolution" CSS property.</haxe_doc>
		</imageResolution>
		<imeMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ime-mode" CSS property.</haxe_doc>
		</imeMode>
		<initialLetters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "initial-letters" CSS property.</haxe_doc>
		</initialLetters>
		<inlineBoxAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-box-align" CSS property.</haxe_doc>
		</inlineBoxAlign>
		<inlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-size" CSS property.</haxe_doc>
		</inlineSize>
		<isolation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "isolation" CSS property.</haxe_doc>
		</isolation>
		<justifyContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-content" CSS property.</haxe_doc>
		</justifyContent>
		<justifyItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-items" CSS property.</haxe_doc>
		</justifyItems>
		<justifySelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-self" CSS property.</haxe_doc>
		</justifySelf>
		<left public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "left" CSS property.</haxe_doc>
		</left>
		<letterSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "letter-spacing" CSS property.</haxe_doc>
		</letterSpacing>
		<lightingColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "lighting-color" CSS property.</haxe_doc>
		</lightingColor>
		<lineBoxContain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-box-contain" CSS property.</haxe_doc>
		</lineBoxContain>
		<lineBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-break" CSS property.</haxe_doc>
		</lineBreak>
		<lineGrid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-grid" CSS property.</haxe_doc>
		</lineGrid>
		<lineHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-height" CSS property.</haxe_doc>
		</lineHeight>
		<lineSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-snap" CSS property.</haxe_doc>
		</lineSnap>
		<lineStacking public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking" CSS property.</haxe_doc>
		</lineStacking>
		<lineStackingRuby public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-ruby" CSS property.</haxe_doc>
		</lineStackingRuby>
		<lineStackingShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-shift" CSS property.</haxe_doc>
		</lineStackingShift>
		<lineStackingStrategy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-strategy" CSS property.</haxe_doc>
		</lineStackingStrategy>
		<listStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style" CSS property.</haxe_doc>
		</listStyle>
		<listStyleImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-image" CSS property.</haxe_doc>
		</listStyleImage>
		<listStylePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-position" CSS property.</haxe_doc>
		</listStylePosition>
		<listStyleType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-type" CSS property.</haxe_doc>
		</listStyleType>
		<margin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin" CSS property.</haxe_doc>
		</margin>
		<marginBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-block-end" CSS property.</haxe_doc>
		</marginBlockEnd>
		<marginBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-block-start" CSS property.</haxe_doc>
		</marginBlockStart>
		<marginBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-bottom" CSS property.</haxe_doc>
		</marginBottom>
		<marginInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-inline-end" CSS property.</haxe_doc>
		</marginInlineEnd>
		<marginInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-inline-start" CSS property.</haxe_doc>
		</marginInlineStart>
		<marginLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-left" CSS property.</haxe_doc>
		</marginLeft>
		<marginRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-right" CSS property.</haxe_doc>
		</marginRight>
		<marginTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-top" CSS property.</haxe_doc>
		</marginTop>
		<marker public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker" CSS property.</haxe_doc>
		</marker>
		<markerEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-end" CSS property.</haxe_doc>
		</markerEnd>
		<markerMid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-mid" CSS property.</haxe_doc>
		</markerMid>
		<markerOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-offset" CSS property.</haxe_doc>
		</markerOffset>
		<markerSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-side" CSS property.</haxe_doc>
		</markerSide>
		<markerStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-start" CSS property.</haxe_doc>
		</markerStart>
		<marks public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marks" CSS property.</haxe_doc>
		</marks>
		<mask public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask" CSS property.</haxe_doc>
		</mask>
		<maskBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box" CSS property.</haxe_doc>
		</maskBox>
		<maskBoxOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-outset" CSS property.</haxe_doc>
		</maskBoxOutset>
		<maskBoxRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-repeat" CSS property.</haxe_doc>
		</maskBoxRepeat>
		<maskBoxSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-slice" CSS property.</haxe_doc>
		</maskBoxSlice>
		<maskBoxSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-source" CSS property.</haxe_doc>
		</maskBoxSource>
		<maskBoxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-width" CSS property.</haxe_doc>
		</maskBoxWidth>
		<maskClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-clip" CSS property.</haxe_doc>
		</maskClip>
		<maskComposite public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-composite" CSS property.</haxe_doc>
		</maskComposite>
		<maskImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-image" CSS property.</haxe_doc>
		</maskImage>
		<maskMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-mode" CSS property.</haxe_doc>
		</maskMode>
		<maskOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-origin" CSS property.</haxe_doc>
		</maskOrigin>
		<maskPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position" CSS property.</haxe_doc>
		</maskPosition>
		<maskPositionX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position-x" CSS property.</haxe_doc>
		</maskPositionX>
		<maskPositionY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position-y" CSS property.</haxe_doc>
		</maskPositionY>
		<maskRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-repeat" CSS property.</haxe_doc>
		</maskRepeat>
		<maskSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-size" CSS property.</haxe_doc>
		</maskSize>
		<maskSourceType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-source-type" CSS property.</haxe_doc>
		</maskSourceType>
		<maskType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-type" CSS property.</haxe_doc>
		</maskType>
		<maxBlockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-block-size" CSS property.</haxe_doc>
		</maxBlockSize>
		<maxHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-height" CSS property.</haxe_doc>
		</maxHeight>
		<maxInlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-inline-size" CSS property.</haxe_doc>
		</maxInlineSize>
		<maxLines public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-lines" CSS property.</haxe_doc>
		</maxLines>
		<maxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-width" CSS property.</haxe_doc>
		</maxWidth>
		<maxZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-zoom" CSS property.</haxe_doc>
		</maxZoom>
		<minBlockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-block-size" CSS property.</haxe_doc>
		</minBlockSize>
		<minHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-height" CSS property.</haxe_doc>
		</minHeight>
		<minInlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-inline-size" CSS property.</haxe_doc>
		</minInlineSize>
		<minWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-width" CSS property.</haxe_doc>
		</minWidth>
		<minZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-zoom" CSS property.</haxe_doc>
		</minZoom>
		<mixBlendMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mix-blend-mode" CSS property.</haxe_doc>
		</mixBlendMode>
		<moveTo public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "move-to" CSS property.</haxe_doc>
		</moveTo>
		<navDown public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-down" CSS property.</haxe_doc>
		</navDown>
		<navIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-index" CSS property.</haxe_doc>
		</navIndex>
		<navLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-left" CSS property.</haxe_doc>
		</navLeft>
		<navRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-right" CSS property.</haxe_doc>
		</navRight>
		<navUp public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-up" CSS property.</haxe_doc>
		</navUp>
		<objectFit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-fit" CSS property.</haxe_doc>
		</objectFit>
		<objectPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-position" CSS property.</haxe_doc>
		</objectPosition>
		<offset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset" CSS property.</haxe_doc>
		</offset>
		<offsetBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-block-end" CSS property.</haxe_doc>
		</offsetBlockEnd>
		<offsetBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-block-start" CSS property.</haxe_doc>
		</offsetBlockStart>
		<offsetDistance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-distance" CSS property.</haxe_doc>
		</offsetDistance>
		<offsetInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-inline-end" CSS property.</haxe_doc>
		</offsetInlineEnd>
		<offsetInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-inline-start" CSS property.</haxe_doc>
		</offsetInlineStart>
		<offsetPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-path" CSS property.</haxe_doc>
		</offsetPath>
		<offsetRotate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-rotate" CSS property.</haxe_doc>
		</offsetRotate>
		<opacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "opacity" CSS property.</haxe_doc>
		</opacity>
		<order public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "order" CSS property.</haxe_doc>
		</order>
		<orientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orientation" CSS property.</haxe_doc>
		</orientation>
		<orphans public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orphans" CSS property.</haxe_doc>
		</orphans>
		<outline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline" CSS property.</haxe_doc>
		</outline>
		<outlineColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-color" CSS property.</haxe_doc>
		</outlineColor>
		<outlineOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-offset" CSS property.</haxe_doc>
		</outlineOffset>
		<outlineStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-style" CSS property.</haxe_doc>
		</outlineStyle>
		<outlineWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-width" CSS property.</haxe_doc>
		</outlineWidth>
		<overflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow" CSS property.</haxe_doc>
		</overflow>
		<overflowAnchor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-anchor" CSS property.</haxe_doc>
		</overflowAnchor>
		<overflowWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-wrap" CSS property.</haxe_doc>
		</overflowWrap>
		<overflowX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-x" CSS property.</haxe_doc>
		</overflowX>
		<overflowY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-y" CSS property.</haxe_doc>
		</overflowY>
		<overscrollBehavior public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior" CSS property.</haxe_doc>
		</overscrollBehavior>
		<overscrollBehaviorX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior-x" CSS property.</haxe_doc>
		</overscrollBehaviorX>
		<overscrollBehaviorY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior-y" CSS property.</haxe_doc>
		</overscrollBehaviorY>
		<padding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding" CSS property.</haxe_doc>
		</padding>
		<paddingBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-block-end" CSS property.</haxe_doc>
		</paddingBlockEnd>
		<paddingBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-block-start" CSS property.</haxe_doc>
		</paddingBlockStart>
		<paddingBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-bottom" CSS property.</haxe_doc>
		</paddingBottom>
		<paddingInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-inline-end" CSS property.</haxe_doc>
		</paddingInlineEnd>
		<paddingInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-inline-start" CSS property.</haxe_doc>
		</paddingInlineStart>
		<paddingLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-left" CSS property.</haxe_doc>
		</paddingLeft>
		<paddingRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-right" CSS property.</haxe_doc>
		</paddingRight>
		<paddingTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-top" CSS property.</haxe_doc>
		</paddingTop>
		<page public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page" CSS property.</haxe_doc>
		</page>
		<pageBreakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-after" CSS property.</haxe_doc>
		</pageBreakAfter>
		<pageBreakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-before" CSS property.</haxe_doc>
		</pageBreakBefore>
		<pageBreakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-inside" CSS property.</haxe_doc>
		</pageBreakInside>
		<pagePolicy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-policy" CSS property.</haxe_doc>
		</pagePolicy>
		<paintOrder public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "paint-order" CSS property.</haxe_doc>
		</paintOrder>
		<pause public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause" CSS property.</haxe_doc>
		</pause>
		<pauseAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-after" CSS property.</haxe_doc>
		</pauseAfter>
		<pauseBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-before" CSS property.</haxe_doc>
		</pauseBefore>
		<perspective public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective" CSS property.</haxe_doc>
		</perspective>
		<perspectiveOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective-origin" CSS property.</haxe_doc>
		</perspectiveOrigin>
		<pitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch" CSS property.</haxe_doc>
		</pitch>
		<pitchRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch-range" CSS property.</haxe_doc>
		</pitchRange>
		<placeContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-content" CSS property.</haxe_doc>
		</placeContent>
		<placeItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-items" CSS property.</haxe_doc>
		</placeItems>
		<placeSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-self" CSS property.</haxe_doc>
		</placeSelf>
		<playDuring public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "play-during" CSS property.</haxe_doc>
		</playDuring>
		<pointerEvents public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pointer-events" CSS property.</haxe_doc>
		</pointerEvents>
		<position public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "position" CSS property.</haxe_doc>
		</position>
		<presentationLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "presentation-level" CSS property.</haxe_doc>
		</presentationLevel>
		<quotes public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "quotes" CSS property.</haxe_doc>
		</quotes>
		<r public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "r" CSS property.</haxe_doc>
		</r>
		<regionFragment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "region-fragment" CSS property.</haxe_doc>
		</regionFragment>
		<resize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "resize" CSS property.</haxe_doc>
		</resize>
		<rest public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest" CSS property.</haxe_doc>
		</rest>
		<restAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-after" CSS property.</haxe_doc>
		</restAfter>
		<restBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-before" CSS property.</haxe_doc>
		</restBefore>
		<richness public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "richness" CSS property.</haxe_doc>
		</richness>
		<right public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "right" CSS property.</haxe_doc>
		</right>
		<rotation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation" CSS property.</haxe_doc>
		</rotation>
		<rotationPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation-point" CSS property.</haxe_doc>
		</rotationPoint>
		<rowGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "row-gap" CSS property.</haxe_doc>
		</rowGap>
		<rubyAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-align" CSS property.</haxe_doc>
		</rubyAlign>
		<rubyMerge public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-merge" CSS property.</haxe_doc>
		</rubyMerge>
		<rubyPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-position" CSS property.</haxe_doc>
		</rubyPosition>
		<rx public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rx" CSS property.</haxe_doc>
		</rx>
		<ry public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ry" CSS property.</haxe_doc>
		</ry>
		<scrollBehavior public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-behavior" CSS property.</haxe_doc>
		</scrollBehavior>
		<scrollSnapCoordinate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-coordinate" CSS property.</haxe_doc>
		</scrollSnapCoordinate>
		<scrollSnapDestination public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-destination" CSS property.</haxe_doc>
		</scrollSnapDestination>
		<scrollSnapPointsX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-points-x" CSS property.</haxe_doc>
		</scrollSnapPointsX>
		<scrollSnapPointsY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-points-y" CSS property.</haxe_doc>
		</scrollSnapPointsY>
		<scrollSnapType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type" CSS property.</haxe_doc>
		</scrollSnapType>
		<scrollSnapTypeX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type-x" CSS property.</haxe_doc>
		</scrollSnapTypeX>
		<scrollSnapTypeY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type-y" CSS property.</haxe_doc>
		</scrollSnapTypeY>
		<shapeImageThreshold public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-image-threshold" CSS property.</haxe_doc>
		</shapeImageThreshold>
		<shapeMargin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-margin" CSS property.</haxe_doc>
		</shapeMargin>
		<shapeOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-outside" CSS property.</haxe_doc>
		</shapeOutside>
		<shapeRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-rendering" CSS property.</haxe_doc>
		</shapeRendering>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "size" CSS property.</haxe_doc>
		</size>
		<speak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak" CSS property.</haxe_doc>
		</speak>
		<speakAs public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-as" CSS property.</haxe_doc>
		</speakAs>
		<speakHeader public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-header" CSS property.</haxe_doc>
		</speakHeader>
		<speakNumeral public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-numeral" CSS property.</haxe_doc>
		</speakNumeral>
		<speakPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-punctuation" CSS property.</haxe_doc>
		</speakPunctuation>
		<speechRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speech-rate" CSS property.</haxe_doc>
		</speechRate>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "src" CSS property.</haxe_doc>
		</src>
		<stopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stop-color" CSS property.</haxe_doc>
		</stopColor>
		<stopOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stop-opacity" CSS property.</haxe_doc>
		</stopOpacity>
		<stress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stress" CSS property.</haxe_doc>
		</stress>
		<stringSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "string-set" CSS property.</haxe_doc>
		</stringSet>
		<stroke public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke" CSS property.</haxe_doc>
		</stroke>
		<strokeDasharray public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-dasharray" CSS property.</haxe_doc>
		</strokeDasharray>
		<strokeDashoffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-dashoffset" CSS property.</haxe_doc>
		</strokeDashoffset>
		<strokeLinecap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-linecap" CSS property.</haxe_doc>
		</strokeLinecap>
		<strokeLinejoin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-linejoin" CSS property.</haxe_doc>
		</strokeLinejoin>
		<strokeMiterlimit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-miterlimit" CSS property.</haxe_doc>
		</strokeMiterlimit>
		<strokeOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-opacity" CSS property.</haxe_doc>
		</strokeOpacity>
		<strokeWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-width" CSS property.</haxe_doc>
		</strokeWidth>
		<tabSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "tab-size" CSS property.</haxe_doc>
		</tabSize>
		<tableLayout public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "table-layout" CSS property.</haxe_doc>
		</tableLayout>
		<textAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align" CSS property.</haxe_doc>
		</textAlign>
		<textAlignLast public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align-last" CSS property.</haxe_doc>
		</textAlignLast>
		<textAnchor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-anchor" CSS property.</haxe_doc>
		</textAnchor>
		<textCombineUpright public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-combine-upright" CSS property.</haxe_doc>
		</textCombineUpright>
		<textDecoration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration" CSS property.</haxe_doc>
		</textDecoration>
		<textDecorationColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-color" CSS property.</haxe_doc>
		</textDecorationColor>
		<textDecorationLine public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-line" CSS property.</haxe_doc>
		</textDecorationLine>
		<textDecorationSkip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip" CSS property.</haxe_doc>
		</textDecorationSkip>
		<textDecorationSkipInk public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip-ink" CSS property.</haxe_doc>
		</textDecorationSkipInk>
		<textDecorationStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-style" CSS property.</haxe_doc>
		</textDecorationStyle>
		<textEmphasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis" CSS property.</haxe_doc>
		</textEmphasis>
		<textEmphasisColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-color" CSS property.</haxe_doc>
		</textEmphasisColor>
		<textEmphasisPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-position" CSS property.</haxe_doc>
		</textEmphasisPosition>
		<textEmphasisStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-style" CSS property.</haxe_doc>
		</textEmphasisStyle>
		<textHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-height" CSS property.</haxe_doc>
		</textHeight>
		<textIndent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-indent" CSS property.</haxe_doc>
		</textIndent>
		<textJustify public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-justify" CSS property.</haxe_doc>
		</textJustify>
		<textOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-orientation" CSS property.</haxe_doc>
		</textOrientation>
		<textOverflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-overflow" CSS property.</haxe_doc>
		</textOverflow>
		<textRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-rendering" CSS property.</haxe_doc>
		</textRendering>
		<textShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-shadow" CSS property.</haxe_doc>
		</textShadow>
		<textSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-size-adjust" CSS property.</haxe_doc>
		</textSizeAdjust>
		<textSpaceCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-space-collapse" CSS property.</haxe_doc>
		</textSpaceCollapse>
		<textTransform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-transform" CSS property.</haxe_doc>
		</textTransform>
		<textUnderlinePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-underline-position" CSS property.</haxe_doc>
		</textUnderlinePosition>
		<textWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-wrap" CSS property.</haxe_doc>
		</textWrap>
		<top public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "top" CSS property.</haxe_doc>
		</top>
		<touchAction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "touch-action" CSS property.</haxe_doc>
		</touchAction>
		<transform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform" CSS property.</haxe_doc>
		</transform>
		<transformBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-box" CSS property.</haxe_doc>
		</transformBox>
		<transformOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-origin" CSS property.</haxe_doc>
		</transformOrigin>
		<transformStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-style" CSS property.</haxe_doc>
		</transformStyle>
		<transition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition" CSS property.</haxe_doc>
		</transition>
		<transitionDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-delay" CSS property.</haxe_doc>
		</transitionDelay>
		<transitionDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-duration" CSS property.</haxe_doc>
		</transitionDuration>
		<transitionProperty public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-property" CSS property.</haxe_doc>
		</transitionProperty>
		<transitionTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-timing-function" CSS property.</haxe_doc>
		</transitionTimingFunction>
		<unicodeBidi public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-bidi" CSS property.</haxe_doc>
		</unicodeBidi>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-range" CSS property.</haxe_doc>
		</unicodeRange>
		<userSelect public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "user-select" CSS property.</haxe_doc>
		</userSelect>
		<userZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "user-zoom" CSS property.</haxe_doc>
		</userZoom>
		<vectorEffect public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vector-effect" CSS property.</haxe_doc>
		</vectorEffect>
		<verticalAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vertical-align" CSS property.</haxe_doc>
		</verticalAlign>
		<visibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "visibility" CSS property.</haxe_doc>
		</visibility>
		<voiceBalance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-balance" CSS property.</haxe_doc>
		</voiceBalance>
		<voiceDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-duration" CSS property.</haxe_doc>
		</voiceDuration>
		<voiceFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-family" CSS property.</haxe_doc>
		</voiceFamily>
		<voicePitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-pitch" CSS property.</haxe_doc>
		</voicePitch>
		<voiceRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-range" CSS property.</haxe_doc>
		</voiceRange>
		<voiceRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-rate" CSS property.</haxe_doc>
		</voiceRate>
		<voiceStress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-stress" CSS property.</haxe_doc>
		</voiceStress>
		<voiceVolume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-volume" CSS property.</haxe_doc>
		</voiceVolume>
		<volume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "volume" CSS property.</haxe_doc>
		</volume>
		<whiteSpace public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "white-space" CSS property.</haxe_doc>
		</whiteSpace>
		<widows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "widows" CSS property.</haxe_doc>
		</widows>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "width" CSS property.</haxe_doc>
		</width>
		<willChange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "will-change" CSS property.</haxe_doc>
		</willChange>
		<wordBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-break" CSS property.</haxe_doc>
		</wordBreak>
		<wordSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-spacing" CSS property.</haxe_doc>
		</wordSpacing>
		<wordWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-wrap" CSS property.</haxe_doc>
		</wordWrap>
		<wrapFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-flow" CSS property.</haxe_doc>
		</wrapFlow>
		<wrapThrough public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-through" CSS property.</haxe_doc>
		</wrapThrough>
		<writingMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "writing-mode" CSS property.</haxe_doc>
		</writingMode>
		<x public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "x" CSS property.</haxe_doc>
		</x>
		<y public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "y" CSS property.</haxe_doc>
		</y>
		<zIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "z-index" CSS property.</haxe_doc>
		</zIndex>
		<zoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "zoom" CSS property.</haxe_doc>
		</zoom>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<getPropertyValue public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getPropertyValue>
		<getPropertyPriority public="1" set="method"><f a="property">
	<c path="String"/>
	<c path="String"/>
</f></getPropertyPriority>
		<setProperty public="1" set="method">
			<f a="property:value:?priority" v="::&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setProperty>
		<removeProperty public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeProperty>
		<haxe_doc><![CDATA[`CSSStyleDeclaration` represents a collection of CSS property-value pairs. It is used in a few APIs:

	Documentation [CSSStyleDeclaration](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleDeclaration"</e></m></meta>
	</class>
	<class path="js.html.StyleSheet" params="" file="/usr/local/lib/haxe/std/js/html/StyleSheet.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the style sheet language for this style sheet.</haxe_doc>
		</type>
		<href public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the location of the stylesheet.</haxe_doc>
		</href>
		<ownerNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` associating this style sheet with the current document.</haxe_doc>
		</ownerNode>
		<parentStyleSheet public="1" set="null">
			<c path="js.html.StyleSheet"/>
			<haxe_doc>Returns a `StyleSheet` including this one, if any; returns `null` if there aren't any.</haxe_doc>
		</parentStyleSheet>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the advisory title of the current style sheet.</haxe_doc>
		</title>
		<media public="1" set="null">
			<c path="js.html.MediaList"/>
			<haxe_doc>Returns a `MediaList` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` representing whether the current stylesheet has been applied or not.</haxe_doc>
		</disabled>
		<haxe_doc><![CDATA[An object implementing the `StyleSheet` interface represents a single style sheet. CSS style sheets will further implement the more specialized `CSSStyleSheet` interface.

	Documentation [StyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheet"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleSheet" params="" file="/usr/local/lib/haxe/std/js/html/CSSStyleSheet.hx" extern="1">
		<extends path="js.html.StyleSheet"/>
		<ownerRule public="1" set="null">
			<c path="js.html.CSSRule"/>
			<haxe_doc>If this style sheet is imported into the document using an `@import` rule, the `ownerRule` property will return that `CSSImportRule`, otherwise it returns `null`.</haxe_doc>
		</ownerRule>
		<cssRules public="1" set="null">
			<c path="js.html.CSSRuleList"/>
			<haxe_doc>Returns a live `CSSRuleList`, listing the `CSSRule` objects in the style sheet.
		
		 This is normally used to access individual rules like this:
		
		 `   styleSheet.cssRules[i] // where i = 0..cssRules.length-1`
		
		 To add or remove items in `cssRules`, use the `CSSStyleSheet`'s `deleteRule()` and `insertRule()` methods, described below.</haxe_doc>
		</cssRules>
		<insertRule public="1" set="method">
			<f a="rule:?index" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ index : 0 }</e></m></meta>
			<haxe_doc>Inserts a new rule at the specified position in the style sheet, given the textual representation of the rule.
		@throws DOMError</haxe_doc>
		</insertRule>
		<deleteRule public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a rule at the specified position from the style sheet.
		@throws DOMError</haxe_doc>
		</deleteRule>
		<haxe_doc><![CDATA[The `CSSStyleSheet` interface represents a single CSS style sheet. It inherits properties and methods from its parent, `StyleSheet`.

	Documentation [CSSStyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleSheet"</e></m></meta>
	</class>
	<class path="js.html.Cache" params="" file="/usr/local/lib/haxe/std/js/html/Cache.hx" extern="1">
		<match public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><match public="1" set="method"><f a="request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></match></overloads>
		</match>
		<matchAll public="1" set="method">
			<f a="?request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Response"/></c></c>
			</f>
			<overloads><matchAll public="1" set="method"><f a="?request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="Array"><c path="js.html.Response"/></c></c>
</f></matchAll></overloads>
		</matchAll>
		<add public="1" set="method">
			<f a="request">
				<c path="js.html.Request"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><add public="1" set="method"><f a="request">
	<c path="String"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></add></overloads>
		</add>
		<addAll public="1" set="method"><f a="requests">
	<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Request"/>
	<c path="String"/>
</x></c>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></addAll>
		<put public="1" set="method">
			<f a="request:response">
				<c path="js.html.Request"/>
				<c path="js.html.Response"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><put public="1" set="method"><f a="request:response">
	<c path="String"/>
	<c path="js.html.Response"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></put></overloads>
		</put>
		<delete public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<overloads><delete public="1" set="method"><f a="request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><x path="Bool"/></c>
</f></delete></overloads>
		</delete>
		<keys public="1" set="method">
			<f a="?request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Request"/></c></c>
			</f>
			<overloads><keys public="1" set="method"><f a="?request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="Array"><c path="js.html.Request"/></c></c>
</f></keys></overloads>
		</keys>
		<haxe_doc><![CDATA[The `Cache` interface provides a storage mechanism for `Request` / `Response` object pairs that are cached, for example as part of the `ServiceWorker` life cycle. Note that the `Cache` interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.

	Documentation [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Cache$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Cache>]]></haxe_doc>
		<meta><m n=":native"><e>"Cache"</e></m></meta>
	</class>
	<typedef path="js.html.CacheQueryOptions" params="" file="/usr/local/lib/haxe/std/js/html/CacheQueryOptions.hx"><a>
	<ignoreVary>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreVary>
	<ignoreSearch>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreSearch>
	<ignoreMethod>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreMethod>
	<cacheName>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</cacheName>
</a></typedef>
	<class path="js.html.CacheStorage" params="" file="/usr/local/lib/haxe/std/js/html/CacheStorage.hx" extern="1">
		<match public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<haxe_doc>Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.</haxe_doc>
			<overloads><match public="1" set="method">
	<f a="request:?options">
		<c path="String"/>
		<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
		<c path="js.lib.Promise"><c path="js.html.Response"/></c>
	</f>
	<haxe_doc>Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.</haxe_doc>
</match></overloads>
		</match>
		<has public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if a `Cache` object matching the `cacheName` exists.</haxe_doc>
		</has>
		<open public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><c path="js.html.Cache"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to the `Cache` object matching the `cacheName` (a new cache is created if it doesn't already exist.)</haxe_doc>
		</open>
		<delete public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Finds the `Cache` object matching the `cacheName`, and if found, deletes the `Cache` object and returns a `Promise` that resolves to `true`. If no `Cache` object is found, it returns `false`.</haxe_doc>
		</delete>
		<keys public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="String"/></c></c></f>
			<haxe_doc>Returns a `Promise` that will resolve with an array containing strings corresponding to all of the named `Cache` objects tracked by the `CacheStorage`. Use this method to iterate over a list of all the `Cache` objects.</haxe_doc>
		</keys>
		<new public="1" set="method">
			<f a="namespace:principal">
				<x path="js.html.CacheStorageNamespace"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `CacheStorage` interface represents the storage for `Cache` objects.

	Documentation [CacheStorage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage>]]></haxe_doc>
		<meta><m n=":native"><e>"CacheStorage"</e></m></meta>
	</class>
	<abstract path="js.html.CacheStorageNamespace" params="" file="/usr/local/lib/haxe/std/js/html/CacheStorageNamespace.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CacheStorageNamespace.CacheStorageNamespace_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/CacheStorageNamespace.hx" private="1" module="js.html.CacheStorageNamespace" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.MediaStream" params="" file="/usr/local/lib/haxe/std/js/html/MediaStream.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing 36 characters denoting a universally unique identifier (UUID) for the object.</haxe_doc>
		</id>
		<active public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value that returns `true` if the `MediaStream` is active, or `false` otherwise.</haxe_doc>
		</active>
		<onaddtrack public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `addtrack` event is fired when a new `MediaStreamTrack` object is added.</haxe_doc>
		</onaddtrack>
		<onremovetrack public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when a `removetrack` event is fired when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onremovetrack>
		<currentTime public="1" set="null"><x path="Float"/></currentTime>
		<getAudioTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.AudioStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the MediaStream` object that have their kind` attribute set to "audio"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getAudioTracks>
		<getVideoTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.VideoStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the `MediaStream` object that have their `kind` attribute set to `"video"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getVideoTracks>
		<getTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.MediaStreamTrack"/></c></f>
			<haxe_doc>Returns a list of all `MediaStreamTrack` objects stored in the `MediaStream` object, regardless of the value of the `kind` attribute. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getTracks>
		<getTrackById public="1" set="method">
			<f a="trackId">
				<c path="String"/>
				<c path="js.html.MediaStreamTrack"/>
			</f>
			<haxe_doc>Returns the track whose ID corresponds to the one given in parameters, trackid`. If no parameter is given, or if no track with that ID does exist, it returns null`. If several tracks have the same ID, it returns the first one.</haxe_doc>
		</getTrackById>
		<addTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores a copy of the `MediaStreamTrack` given as argument. If the track has already been added to the `MediaStream` object, nothing happens.</haxe_doc>
		</addTrack>
		<removeTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the `MediaStreamTrack` given as argument. If the track is not part of the MediaStream` object, nothing happens.</haxe_doc>
		</removeTrack>
		<clone public="1" set="method">
			<f a=""><c path="js.html.MediaStream"/></f>
			<haxe_doc>Returns a clone of the `MediaStream` object. The clone will, however, have a unique value for `MediaStream.id`.</haxe_doc>
		</clone>
		<new public="1" set="method">
			<f a="tracks">
				<c path="Array"><c path="js.html.MediaStreamTrack"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="stream">
						<c path="js.html.MediaStream"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `MediaStream` interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of `MediaStreamTrack`.

	Documentation [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStream>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStream"</e></m></meta>
	</class>
	<class path="js.html.CanvasCaptureMediaStream" params="" file="/usr/local/lib/haxe/std/js/html/CanvasCaptureMediaStream.hx" extern="1">
		<extends path="js.html.MediaStream"/>
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<requestFrame public="1" set="method"><f a=""><x path="Void"/></f></requestFrame>
		<meta><m n=":native"><e>"CanvasCaptureMediaStream"</e></m></meta>
	</class>
	<class path="js.html.CanvasElement" params="" file="/usr/local/lib/haxe/std/js/html/CanvasElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `width` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `300` is used.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `height` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `150` is used.</haxe_doc>
		</height>
		<getContext public="1" set="method">
			<f a="contextId:?contextOptions">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Returns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with `"2d"` returns a `CanvasRenderingContext2D` object, whereas calling it with `"webgl"` (or `"experimental-webgl"`) returns a `WebGLRenderingContext` object. This context is only available on browsers that implement WebGL.
		@throws DOMError</haxe_doc>
		</getContext>
		<toDataURL public="1" set="method">
			<f a="?type:?encoderOptions" v="&quot;&quot;:">
				<c path="String"/>
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>Returns a data-URL containing a representation of the image in the format specified by the `type` parameter (defaults to `png`). The returned image is in a resolution of 96dpi.
		@throws DOMError</haxe_doc>
		</toDataURL>
		<toBlob public="1" set="method">
			<f a="callback:?type:?encoderOptions" v=":&quot;&quot;:">
				<f a="">
					<c path="js.html.Blob"/>
					<x path="Void"/>
				</f>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>Creates a `Blob` object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.
		@throws DOMError</haxe_doc>
		</toBlob>
		<captureStream public="1" set="method">
			<f a="?frameRate">
				<x path="Float"/>
				<c path="js.html.CanvasCaptureMediaStream"/>
			</f>
			<haxe_doc>Returns a `CanvasCaptureMediaStream` that is a real-time video capture of the surface of the canvas.
		@throws DOMError</haxe_doc>
		</captureStream>
		<getContext2d public="1" get="inline" set="null" line="73">
			<f a="?attribs">
				<a/>
				<c path="js.html.CanvasRenderingContext2D"/>
			</f>
			<haxe_doc>Shorthand for getting a CanvasRenderingContext2D.</haxe_doc>
		</getContext2d>
		<getContextWebGL public="1" get="inline" set="null" line="77">
			<f a="?attribs">
				<x path="Null"><t path="js.html.webgl.ContextAttributes"/></x>
				<c path="js.html.webgl.RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.RenderingContext.</haxe_doc>
		</getContextWebGL>
		<getContextWebGL2 public="1" get="inline" set="null" line="81">
			<f a="?attribs">
				<x path="Null"><t path="js.html.webgl.ContextAttributes"/></x>
				<c path="js.html.webgl.WebGL2RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.WebGL2RenderingContext.</haxe_doc>
		</getContextWebGL2>
		<haxe_doc><![CDATA[The `HTMLCanvasElement` interface provides properties and methods for manipulating the layout and presentation of canvas elements. The `HTMLCanvasElement` interface also inherits the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCanvasElement"</e></m></meta>
	</class>
	<class path="js.html.CanvasGradient" params="" file="/usr/local/lib/haxe/std/js/html/CanvasGradient.hx" extern="1">
		<addColorStop public="1" set="method">
			<f a="offset:color">
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a new stop, defined by an `offset` and a `color`, to the gradient. If the offset is not between `0` and `1` an `INDEX_SIZE_ERR` is raised, if the color can't be parsed as a CSS `color`, a `SYNTAX_ERR` is raised.
		@throws DOMError</haxe_doc>
		</addColorStop>
		<haxe_doc><![CDATA[The `CanvasGradient` interface represents an opaque object describing a gradient. It is returned by the methods `CanvasRenderingContext2D.createLinearGradient()` or `CanvasRenderingContext2D.createRadialGradient()`.

	Documentation [CanvasGradient](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasGradient"</e></m></meta>
	</class>
	<class path="js.html.CanvasPattern" params="" file="/usr/local/lib/haxe/std/js/html/CanvasPattern.hx" extern="1">
		<setTransform public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies an `SVGMatrix` representing a linear transform to the pattern.</haxe_doc>
		</setTransform>
		<haxe_doc><![CDATA[The `CanvasPattern` interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the `CanvasRenderingContext2D.createPattern()` method.

	Documentation [CanvasPattern](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasPattern"</e></m></meta>
	</class>
	<class path="js.html.CanvasRenderingContext2D" params="" file="/usr/local/lib/haxe/std/js/html/CanvasRenderingContext2D.hx" extern="1">
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<globalAlpha public="1"><x path="Float"/></globalAlpha>
		<globalCompositeOperation public="1"><c path="String"/></globalCompositeOperation>
		<strokeStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></strokeStyle>
		<fillStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></fillStyle>
		<filter public="1"><c path="String"/></filter>
		<imageSmoothingEnabled public="1"><x path="Bool"/></imageSmoothingEnabled>
		<lineWidth public="1"><x path="Float"/></lineWidth>
		<lineCap public="1"><c path="String"/></lineCap>
		<lineJoin public="1"><c path="String"/></lineJoin>
		<miterLimit public="1"><x path="Float"/></miterLimit>
		<lineDashOffset public="1"><x path="Float"/></lineDashOffset>
		<shadowOffsetX public="1"><x path="Float"/></shadowOffsetX>
		<shadowOffsetY public="1"><x path="Float"/></shadowOffsetY>
		<shadowBlur public="1"><x path="Float"/></shadowBlur>
		<shadowColor public="1"><c path="String"/></shadowColor>
		<font public="1"><c path="String"/></font>
		<textAlign public="1"><c path="String"/></textAlign>
		<textBaseline public="1"><c path="String"/></textBaseline>
		<drawImage public="1" set="method">
			<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
				<c path="js.html.ImageElement"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
			</overloads>
		</drawImage>
		<beginPath public="1" set="method"><f a=""><x path="Void"/></f></beginPath>
		<fill public="1" set="method">
			<f a="path:?winding" v=":NONZERO">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><fill public="1" set="method">
	<f a="?winding" v="NONZERO">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</fill></overloads>
		</fill>
		<stroke public="1" set="method">
			<f a="path">
				<c path="js.html.Path2D"/>
				<x path="Void"/>
			</f>
			<overloads><stroke public="1" set="method"><f a=""><x path="Void"/></f></stroke></overloads>
		</stroke>
		<clip public="1" set="method">
			<f a="path:?winding" v=":NONZERO">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><clip public="1" set="method">
	<f a="?winding" v="NONZERO">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</clip></overloads>
		</clip>
		<isPointInPath public="1" set="method">
			<f a="path:x:y:?winding" v=":::NONZERO">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><isPointInPath public="1" set="method">
	<f a="x:y:?winding" v="::NONZERO">
		<x path="Float"/>
		<x path="Float"/>
		<x path="js.html.CanvasWindingRule"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</isPointInPath></overloads>
		</isPointInPath>
		<isPointInStroke public="1" set="method">
			<f a="path:x:y">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<overloads><isPointInStroke public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isPointInStroke></overloads>
		</isPointInStroke>
		<createLinearGradient public="1" set="method"><f a="x0:y0:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CanvasGradient"/>
</f></createLinearGradient>
		<createRadialGradient public="1" set="method">
			<f a="x0:y0:r0:x1:y1:r1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.CanvasGradient"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createRadialGradient>
		<createPattern public="1" set="method">
			<f a="image:repetition">
				<c path="js.html.ImageElement"/>
				<c path="String"/>
				<c path="js.html.CanvasPattern"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.svg.ImageElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.CanvasElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.VideoElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.ImageBitmap"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
			</overloads>
		</createPattern>
		<addHitRegion public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.HitRegionOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addHitRegion>
		<removeHitRegion public="1" set="method"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></removeHitRegion>
		<clearHitRegions public="1" set="method"><f a=""><x path="Void"/></f></clearHitRegions>
		<createImageData public="1" set="method">
			<f a="imagedata">
				<c path="js.html.ImageData"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createImageData public="1" set="method">
	<f a="sw:sh">
		<x path="Float"/>
		<x path="Float"/>
		<c path="js.html.ImageData"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createImageData></overloads>
		</createImageData>
		<getImageData public="1" set="method">
			<f a="sx:sy:sw:sh">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getImageData>
		<putImageData public="1" set="method">
			<f a="imagedata:dx:dy:dirtyX:dirtyY:dirtyWidth:dirtyHeight">
				<c path="js.html.ImageData"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><putImageData public="1" set="method">
	<f a="imagedata:dx:dy">
		<c path="js.html.ImageData"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</putImageData></overloads>
		</putImageData>
		<setLineDash public="1" set="method">
			<f a="segments">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setLineDash>
		<getLineDash public="1" set="method"><f a=""><c path="Array"><x path="Float"/></c></f></getLineDash>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<clearRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearRect>
		<fillRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillRect>
		<strokeRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></strokeRect>
		<save public="1" set="method"><f a=""><x path="Void"/></f></save>
		<restore public="1" set="method"><f a=""><x path="Void"/></f></restore>
		<fillText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</fillText>
		<strokeText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</strokeText>
		<measureText public="1" set="method">
			<f a="text">
				<c path="String"/>
				<c path="js.html.TextMetrics"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</measureText>
		<scale public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</scale>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</rotate>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</translate>
		<transform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transform>
		<setTransform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTransform>
		<resetTransform public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</resetTransform>
		<drawFocusIfNeeded public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</drawFocusIfNeeded>
		<drawCustomFocusRing public="1" set="method"><f a="element">
	<c path="js.html.Element"/>
	<x path="Bool"/>
</f></drawCustomFocusRing>
		<haxe_doc><![CDATA[To get an object of this interface, call `getContext()` on a `canvas element`, supplying "2d" as the argument:

	Documentation [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasRenderingContext2D"</e></m></meta>
	</class>
	<abstract path="js.html.CanvasWindingRule" params="" file="/usr/local/lib/haxe/std/js/html/CanvasWindingRule.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CanvasWindingRule.CanvasWindingRule_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/CanvasWindingRule.hx" private="1" module="js.html.CanvasWindingRule" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.CaretPosition" params="" file="/usr/local/lib/haxe/std/js/html/CaretPosition.hx" extern="1">
		<offsetNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` containing the found node at the caret's position.</haxe_doc>
		</offsetNode>
		<offset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the character offset in the caret position node.</haxe_doc>
		</offset>
		<getClientRect public="1" set="method"><f a=""><c path="js.html.DOMRect"/></f></getClientRect>
		<haxe_doc><![CDATA[The `CaretPosition` interface represents the caret postion, an indicator for the text insertion point. You can get a `CaretPosition` using the `document.caretPositionFromPoint` method.

	Documentation [CaretPosition](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition>]]></haxe_doc>
		<meta><m n=":native"><e>"CaretPosition"</e></m></meta>
	</class>
	<typedef path="js.html.ChannelPixelLayout" params="" file="/usr/local/lib/haxe/std/js/html/ChannelPixelLayout.hx"><a>
	<width><x path="Int"/></width>
	<stride><x path="Int"/></stride>
	<skip><x path="Int"/></skip>
	<offset><x path="Int"/></offset>
	<height><x path="Int"/></height>
	<dataType><x path="js.html.ChannelPixelLayoutDataType"/></dataType>
</a></typedef>
	<abstract path="js.html.ChannelPixelLayoutDataType" params="" file="/usr/local/lib/haxe/std/js/html/ChannelPixelLayoutDataType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ChannelPixelLayoutDataType.ChannelPixelLayoutDataType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ChannelPixelLayoutDataType.hx" private="1" module="js.html.ChannelPixelLayoutDataType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Clipboard" params="" file="/usr/local/lib/haxe/std/js/html/Clipboard.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<read public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.DataTransfer"/></c></f>
			<haxe_doc>Requests arbitrary data (such as images) from the clipboard, returning a `Promise`. When the data has been retrieved, the promise is resolved with a `DataTransfer` object that provides the data.
		@throws DOMError</haxe_doc>
		</read>
		<readText public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>Requests text from the system clipboard; returns a `Promise` which is resolved with a `DOMString` containing the clipboard's text once it's available.
		@throws DOMError</haxe_doc>
		</readText>
		<write public="1" set="method">
			<f a="data">
				<c path="js.html.DataTransfer"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Writes arbitrary data to the system clipboard. This asynchronous operation signals that it's finished by resolving the returned `Promise`.
		@throws DOMError</haxe_doc>
		</write>
		<writeText public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Writes text to the system clipboard, returning a `Promise` which is resolved once the text is fully copied into the clipboard.
		@throws DOMError</haxe_doc>
		</writeText>
		<haxe_doc><![CDATA[The `Clipboard` interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.

	Documentation [Clipboard](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Clipboard>]]></haxe_doc>
		<meta><m n=":native"><e>"Clipboard"</e></m></meta>
	</class>
	<class path="js.html.Comment" params="" file="/usr/local/lib/haxe/std/js/html/Comment.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Comment` interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '`!--`' and '`--`'. In XML, the character sequence '`--`' cannot be used within a comment.

	Documentation [Comment](https://developer.mozilla.org/en-US/docs/Web/API/Comment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Comment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Comment>]]></haxe_doc>
		<meta><m n=":native"><e>"Comment"</e></m></meta>
	</class>
	<abstract path="js.html.CompositeOperation" params="" file="/usr/local/lib/haxe/std/js/html/CompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CompositeOperation.CompositeOperation_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/CompositeOperation.hx" private="1" module="js.html.CompositeOperation" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ComputedEffectTiming" params="" file="/usr/local/lib/haxe/std/js/html/ComputedEffectTiming.hx"><a>
	<progress>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</progress>
	<localTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</localTime>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</endTime>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<currentIteration>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</currentIteration>
	<activeDuration>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</activeDuration>
</a></typedef>
	<class path="js.html.ConsoleInstance" params="" file="/usr/local/lib/haxe/std/js/html/ConsoleInstance.hx" extern="1" interface="1">
		<assert public="1" set="method">
			<f a="?condition:data" v="false:">
				<x path="Bool"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ condition : false }</e></m></meta>
			<haxe_doc>Log a message and stack trace to console if the first argument is `false`.</haxe_doc>
		</assert>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the console.</haxe_doc>
		</clear>
		<count public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Log the number of times this line has been called with the given label.</haxe_doc>
		</count>
		<countReset public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Resets the value of the counter with the given label.</haxe_doc>
		</countReset>
		<debug public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a message to the console with the log level `"debug"`.
		 Note: Starting with Chromium 58 this method only appears in Chromium browser consoles when level "Verbose" is selected.</haxe_doc>
		</debug>
		<error public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs an error message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</error>
		<info public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Informative logging of information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</info>
		<log public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>For general output of logging information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</log>
		<table public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays tabular data as a table.</haxe_doc>
		</table>
		<trace public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a stack trace.</haxe_doc>
		</trace>
		<warn public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a warning message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</warn>
		<dir public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.</haxe_doc>
		</dir>
		<dirxml public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.</haxe_doc>
		</dirxml>
		<group public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. To move back out a level, call `groupEnd()`.</haxe_doc>
		</group>
		<groupCollapsed public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. However, unlike `group()` this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call `groupEnd()`.</haxe_doc>
		</groupCollapsed>
		<groupEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Exits the current inline group.</haxe_doc>
		</groupEnd>
		<time public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.</haxe_doc>
		</time>
		<timeLog public="1" set="method">
			<f a="?label:data" v="&quot;default&quot;:">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Logs the value of the specified timer to the console.</haxe_doc>
		</timeLog>
		<timeEnd public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Stops the specified timer and logs the elapsed time in seconds since it started.</haxe_doc>
		</timeEnd>
		<exception public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>An alias for `error()`.</haxe_doc>
		</exception>
		<timeStamp public="1" set="method">
			<f a="?data">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a marker to the browser's Timeline or Waterfall tool.</haxe_doc>
		</timeStamp>
		<profile public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile.</haxe_doc>
		</profile>
		<profileEnd public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool).</haxe_doc>
		</profileEnd>
		<haxe_doc><![CDATA[The `Console` object provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.

	Documentation [Console](https://developer.mozilla.org/en-US/docs/Web/API/Console) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Console$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Console>]]></haxe_doc>
	</class>
	<typedef path="js.html.ConstrainBooleanParameters" params="" file="/usr/local/lib/haxe/std/js/html/ConstrainBooleanParameters.hx"><a>
	<ideal>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainDOMStringParameters" params="" file="/usr/local/lib/haxe/std/js/html/ConstrainDOMStringParameters.hx"><a>
	<ideal>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainDoubleRange" params="" file="/usr/local/lib/haxe/std/js/html/ConstrainDoubleRange.hx"><a>
	<min>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</min>
	<max>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</max>
	<ideal>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainLongRange" params="" file="/usr/local/lib/haxe/std/js/html/ConstrainLongRange.hx"><a>
	<min>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</min>
	<max>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</max>
	<ideal>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConvertCoordinateOptions" params="" file="/usr/local/lib/haxe/std/js/html/ConvertCoordinateOptions.hx"><a>
	<toBox>
		<x path="Null"><x path="js.html.CSSBoxType"/></x>
		<meta><m n=":optional"/></meta>
	</toBox>
	<fromBox>
		<x path="Null"><x path="js.html.CSSBoxType"/></x>
		<meta><m n=":optional"/></meta>
	</fromBox>
</a></typedef>
	<typedef path="js.html.Coordinates" params="" file="/usr/local/lib/haxe/std/js/html/Coordinates.hx">
		<a>
			<speed set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the velocity of the device in meters per second. This value can be `null`.</haxe_doc>
			</speed>
			<longitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's longitude in decimal degrees.</haxe_doc>
			</longitude>
			<latitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's latitude in decimal degrees.</haxe_doc>
			</latitude>
			<heading set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading true north the device is. `0` degrees represents true north, and the direction is determined clockwise (which means that east is `90` degrees and west is `270` degrees). If `speed` is `0`, `heading` is `NaN`. If the device is unable to provide `heading` information, this value is `null`.</haxe_doc>
			</heading>
			<altitudeAccuracy set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the accuracy of the `altitude` expressed in meters. This value can be `null`.</haxe_doc>
			</altitudeAccuracy>
			<altitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's altitude in meters, relative to sea level. This value can be `null` if the implementation cannot provide the data.</haxe_doc>
			</altitude>
			<accuracy set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the accuracy of the `latitude` and `longitude` properties, expressed in meters.</haxe_doc>
			</accuracy>
		</a>
		<haxe_doc><![CDATA[The `Coordinates` interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.

	Documentation [Coordinates](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Coordinates>]]></haxe_doc>
	</typedef>
	<class path="js.html.Crypto" params="" file="/usr/local/lib/haxe/std/js/html/Crypto.hx" extern="1">
		<subtle public="1" set="null">
			<c path="js.html.SubtleCrypto"/>
			<haxe_doc>Returns a `SubtleCrypto` object providing access to common cryptographic primitives, like hashing, signing, encryption or decryption.</haxe_doc>
		</subtle>
		<getRandomValues public="1" set="method">
			<f a="array">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.ArrayBufferView"/>
			</f>
			<haxe_doc>Fills the passed `TypedArray` with cryptographically sound random values.
		@throws DOMError</haxe_doc>
		</getRandomValues>
		<haxe_doc><![CDATA[The `Crypto` interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.

	Documentation [Crypto](https://developer.mozilla.org/en-US/docs/Web/API/Crypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Crypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Crypto>]]></haxe_doc>
		<meta><m n=":native"><e>"Crypto"</e></m></meta>
	</class>
	<class path="js.html.CryptoKey" params="" file="/usr/local/lib/haxe/std/js/html/CryptoKey.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns an enumerated value representing the type of the key, a secret key (for symmetric algorithm), a public or a private key (for an asymmetric algorithm)</haxe_doc>
		</type>
		<extractable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating if the raw information may be exported to the application or not.</haxe_doc>
		</extractable>
		<algorithm public="1" set="null">
			<d/>
			<haxe_doc>Returns an opaque object representing a particular cipher the key has to be used with.</haxe_doc>
		</algorithm>
		<usages public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>Returns an array of enumerated values indicating what the key can be used for.</haxe_doc>
		</usages>
		<haxe_doc><![CDATA[The `CryptoKey` interface represents a cryptographic key derived from a specific key algorithm.

	Documentation [CryptoKey](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey>]]></haxe_doc>
		<meta><m n=":native"><e>"CryptoKey"</e></m></meta>
	</class>
	<class path="js.html.DListElement" params="" file="/usr/local/lib/haxe/std/js/html/DListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLDListElement` interface provides special properties (beyond those of the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating definition list elements.

	Documentation [HTMLDListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDListElement"</e></m></meta>
	</class>
	<class path="js.html.DOMException" params="" file="/usr/local/lib/haxe/std/js/html/DOMException.hx" extern="1">
		<INDEX_SIZE_ERR public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</INDEX_SIZE_ERR>
		<DOMSTRING_SIZE_ERR public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOMSTRING_SIZE_ERR>
		<HIERARCHY_REQUEST_ERR public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HIERARCHY_REQUEST_ERR>
		<WRONG_DOCUMENT_ERR public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</WRONG_DOCUMENT_ERR>
		<INVALID_CHARACTER_ERR public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</INVALID_CHARACTER_ERR>
		<NO_DATA_ALLOWED_ERR public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</NO_DATA_ALLOWED_ERR>
		<NO_MODIFICATION_ALLOWED_ERR public="1" get="inline" set="null" expr="7" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</NO_MODIFICATION_ALLOWED_ERR>
		<NOT_FOUND_ERR public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</NOT_FOUND_ERR>
		<NOT_SUPPORTED_ERR public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</NOT_SUPPORTED_ERR>
		<INUSE_ATTRIBUTE_ERR public="1" get="inline" set="null" expr="10" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</INUSE_ATTRIBUTE_ERR>
		<INVALID_STATE_ERR public="1" get="inline" set="null" expr="11" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</INVALID_STATE_ERR>
		<SYNTAX_ERR public="1" get="inline" set="null" expr="12" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SYNTAX_ERR>
		<INVALID_MODIFICATION_ERR public="1" get="inline" set="null" expr="13" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</INVALID_MODIFICATION_ERR>
		<NAMESPACE_ERR public="1" get="inline" set="null" expr="14" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</NAMESPACE_ERR>
		<INVALID_ACCESS_ERR public="1" get="inline" set="null" expr="15" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</INVALID_ACCESS_ERR>
		<VALIDATION_ERR public="1" get="inline" set="null" expr="16" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</VALIDATION_ERR>
		<TYPE_MISMATCH_ERR public="1" get="inline" set="null" expr="17" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</TYPE_MISMATCH_ERR>
		<SECURITY_ERR public="1" get="inline" set="null" expr="18" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</SECURITY_ERR>
		<NETWORK_ERR public="1" get="inline" set="null" expr="19" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</NETWORK_ERR>
		<ABORT_ERR public="1" get="inline" set="null" expr="20" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</ABORT_ERR>
		<URL_MISMATCH_ERR public="1" get="inline" set="null" expr="21" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</URL_MISMATCH_ERR>
		<QUOTA_EXCEEDED_ERR public="1" get="inline" set="null" expr="22" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</QUOTA_EXCEEDED_ERR>
		<TIMEOUT_ERR public="1" get="inline" set="null" expr="23" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</TIMEOUT_ERR>
		<INVALID_NODE_TYPE_ERR public="1" get="inline" set="null" expr="24" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</INVALID_NODE_TYPE_ERR>
		<DATA_CLONE_ERR public="1" get="inline" set="null" expr="25" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DATA_CLONE_ERR>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that contains one of the strings associated with an error name.</haxe_doc>
		</name>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a message or description associated with the given error name.</haxe_doc>
		</message>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `short` that contains one of the `Error codes`, or `0` if none match. This field is used for historical reasons. New DOM exceptions don't use this anymore: they put this info in the `DOMException.name` attribute.</haxe_doc>
		</code>
		<result public="1" set="null"><x path="Int"/></result>
		<filename public="1" set="null"><c path="String"/></filename>
		<lineNumber public="1" set="null"><x path="Int"/></lineNumber>
		<columnNumber public="1" set="null"><x path="Int"/></columnNumber>
		<data public="1" set="null"><d/></data>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method">
			<f a="?message:?name" v="&quot;&quot;:">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMException` interface represents an abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.

	Documentation [DOMException](https://developer.mozilla.org/en-US/docs/Web/API/DOMException) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMException$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMException>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMException"</e></m></meta>
	</class>
	<class path="js.html.DOMImplementation" params="" file="/usr/local/lib/haxe/std/js/html/DOMImplementation.hx" extern="1">
		<hasFeature public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns `true`. Old browsers are very inconsistent in their behavior.</haxe_doc>
		</hasFeature>
		<createDocumentType public="1" set="method">
			<f a="qualifiedName:publicId:systemId">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
			</f>
			<haxe_doc>Creates and returns a `DocumentType`.
		@throws DOMError</haxe_doc>
		</createDocumentType>
		<createDocument public="1" set="method">
			<f a="namespace:qualifiedName:?doctype">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>Creates and returns an `XMLDocument`.
		@throws DOMError</haxe_doc>
		</createDocument>
		<createHTMLDocument public="1" set="method">
			<f a="?title">
				<c path="String"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>Creates and returns an HTML `Document`.
		@throws DOMError</haxe_doc>
		</createHTMLDocument>
		<haxe_doc><![CDATA[The `DOMImplementation` interface represent an object providing methods which are not dependent on any particular document. Such an object is returned by the `Document.implementation` property.

	Documentation [DOMImplementation](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMImplementation"</e></m></meta>
	</class>
	<class path="js.html.DOMPointReadOnly" params="" file="/usr/local/lib/haxe/std/js/html/DOMPointReadOnly.hx" extern="1">
		<fromPoint public="1" set="method" static="1"><f a="?other">
	<x path="Null"><t path="js.html.DOMPointInit"/></x>
	<c path="js.html.DOMPointReadOnly"/>
</f></fromPoint>
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's horizontal coordinate, `x`.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's vertical coordinate, `y`.</haxe_doc>
		</y>
		<z public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's depth coordinate, `z`.</haxe_doc>
		</z>
		<w public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's perspective value, `w`.</haxe_doc>
		</w>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON representation of the `DOMPointReadOnly` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0.0:0.0:0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMPointReadOnly` interface specifies the coordinate and perspective fields used by `DOMPoint` to define a 2D or 3D point in a coordinate system.

	Documentation [DOMPointReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPointReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMPoint" params="" file="/usr/local/lib/haxe/std/js/html/DOMPoint.hx" extern="1">
		<extends path="js.html.DOMPointReadOnly"/>
		<fromPoint public="1" set="method" static="1"><f a="?other">
	<x path="Null"><t path="js.html.DOMPointInit"/></x>
	<c path="js.html.DOMPoint"/>
</f></fromPoint>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0.0:0.0:0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `DOMPoint` object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value.

	Documentation [DOMPoint](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPoint"</e></m></meta>
	</class>
	<typedef path="js.html.DOMPointInit" params="" file="/usr/local/lib/haxe/std/js/html/DOMPointInit.hx">
		<a>
			<z>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point value which gives the point's z-coordinate, which is (assuming no transformations that alter the situation) the depth coordinate; positive values are closer to the user and negative values retreat back into the screen. The default value is 0.</haxe_doc>
			</z>
			<y>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point number providing the point's y-coordinate. This is the vertical coordinate, and barring any transforms applied to the coordinate system, positive values are downward and negative values upward toward the top of the screen. The default is 0.</haxe_doc>
			</y>
			<x>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point value indicating the x-coordinate of the point in space. This is generally the horizontal coordinate, with positive values being to the right and negative values to the left. The default value is 0.</haxe_doc>
			</x>
			<w>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The point's w perspective value given as an unrestricted floating-point number. The default is 1.</haxe_doc>
			</w>
		</a>
		<haxe_doc><![CDATA[The `DOMPointInit` dictionary is used to provide the values of the coordinates and perspective when creating and JSONifying a `DOMPoint` or `DOMPointReadOnly` object.

	Documentation [DOMPointInit](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit>]]></haxe_doc>
	</typedef>
	<class path="js.html.DOMQuad" params="" file="/usr/local/lib/haxe/std/js/html/DOMQuad.hx" extern="1">
		<p1 public="1" set="null">
			<c path="js.html.DOMPoint"/>
			<haxe_doc>are `DOMPoint` objects for each of the `DOMQuad` object's four corners.</haxe_doc>
		</p1>
		<p2 public="1" set="null"><c path="js.html.DOMPoint"/></p2>
		<p3 public="1" set="null"><c path="js.html.DOMPoint"/></p3>
		<p4 public="1" set="null"><c path="js.html.DOMPoint"/></p4>
		<bounds public="1" set="null"><c path="js.html.DOMRectReadOnly"/></bounds>
		<getBounds public="1" set="method">
			<f a=""><c path="js.html.DOMRectReadOnly"/></f>
			<haxe_doc>Returns a `DOMRect` object with the coordinates and dimensions of the `DOMQuad` object.</haxe_doc>
		</getBounds>
		<toJSON public="1" set="method">
			<f a=""><t path="js.html.DOMQuadJSON"/></f>
			<haxe_doc>Returns a JSON representation of the `DOMQuad` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="rect">
				<c path="js.html.DOMRectReadOnly"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?p1:?p2:?p3:?p4">
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[A `DOMQuad` is a collection of four `DOMPoint`s defining the corners of an arbitrary quadrilateral. Returning `DOMQuad`s lets `getBoxQuads()` return accurate information even when arbitrary 2D or 3D transforms are present. It has a handy `bounds` attribute returning a `DOMRectReadOnly` for those cases where you just want an axis-aligned bounding rectangle.

	Documentation [DOMQuad](https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMQuad"</e></m></meta>
	</class>
	<typedef path="js.html.DOMQuadJSON" params="" file="/usr/local/lib/haxe/std/js/html/DOMQuadJSON.hx"><a>
	<p4>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p4>
	<p3>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p3>
	<p2>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p2>
	<p1>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p1>
</a></typedef>
	<class path="js.html.DOMRectReadOnly" params="" file="/usr/local/lib/haxe/std/js/html/DOMRectReadOnly.hx" extern="1">
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The x coordinate of the `DOMRect`'s origin.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The y coordinate of the `DOMRect`'s origin.</haxe_doc>
		</y>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The width of the `DOMRect`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The height of the `DOMRect`.</haxe_doc>
		</height>
		<top public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the top coordinate value of the `DOMRect` (usually the same as `y`.)</haxe_doc>
		</top>
		<right public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the right coordinate value of the `DOMRect` (usually the same as `x + width`).</haxe_doc>
		</right>
		<bottom public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the bottom coordinate value of the `DOMRect` (usually the same as y + height).</haxe_doc>
		</bottom>
		<left public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the left coordinate value of the `DOMRect` (usually the same as `x`).</haxe_doc>
		</left>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMRectReadOnly` interface specifies the standard properties used by `DOMRect` to define a rectangle.

	Documentation [DOMRectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRectReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMRect" params="" file="/usr/local/lib/haxe/std/js/html/DOMRect.hx" extern="1">
		<extends path="js.html.DOMRectReadOnly"/>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `DOMRect` represents a rectangle.

	Documentation [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRect>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRect"</e></m></meta>
	</class>
	<class path="js.html.DOMRectList" params="" file="/usr/local/lib/haxe/std/js/html/DOMRectList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.DOMRect"/>
</f></item>
		<meta><m n=":native"><e>"DOMRectList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringList" params="" file="/usr/local/lib/haxe/std/js/html/DOMStringList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the length of the list,</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString`.</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `Boolean` indicating if the given string is in the list</haxe_doc>
		</contains>
		<haxe_doc><![CDATA[A type returned by some APIs which contains a list of DOMString (strings).

	Documentation [DOMStringList](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringMap" params="" file="/usr/local/lib/haxe/std/js/html/DOMStringMap.hx" extern="1">
		<haxe_doc><![CDATA[Used by the `dataset` HTML attribute to represent data for custom attributes added to elements.

	Documentation [DOMStringMap](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringMap"</e></m></meta>
	</class>
	<class path="js.html.DOMTokenList" params="" file="/usr/local/lib/haxe/std/js/html/DOMTokenList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `integer` representing the number of objects stored in the object.</haxe_doc>
		</length>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The value of the list as a `DOMString`.</haxe_doc>
		</value>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns an item in the list by its index (returns undefined if the number is greater than or equal to the length of the list).</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the list contains the given token, otherwise `false`.</haxe_doc>
		</contains>
		<add public="1" set="method">
			<f a="tokens">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the given token to the list.
		@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="tokens">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the specified token from the list.
		@throws DOMError</haxe_doc>
		</remove>
		<replace public="1" set="method">
			<f a="token:newToken">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Replaces an existing token with a new token.
		@throws DOMError</haxe_doc>
		</replace>
		<toggle public="1" set="method">
			<f a="token:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a given token from the list and returns false. If token doesn't exist it's added and the function returns `true`.
		@throws DOMError</haxe_doc>
		</toggle>
		<supports public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given token is in the associated attribute's supported tokens.
		@throws DOMError</haxe_doc>
		</supports>
		<haxe_doc><![CDATA[The `DOMTokenList` interface represents a set of space-separated tokens. Such a set is returned by `Element.classList`, `HTMLLinkElement.relList`, `HTMLAnchorElement.relList`, `HTMLAreaElement.relList`, `HTMLIframeElement.sandbox`, or `HTMLOutputElement.htmlFor`. It is indexed beginning with `0` as with JavaScript `Array` objects. `DOMTokenList` is always case-sensitive.

	Documentation [DOMTokenList](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMTokenList"</e></m></meta>
	</class>
	<class path="js.html.DataListElement" params="" file="/usr/local/lib/haxe/std/js/html/DataListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<options public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a `HTMLCollection` representing a collection of the contained option elements.</haxe_doc>
		</options>
		<haxe_doc><![CDATA[The `HTMLDataListElement` interface provides special properties (beyond the `HTMLElement` object interface it also has available to it by inheritance) to manipulate `datalist` elements and their content.

	Documentation [HTMLDataListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDataListElement"</e></m></meta>
	</class>
	<class path="js.html.DataTransfer" params="" file="/usr/local/lib/haxe/std/js/html/DataTransfer.hx" extern="1">
		<dropEffect public="1">
			<c path="String"/>
			<haxe_doc>Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be `none`, `copy`, `link` or `move`.</haxe_doc>
		</dropEffect>
		<effectAllowed public="1">
			<c path="String"/>
			<haxe_doc>Provides all of the types of operations that are possible. Must be one of `none`, `copy`, `copyLink`, `copyMove`, `link`, `linkMove`, `move`, `all` or `uninitialized`.</haxe_doc>
		</effectAllowed>
		<items public="1" set="null">
			<c path="js.html.DataTransferItemList"/>
			<haxe_doc>Gives a `DataTransferItemList` object which is a list of all of the drag data.</haxe_doc>
		</items>
		<types public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>An array of `DOMString` giving the formats that were set in the `dragstart` event.</haxe_doc>
		</types>
		<files public="1" set="null">
			<c path="js.html.FileList"/>
			<haxe_doc>Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.</haxe_doc>
		</files>
		<setDragImage public="1" set="method">
			<f a="image:x:y">
				<c path="js.html.Element"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the image to be used for dragging if a custom one is desired.</haxe_doc>
		</setDragImage>
		<getData public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data.
		@throws DOMError</haxe_doc>
		</getData>
		<setData public="1" set="method">
			<f a="format:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the data for a given type. If data for the type does not exist, it is added at the end, such that the last item in the types list will be the new format. If data for the type already exists, the existing data is replaced in the same position.
		@throws DOMError</haxe_doc>
		</setData>
		<clearData public="1" set="method">
			<f a="?format">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the data associated with a given type. The type argument is optional. If the type is empty or not specified, the data associated with all types is removed. If data for the specified type does not exist, or the data transfer contains no data, this method will have no effect.
		@throws DOMError</haxe_doc>
		</clearData>
		<addElement public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the drag source to the given element.
		@throws DOMError</haxe_doc>
		</addElement>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DataTransfer` object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.

	Documentation [DataTransfer](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransfer"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItem" params="" file="/usr/local/lib/haxe/std/js/html/DataTransferItem.hx" extern="1">
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>The kind of drag data item, `string` or `file`.</haxe_doc>
		</kind>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The drag data item's type, typically a MIME type.</haxe_doc>
		</type>
		<getAsString public="1" set="method">
			<f a="callback">
				<f a="">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Invokes the specified callback with the drag data item string as its argument.
		@throws DOMError</haxe_doc>
		</getAsString>
		<getAsFile public="1" set="method">
			<f a=""><c path="js.html.File"/></f>
			<haxe_doc>Returns the `File` object associated with the drag data item (or null if the drag item is not a file).
		@throws DOMError</haxe_doc>
		</getAsFile>
		<haxe_doc><![CDATA[The `DataTransferItem` object represents one drag data item. During a drag operation, each `drag event` has a `dataTransfer` property which contains a `list` of drag data items. Each item in the list is a `DataTransferItem` object.

	Documentation [DataTransferItem](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransferItem"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItemList" params="" file="/usr/local/lib/haxe/std/js/html/DataTransferItemList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` that is the number of drag items in the list.</haxe_doc>
		</length>
		<add public="1" set="method">
			<f a="data">
				<c path="js.html.File"/>
				<c path="js.html.DataTransferItem"/>
			</f>
			<haxe_doc>Adds an item (either a `File` object or a `DOMString`) to the drag item list and returns a `DataTransferItem` object for the new item.
		@throws DOMError</haxe_doc>
			<overloads><add public="1" set="method">
	<f a="data:type">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.DataTransferItem"/>
	</f>
	<haxe_doc>Adds an item (either a `File` object or a `DOMString`) to the drag item list and returns a `DataTransferItem` object for the new item.
		@throws DOMError</haxe_doc>
</add></overloads>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the drag item from the list at the given index.
		@throws DOMError</haxe_doc>
		</remove>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all of the drag items from the list.
		@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `DataTransferItemList` object is a list of `DataTransferItem` objects representing items being dragged. During a drag operation, each `DragEvent` has a `dataTransfer` property and that property is a `DataTransferItemList`.

	Documentation [DataTransferItemList](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransferItemList"</e></m></meta>
	</class>
	<class path="js.html.DetailsElement" params="" file="/usr/local/lib/haxe/std/js/html/DetailsElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<open public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` reflecting the `open` HTML attribute, indicating whether or not the element’s contents (not counting the `summary`) is to be shown to the user.</haxe_doc>
		</open>
		<haxe_doc><![CDATA[The `HTMLDetailsElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `details` elements.

	Documentation [HTMLDetailsElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDetailsElement"</e></m></meta>
	</class>
	<abstract path="js.html.DirectionSetting" params="" file="/usr/local/lib/haxe/std/js/html/DirectionSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._DirectionSetting.DirectionSetting_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/DirectionSetting.hx" private="1" module="js.html.DirectionSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Directory" params="" file="/usr/local/lib/haxe/std/js/html/Directory.hx" extern="1">
		<name public="1" set="null"><c path="String"/></name>
		<path public="1" set="null"><c path="String"/></path>
		<getFilesAndDirectories public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.File"/>
	<c path="js.html.Directory"/>
</x></c></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFilesAndDirectories>
		<getFiles public="1" set="method">
			<f a="?recursiveFlag" v="false">
				<x path="Bool"/>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.File"/></c></c>
			</f>
			<meta><m n=":value"><e>{ recursiveFlag : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFiles>
		<new public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Directory"</e></m></meta>
	</class>
	<class path="js.html.DirectoryElement" params="" file="/usr/local/lib/haxe/std/js/html/DirectoryElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLDirectoryElement"</e></m></meta>
	</class>
	<class path="js.html.DivElement" params="" file="/usr/local/lib/haxe/std/js/html/DivElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLDivElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating div elements.

	Documentation [HTMLDivElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDivElement"</e></m></meta>
	</class>
	<class path="js.html.Document" params="" file="/usr/local/lib/haxe/std/js/html/Document.hx" extern="1">
		<extends path="js.html.Node"/>
		<implementation public="1" set="null">
			<c path="js.html.DOMImplementation"/>
			<haxe_doc>Returns the DOM implementation associated with the current document.</haxe_doc>
		</implementation>
		<URL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</URL>
		<documentURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</documentURI>
		<compatMode public="1" set="null">
			<c path="String"/>
			<haxe_doc>Indicates whether the document is rendered in quirks or strict mode.</haxe_doc>
		</compatMode>
		<characterSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the character set being used by the document.</haxe_doc>
		</characterSet>
		<charset public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</charset>
		<inputEncoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</inputEncoding>
		<contentType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the Content-Type from the MIME Header of the current document.</haxe_doc>
		</contentType>
		<doctype public="1" set="null">
			<c path="js.html.DocumentType"/>
			<haxe_doc>Returns the Document Type Definition (DTD) of the current document.</haxe_doc>
		</doctype>
		<documentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `Element` that is a direct child of the document. For HTML documents, this is normally the `HTMLElement` element.</haxe_doc>
		</documentElement>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Returns the URI of the current document.</haxe_doc>
		</location>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the URI of the page that linked to this page.</haxe_doc>
		</referrer>
		<lastModified public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the date on which the document was last modified.</haxe_doc>
		</lastModified>
		<readyState public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns loading status of the document.</haxe_doc>
		</readyState>
		<title public="1">
			<c path="String"/>
			<haxe_doc>Sets or gets the title of the current document.</haxe_doc>
		</title>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets directionality (rtl/ltr) of the document.</haxe_doc>
		</dir>
		<body public="1">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `body` or `frameset` node of the current document.</haxe_doc>
		</body>
		<head public="1" set="null">
			<c path="js.html.HeadElement"/>
			<haxe_doc>Returns the `head` element of the current document.</haxe_doc>
		</head>
		<images public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the images in the current document.</haxe_doc>
		</images>
		<embeds public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the embedded `embed` elements within the current document.</haxe_doc>
		</embeds>
		<plugins public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the available plugins.</haxe_doc>
		</plugins>
		<links public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all the hyperlinks in the document.</haxe_doc>
		</links>
		<forms public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the `form` elements within the current document.</haxe_doc>
		</forms>
		<scripts public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns all the `script` elements on the document.</haxe_doc>
		</scripts>
		<defaultView public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the window object.</haxe_doc>
		</defaultView>
		<onreadystatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `readystatechange` event.</haxe_doc>
		</onreadystatechange>
		<onbeforescriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `beforescriptexecute` event.</haxe_doc>
		</onbeforescriptexecute>
		<onafterscriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `afterscriptexecute` event.</haxe_doc>
		</onafterscriptexecute>
		<onselectionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `selectionchange` event is raised.</haxe_doc>
		</onselectionchange>
		<currentScript public="1" set="null"><c path="js.html.Element"/></currentScript>
		<anchors public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all of the anchors in the document.</haxe_doc>
		</anchors>
		<applets public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns an ordered list of the applets within a document.</haxe_doc>
		</applets>
		<fullscreen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>`true` when the document is in `Using_full-screen_mode`.</haxe_doc>
		</fullscreen>
		<fullscreenEnabled public="1" set="null"><x path="Bool"/></fullscreenEnabled>
		<onfullscreenchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenchange` event is raised.</haxe_doc>
		</onfullscreenchange>
		<onfullscreenerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenerror` event is raised.</haxe_doc>
		</onfullscreenerror>
		<onpointerlockchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockchange` event.</haxe_doc>
		</onpointerlockchange>
		<onpointerlockerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockerror` event.</haxe_doc>
		</onpointerlockerror>
		<hidden public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>…</haxe_doc>
		</hidden>
		<visibilityState public="1" set="null">
			<x path="js.html.VisibilityState"/>
			<haxe_doc>Returns a `string` denoting the visibility state of the document. Possible values are `visible`,  `hidden`,  `prerender`, and `unloaded`.</haxe_doc>
		</visibilityState>
		<onvisibilitychange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `visibilitychange` event is raised.</haxe_doc>
		</onvisibilitychange>
		<selectedStyleSheetSet public="1">
			<c path="String"/>
			<haxe_doc>Returns which style sheet set is currently in use.</haxe_doc>
		</selectedStyleSheetSet>
		<lastStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the style sheet set that was last enabled. Has the value `null` until the style sheet is changed by setting the value of `document.selectedStyleSheetSet`.</haxe_doc>
		</lastStyleSheetSet>
		<preferredStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the preferred style sheet set as specified by the page author.</haxe_doc>
		</preferredStyleSheetSet>
		<styleSheetSets public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a list of the style sheet sets available on the document.</haxe_doc>
		</styleSheetSets>
		<scrollingElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns a reference to the `Element` that scrolls the document.</haxe_doc>
		</scrollingElement>
		<timeline public="1" set="null">
			<c path="js.html.DocumentTimeline"/>
			<haxe_doc>…</haxe_doc>
		</timeline>
		<rootElement public="1" set="null"><c path="js.html.svg.SVGElement"/></rootElement>
		<oncopy public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `copy` event.</haxe_doc>
		</oncopy>
		<oncut public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `cut` event.</haxe_doc>
		</oncut>
		<onpaste public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `paste` event.</haxe_doc>
		</onpaste>
		<activeElement public="1" set="null"><c path="js.html.Element"/></activeElement>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<fullscreenElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element that's currently in full screen mode for this document.</haxe_doc>
		</fullscreenElement>
		<fonts public="1" set="null"><c path="js.html.FontFaceSet"/></fonts>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `wheel` event.</haxe_doc>
		</onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name and namespace.
		@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given class name.</haxe_doc>
		</getElementsByClassName>
		<getElementById public="1" set="method"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<createElement public="1" set="method">
			<f a="localName:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.ElementCreationOptions"/></x>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Creates a new element with the given tag name.
		@throws DOMError</haxe_doc>
			<overloads><createElement public="1" set="method">
	<f a="localName:?options">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Creates a new element with the given tag name.
		@throws DOMError</haxe_doc>
</createElement></overloads>
		</createElement>
		<createElementNS public="1" set="method">
			<f a="namespace:qualifiedName:?options">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.ElementCreationOptions"/></x>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Creates a new element with the given tag name and namespace URI.
		@throws DOMError</haxe_doc>
			<overloads><createElementNS public="1" set="method">
	<f a="namespace:qualifiedName:?options">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Creates a new element with the given tag name and namespace URI.
		@throws DOMError</haxe_doc>
</createElementNS></overloads>
		</createElementNS>
		<createDocumentFragment public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Creates a new document fragment.</haxe_doc>
		</createDocumentFragment>
		<createTextNode public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>Creates a text node.</haxe_doc>
		</createTextNode>
		<createComment public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Comment"/>
			</f>
			<haxe_doc>Creates a new comment node and returns it.</haxe_doc>
		</createComment>
		<createProcessingInstruction public="1" set="method">
			<f a="target:data">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.ProcessingInstruction"/>
			</f>
			<haxe_doc>Creates a new `ProcessingInstruction` object.
		@throws DOMError</haxe_doc>
		</createProcessingInstruction>
		<importNode public="1" set="method">
			<f a="node:?deep" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>Returns a clone of a node from an external document.
		@throws DOMError</haxe_doc>
		</importNode>
		<adoptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Adopt node from an external document.
		@throws DOMError</haxe_doc>
		</adoptNode>
		<createEvent public="1" set="method">
			<f a="interface_">
				<c path="String"/>
				<c path="js.html.Event"/>
			</f>
			<haxe_doc>Creates an event object.
		@throws DOMError</haxe_doc>
		</createEvent>
		<createRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>Creates a `Range` object.
		@throws DOMError</haxe_doc>
		</createRange>
		<createNodeIterator public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeIterator"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
			<overloads>
				<createNodeIterator public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<x path="haxe.Function"/>
						<c path="js.html.NodeIterator"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
				</createNodeIterator>
				<createNodeIterator public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<c path="js.html.NodeFilter"/>
						<c path="js.html.NodeIterator"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
				</createNodeIterator>
			</overloads>
		</createNodeIterator>
		<createTreeWalker public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.TreeWalker"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
			<overloads>
				<createTreeWalker public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<x path="haxe.Function"/>
						<c path="js.html.TreeWalker"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
				</createTreeWalker>
				<createTreeWalker public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<c path="js.html.NodeFilter"/>
						<c path="js.html.TreeWalker"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
				</createTreeWalker>
			</overloads>
		</createTreeWalker>
		<createCDATASection public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.CDATASection"/>
			</f>
			<haxe_doc>Creates a new CDATA node and returns it.
		@throws DOMError</haxe_doc>
		</createCDATASection>
		<createAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Creates a new `Attr` object and returns it.
		@throws DOMError</haxe_doc>
		</createAttribute>
		<createAttributeNS public="1" set="method">
			<f a="namespace:name">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Creates a new attribute node in a given namespace and returns it.
		@throws DOMError</haxe_doc>
		</createAttributeNS>
		<getElementsByName public="1" set="method"><f a="elementName">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByName>
		<hasFocus public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the focus is currently located anywhere inside the specified document.
		@throws DOMError</haxe_doc>
		</hasFocus>
		<releaseCapture public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the current mouse capture if it's on an element in this document.</haxe_doc>
		</releaseCapture>
		<exitFullscreen public="1" set="method"><f a=""><x path="Void"/></f></exitFullscreen>
		<exitPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release the pointer lock.</haxe_doc>
		</exitPointerLock>
		<enableStyleSheetsForSet public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables the style sheets for the specified style sheet set.</haxe_doc>
		</enableStyleSheetsForSet>
		<caretPositionFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CaretPosition"/>
</f></caretPositionFromPoint>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelectorAll>
		<getAnimations public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Animation"/></c></f>
			<haxe_doc>Returns an array of all `Animation` objects currently in effect, whose target elements are descendants of the `document`.</haxe_doc>
		</getAnimations>
		<createTouch public="1" set="method">
			<f a="?view:?target:?identifier:?pageX:?pageY:?screenX:?screenY:?clientX:?clientY:?radiusX:?radiusY:?rotationAngle:?force" v="::0:0:0:0:0:0:0:0:0:0.0:0.0">
				<c path="js.html.Window"/>
				<c path="js.html.EventTarget"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.Touch"/>
			</f>
			<meta><m n=":value"><e>{ force : 0.0, rotationAngle : 0.0, radiusY : 0, radiusX : 0, clientY : 0, clientX : 0, screenY : 0, screenX : 0, pageY : 0, pageX : 0, identifier : 0 }</e></m></meta>
			<haxe_doc>Creates a `Touch` object.</haxe_doc>
		</createTouch>
		<createTouchList public="1" set="method">
			<f a="touches">
				<c path="Array"><c path="js.html.Touch"/></c>
				<c path="js.html.TouchList"/>
			</f>
			<haxe_doc>Creates a `TouchList` object.</haxe_doc>
			<overloads>
				<createTouchList public="1" set="method">
					<f a="touch:touches">
						<c path="js.html.Touch"/>
						<x path="haxe.extern.Rest"><c path="js.html.Touch"/></x>
						<c path="js.html.TouchList"/>
					</f>
					<haxe_doc>Creates a `TouchList` object.</haxe_doc>
				</createTouchList>
				<createTouchList public="1" set="method">
					<f a=""><c path="js.html.TouchList"/></f>
					<haxe_doc>Creates a `TouchList` object.</haxe_doc>
				</createTouchList>
			</overloads>
		</createTouchList>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getSelection>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<elementsFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="js.html.Element"/></c>
</f></elementsFromPoint>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<prepend public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<createExpression public="1" set="method">
			<f a="expression:?resolver">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<c path="js.html.XPathExpression"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
			</overloads>
		</createExpression>
		<createNSResolver public="1" set="method"><f a="nodeResolver">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></createNSResolver>
		<evaluate public="1" set="method">
			<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
				<c path="String"/>
				<c path="js.html.Node"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="haxe.Function"/>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
			</overloads>
		</evaluate>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Document` interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.`HTMLElement`

	Documentation [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Document$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Document>]]></haxe_doc>
		<meta><m n=":native"><e>"Document"</e></m></meta>
	</class>
	<class path="js.html.DocumentFragment" params="" file="/usr/local/lib/haxe/std/js/html/DocumentFragment.hx" extern="1">
		<extends path="js.html.Node"/>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the DocumentFragment`, in document order, that matches the specified ID.</haxe_doc>
		</getElementById>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the `DocumentFragment`, in document order, that matches the specified selectors.
		@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>Returns a `NodeList` of all the `Element` nodes within the `DocumentFragment` that match the specified selectors.
		@throws DOMError</haxe_doc>
		</querySelectorAll>
		<prepend public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentFragment` interface represents a minimal document object that has no parent. It is used as a lightweight version of `Document` that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.

	Documentation [DocumentFragment](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentFragment"</e></m></meta>
	</class>
	<class path="js.html.DocumentTimeline" params="" file="/usr/local/lib/haxe/std/js/html/DocumentTimeline.hx" extern="1">
		<extends path="js.html.AnimationTimeline"/>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.DocumentTimelineOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentTimeline` interface of the the Web Animations API represents animation timelines, including the default document timeline (accessed via `Document.timeline`).

	Documentation [DocumentTimeline](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentTimeline"</e></m></meta>
	</class>
	<typedef path="js.html.DocumentTimelineOptions" params="" file="/usr/local/lib/haxe/std/js/html/DocumentTimelineOptions.hx"><a><originTime>
	<x path="Null"><x path="Float"/></x>
	<meta><m n=":optional"/></meta>
</originTime></a></typedef>
	<class path="js.html.DocumentType" params="" file="/usr/local/lib/haxe/std/js/html/DocumentType.hx" extern="1">
		<extends path="js.html.Node"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"html"` for `!DOCTYPE HTML`.</haxe_doc>
		</name>
		<publicId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"-//W3C//DTD HTML 4.01//EN"`, empty string for HTML5.</haxe_doc>
		</publicId>
		<systemId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"http://www.w3.org/TR/html4/strict.dtd"`, empty string for HTML5.</haxe_doc>
		</systemId>
		<before public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `DocumentType` interface represents a `Node` containing a doctype.

	Documentation [DocumentType](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentType>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentType"</e></m></meta>
	</class>
	<typedef path="js.html.EffectTiming" params="" file="/usr/local/lib/haxe/std/js/html/EffectTiming.hx">
		<a>
			<iterations>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
			</iterations>
			<iterationStart>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
			</iterationStart>
			<fill>
				<x path="Null"><x path="js.html.FillMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
			</fill>
			<endDelay>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
			</endDelay>
			<easing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
			</easing>
			<duration>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
			</duration>
			<direction>
				<x path="Null"><x path="js.html.PlaybackDirection"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
			</direction>
			<delay>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
			</delay>
		</a>
		<haxe_doc><![CDATA[The `EffectTiming` dictionary, part of the Web Animations API, is used by `Element.animate()`, `KeyframeEffectReadOnly()`, and `KeyframeEffect()` to describe timing properties for animation effects. These properties are all optional, although without setting a `duration` the animation will not play.

	Documentation [EffectTiming](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.ElementCreationOptions" params="" file="/usr/local/lib/haxe/std/js/html/ElementCreationOptions.hx"><a><is>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</is></a></typedef>
	<class path="js.html.EmbedElement" params="" file="/usr/local/lib/haxe/std/js/html/EmbedElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the resource.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, containing the type of the resource.</haxe_doc>
		</type>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, containing the displayed width of the resource.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `height` HTML attribute, containing the displayed height of the resource.</haxe_doc>
		</height>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"center"`, and `"justify"`.</haxe_doc>
		</align>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the embedded object.</haxe_doc>
		</name>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLEmbedElement` interface, which provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `embed` elements.

	Documentation [HTMLEmbedElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLEmbedElement"</e></m></meta>
	</class>
	<abstract path="js.html.EndingTypes" params="" file="/usr/local/lib/haxe/std/js/html/EndingTypes.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._EndingTypes.EndingTypes_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/EndingTypes.hx" private="1" module="js.html.EndingTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Event" params="" file="/usr/local/lib/haxe/std/js/html/Event.hx" extern="1">
		<NONE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<CAPTURING_PHASE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CAPTURING_PHASE>
		<AT_TARGET public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</AT_TARGET>
		<BUBBLING_PHASE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BUBBLING_PHASE>
		<ALT_MASK public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ALT_MASK>
		<CONTROL_MASK public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CONTROL_MASK>
		<SHIFT_MASK public="1" get="inline" set="null" expr="4" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHIFT_MASK>
		<META_MASK public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</META_MASK>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the event (case-insensitive).</haxe_doc>
		</type>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the target to which the event was originally dispatched.</haxe_doc>
		</target>
		<currentTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent; it's possible this has been changed along the way through retargeting.</haxe_doc>
		</currentTarget>
		<eventPhase public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Indicates which phase of the event flow is being processed.</haxe_doc>
		</eventPhase>
		<bubbles public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event bubbles up through the DOM or not.</haxe_doc>
		</bubbles>
		<cancelable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event is cancelable.</haxe_doc>
		</cancelable>
		<returnValue public="1">
			<x path="Bool"/>
			<haxe_doc>A historical property introduced by Internet Explorer and eventually adopted into the DOM specification in order to ensure existing sites continue to work. Ideally, you should try to use `Event.preventDefault()` and `Event.defaultPrevented` instead, but you can use `returnValue` if you choose to do so.</haxe_doc>
		</returnValue>
		<defaultPrevented public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not `event.preventDefault()` has been called on the event.</haxe_doc>
		</defaultPrevented>
		<composed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.</haxe_doc>
		</composed>
		<isTrusted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the event was initiated by the browser (after a user click for instance) or by a script (using an event creation method, like event.initEvent).</haxe_doc>
		</isTrusted>
		<timeStamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time at which the event was created (in milliseconds). By specification, this value is time since epoch, but in reality browsers' definitions vary; in addition, work is underway to change this to be a `DOMHighResTimeStamp` instead.</haxe_doc>
		</timeStamp>
		<cancelBubble public="1">
			<x path="Bool"/>
			<haxe_doc>A historical alias to `Event.stopPropagation()`. Setting its value to `true` before returning from an event handler prevents propagation of the event.</haxe_doc>
		</cancelBubble>
		<originalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The original target of the event, before any retargetings (Mozilla-specific).</haxe_doc>
		</originalTarget>
		<explicitOriginalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The explicit original target of the event (Mozilla-specific).</haxe_doc>
		</explicitOriginalTarget>
		<composedPath public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.EventTarget"/></c></f>
			<haxe_doc>Returns the event’s path (objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its `ShadowRoot.mode` closed.</haxe_doc>
		</composedPath>
		<stopPropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the propagation of events further along in the DOM.</haxe_doc>
		</stopPropagation>
		<stopImmediatePropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>For this particular event, no other listener will be called. Neither those attached on the same element, nor those attached on elements which will be traversed later (in capture phase, for instance)</haxe_doc>
		</stopImmediatePropagation>
		<preventDefault public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels the event (if it is cancelable).</haxe_doc>
		</preventDefault>
		<initEvent public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
			<haxe_doc>Initializes the value of an Event created. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.EventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Event` interface represents any event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of events, some of which use other interfaces based on the main `Event` interface. `Event` itself contains the properties and methods which are common to all events.

	Documentation [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Event$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Event>]]></haxe_doc>
		<meta><m n=":native"><e>"Event"</e></m></meta>
	</class>
	<typedef path="js.html.EventInit" params="" file="/usr/local/lib/haxe/std/js/html/EventInit.hx"><a>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.EventListener" params="" file="/usr/local/lib/haxe/std/js/html/EventListener.hx">
		<a><handleEvent set="method">
	<f a="event">
		<c path="js.html.Event"/>
		<x path="Void"/>
	</f>
	<haxe_doc>A function that is called whenever an event of the specified type occurs.</haxe_doc>
</handleEvent></a>
		<haxe_doc><![CDATA[The `EventListener` interface represents an object that can handle an event dispatched by an `EventTarget` object.

	Documentation [EventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventListener) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventListener$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventListener>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.EventListenerOptions" params="" file="/usr/local/lib/haxe/std/js/html/EventListenerOptions.hx"><a><capture>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</capture></a></typedef>
	<class path="js.html.FetchObserver" params="" file="/usr/local/lib/haxe/std/js/html/FetchObserver.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null"><x path="js.html.FetchState"/></state>
		<onstatechange public="1"><x path="haxe.Function"/></onstatechange>
		<onrequestprogress public="1"><x path="haxe.Function"/></onrequestprogress>
		<onresponseprogress public="1"><x path="haxe.Function"/></onresponseprogress>
		<meta><m n=":native"><e>"FetchObserver"</e></m></meta>
	</class>
	<abstract path="js.html.FetchState" params="" file="/usr/local/lib/haxe/std/js/html/FetchState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FetchState.FetchState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/FetchState.hx" private="1" module="js.html.FetchState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FieldSetElement" params="" file="/usr/local/lib/haxe/std/js/html/FieldSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `disabled` HTML attribute, indicating whether the user can interact with the control.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormControlsCollection` or `HTMLCollection` referencing the containing form element, if this element is in a form.
		
		 If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name of the field set, used for submitting the form.</haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `DOMString` `"fieldset"`.</haxe_doc>
		</type>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser.</haxe_doc>
		</elements>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` `false`, because `fieldset` objects are never candidates for constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` representing the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Always returns `true` because `fieldset` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the field set. If this message is not the empty string, then the field set is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLFieldSetElement` interface has special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of field-set elements.

	Documentation [HTMLFieldSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFieldSetElement"</e></m></meta>
	</class>
	<class path="js.html.File" params="" file="/usr/local/lib/haxe/std/js/html/File.hx" extern="1">
		<extends path="js.html.Blob"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the file referenced by the `File` object.</haxe_doc>
		</name>
		<lastModified public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).</haxe_doc>
		</lastModified>
		<new public="1" set="method">
			<f a="fileBits:fileName:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Blob"/>
		<c path="String"/>
	</x>
</x></c>
				<c path="String"/>
				<x path="Null"><t path="js.html.FilePropertyBag"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `File` interface provides information about files and allows JavaScript in a web page to access their content.

	Documentation [File](https://developer.mozilla.org/en-US/docs/Web/API/File) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/File$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/File>]]></haxe_doc>
		<meta><m n=":native"><e>"File"</e></m></meta>
	</class>
	<class path="js.html.FileList" params="" file="/usr/local/lib/haxe/std/js/html/FileList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.File"/>
</f></item>
		<haxe_doc><![CDATA[An object of this type is returned by the `files` property of the HTML `input` element; this lets you access the list of files selected with the `input type="file"` element. It's also used for a list of files dropped into web content when using the drag and drop API; see the `DataTransfer` object for details on this usage.

	Documentation [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileList>]]></haxe_doc>
		<meta><m n=":native"><e>"FileList"</e></m></meta>
	</class>
	<typedef path="js.html.FilePropertyBag" params="" file="/usr/local/lib/haxe/std/js/html/FilePropertyBag.hx"><a>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<lastModified>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</lastModified>
</a></typedef>
	<abstract path="js.html.FillMode" params="" file="/usr/local/lib/haxe/std/js/html/FillMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FillMode.FillMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/FillMode.hx" private="1" module="js.html.FillMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FontElement" params="" file="/usr/local/lib/haxe/std/js/html/FontElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `color` HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.</haxe_doc>
		</color>
		<face public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `face` HTML attribute, containing a comma-separated list of one or more font names.</haxe_doc>
		</face>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `size` HTML attribute, containing either a font size number ranging from 1 to 7 or a relative size to the `size` attribute of the `basefont` element, for example -2 or +1.</haxe_doc>
		</size>
		<haxe_doc><![CDATA[Implements the document object model (DOM) representation of the font element. The HTML Font Element `font` defines the font size, font face and color of text.

	Documentation [HTMLFontElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFontElement"</e></m></meta>
	</class>
	<class path="js.html.FontFace" params="" file="/usr/local/lib/haxe/std/js/html/FontFace.hx" extern="1">
		<family public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the family of the font. It is equivalent to the `@font-face/font-family` descriptor.</haxe_doc>
		</family>
		<style public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the style of the font. It is equivalent to the `@font-face/font-style` descriptor.</haxe_doc>
		</style>
		<weight public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the weight of the font. It is equivalent to the `@font-face/font-weight` descriptor.</haxe_doc>
		</weight>
		<stretch public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains how the font stretches. It is equivalent to the `@font-face/font-stretch` descriptor.</haxe_doc>
		</stretch>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the range of code encompassed the font. It is equivalent to the `@font-face/unicode-range` descriptor.</haxe_doc>
		</unicodeRange>
		<variant public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the variant of the font. It is equivalent to the `@font-face/font-variant` descriptor.</haxe_doc>
		</variant>
		<featureSettings public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the features of the font. It is equivalent to the `@font-face/font-feature-settings`descriptor.</haxe_doc>
		</featureSettings>
		<status public="1" set="null">
			<x path="js.html.FontFaceLoadStatus"/>
			<haxe_doc>Returns an enumerated value indicating the status of the font. It can be one of the following: `"unloaded"`, `"loading"`, `"loaded"`, or `"error"`.</haxe_doc>
		</status>
		<loaded public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.FontFace"/></c>
			<haxe_doc>Returns a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.</haxe_doc>
		</loaded>
		<load public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FontFace"/></c></f>
			<haxe_doc>Loads the font, returning a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.
		@throws DOMError</haxe_doc>
		</load>
		<new public="1" set="method">
			<f a="family:source:?descriptors">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="family:source:?descriptors">
						<c path="String"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
						<c path="js.html.FontFace"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="family:source:?descriptors">
						<c path="String"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
						<c path="js.html.FontFace"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `FontFace` interface represents a single usable font face. It allows control of the source of the font face, being a URL to an external resource, or a buffer; it also allows control of when the font face is loaded and its current status.

	Documentation [FontFace](https://developer.mozilla.org/en-US/docs/Web/API/FontFace) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFace$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFace>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFace"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceDescriptors" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceDescriptors.hx"><a>
	<weight>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</weight>
	<variationSettings>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</variationSettings>
	<variant>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</variant>
	<unicodeRange>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</unicodeRange>
	<style>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</style>
	<stretch>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</stretch>
	<featureSettings>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</featureSettings>
	<display>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</display>
</a></typedef>
	<abstract path="js.html.FontFaceLoadStatus" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceLoadStatus.FontFaceLoadStatus_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceLoadStatus.hx" private="1" module="js.html.FontFaceLoadStatus" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FontFaceSet" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceSet.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<size public="1" set="null"><x path="Int"/></size>
		<onloading public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loading` is fired, indicating a font-face set has started loading.</haxe_doc>
		</onloading>
		<onloadingdone public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loadingdone` is fired, indicating that a font face set has finished loading.</haxe_doc>
		</onloadingdone>
		<onloadingerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loadingerror` is fired, indicating that an error occurred whilst loading a font-face set.</haxe_doc>
		</onloadingerror>
		<ready public="1" set="null"><c path="js.lib.Promise"><x path="Void"/></c></ready>
		<status public="1" set="null">
			<x path="js.html.FontFaceSetLoadStatus"/>
			<haxe_doc>Indicates the font-face's loading status. It will be one of `'loading'` or `'loaded'`.</haxe_doc>
		</status>
		<add public="1" set="method">
			<f a="font">
				<c path="js.html.FontFace"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<has public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></has>
		<delete public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></delete>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<entries public="1" set="method"><f a=""><t path="js.html.FontFaceSetIterator"/></f></entries>
		<values public="1" set="method"><f a=""><t path="js.html.FontFaceSetIterator"/></f></values>
		<forEach public="1" set="method">
			<f a="cb:?thisArg">
				<f a="::">
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFaceSet"/>
					<x path="Void"/>
				</f>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<load public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.FontFace"/></c></c>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
		</load>
		<check public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</check>
		<haxe_doc><![CDATA[The `FontFaceSet` interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status.

	Documentation [FontFaceSet](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFaceSet"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceSetIterator" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceSetIterator.hx"><a><next set="method">
	<f a=""><t path="js.html.FontFaceSetIteratorResult"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<typedef path="js.html.FontFaceSetIteratorResult" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceSetIteratorResult.hx"><a>
	<value><d/></value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.html.FontFaceSetLoadStatus" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceSetLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceSetLoadStatus.FontFaceSetLoadStatus_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceSetLoadStatus.hx" private="1" module="js.html.FontFaceSetLoadStatus" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FormData" params="" file="/usr/local/lib/haxe/std/js/html/FormData.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.
		@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.
		@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a key/value pair from a `FormData` object.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Blob"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Directory"/>
						<c path="String"/>
					</x>
				</x>
			</f>
			<haxe_doc>Returns the first value associated with a given key from within a `FormData` object.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Directory"/>
		<c path="String"/>
	</x>
</x></c>
			</f>
			<haxe_doc>Returns an array of all the values associated with a given key from within a `FormData`.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `FormData` object contains a certain key/value pair.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a new value for an existing key inside a `FormData `object, or adds the key/value if it does not already exist.
		@throws DOMError</haxe_doc>
			<overloads><set public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Sets a new value for an existing key inside a `FormData `object, or adds the key/value if it does not already exist.
		@throws DOMError</haxe_doc>
</set></overloads>
		</set>
		<entries public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?form">
				<c path="js.html.FormElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FormData` interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the `XMLHttpRequest.send()` method. It uses the same format a form would use if the encoding type were set to `"multipart/form-data"`.

	Documentation [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FormData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FormData>]]></haxe_doc>
		<meta><m n=":native"><e>"FormData"</e></m></meta>
	</class>
	<typedef path="js.html.FormDataIterator" params="" file="/usr/local/lib/haxe/std/js/html/FormDataIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.FormElement" params="" file="/usr/local/lib/haxe/std/js/html/FormElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<acceptCharset public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `accept-charset` HTML attribute, representing the character encoding that the server accepts.</haxe_doc>
		</acceptCharset>
		<action public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `action` HTML attribute, containing the URI of a program that processes the information submitted by the form.</haxe_doc>
		</action>
		<autocomplete public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `autocomplete` HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser.</haxe_doc>
		</autocomplete>
		<enctype public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.</haxe_doc>
		</enctype>
		<encoding public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.</haxe_doc>
		</encoding>
		<method public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `method` HTML attribute, indicating the HTTP method used to submit the form. Only specified values can be set.</haxe_doc>
		</method>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `name` HTML attribute, containing the name of the form.</haxe_doc>
		</name>
		<noValidate public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the value of the form's  `novalidate` HTML attribute, indicating whether the form should not be validated.</haxe_doc>
		</noValidate>
		<target public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `target` HTML attribute, indicating where to display the results received from submitting the form.</haxe_doc>
		</target>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>A `HTMLFormControlsCollection` holding all form controls belonging to this form element.</haxe_doc>
		</elements>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting  the number of controls in the form.</haxe_doc>
		</length>
		<submit public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Submits the form to the server.
		@throws DOMError</haxe_doc>
		</submit>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the form to its initial state.</haxe_doc>
		</reset>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the element's child controls are subject to constraint validation and satisfy those contraints; returns `false` if some controls do not satisfy their constraints. Fires an event named `invalid` at any control that does not satisfy its constraints; such controls are considered invalid if the event is not canceled. It is up to the programmer to decide how to respond to `false`.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the element's child controls satisfy their validation constraints. When `false` is returned, cancelable `invalid` events are fired for each invalid child and validation problems are reported to the user.</haxe_doc>
		</reportValidity>
		<haxe_doc><![CDATA[The `HTMLFormElement` interface represents a `form` element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.

	Documentation [HTMLFormElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFormElement"</e></m></meta>
	</class>
	<class path="js.html.FrameElement" params="" file="/usr/local/lib/haxe/std/js/html/FrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<scrolling public="1"><c path="String"/></scrolling>
		<src public="1"><c path="String"/></src>
		<frameBorder public="1"><c path="String"/></frameBorder>
		<longDesc public="1"><c path="String"/></longDesc>
		<noResize public="1"><x path="Bool"/></noResize>
		<contentDocument public="1" set="null"><c path="js.html.HTMLDocument"/></contentDocument>
		<contentWindow public="1" set="null"><c path="js.html.Window"/></contentWindow>
		<marginHeight public="1"><c path="String"/></marginHeight>
		<marginWidth public="1"><c path="String"/></marginWidth>
		<meta><m n=":native"><e>"HTMLFrameElement"</e></m></meta>
	</class>
	<class path="js.html.FrameSetElement" params="" file="/usr/local/lib/haxe/std/js/html/FrameSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cols public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` structured as a comma-seperated list specifing the width of each column inside a frameset.</haxe_doc>
		</cols>
		<rows public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` structured as a comma-seperated list specifing the height of each column inside a frameset.</haxe_doc>
		</rows>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLFrameSetElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating `frameset` elements.

	Documentation [HTMLFrameSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFrameSetElement"</e></m></meta>
	</class>
	<class path="js.html.Gamepad" params="" file="/usr/local/lib/haxe/std/js/html/Gamepad.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing identifying information about the controller.</haxe_doc>
		</id>
		<index public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An integer that is auto-incremented to be unique for each device currently connected to the system.</haxe_doc>
		</index>
		<mapping public="1" set="null">
			<x path="js.html.GamepadMappingType"/>
			<haxe_doc>A string indicating whether the browser has remapped the controls on the device to a known layout.</haxe_doc>
		</mapping>
		<connected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether the gamepad is still connected to the system.</haxe_doc>
		</connected>
		<buttons public="1" set="null">
			<c path="Array"><c path="js.html.GamepadButton"/></c>
			<haxe_doc>An array of `gamepadButton` objects representing the buttons present on the device.</haxe_doc>
		</buttons>
		<axes public="1" set="null">
			<c path="Array"><x path="Float"/></c>
			<haxe_doc>An array representing the controls with axes present on the device (e.g. analog thumb sticks).</haxe_doc>
		</axes>
		<timestamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the last time the data for this gamepad was updated.</haxe_doc>
		</timestamp>
		<haxe_doc><![CDATA[The `Gamepad` interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.

	Documentation [Gamepad](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Gamepad>]]></haxe_doc>
		<meta><m n=":native"><e>"Gamepad"</e></m></meta>
	</class>
	<class path="js.html.GamepadButton" params="" file="/usr/local/lib/haxe/std/js/html/GamepadButton.hx" extern="1">
		<pressed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean value indicating whether the button is currently pressed (`true`) or unpressed (`false`).</haxe_doc>
		</pressed>
		<touched public="1" set="null"><x path="Bool"/></touched>
		<value public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `GamepadButton` interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.

	Documentation [GamepadButton](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton>]]></haxe_doc>
		<meta><m n=":native"><e>"GamepadButton"</e></m></meta>
	</class>
	<abstract path="js.html.GamepadMappingType" params="" file="/usr/local/lib/haxe/std/js/html/GamepadMappingType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._GamepadMappingType.GamepadMappingType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/GamepadMappingType.hx" private="1" module="js.html.GamepadMappingType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.Geolocation" params="" file="/usr/local/lib/haxe/std/js/html/Geolocation.hx">
		<a>
			<watchPosition set="method">
				<f a="successCallback:?errorCallback:?options">
					<f a="">
						<t path="js.html.Position"/>
						<x path="Void"/>
					</f>
					<f a="">
						<c path="js.html.PositionError"/>
						<x path="Void"/>
					</f>
					<t path="js.html.PositionOptions"/>
					<x path="Int"/>
				</f>
				<haxe_doc>Returns a `long` value representing the newly established callback function to be invoked whenever the device location changes.
		@throws DOMError</haxe_doc>
			</watchPosition>
			<getCurrentPosition set="method">
				<f a="successCallback:?errorCallback:?options">
					<f a="">
						<t path="js.html.Position"/>
						<x path="Void"/>
					</f>
					<f a="">
						<c path="js.html.PositionError"/>
						<x path="Void"/>
					</f>
					<t path="js.html.PositionOptions"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Determines the device's current location and gives back a `Position` object with the data.
		@throws DOMError</haxe_doc>
			</getCurrentPosition>
			<clearWatch set="method">
				<f a="watchId">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes the particular handler previously installed using `watchPosition()`.</haxe_doc>
			</clearWatch>
		</a>
		<haxe_doc><![CDATA[The `Geolocation` interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.

	Documentation [Geolocation](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Geolocation>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.GetNotificationOptions" params="" file="/usr/local/lib/haxe/std/js/html/GetNotificationOptions.hx"><a><tag>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</tag></a></typedef>
	<typedef path="js.html.GetRootNodeOptions" params="" file="/usr/local/lib/haxe/std/js/html/GetRootNodeOptions.hx"><a><composed>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</composed></a></typedef>
	<class path="js.html.HRElement" params="" file="/usr/local/lib/haxe/std/js/html/HRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1"><c path="String"/></align>
		<color public="1"><c path="String"/></color>
		<noShade public="1"><x path="Bool"/></noShade>
		<size public="1"><c path="String"/></size>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLHRElement` interface provides special properties (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating `hr` elements.

	Documentation [HTMLHRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHRElement"</e></m></meta>
	</class>
	<class path="js.html.HTMLAllCollection" params="" file="/usr/local/lib/haxe/std/js/html/HTMLAllCollection.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Node"/>
					<c path="js.html.HTMLCollection"/>
				</x>
			</f>
			<overloads><item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item></overloads>
		</item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Node"/>
		<c path="js.html.HTMLCollection"/>
	</x>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLAllCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLCollection" params="" file="/usr/local/lib/haxe/std/js/html/HTMLCollection.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of items in the collection.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node at the given zero-based `index` into the list. Returns `null` if the `index` is out of range.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node whose ID or, as a fallback, name matches the string specified by `name`. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the `name` attribute. Returns `null` if no node exists by the given name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `HTMLCollection` interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.

	Documentation [HTMLCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLDocument" params="" file="/usr/local/lib/haxe/std/js/html/HTMLDocument.hx" extern="1">
		<extends path="js.html.Document"/>
		<domain public="1"><c path="String"/></domain>
		<cookie public="1"><c path="String"/></cookie>
		<designMode public="1"><c path="String"/></designMode>
		<fgColor public="1"><c path="String"/></fgColor>
		<linkColor public="1"><c path="String"/></linkColor>
		<vlinkColor public="1"><c path="String"/></vlinkColor>
		<alinkColor public="1"><c path="String"/></alinkColor>
		<bgColor public="1"><c path="String"/></bgColor>
		<all public="1" set="null"><c path="js.html.HTMLAllCollection"/></all>
		<open public="1" set="method">
			<f a="url:name:features:?replace" v=":::false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ replace : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="?type:?replace" v=":&quot;&quot;">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.HTMLDocument"/>
	</f>
	<meta><m n=":value"><e>{ replace : "" }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<write public="1" set="method">
			<f a="text">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</write>
		<writeln public="1" set="method">
			<f a="text">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</writeln>
		<execCommand public="1" set="method">
			<f a="commandId:?showUI:?value" v=":false:&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ value : "", showUI : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</execCommand>
		<queryCommandEnabled public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandEnabled>
		<queryCommandIndeterm public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandIndeterm>
		<queryCommandState public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandState>
		<queryCommandSupported public="1" set="method"><f a="commandId">
	<c path="String"/>
	<x path="Bool"/>
</f></queryCommandSupported>
		<queryCommandValue public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandValue>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<captureEvents public="1" set="method"><f a=""><x path="Void"/></f></captureEvents>
		<releaseEvents public="1" set="method"><f a=""><x path="Void"/></f></releaseEvents>
		<createTableCellElement public="1" get="inline" set="null" line="70">
			<f a=""><c path="js.html.TableCellElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<td>` element.]]></haxe_doc>
		</createTableCellElement>
		<createSelectElement public="1" get="inline" set="null" line="72">
			<f a=""><c path="js.html.SelectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<select>` element.]]></haxe_doc>
		</createSelectElement>
		<createFontElement public="1" get="inline" set="null" line="74">
			<f a=""><c path="js.html.FontElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<font>` element.]]></haxe_doc>
		</createFontElement>
		<createDListElement public="1" get="inline" set="null" line="76">
			<f a=""><c path="js.html.DListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dl>` element.]]></haxe_doc>
		</createDListElement>
		<createFrameElement public="1" get="inline" set="null" line="78">
			<f a=""><c path="js.html.FrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frame>` element.]]></haxe_doc>
		</createFrameElement>
		<createOListElement public="1" get="inline" set="null" line="80">
			<f a=""><c path="js.html.OListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ol>` element.]]></haxe_doc>
		</createOListElement>
		<createLIElement public="1" get="inline" set="null" line="82">
			<f a=""><c path="js.html.LIElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<li>` element.]]></haxe_doc>
		</createLIElement>
		<createHRElement public="1" get="inline" set="null" line="84">
			<f a=""><c path="js.html.HRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<hr>` element.]]></haxe_doc>
		</createHRElement>
		<createParamElement public="1" get="inline" set="null" line="86">
			<f a=""><c path="js.html.ParamElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<param>` element.]]></haxe_doc>
		</createParamElement>
		<createLabelElement public="1" get="inline" set="null" line="88">
			<f a=""><c path="js.html.LabelElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<label>` element.]]></haxe_doc>
		</createLabelElement>
		<createTrackElement public="1" get="inline" set="null" line="90">
			<f a=""><c path="js.html.TrackElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<track>` element.]]></haxe_doc>
		</createTrackElement>
		<createDivElement public="1" get="inline" set="null" line="92">
			<f a=""><c path="js.html.DivElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<div>` element.]]></haxe_doc>
		</createDivElement>
		<createTitleElement public="1" get="inline" set="null" line="94">
			<f a=""><c path="js.html.TitleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<title>` element.]]></haxe_doc>
		</createTitleElement>
		<createAnchorElement public="1" get="inline" set="null" line="96">
			<f a=""><c path="js.html.AnchorElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<a>` element.]]></haxe_doc>
		</createAnchorElement>
		<createStyleElement public="1" get="inline" set="null" line="98">
			<f a=""><c path="js.html.StyleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<style>` element.]]></haxe_doc>
		</createStyleElement>
		<createEmbedElement public="1" get="inline" set="null" line="100">
			<f a=""><c path="js.html.EmbedElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<embed>` element.]]></haxe_doc>
		</createEmbedElement>
		<createMeterElement public="1" get="inline" set="null" line="102">
			<f a=""><c path="js.html.MeterElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meter>` element.]]></haxe_doc>
		</createMeterElement>
		<createPictureElement public="1" get="inline" set="null" line="104">
			<f a=""><c path="js.html.PictureElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<picture>` element.]]></haxe_doc>
		</createPictureElement>
		<createPreElement public="1" get="inline" set="null" line="106">
			<f a=""><c path="js.html.PreElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<pre>` element.]]></haxe_doc>
		</createPreElement>
		<createTableSectionElement public="1" get="inline" set="null" line="108">
			<f a=""><c path="js.html.TableSectionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<thead>` element.]]></haxe_doc>
		</createTableSectionElement>
		<createHeadElement public="1" get="inline" set="null" line="110">
			<f a=""><c path="js.html.HeadElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<head>` element.]]></haxe_doc>
		</createHeadElement>
		<createOptGroupElement public="1" get="inline" set="null" line="112">
			<f a=""><c path="js.html.OptGroupElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<optgroup>` element.]]></haxe_doc>
		</createOptGroupElement>
		<createAudioElement public="1" get="inline" set="null" line="114">
			<f a=""><c path="js.html.AudioElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<audio>` element.]]></haxe_doc>
		</createAudioElement>
		<createVideoElement public="1" get="inline" set="null" line="116">
			<f a=""><c path="js.html.VideoElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<video>` element.]]></haxe_doc>
		</createVideoElement>
		<createLegendElement public="1" get="inline" set="null" line="118">
			<f a=""><c path="js.html.LegendElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<legend>` element.]]></haxe_doc>
		</createLegendElement>
		<createUListElement public="1" get="inline" set="null" line="120">
			<f a=""><c path="js.html.UListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ul>` element.]]></haxe_doc>
		</createUListElement>
		<createDirectoryElement public="1" get="inline" set="null" line="122">
			<f a=""><c path="js.html.DirectoryElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dir>` element.]]></haxe_doc>
		</createDirectoryElement>
		<createTableElement public="1" get="inline" set="null" line="124">
			<f a=""><c path="js.html.TableElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<table>` element.]]></haxe_doc>
		</createTableElement>
		<createSlotElement public="1" get="inline" set="null" line="126">
			<f a=""><c path="js.html.SlotElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<slot>` element.]]></haxe_doc>
		</createSlotElement>
		<createSourceElement public="1" get="inline" set="null" line="128">
			<f a=""><c path="js.html.SourceElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<source>` element.]]></haxe_doc>
		</createSourceElement>
		<createLinkElement public="1" get="inline" set="null" line="130">
			<f a=""><c path="js.html.LinkElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<link>` element.]]></haxe_doc>
		</createLinkElement>
		<createIFrameElement public="1" get="inline" set="null" line="132">
			<f a=""><c path="js.html.IFrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<iframe>` element.]]></haxe_doc>
		</createIFrameElement>
		<createMediaElement public="1" get="inline" set="null" line="134">
			<f a=""><c path="js.html.MediaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<media>` element.]]></haxe_doc>
		</createMediaElement>
		<createMapElement public="1" get="inline" set="null" line="136">
			<f a=""><c path="js.html.MapElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<map>` element.]]></haxe_doc>
		</createMapElement>
		<createFormElement public="1" get="inline" set="null" line="138">
			<f a=""><c path="js.html.FormElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<form>` element.]]></haxe_doc>
		</createFormElement>
		<createOptionElement public="1" get="inline" set="null" line="140">
			<f a=""><c path="js.html.OptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<option>` element.]]></haxe_doc>
		</createOptionElement>
		<createMetaElement public="1" get="inline" set="null" line="142">
			<f a=""><c path="js.html.MetaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meta>` element.]]></haxe_doc>
		</createMetaElement>
		<createObjectElement public="1" get="inline" set="null" line="144">
			<f a=""><c path="js.html.ObjectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<object>` element.]]></haxe_doc>
		</createObjectElement>
		<createTableCaptionElement public="1" get="inline" set="null" line="146">
			<f a=""><c path="js.html.TableCaptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<caption>` element.]]></haxe_doc>
		</createTableCaptionElement>
		<createImageElement public="1" get="inline" set="null" line="148">
			<f a=""><c path="js.html.ImageElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<img>` element.]]></haxe_doc>
		</createImageElement>
		<createTextAreaElement public="1" get="inline" set="null" line="150">
			<f a=""><c path="js.html.TextAreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<textarea>` element.]]></haxe_doc>
		</createTextAreaElement>
		<createScriptElement public="1" get="inline" set="null" line="152">
			<f a=""><c path="js.html.ScriptElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<script>` element.]]></haxe_doc>
		</createScriptElement>
		<createDataListElement public="1" get="inline" set="null" line="154">
			<f a=""><c path="js.html.DataListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<datalist>` element.]]></haxe_doc>
		</createDataListElement>
		<createModElement public="1" get="inline" set="null" line="156">
			<f a=""><c path="js.html.ModElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<mod>` element.]]></haxe_doc>
		</createModElement>
		<createOutputElement public="1" get="inline" set="null" line="158">
			<f a=""><c path="js.html.OutputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<output>` element.]]></haxe_doc>
		</createOutputElement>
		<createAreaElement public="1" get="inline" set="null" line="160">
			<f a=""><c path="js.html.AreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<area>` element.]]></haxe_doc>
		</createAreaElement>
		<createProgressElement public="1" get="inline" set="null" line="162">
			<f a=""><c path="js.html.ProgressElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<progress>` element.]]></haxe_doc>
		</createProgressElement>
		<createButtonElement public="1" get="inline" set="null" line="164">
			<f a=""><c path="js.html.ButtonElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<button>` element.]]></haxe_doc>
		</createButtonElement>
		<createFieldSetElement public="1" get="inline" set="null" line="166">
			<f a=""><c path="js.html.FieldSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<fieldset>` element.]]></haxe_doc>
		</createFieldSetElement>
		<createMenuElement public="1" get="inline" set="null" line="168">
			<f a=""><c path="js.html.MenuElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<menu>` element.]]></haxe_doc>
		</createMenuElement>
		<createBRElement public="1" get="inline" set="null" line="170">
			<f a=""><c path="js.html.BRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<br>` element.]]></haxe_doc>
		</createBRElement>
		<createSpanElement public="1" get="inline" set="null" line="172">
			<f a=""><c path="js.html.SpanElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<span>` element.]]></haxe_doc>
		</createSpanElement>
		<createDetailsElement public="1" get="inline" set="null" line="174">
			<f a=""><c path="js.html.DetailsElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<details>` element.]]></haxe_doc>
		</createDetailsElement>
		<createBodyElement public="1" get="inline" set="null" line="176">
			<f a=""><c path="js.html.BodyElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<body>` element.]]></haxe_doc>
		</createBodyElement>
		<createInputElement public="1" get="inline" set="null" line="178">
			<f a=""><c path="js.html.InputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<input>` element.]]></haxe_doc>
		</createInputElement>
		<createBaseElement public="1" get="inline" set="null" line="180">
			<f a=""><c path="js.html.BaseElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<base>` element.]]></haxe_doc>
		</createBaseElement>
		<createQuoteElement public="1" get="inline" set="null" line="182">
			<f a=""><c path="js.html.QuoteElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<quote>` element.]]></haxe_doc>
		</createQuoteElement>
		<createFrameSetElement public="1" get="inline" set="null" line="184">
			<f a=""><c path="js.html.FrameSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frameset>` element.]]></haxe_doc>
		</createFrameSetElement>
		<createCanvasElement public="1" get="inline" set="null" line="186">
			<f a=""><c path="js.html.CanvasElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<canvas>` element.]]></haxe_doc>
		</createCanvasElement>
		<createParagraphElement public="1" get="inline" set="null" line="188">
			<f a=""><c path="js.html.ParagraphElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<p>` element.]]></haxe_doc>
		</createParagraphElement>
		<createTableColElement public="1" get="inline" set="null" line="190">
			<f a=""><c path="js.html.TableColElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<col>` element.]]></haxe_doc>
		</createTableColElement>
		<createTableRowElement public="1" get="inline" set="null" line="192">
			<f a=""><c path="js.html.TableRowElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<tr>` element.]]></haxe_doc>
		</createTableRowElement>
		<createHtmlElement public="1" get="inline" set="null" line="194">
			<f a=""><c path="js.html.HtmlElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<html>` element.]]></haxe_doc>
		</createHtmlElement>
		<haxe_doc><![CDATA[`HTMLDocument` is an abstract interface which extends the `Document` interface to add HTML-specific features to the document object. It represents the root of the HTML document, within which its entire DOM hierarchy resides.

	Documentation [HTMLDocument](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDocument"</e></m></meta>
	</class>
	<class path="js.html.HTMLOptionsCollection" params="" file="/usr/local/lib/haxe/std/js/html/HTMLOptionsCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<selectedIndex public="1"><x path="Int"/></selectedIndex>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[`HTMLOptionsCollection` is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.

	Documentation [HTMLOptionsCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionsCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLPropertiesCollection" params="" file="/usr/local/lib/haxe/std/js/html/HTMLPropertiesCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<names public="1" set="null"><c path="js.html.DOMStringList"/></names>
		<namedItem public="1" set="method" override="1"><f a="name">
	<c path="String"/>
	<c path="js.html.PropertyNodeList"/>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLPropertiesCollection"</e></m></meta>
	</class>
	<class path="js.html.HeadElement" params="" file="/usr/local/lib/haxe/std/js/html/HeadElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLHeadElement` interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHeadElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHeadElement"</e></m></meta>
	</class>
	<class path="js.html.Headers" params="" file="/usr/local/lib/haxe/std/js/html/Headers.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.
		@throws DOMError</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a header from a `Headers` object.
		@throws DOMError</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `ByteString` sequence of all the values of a header within a `Headers` object with a given name.
		@throws DOMError</haxe_doc>
		</get>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `Headers` object contains a certain header.
		@throws DOMError</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.
		@throws DOMError</haxe_doc>
		</set>
		<entries public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing you to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing you to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Executes a provided function once for each array element.
		@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<c path="js.html.Headers"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?init">
						<c path="Array"><c path="Array"><c path="String"/></c></c>
						<c path="js.html.Headers"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?init">
						<x path="haxe.DynamicAccess"><c path="String"/></x>
						<c path="js.html.Headers"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Headers` interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A `Headers` object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like `append()` (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.

	Documentation [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Headers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Headers>]]></haxe_doc>
		<meta><m n=":native"><e>"Headers"</e></m></meta>
	</class>
	<typedef path="js.html.HeadersIterator" params="" file="/usr/local/lib/haxe/std/js/html/HeadersIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.History" params="" file="/usr/local/lib/haxe/std/js/html/History.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `Integer` representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns `1`.</haxe_doc>
		</length>
		<scrollRestoration public="1">
			<x path="js.html.ScrollRestoration"/>
			<haxe_doc>Allows web applications to explicitly set default scroll restoration behavior on history navigation. This property can be either `auto` or `manual`.</haxe_doc>
		</scrollRestoration>
		<state public="1" set="null">
			<d/>
			<haxe_doc>Returns an `any` value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a `popstate` event.</haxe_doc>
		</state>
		<go public="1" set="method">
			<f a="?delta" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0 }</e></m></meta>
			<haxe_doc>Loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1  for the next page. If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect. Calling `go()` without parameters or a value of 0 reloads the current page. Internet Explorer lets you also specify a string to go to a specific page in the history list.
		@throws DOMError</haxe_doc>
		</go>
		<back public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Goes to the previous page in session history, the same action as when the user clicks the browser's Back button. Equivalent to `history.go(-1)`.
		 Calling this method to go back beyond the first page in the session history has no effect and doesn't raise an exception.
		 
		@throws DOMError</haxe_doc>
		</back>
		<forward public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Goes to the next page in session history, the same action as when the user clicks the browser's Forward button; this is equivalent to `history.go(1)`.
		 Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.
		 
		@throws DOMError</haxe_doc>
		</forward>
		<pushState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes the given data onto the session history stack with the specified title and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.  Note that Firefox currently ignores the title parameter; for more information, see manipulating the browser history.
		@throws DOMError</haxe_doc>
		</pushState>
		<replaceState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.  Note that Firefox currently ignores the title parameter; for more information, see manipulating the browser history.
		@throws DOMError</haxe_doc>
		</replaceState>
		<haxe_doc><![CDATA[The `History` interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.

	Documentation [History](https://developer.mozilla.org/en-US/docs/Web/API/History) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/History$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/History>]]></haxe_doc>
		<meta><m n=":native"><e>"History"</e></m></meta>
	</class>
	<typedef path="js.html.HitRegionOptions" params="" file="/usr/local/lib/haxe/std/js/html/HitRegionOptions.hx"><a>
	<path>
		<x path="Null"><c path="js.html.Path2D"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<control>
		<x path="Null"><c path="js.html.Element"/></x>
		<meta><m n=":optional"/></meta>
	</control>
</a></typedef>
	<class path="js.html.HtmlElement" params="" file="/usr/local/lib/haxe/std/js/html/HtmlElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<version public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Simply omit it.</haxe_doc>
		</version>
		<haxe_doc><![CDATA[The `HTMLHtmlElement` interface serves as the root node for a given HTML document.  This object inherits the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHtmlElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHtmlElement"</e></m></meta>
	</class>
	<class path="js.html.IFrameElement" params="" file="/usr/local/lib/haxe/std/js/html/IFrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the content to be embedded.</haxe_doc>
		</src>
		<srcdoc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the content to display in the frame.</haxe_doc>
		</srcdoc>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, containing a name by which to refer to the frame.</haxe_doc>
		</name>
		<sandbox public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sandbox` HTML attribute, indicating extra restrictions on the behavior of the nested content.</haxe_doc>
		</sandbox>
		<allowFullscreen public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the inline frame is willing to be placed into full screen mode. See Using full-screen mode for details.</haxe_doc>
		</allowFullscreen>
		<allowPaymentRequest public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the Payment Request API may be invoked inside a cross-origin iframe.</haxe_doc>
		</allowPaymentRequest>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, indicating the width of the frame.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, indicating the height of the frame.</haxe_doc>
		</height>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerPolicy` HTML attribute indicating which referrer to use when fetching the linked resource.</haxe_doc>
		</referrerPolicy>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document`, the active document in the inline frame's nested browsing context.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy`, the window proxy for the nested browsing context.</haxe_doc>
		</contentWindow>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that specifies the alignment of the frame with respect to the surrounding context.</haxe_doc>
		</align>
		<scrolling public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether the browser should provide scrollbars for the frame.</haxe_doc>
		</scrolling>
		<frameBorder public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether to create borders between frames.</haxe_doc>
		</frameBorder>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the URI of a long description of the frame.</haxe_doc>
		</longDesc>
		<marginHeight public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the height of the frame margin.</haxe_doc>
		</marginHeight>
		<marginWidth public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the width of the frame margin.</haxe_doc>
		</marginWidth>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLIFrameElement` interface provides special properties and methods (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.

	Documentation [HTMLIFrameElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLIFrameElement"</e></m></meta>
	</class>
	<class path="js.html.ImageBitmap" params="" file="/usr/local/lib/haxe/std/js/html/ImageBitmap.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the width, in CSS pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the height, in CSS pixels, of the `ImageData`.</haxe_doc>
		</height>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Disposes of all graphical resources associated with an `ImageBitmap`.</haxe_doc>
		</close>
		<haxe_doc><![CDATA[The `ImageBitmap` interface represents a bitmap image which can be drawn to a `canvas` without undue latency. It can be created from a variety of source objects using the `createImageBitmap()` factory method. `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.

	Documentation [ImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageBitmap"</e></m></meta>
	</class>
	<abstract path="js.html.ImageBitmapFormat" params="" file="/usr/local/lib/haxe/std/js/html/ImageBitmapFormat.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ImageBitmapFormat.ImageBitmapFormat_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ImageBitmapFormat.hx" private="1" module="js.html.ImageBitmapFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ImageData" params="" file="/usr/local/lib/haxe/std/js/html/ImageData.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual width, in pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual height, in pixels, of the `ImageData`.</haxe_doc>
		</height>
		<data public="1" set="null">
			<c path="js.lib.Uint8ClampedArray"/>
			<haxe_doc>Is a `Uint8ClampedArray` representing a one-dimensional array containing the data in the RGBA order, with integer values between `0` and `255` (included).</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="data:sw:?sh">
				<c path="js.lib.Uint8ClampedArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="sw:sh">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `ImageData` interface represents the underlying pixel data of an area of a `canvas` element. It is created using the `ImageData()` constructor or creator methods on the `CanvasRenderingContext2D` object associated with a canvas: `createImageData()` and `getImageData()`. It can also be used to set a part of the canvas by using `putImageData()`.

	Documentation [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageData>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageData"</e></m></meta>
	</class>
	<class path="js.html.ImageElement" params="" file="/usr/local/lib/haxe/std/js/html/ImageElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute,  thus indicating fallback context for the image.</haxe_doc>
		</alt>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the full URL of the image including base URI.</haxe_doc>
		</src>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the CORS setting for this image element. See CORS settings attributes for further details.</haxe_doc>
		</crossOrigin>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, containing a partial URL of a map element.</haxe_doc>
		</useMap>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use in order to fetch the image.</haxe_doc>
		</referrerPolicy>
		<isMap public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `ismap` HTML attribute, indicating that the image is part of a server-side image map.</haxe_doc>
		</isMap>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `width` HTML attribute, indicating the rendered width of the image in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `height` HTML attribute, indicating the rendered height of the image in CSS pixels.</haxe_doc>
		</height>
		<decoding public="1">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a hint given to the browser on how it should decode the image.</haxe_doc>
		</decoding>
		<naturalWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show `0`.</haxe_doc>
		</naturalWidth>
		<naturalHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows `0`.</haxe_doc>
		</naturalHeight>
		<complete public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the browser has finished fetching the image, whether successful or not. It also shows true, if the image has no `HTMLImageElement.src` value.</haxe_doc>
		</complete>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the element.</haxe_doc>
		</name>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the alignment of the image with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space on either side of the image.</haxe_doc>
		</hspace>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space above and below the image.</haxe_doc>
		</vspace>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI of a long description of the image.</haxe_doc>
		</longDesc>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that is responsible for the width of the border surrounding the image. This is now deprecated and the CSS `border` property should be used instead.</haxe_doc>
		</border>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `sizes` HTML attribute.</haxe_doc>
		</sizes>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the URL to the currently displayed image (which may change, for example in response to media queries).</haxe_doc>
		</currentSrc>
		<lowsrc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that refers to a low-quality (but faster to load) copy of the image.</haxe_doc>
		</lowsrc>
		<x public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the horizontal offset from the nearest layer. This property mimics an old Netscape 4 behavior.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the vertical offset from the nearest layer. This property is also similar to behavior of an old Netscape 4.</haxe_doc>
		</y>
		<haxe_doc><![CDATA[The `HTMLImageElement` interface provides special properties and methods  for manipulating the layout and presentation of `img` elements.

	Documentation [HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLImageElement"</e></m></meta>
	</class>
	<class path="js.html.InputElement" params="" file="/usr/local/lib/haxe/std/js/html/InputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<accept public="1"><c path="String"/></accept>
		<alt public="1"><c path="String"/></alt>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<defaultChecked public="1"><x path="Bool"/></defaultChecked>
		<checked public="1"><x path="Bool"/></checked>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<files public="1"><c path="js.html.FileList"/></files>
		<formAction public="1"><c path="String"/></formAction>
		<formEnctype public="1"><c path="String"/></formEnctype>
		<formMethod public="1"><c path="String"/></formMethod>
		<formNoValidate public="1"><x path="Bool"/></formNoValidate>
		<formTarget public="1"><c path="String"/></formTarget>
		<height public="1"><x path="Int"/></height>
		<indeterminate public="1"><x path="Bool"/></indeterminate>
		<list public="1" set="null"><c path="js.html.Element"/></list>
		<max public="1"><c path="String"/></max>
		<maxLength public="1"><x path="Int"/></maxLength>
		<min public="1"><c path="String"/></min>
		<minLength public="1"><x path="Int"/></minLength>
		<multiple public="1"><x path="Bool"/></multiple>
		<name public="1"><c path="String"/></name>
		<pattern public="1"><c path="String"/></pattern>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<size public="1"><x path="Int"/></size>
		<src public="1"><c path="String"/></src>
		<step public="1"><c path="String"/></step>
		<type public="1"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<valueAsDate public="1"><c path="Date"/></valueAsDate>
		<valueAsNumber public="1"><x path="Float"/></valueAsNumber>
		<width public="1"><x path="Int"/></width>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<align public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents the alignment of the element. Use CSS instead.</haxe_doc>
		</align>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents a client-side image map.</haxe_doc>
		</useMap>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<stepUp public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>Increments the `value` by (`step` * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
		 
		  if the method is not applicable to for the current `type` value.,
		  if the element has no `step` value,
		  if the `value` cannot be converted to a number,
		  if the resulting value is above the `max` or below the `min`.
		 
		 
		@throws DOMError</haxe_doc>
		</stepUp>
		<stepDown public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>Decrements the `value` by (`step` * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
		 
		  if the method is not applicable to for the current `type` value,
		  if the element has no `step` value,
		  if the `value` cannot be converted to a number,
		  if the resulting value is above the `max` or below the `min`. 
		 
		 
		@throws DOMError</haxe_doc>
		</stepDown>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::PRESERVE">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : PRESERVE }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLInputElement` interface provides special properties and methods for manipulating the layout and presentation of input elements.

	Documentation [HTMLInputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLInputElement"</e></m></meta>
	</class>
	<abstract path="js.html.IterationCompositeOperation" params="" file="/usr/local/lib/haxe/std/js/html/IterationCompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._IterationCompositeOperation.IterationCompositeOperation_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/IterationCompositeOperation.hx" private="1" module="js.html.IterationCompositeOperation" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.KeyframeAnimationOptions" params="" file="/usr/local/lib/haxe/std/js/html/KeyframeAnimationOptions.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<iterationComposite>
		<x path="Null"><x path="js.html.IterationCompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</iterationComposite>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<composite>
		<x path="Null"><x path="js.html.CompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</composite>
</a></typedef>
	<typedef path="js.html.KeyframeEffectOptions" params="" file="/usr/local/lib/haxe/std/js/html/KeyframeEffectOptions.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<iterationComposite>
		<x path="Null"><x path="js.html.IterationCompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</iterationComposite>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<composite>
		<x path="Null"><x path="js.html.CompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</composite>
</a></typedef>
	<class path="js.html.LIElement" params="" file="/usr/local/lib/haxe/std/js/html/LIElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` indicating the ordinal position of the list element inside a given `ol`. It reflects the `value` attribute of the HTML `li` element, and can be smaller than `0`. If the `li` element is not a child of an `ol` element, the property has no meaning.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of the bullets, `"disc"`, `"square"` or `"circle"`. As the standard way of defining the list type is via the CSS `list-style-type` property, use the CSSOM methods to set it via a script.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLLIElement` interface exposes specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating list elements.

	Documentation [HTMLLIElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLIElement"</e></m></meta>
	</class>
	<class path="js.html.LabelElement" params="" file="/usr/local/lib/haxe/std/js/html/LabelElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` object representing the form with which the labeled control is associated, or `null` if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for `HTMLLabelElement.control.form`.</haxe_doc>
		</form>
		<htmlFor public="1">
			<c path="String"/>
			<haxe_doc>Is a string containing the ID of the labeled control. This reflects the `for` attribute.</haxe_doc>
		</htmlFor>
		<control public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Is a `HTMLElement` representing the control with which the label is associated.</haxe_doc>
		</control>
		<haxe_doc><![CDATA[The `HTMLLabelElement` interface gives access to properties specific to `label` elements. It inherits methods and properties from the base `HTMLElement` interface.

	Documentation [HTMLLabelElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLabelElement"</e></m></meta>
	</class>
	<class path="js.html.LegendElement" params="" file="/usr/local/lib/haxe/std/js/html/LegendElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<align public="1"><c path="String"/></align>
		<haxe_doc><![CDATA[The `HTMLLegendElement` is an interface allowing to access properties of the `legend` elements. It inherits properties and methods from the `HTMLElement` interface.

	Documentation [HTMLLegendElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLegendElement"</e></m></meta>
	</class>
	<abstract path="js.html.LineAlignSetting" params="" file="/usr/local/lib/haxe/std/js/html/LineAlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._LineAlignSetting.LineAlignSetting_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/LineAlignSetting.hx" private="1" module="js.html.LineAlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.LinkElement" params="" file="/usr/local/lib/haxe/std/js/html/LinkElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` which represents whether the link is disabled; currently only used with style sheet links.</haxe_doc>
		</disabled>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI for the target resource.</haxe_doc>
		</href>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that corresponds to the CORS setting for this link element. See CORS settings attributes for details.</haxe_doc>
		</crossOrigin>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the forward relationship of the linked resource from the document to the resource.</haxe_doc>
		</rel>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a list of one or more media formats to which the resource applies.</haxe_doc>
		</media>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the language code for the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the MIME type of the linked resource.</haxe_doc>
		</type>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.</haxe_doc>
		</referrerPolicy>
		<sizes public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sizes` HTML attribute, as a list of tokens.</haxe_doc>
		</sizes>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding for the target resource.</haxe_doc>
		</charset>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the reverse relationship of the linked resource from the resource to the document.
		 Note: Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</haxe_doc>
		</rev>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the target frame to which the resource applies.</haxe_doc>
		</target>
		<integrity public="1"><c path="String"/></integrity>
		<as public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of content being loaded by the HTML link.</haxe_doc>
		</as>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLLinkElement` interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLLinkElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLinkElement"</e></m></meta>
	</class>
	<class path="js.html.Location" params="" file="/usr/local/lib/haxe/std/js/html/Location.hx" extern="1">
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document.</haxe_doc>
		</href>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the canonical form of the origin of the specific location.</haxe_doc>
		</origin>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the protocol scheme of the URL, including the final `':'`.</haxe_doc>
		</protocol>
		<host public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the host, that is the hostname, a `':'`, and the port of the URL.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the domain of the URL.</haxe_doc>
		</hostname>
		<port public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the port number of the URL.</haxe_doc>
		</port>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an initial `'/'` followed by the path of the URL.</haxe_doc>
		</pathname>
		<search public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'?'` followed by the parameters or "querystring" of the URL. Modern browsers provide URLSearchParams and URL.searchParams to make it easy to parse out the parameters from the querystring.</haxe_doc>
		</search>
		<hash public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'#'` followed by the fragment identifier of the URL.</haxe_doc>
		</hash>
		<assign public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Loads the resource at the URL provided in parameter.
		@throws DOMError</haxe_doc>
		</assign>
		<replace public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the current resource with the one at the provided URL. The difference from the `assign()` method is that after using `replace()` the current page will not be saved in session `History`, meaning the user won't be able to use the back button to navigate to it.
		@throws DOMError</haxe_doc>
		</replace>
		<reload public="1" set="method">
			<f a="?forceget" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceget : false }</e></m></meta>
			<haxe_doc>Reloads the resource from the current URL. Its optional unique parameter is a `Boolean`, which, when it is `true`, causes the page to always be reloaded from the server. If it is `false` or not specified, the browser may reload the page from its cache.
		@throws DOMError</haxe_doc>
		</reload>
		<haxe_doc><![CDATA[The `Location` interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the `Document` and `Window` interface have such a linked `Location`, accessible via `Document.location` and `Window.location` respectively.

	Documentation [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Location$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Location>]]></haxe_doc>
		<meta><m n=":native"><e>"Location"</e></m></meta>
	</class>
	<class path="js.html.MapElement" params="" file="/usr/local/lib/haxe/std/js/html/MapElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the `map` element for referencing it other context. If the `id` attribute is set, this must have the same value; and it cannot be `null` or empty.</haxe_doc>
		</name>
		<areas public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a live `HTMLCollection` representing the `area` elements associated to this `map`.</haxe_doc>
		</areas>
		<haxe_doc><![CDATA[The `HTMLMapElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.

	Documentation [HTMLMapElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMapElement"</e></m></meta>
	</class>
	<class path="js.html.MediaDeviceInfo" params="" file="/usr/local/lib/haxe/std/js/html/MediaDeviceInfo.hx" extern="1">
		<deviceId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions).</haxe_doc>
		</deviceId>
		<kind public="1" set="null">
			<x path="js.html.MediaDeviceKind"/>
			<haxe_doc>Returns an enumerated value that is either `"videoinput"`, `"audioinput"` or `"audiooutput"`.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is a label describing this device (for example "External USB Webcam").</haxe_doc>
		</label>
		<groupId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is a group identifier. Two devices have the same group identifier if they belong to the same physical device — for example a monitor with both a built-in camera and a microphone.</haxe_doc>
		</groupId>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `MediaDevicesInfo` interface contains information that describes a single media input or output device.

	Documentation [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaDeviceInfo"</e></m></meta>
	</class>
	<abstract path="js.html.MediaDeviceKind" params="" file="/usr/local/lib/haxe/std/js/html/MediaDeviceKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaDeviceKind.MediaDeviceKind_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/MediaDeviceKind.hx" private="1" module="js.html.MediaDeviceKind" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.MediaDevices" params="" file="/usr/local/lib/haxe/std/js/html/MediaDevices.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ondevicechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `devicechange` event. This event is delivered to the `MediaDevices` object when a media input or output device is attached to or removed from the user's computer.</haxe_doc>
		</ondevicechange>
		<getSupportedConstraints public="1" set="method"><f a=""><t path="js.html.MediaTrackSupportedConstraints"/></f></getSupportedConstraints>
		<enumerateDevices public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="js.html.MediaDeviceInfo"/></c></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</enumerateDevices>
		<getUserMedia public="1" set="method">
			<f a="?constraints">
				<x path="Null"><t path="js.html.MediaStreamConstraints"/></x>
				<c path="js.lib.Promise"><c path="js.html.MediaStream"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getUserMedia>
		<haxe_doc><![CDATA[The `MediaDevices` interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.

	Documentation [MediaDevices](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaDevices"</e></m></meta>
	</class>
	<class path="js.html.MediaError" params="" file="/usr/local/lib/haxe/std/js/html/MediaError.hx" extern="1">
		<MEDIA_ERR_ABORTED public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MEDIA_ERR_ABORTED>
		<MEDIA_ERR_NETWORK public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</MEDIA_ERR_NETWORK>
		<MEDIA_ERR_DECODE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</MEDIA_ERR_DECODE>
		<MEDIA_ERR_SRC_NOT_SUPPORTED public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_ERR_SRC_NOT_SUPPORTED>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A number which represents the general type of error that occurred, as follows: `/en-US/docs/Web/API/MediaError/code`</haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` object containing a human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred; specifically, it isn't simply a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong. This text and its format is not defined by the specification and will vary from one `user agent` to another. If no diagnostics are available, or no explanation can be provided, this value is an empty string (`""`).</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `MediaError` interface represents an error which occurred while handling media in an HTML media element based on `HTMLMediaElement`, such as `audio` or `video`.

	Documentation [MediaError](https://developer.mozilla.org/en-US/docs/Web/API/MediaError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaError>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaError"</e></m></meta>
	</class>
	<typedef path="js.html.MediaKeyStatusMapIterator" params="" file="/usr/local/lib/haxe/std/js/html/MediaKeyStatusMapIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.MediaList" params="" file="/usr/local/lib/haxe/std/js/html/MediaList.hx" extern="1">
		<mediaText public="1"><c path="String"/></mediaText>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<deleteMedium public="1" set="method">
			<f a="oldMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteMedium>
		<appendMedium public="1" set="method">
			<f a="newMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendMedium>
		<meta><m n=":native"><e>"MediaList"</e></m></meta>
	</class>
	<class path="js.html.MediaQueryList" params="" file="/usr/local/lib/haxe/std/js/html/MediaQueryList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<media public="1" set="null">
			<c path="String"/>
			<haxe_doc> A `DOMString` representing a serialized media query.</haxe_doc>
		</media>
		<matches public="1" set="null">
			<x path="Bool"/>
			<haxe_doc> A `Boolean` that returns `true` if the `document` currently matches the media query list, or `false` if not.</haxe_doc>
		</matches>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc> An event handler property representing a function that is invoked when the `change` event fires, i.e when the status of media query support changes. The event object is a `MediaQueryListEvent` instance, which is recognised as a `MediaListQuery` instance in older browsers, for backwards compatibility purposes.</haxe_doc>
		</onchange>
		<addListener public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="js.html.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
			<overloads>
				<addListener public="1" set="method">
					<f a="listener">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</addListener>
				<addListener public="1" set="method">
					<f a="listener">
						<t path="js.html.EventListener"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</addListener>
			</overloads>
		</addListener>
		<removeListener public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="js.html.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
			<overloads>
				<removeListener public="1" set="method">
					<f a="listener">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</removeListener>
				<removeListener public="1" set="method">
					<f a="listener">
						<t path="js.html.EventListener"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</removeListener>
			</overloads>
		</removeListener>
		<haxe_doc><![CDATA[A `MediaQueryList` object stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to `true`).

	Documentation [MediaQueryList](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaQueryList"</e></m></meta>
	</class>
	<typedef path="js.html.MediaStreamConstraints" params="" file="/usr/local/lib/haxe/std/js/html/MediaStreamConstraints.hx">
		<a>
			<video>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Either a Boolean (which indicates whether or not a video track is requested) or a `MediaTrackConstraints` object providing the constraints which must be met by the video track included in the returned `MediaStream`. If constraints are specified, a video track is inherently requested.</haxe_doc>
			</video>
			<picture>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</picture>
			<peerIdentity>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A `DOMString` identifying the peer who has sole access to the stream. If this property is specified, only the indicated peer can receive and use the stream. Streams isolated in this way can only be displayed in a media element (`audio` or `video`) where the content is protected just as if `CORS` cross-origin rules were in effect. When a peer identity is set, `MediaStreamTrack`s from that peer have their `MediaStreamTrack.isolated` flag set to `true`.</haxe_doc>
			</peerIdentity>
			<fake>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</fake>
			<audio>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Either a Boolean (which indicates whether or not an audio track is requested) or a `MediaTrackConstraints` object providing the constraints which must be met by the audio track included in the returned `MediaStream`. If constraints are specified, an audio track is inherently requested.</haxe_doc>
			</audio>
		</a>
		<haxe_doc><![CDATA[The `MediaStreamConstraints` dictionary is used when calling `getUserMedia()` to specify what kinds of tracks should be included in the returned `MediaStream`, and, optionally, to establish constraints for those tracks' settings.

	Documentation [MediaStreamConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.MediaStreamTrackState" params="" file="/usr/local/lib/haxe/std/js/html/MediaStreamTrackState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaStreamTrackState.MediaStreamTrackState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/MediaStreamTrackState.hx" private="1" module="js.html.MediaStreamTrackState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.MediaTrackConstraintSet" params="" file="/usr/local/lib/haxe/std/js/html/MediaTrackConstraintSet.hx"><a>
	<width>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</width>
	<viewportWidth>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportWidth>
	<viewportOffsetY>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportOffsetY>
	<viewportOffsetX>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportOffsetX>
	<viewportHeight>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportHeight>
	<scrollWithPage>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</scrollWithPage>
	<noiseSuppression>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</noiseSuppression>
	<mediaSource>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</mediaSource>
	<height>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</height>
	<frameRate>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<t path="js.html.ConstrainDoubleRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</frameRate>
	<facingMode>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</facingMode>
	<echoCancellation>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</echoCancellation>
	<deviceId>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</deviceId>
	<channelCount>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</channelCount>
	<browserWindow>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</browserWindow>
	<autoGainControl>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</autoGainControl>
</a></typedef>
	<typedef path="js.html.MediaTrackConstraints" params="" file="/usr/local/lib/haxe/std/js/html/MediaTrackConstraints.hx">
		<a>
			<width>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</width>
			<viewportWidth>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<noiseSuppression>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</height>
			<frameRate>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<t path="js.html.ConstrainDoubleRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</frameRate>
			<facingMode>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</echoCancellation>
			<deviceId>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</autoGainControl>
			<advanced>
				<x path="Null"><c path="Array"><t path="js.html.MediaTrackConstraintSet"/></c></x>
				<meta><m n=":optional"/></meta>
			</advanced>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackConstraints` dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into `applyConstraints()` to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling `getConstraints()`.

	Documentation [MediaTrackConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaTrackSettings" params="" file="/usr/local/lib/haxe/std/js/html/MediaTrackSettings.hx">
		<a>
			<width>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the `MediaTrackSettings.width` property, specifying the width of the track's video data in pixels.</haxe_doc>
			</width>
			<viewportWidth>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<noiseSuppression>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean which indicates the current value of the `MediaTrackConstraints.noiseSuppression` property, which is `true` if noise suppression is enabled and is `false` otherwise.</haxe_doc>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the ``MediaTrackConstraints.height`` property, specifying the height of the track's video data in pixels.</haxe_doc>
			</height>
			<frameRate>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A double-precision floating point value indicating the current value of the ``MediaTrackConstraints.frameRate`` property, specifying how many frames of video per second the track includes. If the value can't be determined for any reason, the value will match the vertical sync rate of the device the user agent is running on.</haxe_doc>
			</frameRate>
			<facingMode>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean indicating the current value of the ``MediaTrackConstraints.echoCancellation`` property, specifying `true` if echo cancellation is enabled, otherwise `false`.</haxe_doc>
			</echoCancellation>
			<deviceId>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A `DOMString` indicating the current value of the ``MediaTrackConstraints.deviceId`` property. The device ID is a origin-unique string identifying the source of the track; this is usually a `GUID`. This value is specific to the source of the track's data and is not usable for setting constraints; it can, however, be used for initially selecting media when calling `MediaDevices.getUserMedia()`.</haxe_doc>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the ``MediaTrackConstraints.channelCount`` property, specifying the number of audio channels present on the track (therefore indicating how many audio samples exist in each audio frame). This is 1 for mono, 2 for stereo, and so forth.</haxe_doc>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean which indicates the current value of the `MediaTrackConstraints.autoGainControl` property, which is `true` if automatic gain control is enabled and is `false` otherwise.</haxe_doc>
			</autoGainControl>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackSettings` dictionary is used to return the current values configured for each of a `MediaStreamTrack`'s settings. These values will adhere as closely as possible to any constraints previously described using a `MediaTrackConstraints` object and set using `applyConstraints()`, and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.

	Documentation [MediaTrackSettings](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaTrackSupportedConstraints" params="" file="/usr/local/lib/haxe/std/js/html/MediaTrackSupportedConstraints.hx">
		<a>
			<width>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `width` constraint is supported in the current environment.</haxe_doc>
			</width>
			<volume>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `volume` constraint is supported in the current environment.</haxe_doc>
			</volume>
			<viewportWidth>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<sampleSize>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `sampleSize` constraint is supported in the current environment.</haxe_doc>
			</sampleSize>
			<sampleRate>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `sampleRate` constraint is supported in the current environment.</haxe_doc>
			</sampleRate>
			<noiseSuppression>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean whose value is `true` if the `noiseSuppression` constraint is supported in the current environment.</haxe_doc>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<latency>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `latency` constraint is supported in the current environment.</haxe_doc>
			</latency>
			<height>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `height` constraint is supported in the current environment.</haxe_doc>
			</height>
			<groupId>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `groupId` constraint is supported in the current environment.</haxe_doc>
			</groupId>
			<frameRate>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `frameRate` constraint is supported in the current environment.</haxe_doc>
			</frameRate>
			<facingMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `facingMode` constraint is supported in the current environment.</haxe_doc>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `echoCancellation` constraint is supported in the current environment.</haxe_doc>
			</echoCancellation>
			<deviceId>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `deviceId` constraint is supported in the current environment.</haxe_doc>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `channelCount` constraint is supported in the current environment.</haxe_doc>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean whose value is `true` if the `autoGainControl` constraint is supported in the current environment.</haxe_doc>
			</autoGainControl>
			<aspectRatio>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `aspectRatio` constraint is supported in the current environment.</haxe_doc>
			</aspectRatio>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackSupportedConstraints` dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the `MediaStreamTrack` object. An object conforming to `MediaTrackSupportedConstraints` is returned by `MediaDevices.getSupportedConstraints()`.

	Documentation [MediaTrackSupportedConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints>]]></haxe_doc>
	</typedef>
	<class path="js.html.MenuElement" params="" file="/usr/local/lib/haxe/std/js/html/MenuElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<type public="1"><c path="String"/></type>
		<label public="1"><c path="String"/></label>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLMenuElement"</e></m></meta>
	</class>
	<class path="js.html.MetaElement" params="" file="/usr/local/lib/haxe/std/js/html/MetaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<httpEquiv public="1"><c path="String"/></httpEquiv>
		<content public="1"><c path="String"/></content>
		<scheme public="1"><c path="String"/></scheme>
		<haxe_doc><![CDATA[The `HTMLMetaElement` interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLMetaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMetaElement"</e></m></meta>
	</class>
	<class path="js.html.MeterElement" params="" file="/usr/local/lib/haxe/std/js/html/MeterElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the currrent value, reflecting the `value` attribute.</haxe_doc>
		</value>
		<min public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the minimum value, reflecting the `min` attribute.</haxe_doc>
		</min>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the maximum value, reflecting the `max` attribute.</haxe_doc>
		</max>
		<low public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the value of the low boundary, reflecting the `low`attribute.</haxe_doc>
		</low>
		<high public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the value of the high boundary, reflecting the `high` attribute.</haxe_doc>
		</high>
		<optimum public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the optimum, reflecting the `optimum` attribute.</haxe_doc>
		</optimum>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements that are associated with the element.</haxe_doc>
		</labels>
		<haxe_doc><![CDATA[The HTML `meter` elements expose the `HTMLMeterElement` interface, which provides special properties and methods (beyond the `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `meter` elements.

	Documentation [HTMLMeterElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMeterElement"</e></m></meta>
	</class>
	<class path="js.html.MimeType" params="" file="/usr/local/lib/haxe/std/js/html/MimeType.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a description of the associated plugin or an empty string if there is none.</haxe_doc>
		</description>
		<enabledPlugin public="1" set="null">
			<c path="js.html.Plugin"/>
			<haxe_doc>Returns an instance of `Plugin` containing information about the plugin itself.</haxe_doc>
		</enabledPlugin>
		<suffixes public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string containing valid file extensions for the data displayed by the plugin, or an empty string if an extension is not valid for the particular module. For example, a browser's content decryption module may appear in the plugin list, but support more file extenions than can be anticipated. It might therefore return an empty string.</haxe_doc>
		</suffixes>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the MIME type of the associated plugin.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `MimeType` interface provides contains information about a MIME type associated with a particular plugin. `NavigatorPlugins.mimeTypes` returns an array of this object.

	Documentation [MimeType](https://developer.mozilla.org/en-US/docs/Web/API/MimeType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MimeType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MimeType>]]></haxe_doc>
		<meta><m n=":native"><e>"MimeType"</e></m></meta>
	</class>
	<class path="js.html.MimeTypeArray" params="" file="/usr/local/lib/haxe/std/js/html/MimeTypeArray.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of items in the array.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.MimeType"/>
			</f>
			<haxe_doc>Returns the `MimeType` object with the specified index.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.MimeType"/>
			</f>
			<haxe_doc>Returns the `MimeType` object with the specified name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `MimeTypeArray` interface returns an array of `MimeType` instances, each of which contains information about a supported browser plugins. This object is returned by `NavigatorPlugins.mimeTypes`.

	Documentation [MimeTypeArray](https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray>]]></haxe_doc>
		<meta><m n=":native"><e>"MimeTypeArray"</e></m></meta>
	</class>
	<class path="js.html.ModElement" params="" file="/usr/local/lib/haxe/std/js/html/ModElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URI of a resource explaining the change.</haxe_doc>
		</cite>
		<dateTime public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `datetime` HTML attribute, containing a date-and-time string representing a timestamp for the change.</haxe_doc>
		</dateTime>
		<haxe_doc><![CDATA[The `HTMLModElement` interface provides special properties (beyond the regular methods and properties available through the `HTMLElement` interface they also have available to them by inheritance) for manipulating modification elements, that is `del` and `ins`.

	Documentation [HTMLModElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLModElement"</e></m></meta>
	</class>
	<class path="js.html.NamedNodeMap" params="" file="/usr/local/lib/haxe/std/js/html/NamedNodeMap.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the amount of objects in the map.</haxe_doc>
		</length>
		<getNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr`, corresponding to the given name.</haxe_doc>
		</getNamedItem>
		<setNamedItem public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Replaces, or adds, the `Attr` identified in the map by the given name.
		@throws DOMError</haxe_doc>
		</setNamedItem>
		<removeNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the `Attr` identified by the given map.
		@throws DOMError</haxe_doc>
		</removeNamedItem>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns the `Attr` at the given index, or `null` if the index is higher or equal to the number of nodes.</haxe_doc>
		</item>
		<getNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr` identified by a namespace and related local name.</haxe_doc>
		</getNamedItemNS>
		<setNamedItemNS public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Replaces, or adds, the `Attr` identified in the map by the given namespace and related local name.
		@throws DOMError</haxe_doc>
		</setNamedItemNS>
		<removeNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the `Attr` identified by the given namespace and related local name.
		@throws DOMError</haxe_doc>
		</removeNamedItemNS>
		<haxe_doc><![CDATA[The `NamedNodeMap` interface represents a collection of `Attr` objects. Objects inside a `NamedNodeMap` are not in any particular order, unlike `NodeList`, although they may be accessed by an index as in an array.

	Documentation [NamedNodeMap](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap>]]></haxe_doc>
		<meta><m n=":native"><e>"NamedNodeMap"</e></m></meta>
	</class>
	<class path="js.html.Navigator" params="" file="/usr/local/lib/haxe/std/js/html/Navigator.hx" extern="1">
		<permissions public="1" set="null">
			<c path="js.html.Permissions"/>
			<haxe_doc>Returns a `Permissions` object that can be used to query and update permission status of APIs covered by the Permissions API.</haxe_doc>
		</permissions>
		<mimeTypes public="1" set="null"><c path="js.html.MimeTypeArray"/></mimeTypes>
		<plugins public="1" set="null"><c path="js.html.PluginArray"/></plugins>
		<doNotTrack public="1" set="null">
			<c path="String"/>
			<haxe_doc>Reports the value of the user's do-not-track preference. When this value is "yes", your web site or application should not track the user.</haxe_doc>
		</doNotTrack>
		<maxTouchPoints public="1" set="null"><x path="Int"/></maxTouchPoints>
		<oscpu public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string that represents the current operating system.</haxe_doc>
		</oscpu>
		<vendor public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor name of the current browser (e.g., "Netscape6").</haxe_doc>
		</vendor>
		<vendorSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor version number (e.g. "6.1").</haxe_doc>
		</vendorSub>
		<productSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build number of the current browser (e.g., "20060909").</haxe_doc>
		</productSub>
		<cookieEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns false if setting a cookie will be ignored and true otherwise.</haxe_doc>
		</cookieEnabled>
		<buildID public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build identifier of the browser (e.g., "2006090803").</haxe_doc>
		</buildID>
		<mediaDevices public="1" set="null">
			<c path="js.html.MediaDevices"/>
			<haxe_doc>Returns a reference to a `MediaDevices` object which can then be used to get information about available media devices (`MediaDevices.enumerateDevices()`), find out what constrainable properties are supported for media on the user's computer and user agent (`MediaDevices.getSupportedConstraints()`), and to request access to media using `MediaDevices.getUserMedia()`.</haxe_doc>
		</mediaDevices>
		<serviceWorker public="1" set="null">
			<c path="js.html.ServiceWorkerContainer"/>
			<haxe_doc>Returns a `ServiceWorkerContainer` object, which provides access to registration, removal, upgrade, and communication with the `ServiceWorker` objects for the associated document.</haxe_doc>
		</serviceWorker>
		<clipboard public="1" set="null"><c path="js.html.Clipboard"/></clipboard>
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<geolocation public="1" set="null">
			<t path="js.html.Geolocation"/>
			<haxe_doc>Returns a `Geolocation` object allowing accessing the location of the device.</haxe_doc>
		</geolocation>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<storage public="1" set="null"><c path="js.html.StorageManager"/></storage>
		<vibrate public="1" set="method">
			<f a="pattern">
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
			</f>
			<overloads><vibrate public="1" set="method"><f a="duration">
	<x path="Int"/>
	<x path="Bool"/>
</f></vibrate></overloads>
		</vibrate>
		<javaEnabled public="1" set="method"><f a=""><x path="Bool"/></f></javaEnabled>
		<getGamepads public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Gamepad"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getGamepads>
		<requestMIDIAccess public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.midi.MIDIOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.midi.MIDIAccess"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</requestMIDIAccess>
		<sendBeacon public="1" set="method">
			<f a="url:?data">
				<c path="String"/>
				<c path="js.html.Blob"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.html.FormData"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.html.URLSearchParams"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
			</overloads>
		</sendBeacon>
		<requestMediaKeySystemAccess public="1" set="method"><f a="keySystem:supportedConfigurations">
	<c path="String"/>
	<c path="Array"><t path="js.html.eme.MediaKeySystemConfiguration"/></c>
	<c path="js.lib.Promise"><c path="js.html.eme.MediaKeySystemAccess"/></c>
</f></requestMediaKeySystemAccess>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<haxe_doc><![CDATA[The `Navigator` interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.

	Documentation [Navigator](https://developer.mozilla.org/en-US/docs/Web/API/Navigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Navigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Navigator>]]></haxe_doc>
		<meta><m n=":native"><e>"Navigator"</e></m></meta>
	</class>
	<class path="js.html.NodeFilter" params="" file="/usr/local/lib/haxe/std/js/html/NodeFilter.hx" extern="1">
		<FILTER_ACCEPT public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FILTER_ACCEPT>
		<FILTER_REJECT public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</FILTER_REJECT>
		<FILTER_SKIP public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</FILTER_SKIP>
		<SHOW_ALL public="1" get="inline" set="null" expr="cast 4294967295" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</SHOW_ALL>
		<SHOW_ELEMENT public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SHOW_ELEMENT>
		<SHOW_ATTRIBUTE public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SHOW_ATTRIBUTE>
		<SHOW_TEXT public="1" get="inline" set="null" expr="4" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHOW_TEXT>
		<SHOW_CDATA_SECTION public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SHOW_CDATA_SECTION>
		<SHOW_ENTITY_REFERENCE public="1" get="inline" set="null" expr="16" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</SHOW_ENTITY_REFERENCE>
		<SHOW_ENTITY public="1" get="inline" set="null" expr="32" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</SHOW_ENTITY>
		<SHOW_PROCESSING_INSTRUCTION public="1" get="inline" set="null" expr="64" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</SHOW_PROCESSING_INSTRUCTION>
		<SHOW_COMMENT public="1" get="inline" set="null" expr="128" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</SHOW_COMMENT>
		<SHOW_DOCUMENT public="1" get="inline" set="null" expr="256" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</SHOW_DOCUMENT>
		<SHOW_DOCUMENT_TYPE public="1" get="inline" set="null" expr="512" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</SHOW_DOCUMENT_TYPE>
		<SHOW_DOCUMENT_FRAGMENT public="1" get="inline" set="null" expr="1024" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</SHOW_DOCUMENT_FRAGMENT>
		<SHOW_NOTATION public="1" get="inline" set="null" expr="2048" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2048</e></m></meta>
		</SHOW_NOTATION>
		<acceptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> that will be used to tell if a given <code>Node</code> must be accepted or not by the <code>NodeIterator</code> or <code>TreeWalker</code> iteration algorithm. This method is expected to be written by the user of a <code>NodeFilter</code>. Possible return values are:
			<table class="standard-table">
				
					<tr>
						<td class="header">Constant</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>FILTER_ACCEPT</code></td>
						<td>Value returned by the <code>NodeFilter.acceptNode()</code> method when a node should be accepted.</td>
					</tr>
					<tr>
						<td><code>FILTER_REJECT</code></td>
						<td>Value to be returned by the <code>NodeFilter.acceptNode()</code> method when a node should be rejected. For <code>TreeWalker</code>, child nodes are also rejected. For <code>NodeIterator</code>, this flag is synonymous with FILTER_SKIP.</td>
					</tr>
					<tr>
						<td><code>FILTER_SKIP</code></td>
						<td>Value to be returned by <code>NodeFilter.acceptNode()</code> for nodes to be skipped by the <code>NodeIterator</code> or <code>TreeWalker</code> object. The children of skipped nodes are still considered. This is treated as "skip this node but not its children".</td>
					</tr>
				
			</table>]]></haxe_doc>
		</acceptNode>
		<haxe_doc><![CDATA[A `NodeFilter` interface represents an object used to filter the nodes in a `NodeIterator` or `TreeWalker`. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.

	Documentation [NodeFilter](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeFilter"</e></m></meta>
	</class>
	<class path="js.html.NodeIterator" params="" file="/usr/local/lib/haxe/std/js/html/NodeIterator.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `NodeIterator` was created.</haxe_doc>
		</root>
		<referenceNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` to which the iterator is anchored.</haxe_doc>
		</referenceNode>
		<pointerBeforeReferenceNode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` flag that indicates whether the `NodeIterator` is anchored before, the flag being `true`, or after, the flag being `false`, the anchor node.</haxe_doc>
		</pointerBeforeReferenceNode>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
			<table class="standard-table">
				
					<tr>
						<td class="header">Constant</td>
						<td class="header">Numerical value</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ALL</code></td>
						<td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
						<td>Shows all nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ATTRIBUTE</code> <em>(deprecated)</em></td>
						<td><code>2</code></td>
						<td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Attr</code> node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_CDATA_SECTION</code> <em>(deprecated)</em></td>
						<td><code>8</code></td>
						<td>Shows <code>CDATASection</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_COMMENT</code></td>
						<td><code>128</code></td>
						<td>Shows <code>Comment</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT</code></td>
						<td><code>256</code></td>
						<td>Shows <code>Document</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
						<td><code>1024</code></td>
						<td>Shows <code>DocumentFragment</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
						<td><code>512</code></td>
						<td>Shows <code>DocumentType</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ELEMENT</code></td>
						<td><code>1</code></td>
						<td>Shows <code>Element</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ENTITY</code> <em>(deprecated)</em></td>
						<td><code>32</code></td>
						<td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> <em>(deprecated)</em></td>
						<td><code>16</code></td>
						<td>Shows <code>EntityReference</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_NOTATION</code> <em>(deprecated)</em></td>
						<td><code>2048</code></td>
						<td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
						<td><code>64</code></td>
						<td>Shows <code>ProcessingInstruction</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_TEXT</code></td>
						<td><code>4</code></td>
						<td>Shows <code>Text</code> nodes.</td>
					</tr>
				
			</table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<x path="haxe.extern.EitherType">
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeFilter"/>
			</x>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Returns the next `Node` in the document, or `null` if there are none.
		@throws DOMError</haxe_doc>
		</nextNode>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Returns the previous `Node` in the document, or `null` if there are none.
		@throws DOMError</haxe_doc>
		</previousNode>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This operation is a no-op. It doesn't do anything. Previously it was telling the engine that the `NodeIterator` was no more used, but this is now useless.</haxe_doc>
		</detach>
		<haxe_doc><![CDATA[The `NodeIterator` interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.

	Documentation [NodeIterator](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeIterator"</e></m></meta>
	</class>
	<class path="js.html.NodeList" params="" file="/usr/local/lib/haxe/std/js/html/NodeList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of nodes in the `NodeList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns an item in the list by its index, or `null` if the index is out-of-bounds; can be used as an alternative to simply accessing `nodeList[idx]` (which instead returns  `undefined` when `idx` is out-of-bounds).</haxe_doc>
		</item>
		<haxe_doc><![CDATA[`NodeList` objects are collections of nodes such as those returned by properties such as `Node.childNodes` and the `document.querySelectorAll()` method.

	Documentation [NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeList>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeList"</e></m></meta>
	</class>
	<class path="js.html.Notification" params="" file="/usr/local/lib/haxe/std/js/html/Notification.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<permission public="1" set="null" static="1">
			<x path="js.html.NotificationPermission"/>
			<haxe_doc>A string representing the current permission to display notifications. Possible values are:
		 
		  `denied` — The user refuses to have notifications displayed.
		  `granted` — The user accepts having notifications displayed.
		  `default` — The user choice is unknown and therefore the browser will act as if the value were denied.</haxe_doc>
		</permission>
		<onclick public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `click` event. It is triggered each time the user clicks on the notification.</haxe_doc>
		</onclick>
		<onshow public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `show` event. It is triggered when the notification is displayed.</haxe_doc>
		</onshow>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `error` event. It is triggered each time the notification encounters an error.</haxe_doc>
		</onerror>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `close` event. It is triggered when the user closes the notification.</haxe_doc>
		</onclose>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>The title of the notification as specified in the first parameter of the constructor.</haxe_doc>
		</title>
		<dir public="1" set="null">
			<x path="js.html.NotificationDirection"/>
			<haxe_doc>The text direction of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</dir>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>The language code of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</lang>
		<body public="1" set="null">
			<c path="String"/>
			<haxe_doc>The body string of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</body>
		<tag public="1" set="null">
			<c path="String"/>
			<haxe_doc>The ID of the notification (if any) as specified in the constructor's `options` parameter.</haxe_doc>
		</tag>
		<icon public="1" set="null">
			<c path="String"/>
			<haxe_doc>The URL of the image used as an icon of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</icon>
		<data public="1" set="null">
			<d/>
			<haxe_doc>Returns a structured clone of the notification’s data.</haxe_doc>
		</data>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Programmatically closes a notification.</haxe_doc>
		</close>
		<new public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.NotificationOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Notification` interface of the Notifications API is used to configure and display desktop notifications to the user.

	Documentation [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Notification$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Notification>]]></haxe_doc>
		<meta><m n=":native"><e>"Notification"</e></m></meta>
	</class>
	<abstract path="js.html.NotificationDirection" params="" file="/usr/local/lib/haxe/std/js/html/NotificationDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationDirection.NotificationDirection_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/NotificationDirection.hx" private="1" module="js.html.NotificationDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.NotificationOptions" params="" file="/usr/local/lib/haxe/std/js/html/NotificationOptions.hx"><a>
	<tag>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</tag>
	<requireInteraction>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</requireInteraction>
	<lang>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</lang>
	<icon>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</icon>
	<dir>
		<x path="Null"><x path="js.html.NotificationDirection"/></x>
		<meta><m n=":optional"/></meta>
	</dir>
	<data>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<body>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.NotificationPermission" params="" file="/usr/local/lib/haxe/std/js/html/NotificationPermission.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationPermission.NotificationPermission_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/NotificationPermission.hx" private="1" module="js.html.NotificationPermission" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.OListElement" params="" file="/usr/local/lib/haxe/std/js/html/OListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<reversed public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value reflecting the `reversed` and defining if the numbering is descending, that is its value is `true`, or ascending (`false`).</haxe_doc>
		</reversed>
		<start public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the `start` and defining the value of the first number of the first element of the list.</haxe_doc>
		</start>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. It can have the following values:
		 
		  `'1'` meaning that decimal numbers are used: `1`, `2`, `3`, `4`, `5`, …
		  `'a'` meaning that the lowercase latin alphabet is used:  `a`, `b`, `c`, `d`, `e`, …
		  `'A'` meaning that the uppercase latin alphabet is used: `A`, `B`, `C`, `D`, `E`, …
		  `'i'` meaning that the lowercase latin numerals are used: `i`, `ii`, `iii`, `iv`, `v`, …
		  `'I'` meaning that the uppercase latin numerals are used: `I`, `II`, `III`, `IV`, `V`, …</haxe_doc>
		</type>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLOListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating ordered list elements.

	Documentation [HTMLOListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOListElement"</e></m></meta>
	</class>
	<class path="js.html.ObjectElement" params="" file="/usr/local/lib/haxe/std/js/html/ObjectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `data` HTML attribute, specifying the address of a resource's data.</haxe_doc>
		</data>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, specifying the MIME type of the resource.</haxe_doc>
		</type>
		<typeMustMatch public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `typeMustMatch` HTML attribute, indicating if the resource specified by `data` must only be played if it matches the `type` attribute.</haxe_doc>
		</typeMustMatch>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, specifying the name of the browsing context.</haxe_doc>
		</name>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, specifying a `map` element to use.</haxe_doc>
		</useMap>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Retuns a `HTMLFormElement` representing the object element's form owner, or null if there isn't one.</haxe_doc>
		</form>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, specifying the displayed width of the resource in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, specifying the displayed height of the resource in CSS pixels.</haxe_doc>
		</height>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document` representing the active document of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy` representing the window proxy of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentWindow>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the element is a candidate for constraint validation. Always `false` for `HTMLObjectElement` objects.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Returns a `ValidityState` with the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<archive public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `archive` HTML attribute, containing a list of archives for resources for this object.</haxe_doc>
		</archive>
		<code public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself.</haxe_doc>
		</code>
		<declare public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `declare` HTML attribute, indicating that this is a declaration, not an instantiation, of the object.</haxe_doc>
		</declare>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</hspace>
		<standby public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `standby` HTML attribute, specifying a message to display while the object loads.</haxe_doc>
		</standby>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</vspace>
		<codeBase public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codebase` HTML attribute, specifying the base path to use to resolve relative URIs.</haxe_doc>
		</codeBase>
		<codeType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codetype` HTML attribute, specifying the content type of the data.</haxe_doc>
		</codeType>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `border` HTML attribute, specifying the width of a border around the object.</haxe_doc>
		</border>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Retuns a `Boolean` that always is `true`, because `object` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLObjectElement` interface provides special properties and methods (beyond those on the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `object` element, representing external resources.

	Documentation [HTMLObjectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLObjectElement"</e></m></meta>
	</class>
	<typedef path="js.html.ObserverCallback" params="" file="/usr/local/lib/haxe/std/js/html/ObserverCallback.hx"><a><handleEvent set="method"><f a="observer">
	<c path="js.html.FetchObserver"/>
	<x path="Void"/>
</f></handleEvent></a></typedef>
	<class path="js.html.OptGroupElement" params="" file="/usr/local/lib/haxe/std/js/html/OptGroupElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` representing whether or not the whole list of children `option` is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the label for the group.</haxe_doc>
		</label>
		<haxe_doc><![CDATA[The `HTMLOptGroupElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `optgroup` elements.

	Documentation [HTMLOptGroupElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptGroupElement"</e></m></meta>
	</class>
	<class path="js.html.OptionElement" params="" file="/usr/local/lib/haxe/std/js/html/OptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<label public="1"><c path="String"/></label>
		<defaultSelected public="1"><x path="Bool"/></defaultSelected>
		<selected public="1"><x path="Bool"/></selected>
		<value public="1"><c path="String"/></value>
		<text public="1"><c path="String"/></text>
		<index public="1" set="null"><x path="Int"/></index>
		<haxe_doc><![CDATA[The `HTMLOptionElement` interface represents `option` elements and inherits all classes and methods of the `HTMLElement` interface.

	Documentation [HTMLOptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionElement"</e></m></meta>
	</class>
	<typedef path="js.html.OptionalEffectTiming" params="" file="/usr/local/lib/haxe/std/js/html/OptionalEffectTiming.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</iterationStart>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</delay>
</a></typedef>
	<abstract path="js.html.OrientationLockType" params="" file="/usr/local/lib/haxe/std/js/html/OrientationLockType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationLockType.OrientationLockType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/OrientationLockType.hx" private="1" module="js.html.OrientationLockType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.OrientationType" params="" file="/usr/local/lib/haxe/std/js/html/OrientationType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationType.OrientationType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/OrientationType.hx" private="1" module="js.html.OrientationType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.OutputElement" params="" file="/usr/local/lib/haxe/std/js/html/OutputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<htmlFor public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>A `DOMTokenList` reflecting the `for` HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated `value`.</haxe_doc>
		</htmlFor>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormElement` indicating the form associated with the control, reflecting the `form` HTML attribute if it is defined.</haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name for the control that is submitted with form data.</haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `DOMString` `"output"`.</haxe_doc>
		</type>
		<defaultValue public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the default value of the element, initially the empty string.</haxe_doc>
		</defaultValue>
		<value public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the value of the contents of the elements. Behaves like the `Node.textContent` property.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the element is a candidate for constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` representing the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements associated with the element.</haxe_doc>
		</labels>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks the validity of the element and returns a `Boolean` holding the check result.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Triggers an `invalid` event and evaluates its result. if the result is `true`, then the problems with the constraints of this element are reported to the user. When the problem is reported, the user agent may focus the element and change the scrolling position of the document or perform some other action that brings the element to the user's attention. User agents may report more than one constraint violation if this element suffers from multiple problems at once. If the element is not rendered, then the user agent may report the error for the running script instead of notifying the user.</haxe_doc>
		</reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLOutputElement` interface provides properties and methods (beyond those inherited from `HTMLElement`) for manipulating the layout and presentation of `output` elements.

	Documentation [HTMLOutputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOutputElement"</e></m></meta>
	</class>
	<class path="js.html.ParagraphElement" params="" file="/usr/local/lib/haxe/std/js/html/ParagraphElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLParagraphElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `p` elements.

	Documentation [HTMLParagraphElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParagraphElement"</e></m></meta>
	</class>
	<class path="js.html.ParamElement" params="" file="/usr/local/lib/haxe/std/js/html/ParamElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the parameter. It reflects the `name` attribute.</haxe_doc>
		</name>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the value associated to the parameter. It reflects the `value` attribute.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the parameter when `valueType` has the `"ref"` value. It reflects the `type` attribute.</haxe_doc>
		</type>
		<valueType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the `value`. It reflects the ``valuetype`` attribute and has one of the values: `"data"`, `"ref"`, or `"object"`.</haxe_doc>
		</valueType>
		<haxe_doc><![CDATA[The `HTMLParamElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `param` elements, representing a pair of a key and a value that acts as a parameter for an `object` element.

	Documentation [HTMLParamElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParamElement"</e></m></meta>
	</class>
	<class path="js.html.Path2D" params="" file="/usr/local/lib/haxe/std/js/html/Path2D.hx" extern="1">
		<addPath public="1" set="method">
			<f a="path:?transformation">
				<c path="js.html.Path2D"/>
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a path to the current path.</haxe_doc>
		</addPath>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<new public="1" set="method">
			<f a="pathString">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="other">
						<c path="js.html.Path2D"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Path2D` interface of the Canvas 2D API is used to declare paths that are then later used on `CanvasRenderingContext2D` objects. The path methods of the `CanvasRenderingContext2D` interface are present on this interface as well and are allowing you to create paths that you can retain and replay as required on a canvas.

	Documentation [Path2D](https://developer.mozilla.org/en-US/docs/Web/API/Path2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Path2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Path2D>]]></haxe_doc>
		<meta><m n=":native"><e>"Path2D"</e></m></meta>
	</class>
	<class path="js.html.Performance" params="" file="/usr/local/lib/haxe/std/js/html/Performance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<timeOrigin public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the high resolution timestamp of the start time of the performance measurement.</haxe_doc>
		</timeOrigin>
		<timing public="1" set="null">
			<c path="js.html.PerformanceTiming"/>
			<haxe_doc>A `PerformanceTiming` object containing latency-related performance information</haxe_doc>
		</timing>
		<navigation public="1" set="null">
			<c path="js.html.PerformanceNavigation"/>
			<haxe_doc>A `PerformanceNavigation` object that provides useful context about the operations included in the times listed in `timing`, including whether the page was a load or a refresh, how many redirections occurred, and so forth.</haxe_doc>
		</navigation>
		<onresourcetimingbufferfull public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventTarget` which is a callback that will be called when the `resourcetimingbufferfull` event is fired.</haxe_doc>
		</onresourcetimingbufferfull>
		<now public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a `DOMHighResTimeStamp` representing the number of milliseconds elapsed since a reference instant.</haxe_doc>
		</now>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Is a jsonizer returning a json object representing the `Performance` object.</haxe_doc>
		</toJSON>
		<getEntries public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.PerformanceEntry"/></c></f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects based on the given filter.</haxe_doc>
		</getEntries>
		<getEntriesByType public="1" set="method">
			<f a="entryType">
				<c path="String"/>
				<c path="Array"><c path="js.html.PerformanceEntry"/></c>
			</f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects of the given entry type.</haxe_doc>
		</getEntriesByType>
		<getEntriesByName public="1" set="method">
			<f a="name:?entryType">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="js.html.PerformanceEntry"/></c>
			</f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects based on the given name and entry type.</haxe_doc>
		</getEntriesByName>
		<clearResourceTimings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all `PerformanceEntry` with a `PerformanceEntry.entryType` of "`resource`" from the browser's performance data buffer.</haxe_doc>
		</clearResourceTimings>
		<setResourceTimingBufferSize public="1" set="method">
			<f a="maxSize">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the browser's resource timing buffer size to the specified number of "`resource`" `PerformanceEntry.entryType` `PerformanceEntry` objects.</haxe_doc>
		</setResourceTimingBufferSize>
		<mark public="1" set="method">
			<f a="markName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a `DOMHighResTimeStamp` in the browser's performance entry buffer with the given name.
		@throws DOMError</haxe_doc>
		</mark>
		<clearMarks public="1" set="method">
			<f a="?markName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given mark from the browser's performance entry buffer.</haxe_doc>
		</clearMarks>
		<measure public="1" set="method">
			<f a="measureName:?startMark:?endMark">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a named `DOMHighResTimeStamp` in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively).
		@throws DOMError</haxe_doc>
		</measure>
		<clearMeasures public="1" set="method">
			<f a="?measureName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given measure from the browser's performance entry buffer.</haxe_doc>
		</clearMeasures>
		<haxe_doc><![CDATA[The `Performance` interface provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.

	Documentation [Performance](https://developer.mozilla.org/en-US/docs/Web/API/Performance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Performance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Performance>]]></haxe_doc>
		<meta><m n=":native"><e>"Performance"</e></m></meta>
	</class>
	<class path="js.html.PerformanceEntry" params="" file="/usr/local/lib/haxe/std/js/html/PerformanceEntry.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A value that further specifies the value returned by the `PerformanceEntry.entryType` property. The value of both depends on the subtype. See property page for valid values.</haxe_doc>
		</name>
		<entryType public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the type of performance metric such as, for example, "`mark`". See property page for valid values.</haxe_doc>
		</entryType>
		<startTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the starting time for the performance metric.</haxe_doc>
		</startTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value of the duration of the performance event.</haxe_doc>
		</duration>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `PerformanceEntry` object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance `mark` or `measure` (for example by calling the `mark()` method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).

	Documentation [PerformanceEntry](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceEntry"</e></m></meta>
	</class>
	<class path="js.html.PerformanceNavigation" params="" file="/usr/local/lib/haxe/std/js/html/PerformanceNavigation.hx" extern="1">
		<TYPE_NAVIGATE public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</TYPE_NAVIGATE>
		<TYPE_RELOAD public="1" get="inline" set="null" expr="1" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TYPE_RELOAD>
		<TYPE_BACK_FORWARD public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</TYPE_BACK_FORWARD>
		<TYPE_RESERVED public="1" get="inline" set="null" expr="255" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>255</e></m></meta>
		</TYPE_RESERVED>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc></haxe_doc>
		</type>
		<redirectCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned short` representing the number of REDIRECTs done before reaching the page.</haxe_doc>
		</redirectCount>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Is a jsonizer returning a json object representing the `PerformanceNavigation` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The legacy `PerformanceNavigation` interface represents information about how the navigation to the current document was done.

	Documentation [PerformanceNavigation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceNavigation"</e></m></meta>
	</class>
	<class path="js.html.PerformanceTiming" params="" file="/usr/local/lib/haxe/std/js/html/PerformanceTiming.hx" extern="1">
		<navigationStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</navigationStart>
		<unloadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `unload` event has been thrown, indicating the time at which the previous document in the window began to unload. If there is no previous document, or if the previous document or one of the needed redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventStart>
		<unloadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `unload` event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventEnd>
		<redirectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the first HTTP redirect starts. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectStart>
		<redirectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectEnd>
		<fetchStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.</haxe_doc>
		</fetchStart>
		<domainLookupStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupStart>
		<domainLookupEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupEnd>
		<connectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment start time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</connectStart>
		<connectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment end time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.</haxe_doc>
		</connectEnd>
		<secureConnectionStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the secure connection handshake starts. If no such connection is requested, it returns `0`.</haxe_doc>
		</secureConnectionStart>
		<requestStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.</haxe_doc>
		</requestStart>
		<responseStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser received the first byte of the response, from the server from a cache, or from a local resource.</haxe_doc>
		</responseStart>
		<responseEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser received the last byte of the response, or when the connection is closed if this happened first, from the server, the cache, or from a local resource.</haxe_doc>
		</responseEnd>
		<domLoading public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser started its work, that is when its `Document.readyState` changes to `'loading'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domLoading>
		<domInteractive public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'interactive'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domInteractive>
		<domContentLoadedEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Right before the parser sent the `DOMContentLoaded` event, that is right after all the scripts that need to be executed right after parsing have been executed.</haxe_doc>
		</domContentLoadedEventStart>
		<domContentLoadedEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Right after all the scripts that need to be executed as soon as possible, in order or not, have been executed.</haxe_doc>
		</domContentLoadedEventEnd>
		<domComplete public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'complete'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domComplete>
		<loadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `load` event was sent for the current document. If this event has not yet been sent, it returns `0.`</haxe_doc>
		</loadEventStart>
		<loadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `load` event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns `0.`</haxe_doc>
		</loadEventEnd>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON object representing this `PerformanceTiming` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The `PerformanceTiming` interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a `PerformanceTiming` object describing your page using the `window.performance.timing` property.

	Documentation [PerformanceTiming](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming>]]></haxe_doc>
		<meta>
			<m n=":deprecated"><e>"PerformanceTiming is deprecated, use the PerformanceNavigationTiming interface instead"</e></m>
			<m n=":native"><e>"PerformanceTiming"</e></m>
		</meta>
	</class>
	<abstract path="js.html.PermissionState" params="" file="/usr/local/lib/haxe/std/js/html/PermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PermissionState.PermissionState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/PermissionState.hx" private="1" module="js.html.PermissionState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.PermissionStatus" params="" file="/usr/local/lib/haxe/std/js/html/PermissionStatus.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null">
			<x path="js.html.PermissionState"/>
			<haxe_doc>Returns the state of a requested permission; one of `'granted'`, `'denied'`, or `'prompt'`.</haxe_doc>
		</state>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event called whenever `PermissionStatus.status` changes.</haxe_doc>
		</onchange>
		<haxe_doc><![CDATA[The `PermissionStatus` interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.

	Documentation [PermissionStatus](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus>]]></haxe_doc>
		<meta><m n=":native"><e>"PermissionStatus"</e></m></meta>
	</class>
	<class path="js.html.Permissions" params="" file="/usr/local/lib/haxe/std/js/html/Permissions.hx" extern="1">
		<query public="1" set="method">
			<f a="permission">
				<d/>
				<c path="js.lib.Promise"><c path="js.html.PermissionStatus"/></c>
			</f>
			<haxe_doc>Returns the user permission status for a given API.
		@throws DOMError</haxe_doc>
		</query>
		<haxe_doc><![CDATA[Documentation [Permissions](https://developer.mozilla.org/en-US/docs/Web/API/Permissions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Permissions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Permissions>]]></haxe_doc>
		<meta><m n=":native"><e>"Permissions"</e></m></meta>
	</class>
	<class path="js.html.PictureElement" params="" file="/usr/local/lib/haxe/std/js/html/PictureElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLPictureElement` interface represents a `picture` HTML element. It doesn't implement specific properties or methods.

	Documentation [HTMLPictureElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPictureElement"</e></m></meta>
	</class>
	<abstract path="js.html.PlaybackDirection" params="" file="/usr/local/lib/haxe/std/js/html/PlaybackDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PlaybackDirection.PlaybackDirection_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/PlaybackDirection.hx" private="1" module="js.html.PlaybackDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Plugin" params="" file="/usr/local/lib/haxe/std/js/html/Plugin.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>A human readable description of the plugin.</haxe_doc>
		</description>
		<filename public="1" set="null">
			<c path="String"/>
			<haxe_doc>The filename of the plugin file.</haxe_doc>
		</filename>
		<version public="1" set="null">
			<c path="String"/>
			<haxe_doc>The plugin's version number string.</haxe_doc>
		</version>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the plugin.</haxe_doc>
		</name>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.MimeType"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.MimeType"/>
</f></namedItem>
		<haxe_doc><![CDATA[The `Plugin` interface provides information about a browser plugin.

	Documentation [Plugin](https://developer.mozilla.org/en-US/docs/Web/API/Plugin) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Plugin$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Plugin>]]></haxe_doc>
		<meta><m n=":native"><e>"Plugin"</e></m></meta>
	</class>
	<class path="js.html.PluginArray" params="" file="/usr/local/lib/haxe/std/js/html/PluginArray.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of plugins in the array.</haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Plugin"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Plugin"/>
</f></namedItem>
		<refresh public="1" set="method">
			<f a="?reloadDocuments" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reloadDocuments : false }</e></m></meta>
		</refresh>
		<haxe_doc><![CDATA[The `PluginArray` interface is used to store a list of `Plugin` objects describing the available plugins; it's returned by the `window.navigator.plugins` property. The `PluginArray` is not a JavaScript array, but has the `length` property and supports accessing individual items using bracket notation (`plugins[2]`), as well as via `item(index)` and `namedItem("name")` methods.

	Documentation [PluginArray](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PluginArray>]]></haxe_doc>
		<meta><m n=":native"><e>"PluginArray"</e></m></meta>
	</class>
	<typedef path="js.html.Position" params="" file="/usr/local/lib/haxe/std/js/html/Position.hx">
		<a>
			<timestamp set="null">
				<x path="Int"/>
				<haxe_doc>Returns a `DOMTimeStamp` representing the time at which the location was retrieved.</haxe_doc>
			</timestamp>
			<coords set="null">
				<t path="js.html.Coordinates"/>
				<haxe_doc>Returns a `Coordinates` object defining the current location.</haxe_doc>
			</coords>
		</a>
		<haxe_doc><![CDATA[The `Position` interface represents the position of the concerned device at a given time. The position, represented by a `Coordinates` object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.

	Documentation [Position](https://developer.mozilla.org/en-US/docs/Web/API/Position) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Position$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Position>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.PositionAlignSetting" params="" file="/usr/local/lib/haxe/std/js/html/PositionAlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PositionAlignSetting.PositionAlignSetting_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/PositionAlignSetting.hx" private="1" module="js.html.PositionAlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.PositionError" params="" file="/usr/local/lib/haxe/std/js/html/PositionError.hx" extern="1">
		<PERMISSION_DENIED public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</PERMISSION_DENIED>
		<POSITION_UNAVAILABLE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</POSITION_UNAVAILABLE>
		<TIMEOUT public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TIMEOUT>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the error code. The following values are possible:
		 <table class="standard-table">
		  
		   <tr>
		    Value
		    Associated constant
		    Description
		   </tr>
		   <tr>
		    <td><code>1</code></td>
		    <td><code>PERMISSION_DENIED</code></td>
		    <td>The acquisition of the geolocation information failed because the page didn't have the permission to do it.</td>
		   </tr>
		   <tr>
		    <td><code>2</code></td>
		    <td><code>POSITION_UNAVAILABLE</code></td>
		    <td>The acquisition of the geolocation failed because at least one internal source of position returned an internal error.</td>
		   </tr>
		   <tr>
		    <td><code>3</code></td>
		    <td><code>TIMEOUT</code></td>
		    <td>The time allowed to acquire the geolocation, defined by <code>PositionOptions.timeout</code> information was reached before the information was obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable `DOMString` describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `PositionError` interface represents the reason of an error occurring when using the geolocating device.

	Documentation [PositionError](https://developer.mozilla.org/en-US/docs/Web/API/PositionError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionError>]]></haxe_doc>
		<meta><m n=":native"><e>"PositionError"</e></m></meta>
	</class>
	<typedef path="js.html.PositionOptions" params="" file="/usr/local/lib/haxe/std/js/html/PositionOptions.hx">
		<a>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a positive `long` value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is `Infinity`, meaning that `getCurrentPosition()` won't return until the position is available.</haxe_doc>
			</timeout>
			<maximumAge>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a positive `long` value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to `0`, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to `Infinity` the device must return a cached position regardless of its age. Default: 0.</haxe_doc>
			</maximumAge>
			<enableHighAccuracy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a `Boolean` that indicates the application would like to receive the best possible results. If `true` and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if `false`, the device can take the liberty to save resources by responding more quickly and/or using less power. Default: `false`.</haxe_doc>
			</enableHighAccuracy>
		</a>
		<haxe_doc><![CDATA[The `PositionOptions` interface describes an object containing option properties to pass as a parameter of `Geolocation.getCurrentPosition()` and `Geolocation.watchPosition()`.

	Documentation [PositionOptions](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions>]]></haxe_doc>
	</typedef>
	<class path="js.html.PreElement" params="" file="/usr/local/lib/haxe/std/js/html/PreElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the obsolete `width` attribute, containing a fixed-size length for the `pre` element.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `HTMLPreElement` interface expose specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating block of preformatted text.

	Documentation [HTMLPreElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPreElement"</e></m></meta>
	</class>
	<class path="js.html.ProcessingInstruction" params="" file="/usr/local/lib/haxe/std/js/html/ProcessingInstruction.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<target public="1" set="null"><c path="String"/></target>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them.

	Documentation [ProcessingInstruction](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction>]]></haxe_doc>
		<meta><m n=":native"><e>"ProcessingInstruction"</e></m></meta>
	</class>
	<class path="js.html.ProgressElement" params="" file="/usr/local/lib/haxe/std/js/html/ProgressElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns `0`.</haxe_doc>
		</value>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is `1.0`.</haxe_doc>
		</max>
		<position public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` value returning the result of dividing the current value (`value`) by the maximum value (`max`); if the progress bar is an indeterminate progress bar, it returns `-1`.</haxe_doc>
		</position>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns `NodeList` containing the list of `label` elements that are labels for this element.</haxe_doc>
		</labels>
		<haxe_doc><![CDATA[The `HTMLProgressElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `progress` elements.

	Documentation [HTMLProgressElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLProgressElement"</e></m></meta>
	</class>
	<class path="js.html.PropertyNodeList" params="" file="/usr/local/lib/haxe/std/js/html/PropertyNodeList.hx" extern="1">
		<extends path="js.html.NodeList"/>
		<getValues public="1" set="method">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getValues>
		<meta><m n=":native"><e>"PropertyNodeList"</e></m></meta>
	</class>
	<class path="js.html.QuoteElement" params="" file="/usr/local/lib/haxe/std/js/html/QuoteElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URL for the source of the quotation.</haxe_doc>
		</cite>
		<haxe_doc><![CDATA[The `HTMLQuoteElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating quoting elements, like `blockquote` and `q`, but not the `cite` element.

	Documentation [HTMLQuoteElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLQuoteElement"</e></m></meta>
	</class>
	<class path="js.html.Range" params="" file="/usr/local/lib/haxe/std/js/html/Range.hx" extern="1">
		<START_TO_START public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</START_TO_START>
		<START_TO_END public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</START_TO_END>
		<END_TO_END public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</END_TO_END>
		<END_TO_START public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</END_TO_START>
		<startContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` starts.</haxe_doc>
		</startContainer>
		<startOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `startContainer` the `Range` starts.</haxe_doc>
		</startOffset>
		<endContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` ends.</haxe_doc>
		</endContainer>
		<endOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `endContainer` the `Range` ends.</haxe_doc>
		</endOffset>
		<collapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating whether the range's start and end points are at the same position.</haxe_doc>
		</collapsed>
		<commonAncestorContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the deepest `Node` that contains the `startContainer` and `endContainer` nodes.</haxe_doc>
		</commonAncestorContainer>
		<setStart public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range`.
		@throws DOMError</haxe_doc>
		</setStart>
		<setEnd public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range`.
		@throws DOMError</haxe_doc>
		</setEnd>
		<setStartBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setStartBefore>
		<setStartAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setStartAfter>
		<setEndBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setEndBefore>
		<setEndAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setEndAfter>
		<collapse public="1" set="method">
			<f a="?toStart" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ toStart : false }</e></m></meta>
			<haxe_doc>Collapses the `Range` to one of its boundary points.</haxe_doc>
		</collapse>
		<selectNode public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Range` to contain the `Node` and its contents.
		@throws DOMError</haxe_doc>
		</selectNode>
		<selectNodeContents public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Range` to contain the contents of a `Node`.
		@throws DOMError</haxe_doc>
		</selectNodeContents>
		<compareBoundaryPoints public="1" set="method">
			<f a="how:sourceRange">
				<x path="Int"/>
				<c path="js.html.Range"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares the boundary points of the `Range` with another `Range`.
		@throws DOMError</haxe_doc>
		</compareBoundaryPoints>
		<deleteContents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the contents of a `Range` from the `Document`.
		@throws DOMError</haxe_doc>
		</deleteContents>
		<extractContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Moves contents of a `Range` from the document tree into a `DocumentFragment`.
		@throws DOMError</haxe_doc>
		</extractContents>
		<cloneContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Returns a `DocumentFragment` copying the nodes of a `Range`.
		@throws DOMError</haxe_doc>
		</cloneContents>
		<insertNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert a `Node` at the start of a `Range`.
		@throws DOMError</haxe_doc>
		</insertNode>
		<surroundContents public="1" set="method">
			<f a="newParent">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves content of a `Range` into a new `Node`.
		@throws DOMError</haxe_doc>
		</surroundContents>
		<cloneRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>Returns a `Range` object with boundary points identical to the cloned `Range`.</haxe_doc>
		</cloneRange>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the `Range` from use to improve performance.</haxe_doc>
		</detach>
		<isPointInRange public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `boolean` indicating whether the given point is in the `Range`.
		@throws DOMError</haxe_doc>
		</isPointInRange>
		<comparePoint public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the `Range`.
		@throws DOMError</haxe_doc>
		</comparePoint>
		<intersectsNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `boolean` indicating whether the given node intersects the `Range`.
		@throws DOMError</haxe_doc>
		</intersectsNode>
		<createContextualFragment public="1" set="method">
			<f a="fragment">
				<c path="String"/>
				<c path="js.html.DocumentFragment"/>
			</f>
			<haxe_doc>Returns a `DocumentFragment` created from a given string of code.
		@throws DOMError</haxe_doc>
		</createContextualFragment>
		<getClientRects public="1" set="method">
			<f a=""><c path="js.html.DOMRectList"/></f>
			<haxe_doc>Returns a list of `DOMRect` objects that aggregates the results of `Element.getClientRects()` for all the elements in the `Range`.</haxe_doc>
		</getClientRects>
		<getBoundingClientRect public="1" set="method">
			<f a=""><c path="js.html.DOMRect"/></f>
			<haxe_doc>Returns a `DOMRect` object which bounds the entire contents of the `Range`; this would be the union of all the rectangles returned by `range.getClientRects()`.</haxe_doc>
		</getBoundingClientRect>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Range` interface represents a fragment of a document that can contain nodes and parts of text nodes.

	Documentation [Range](https://developer.mozilla.org/en-US/docs/Web/API/Range) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Range$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Range>]]></haxe_doc>
		<meta><m n=":native"><e>"Range"</e></m></meta>
	</class>
	<abstract path="js.html.ReferrerPolicy" params="" file="/usr/local/lib/haxe/std/js/html/ReferrerPolicy.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ReferrerPolicy.ReferrerPolicy_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ReferrerPolicy.hx" private="1" module="js.html.ReferrerPolicy" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.RegistrationOptions" params="" file="/usr/local/lib/haxe/std/js/html/RegistrationOptions.hx"><a>
	<updateViaCache>
		<x path="Null"><x path="js.html.ServiceWorkerUpdateViaCache"/></x>
		<meta><m n=":optional"/></meta>
	</updateViaCache>
	<scope>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</scope>
</a></typedef>
	<class path="js.html.Request" params="" file="/usr/local/lib/haxe/std/js/html/Request.hx" extern="1">
		<method public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the request's method (`GET`, `POST`, etc.)</haxe_doc>
		</method>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the request.</haxe_doc>
		</url>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the associated `Headers` object of the request.</haxe_doc>
		</headers>
		<destination public="1" set="null">
			<x path="js.html.RequestDestination"/>
			<haxe_doc>Returns a string from the `RequestDestination` enum describing the request's destination. This is a string indicating the type of content being requested.</haxe_doc>
		</destination>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the referrer of the request (e.g., `client`).</haxe_doc>
		</referrer>
		<referrerPolicy public="1" set="null">
			<x path="js.html.ReferrerPolicy"/>
			<haxe_doc>Contains the referrer policy of the request (e.g., `no-referrer`).</haxe_doc>
		</referrerPolicy>
		<mode public="1" set="null">
			<x path="js.html.RequestMode"/>
			<haxe_doc>Contains the mode of the request (e.g., `cors`, `no-cors`, `same-origin`, `navigate`.)</haxe_doc>
		</mode>
		<credentials public="1" set="null">
			<x path="js.html.RequestCredentials"/>
			<haxe_doc>Contains the credentials of the request (e.g., `"omit"`, `"same-origin"`, `"include"`). The default is `"same-origin"`.</haxe_doc>
		</credentials>
		<cache public="1" set="null">
			<x path="js.html.RequestCache"/>
			<haxe_doc>Contains the cache mode of the request (e.g., `default`, `reload`, `no-cache`).</haxe_doc>
		</cache>
		<redirect public="1" set="null">
			<x path="js.html.RequestRedirect"/>
			<haxe_doc>Contains the mode for how redirects are handled. It may be one of `follow`, `error`, or `manual`.</haxe_doc>
		</redirect>
		<integrity public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the subresource integrity value of the request (e.g., `sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=`).</haxe_doc>
		</integrity>
		<signal public="1" set="null"><c path="js.html.AbortSignal"/></signal>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Request"/></f>
			<haxe_doc>Creates a copy of the current `Request` object.
		@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.lib.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.lib.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="input:?init">
		<c path="String"/>
		<x path="Null"><t path="js.html.RequestInit"/></x>
		<c path="js.html.Request"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `Request` interface of the Fetch API represents a resource request.

	Documentation [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Request$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Request>]]></haxe_doc>
		<meta><m n=":native"><e>"Request"</e></m></meta>
	</class>
	<abstract path="js.html.RequestCache" params="" file="/usr/local/lib/haxe/std/js/html/RequestCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCache.RequestCache_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/RequestCache.hx" private="1" module="js.html.RequestCache" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestCredentials" params="" file="/usr/local/lib/haxe/std/js/html/RequestCredentials.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCredentials.RequestCredentials_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/RequestCredentials.hx" private="1" module="js.html.RequestCredentials" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestDestination" params="" file="/usr/local/lib/haxe/std/js/html/RequestDestination.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `RequestDestination` enumerated type contains the permitted values for a request's `destination`. These string values indicate potential types of content that a request may try to retrieve.

	Documentation [RequestDestination](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestDestination.RequestDestination_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/RequestDestination.hx" private="1" module="js.html.RequestDestination" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.RequestInit" params="" file="/usr/local/lib/haxe/std/js/html/RequestInit.hx"><a>
	<signal>
		<x path="Null"><c path="js.html.AbortSignal"/></x>
		<meta><m n=":optional"/></meta>
	</signal>
	<referrerPolicy>
		<x path="Null"><x path="js.html.ReferrerPolicy"/></x>
		<meta><m n=":optional"/></meta>
	</referrerPolicy>
	<referrer>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</referrer>
	<redirect>
		<x path="Null"><x path="js.html.RequestRedirect"/></x>
		<meta><m n=":optional"/></meta>
	</redirect>
	<observe>
		<x path="Null"><x path="haxe.extern.EitherType">
	<f a="">
		<c path="js.html.FetchObserver"/>
		<x path="Void"/>
	</f>
	<t path="js.html.ObserverCallback"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</observe>
	<mode>
		<x path="Null"><x path="js.html.RequestMode"/></x>
		<meta><m n=":optional"/></meta>
	</mode>
	<method>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</method>
	<integrity>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</integrity>
	<headers>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</headers>
	<credentials>
		<x path="Null"><x path="js.html.RequestCredentials"/></x>
		<meta><m n=":optional"/></meta>
	</credentials>
	<cache>
		<x path="Null"><x path="js.html.RequestCache"/></x>
		<meta><m n=":optional"/></meta>
	</cache>
	<body>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<x path="haxe.extern.EitherType">
		<x path="haxe.extern.EitherType">
			<c path="js.lib.ArrayBufferView"/>
			<c path="js.lib.ArrayBuffer"/>
		</x>
		<x path="haxe.extern.EitherType">
			<c path="js.html.FormData"/>
			<x path="haxe.extern.EitherType">
				<c path="js.html.URLSearchParams"/>
				<c path="String"/>
			</x>
		</x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.RequestMode" params="" file="/usr/local/lib/haxe/std/js/html/RequestMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestMode.RequestMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/RequestMode.hx" private="1" module="js.html.RequestMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestRedirect" params="" file="/usr/local/lib/haxe/std/js/html/RequestRedirect.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestRedirect.RequestRedirect_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/RequestRedirect.hx" private="1" module="js.html.RequestRedirect" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Response" params="" file="/usr/local/lib/haxe/std/js/html/Response.hx" extern="1">
		<error public="1" set="method" static="1">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>Returns a new `Response` object associated with a network error.</haxe_doc>
		</error>
		<redirect public="1" set="method" static="1">
			<f a="url:?status" v=":302">
				<c path="String"/>
				<x path="Int"/>
				<c path="js.html.Response"/>
			</f>
			<meta><m n=":value"><e>{ status : 302 }</e></m></meta>
			<haxe_doc>Creates a new response with a different URL.
		@throws DOMError</haxe_doc>
		</redirect>
		<type public="1" set="null">
			<x path="js.html.ResponseType"/>
			<haxe_doc>Contains the type of the response (e.g., `basic`, `cors`).</haxe_doc>
		</type>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the response.</haxe_doc>
		</url>
		<redirected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the response is the result of a redirect; that is, its URL list has more than one entry.</haxe_doc>
		</redirected>
		<status public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Contains the status code of the response (e.g., `200` for a success).</haxe_doc>
		</status>
		<ok public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Contains a boolean stating whether the response was successful (status in the range 200-299) or not.</haxe_doc>
		</ok>
		<statusText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the status message corresponding to the status code (e.g., `OK` for `200`).</haxe_doc>
		</statusText>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the `Headers` object associated with the response.</haxe_doc>
		</headers>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>Creates a clone of a `Response` object.
		@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.lib.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.lib.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="?body:?init">
				<c path="js.html.Blob"/>
				<x path="Null"><t path="js.html.ResponseInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.html.FormData"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.html.URLSearchParams"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<d/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="String"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Response` interface of the Fetch API represents the response to a request.

	Documentation [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Response$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Response>]]></haxe_doc>
		<meta><m n=":native"><e>"Response"</e></m></meta>
	</class>
	<typedef path="js.html.ResponseInit" params="" file="/usr/local/lib/haxe/std/js/html/ResponseInit.hx"><a>
	<statusText>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</statusText>
	<status>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</status>
	<headers>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</headers>
</a></typedef>
	<abstract path="js.html.ResponseType" params="" file="/usr/local/lib/haxe/std/js/html/ResponseType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ResponseType.ResponseType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ResponseType.hx" private="1" module="js.html.ResponseType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Screen" params="" file="/usr/local/lib/haxe/std/js/html/Screen.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<availWidth public="1" set="null"><x path="Int"/></availWidth>
		<availHeight public="1" set="null"><x path="Int"/></availHeight>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<colorDepth public="1" set="null"><x path="Int"/></colorDepth>
		<pixelDepth public="1" set="null"><x path="Int"/></pixelDepth>
		<top public="1" set="null"><x path="Int"/></top>
		<left public="1" set="null"><x path="Int"/></left>
		<availTop public="1" set="null"><x path="Int"/></availTop>
		<availLeft public="1" set="null"><x path="Int"/></availLeft>
		<orientation public="1" set="null"><c path="js.html.ScreenOrientation"/></orientation>
		<haxe_doc><![CDATA[The `Screen` interface represents a screen, usually the one on which the current window is being rendered, and is obtained using `window.screen`.

	Documentation [Screen](https://developer.mozilla.org/en-US/docs/Web/API/Screen) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Screen$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Screen>]]></haxe_doc>
		<meta><m n=":native"><e>"Screen"</e></m></meta>
	</class>
	<class path="js.html.ScreenOrientation" params="" file="/usr/local/lib/haxe/std/js/html/ScreenOrientation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<type public="1" set="null">
			<x path="js.html.OrientationType"/>
			<haxe_doc>Returns the document's current orientation type, one of "portrait-primary", "portrait-secondary", "landscape-primary", or "landscape-secondary".</haxe_doc>
		</type>
		<angle public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the document's current orientation angle.</haxe_doc>
		</angle>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever is the `EventHandler` called when the screen changes orientation.</haxe_doc>
		</onchange>
		<lock public="1" set="method">
			<f a="orientation">
				<x path="js.html.OrientationLockType"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Locks the orientation of the containing document to its default orientation and returns a `Promise`. 
		@throws DOMError</haxe_doc>
		</lock>
		<unlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unlocks the orientation of the containing document from its default orientation.
		@throws DOMError</haxe_doc>
		</unlock>
		<haxe_doc><![CDATA[The `ScreenOrientation` interface of the the Screen Orientation API provides information about the current orientation of the document.

	Documentation [ScreenOrientation](https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation>]]></haxe_doc>
		<meta><m n=":native"><e>"ScreenOrientation"</e></m></meta>
	</class>
	<class path="js.html.ScriptElement" params="" file="/usr/local/lib/haxe/std/js/html/ScriptElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1"><c path="String"/></src>
		<type public="1"><c path="String"/></type>
		<charset public="1"><c path="String"/></charset>
		<async public="1"><x path="Bool"/></async>
		<defer public="1"><x path="Bool"/></defer>
		<crossOrigin public="1"><c path="String"/></crossOrigin>
		<text public="1"><c path="String"/></text>
		<event public="1"><c path="String"/></event>
		<htmlFor public="1"><c path="String"/></htmlFor>
		<integrity public="1"><c path="String"/></integrity>
		<haxe_doc><![CDATA[HTML `script` elements expose the `HTMLScriptElement` interface, which provides special properties and methods for manipulating the behavior and execution of `script` elements (beyond the inherited `HTMLElement` interface).

	Documentation [HTMLScriptElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLScriptElement"</e></m></meta>
	</class>
	<abstract path="js.html.ScrollBehavior" params="" file="/usr/local/lib/haxe/std/js/html/ScrollBehavior.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollBehavior.ScrollBehavior_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ScrollBehavior.hx" private="1" module="js.html.ScrollBehavior" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollIntoViewOptions" params="" file="/usr/local/lib/haxe/std/js/html/ScrollIntoViewOptions.hx"><a>
	<inline_>
		<x path="Null"><x path="js.html.ScrollLogicalPosition"/></x>
		<meta>
			<m n=":optional"/>
			<m n=":native"><e>"inline"</e></m>
		</meta>
	</inline_>
	<block>
		<x path="Null"><x path="js.html.ScrollLogicalPosition"/></x>
		<meta><m n=":optional"/></meta>
	</block>
	<behavior>
		<x path="Null"><x path="js.html.ScrollBehavior"/></x>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<abstract path="js.html.ScrollLogicalPosition" params="" file="/usr/local/lib/haxe/std/js/html/ScrollLogicalPosition.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollLogicalPosition.ScrollLogicalPosition_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ScrollLogicalPosition.hx" private="1" module="js.html.ScrollLogicalPosition" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollOptions" params="" file="/usr/local/lib/haxe/std/js/html/ScrollOptions.hx"><a><behavior>
	<x path="Null"><x path="js.html.ScrollBehavior"/></x>
	<meta><m n=":optional"/></meta>
</behavior></a></typedef>
	<abstract path="js.html.ScrollRestoration" params="" file="/usr/local/lib/haxe/std/js/html/ScrollRestoration.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollRestoration.ScrollRestoration_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ScrollRestoration.hx" private="1" module="js.html.ScrollRestoration" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.ScrollSetting" params="" file="/usr/local/lib/haxe/std/js/html/ScrollSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollSetting.ScrollSetting_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ScrollSetting.hx" private="1" module="js.html.ScrollSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollToOptions" params="" file="/usr/local/lib/haxe/std/js/html/ScrollToOptions.hx"><a>
	<top>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</top>
	<left>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</left>
	<behavior>
		<x path="Null"><x path="js.html.ScrollBehavior"/></x>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<class path="js.html.SelectElement" params="" file="/usr/local/lib/haxe/std/js/html/SelectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `autofocus` HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified. `2.0`</haxe_doc>
		</autofocus>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `disabled` HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormElement` referencing the form that this element is associated with. If the element is not associated with of a `form` element, then it returns `null`.</haxe_doc>
		</form>
		<multiple public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `multiple` HTML attribute, which indicates whether multiple items can be selected.</haxe_doc>
		</multiple>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name of this control used by servers and DOM search functions.</haxe_doc>
		</name>
		<required public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `required` HTML attribute, which indicates whether the user is required to select a value before submitting the form. `2.0`</haxe_doc>
		</required>
		<size public="1">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting the `size` HTML attribute, which contains the number of visible items in the control. The default is 1, unless `multiple` is true, in which case it is 4.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` represeting the form control's type. When `multiple` is `true`, it returns `"select-multiple"`; otherwise, it returns `"select-one"`.</haxe_doc>
		</type>
		<options public="1" set="null">
			<c path="js.html.HTMLOptionsCollection"/>
			<haxe_doc>An `HTMLOptionsCollection` representing the set of `option` elements contained by this element.</haxe_doc>
		</options>
		<length public="1">
			<x path="Int"/>
			<haxe_doc>An `unsigned long `The number of `option` elements in this `select` element.</haxe_doc>
		</length>
		<selectedOptions public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>An `HTMLCollection` representing the set of `option` elements that are selected.</haxe_doc>
		</selectedOptions>
		<selectedIndex public="1">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting the index of the first selected `option` element. The value `-1` indicates no element is selected.</haxe_doc>
		</selectedIndex>
		<value public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form control (the first selected option). Returns the value attribute of the option element or if it is missing, the text attribute.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` reflecting the validity state that this control is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is false), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements associated with the element.</haxe_doc>
		</labels>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Gets an item from the options collection for this `select` element. You can also access an item by specifying the index in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.OptionElement"/>
			</f>
			<haxe_doc>Gets the item in the options collection with the specified name. The name string can match either the `id` or the `name` attribute of an option node. You can also access an item by specifying the name in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</namedItem>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element to the collection of `option` elements for this `select` element.
		@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the element at the specified index from the options collection for this select element.</haxe_doc>
			<overloads><remove public="1" set="method">
	<f a="index">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Removes the element at the specified index from the options collection for this select element.</haxe_doc>
</remove></overloads>
		</remove>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable `invalid` event at the element (and returns `false`).</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLSelectElement` interface represents a `select` HTML Element. These elements also share all of the properties and methods of other HTML elements via the `HTMLElement` interface.

	Documentation [HTMLSelectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSelectElement"</e></m></meta>
	</class>
	<class path="js.html.Selection" params="" file="/usr/local/lib/haxe/std/js/html/Selection.hx" extern="1">
		<anchorNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection begins.</haxe_doc>
		</anchorNode>
		<anchorOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the anchorNode. If anchorNode is a text node, this is the number of characters within anchorNode preceding the anchor. If anchorNode is an element, this is the number of child nodes of the anchorNode preceding the anchor.</haxe_doc>
		</anchorOffset>
		<focusNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection ends.</haxe_doc>
		</focusNode>
		<focusOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the focusNode. If focusNode is a text node, this is the number of characters within focusNode preceding the focus. If focusNode is an element, this is the number of child nodes of the focusNode preceding the focus.</haxe_doc>
		</focusOffset>
		<isCollapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean indicating whether the selection's start and end points are at the same position.</haxe_doc>
		</isCollapsed>
		<rangeCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of ranges in the selection.</haxe_doc>
		</rangeCount>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` describing the type of the current selection.</haxe_doc>
		</type>
		<caretBidiLevel public="1"><x path="Int"/></caretBidiLevel>
		<getRangeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Range"/>
			</f>
			<haxe_doc>Returns a `Range` object representing one of the ranges currently selected.
		@throws DOMError</haxe_doc>
		</getRangeAt>
		<addRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>A `Range` object that will be added to the selection.
		@throws DOMError</haxe_doc>
		</addRange>
		<removeRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a range from the selection.
		@throws DOMError</haxe_doc>
		</removeRange>
		<removeAllRanges public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all ranges from the selection.
		@throws DOMError</haxe_doc>
		</removeAllRanges>
		<empty public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</empty>
		<collapse public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>Collapses the current selection to a single point.
		@throws DOMError</haxe_doc>
		</collapse>
		<setPosition public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setPosition>
		<collapseToStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Collapses the selection to the start of the first range in the selection.
		@throws DOMError</haxe_doc>
		</collapseToStart>
		<collapseToEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Collapses the selection to the end of the last range in the selection.
		@throws DOMError</haxe_doc>
		</collapseToEnd>
		<extend public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>Moves the focus of the selection to a specified point.
		@throws DOMError</haxe_doc>
		</extend>
		<setBaseAndExtent public="1" set="method">
			<f a="anchorNode:anchorOffset:focusNode:focusOffset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the selection to be a range including all or parts of two specified DOM nodes, and any content located between them.
		@throws DOMError</haxe_doc>
		</setBaseAndExtent>
		<selectAllChildren public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds all the children of the specified node to the selection.
		@throws DOMError</haxe_doc>
		</selectAllChildren>
		<deleteFromDocument public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Deletes the selection's content from the document.
		@throws DOMError</haxe_doc>
		</deleteFromDocument>
		<containsNode public="1" set="method">
			<f a="node:?allowPartialContainment" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allowPartialContainment : false }</e></m></meta>
			<haxe_doc>Indicates if a certain node is part of the selection.
		@throws DOMError</haxe_doc>
		</containsNode>
		<modify public="1" set="method">
			<f a="alter:direction:granularity">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current selection.
		@throws DOMError</haxe_doc>
		</modify>
		<haxe_doc><![CDATA[A `Selection` object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call `window.getSelection()`.

	Documentation [Selection](https://developer.mozilla.org/en-US/docs/Web/API/Selection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Selection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Selection>]]></haxe_doc>
		<meta><m n=":native"><e>"Selection"</e></m></meta>
	</class>
	<abstract path="js.html.SelectionMode" params="" file="/usr/local/lib/haxe/std/js/html/SelectionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SelectionMode.SelectionMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/SelectionMode.hx" private="1" module="js.html.SelectionMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ServiceWorker" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<scriptURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the `ServiceWorker` serialized script URL defined as part of `ServiceWorkerRegistration`. The URL must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scriptURL>
		<state public="1" set="null">
			<x path="js.html.ServiceWorkerState"/>
			<haxe_doc>Returns the state of the service worker. It returns one of the following values: `installing`, `installed,` `activating`, `activated`, or `redundant`.</haxe_doc>
		</state>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `statechange` is fired; it is basically fired anytime the `ServiceWorker.state` changes.</haxe_doc>
		</onstatechange>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<postMessage public="1" set="method">
			<f a="message:?transferable">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<haxe_doc><![CDATA[The `ServiceWorker` interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique `ServiceWorker` object.

	Documentation [ServiceWorker](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorker"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerContainer" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerContainer.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<controller public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a `ServiceWorker` object if its state is `activated` (the same object returned by `ServiceWorkerRegistration.active`). This property returns `null` during a force-refresh request (Shift + refresh) or if there is no active worker.</haxe_doc>
		</controller>
		<ready public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.ServiceWorkerRegistration"/></c>
			<haxe_doc>Provides a way of delaying code execution until a service worker is active. It returns a `Promise` that will never reject, and which waits indefinitely until the `ServiceWorkerRegistration` associated with the current page has an `ServiceWorkerRegistration.active` worker. Once that condition is met, it resolves with the `ServiceWorkerRegistration`.</haxe_doc>
		</ready>
		<oncontrollerchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever a `controllerchange` event occurs — when the document's associated `ServiceWorkerRegistration` acquires a new `ServiceWorkerRegistration.active` worker.</haxe_doc>
		</oncontrollerchange>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever an `error` event occurs in the associated service workers.</haxe_doc>
		</onerror>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever a `message` event occurs — when incoming messages are received to the `ServiceWorkerContainer` object (e.g. via a `MessagePort.postMessage()` call.)</haxe_doc>
		</onmessage>
		<register public="1" set="method"><f a="scriptURL:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.RegistrationOptions"/></x>
	<c path="js.lib.Promise"><c path="js.html.ServiceWorkerRegistration"/></c>
</f></register>
		<getRegistration public="1" set="method">
			<f a="?documentURL" v="&quot;&quot;">
				<c path="String"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<meta><m n=":value"><e>{ documentURL : "" }</e></m></meta>
			<haxe_doc>Gets a `ServiceWorkerRegistration` object whose scope matches the provided document URL.  If the method can't return a `ServiceWorkerRegistration`, it returns a `Promise`. </haxe_doc>
		</getRegistration>
		<getRegistrations public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="js.html.ServiceWorkerRegistration"/></c></c></f>
			<haxe_doc>Returns all `ServiceWorkerRegistration` objects associated with a `ServiceWorkerContainer` in an array.  If the method can't return `ServiceWorkerRegistration` objects, it returns a `Promise`. </haxe_doc>
		</getRegistrations>
		<haxe_doc><![CDATA[The `ServiceWorkerContainer` interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.

	Documentation [ServiceWorkerContainer](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerContainer"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerRegistration" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerRegistration.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<installing public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `installing`. This is initially set to `null`.</haxe_doc>
		</installing>
		<waiting public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `waiting`. This is initially set to `null`.</haxe_doc>
		</waiting>
		<active public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is either `activating` or `activated`. This is initially set to `null`. An active worker will control a `ServiceWorkerClient` if the client's URL falls within the scope of the registration (the `scope` option set when `ServiceWorkerContainer.register` is first called.)</haxe_doc>
		</active>
		<scope public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scope>
		<updateViaCache public="1" set="null"><x path="js.html.ServiceWorkerUpdateViaCache"/></updateViaCache>
		<onupdatefound public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `updatefound` is fired; it is fired any time the `ServiceWorkerRegistration.installing` property acquires a new service worker.</haxe_doc>
		</onupdatefound>
		<pushManager public="1" set="null">
			<c path="js.html.push.PushManager"/>
			<haxe_doc>Returns a reference to the `PushManager` interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status.</haxe_doc>
		</pushManager>
		<update public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Checks the server for an updated version of the service worker without consulting caches.
		@throws DOMError</haxe_doc>
		</update>
		<unregister public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Unregisters the service worker registration and returns a `Promise`. The service worker will finish any ongoing operations before it is unregistered.
		@throws DOMError</haxe_doc>
		</unregister>
		<showNotification public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.NotificationOptions"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Displays the notification with the requested title.
		@throws DOMError</haxe_doc>
		</showNotification>
		<getNotifications public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="js.html.GetNotificationOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Notification"/></c></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to an array of `Notification` objects.
		@throws DOMError</haxe_doc>
		</getNotifications>
		<haxe_doc><![CDATA[The `ServiceWorkerRegistration` interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.

	Documentation [ServiceWorkerRegistration](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerRegistration"</e></m></meta>
	</class>
	<abstract path="js.html.ServiceWorkerState" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerState.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `ServiceWorkerState` is associated with its `ServiceWorker`'s state.

	Documentation [ServiceWorkerState](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerState.ServiceWorkerState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerState.hx" private="1" module="js.html.ServiceWorkerState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.ServiceWorkerUpdateViaCache" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerUpdateViaCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerUpdateViaCache.ServiceWorkerUpdateViaCache_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerUpdateViaCache.hx" private="1" module="js.html.ServiceWorkerUpdateViaCache" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ShadowRoot" params="" file="/usr/local/lib/haxe/std/js/html/ShadowRoot.hx" extern="1">
		<extends path="js.html.DocumentFragment"/>
		<mode public="1" set="null">
			<x path="js.html.ShadowRootMode"/>
			<haxe_doc>The mode of the `ShadowRoot` — either `open` or `closed`. This defines whether or not the shadow root's internal features are accessible from JavaScript.</haxe_doc>
		</mode>
		<host public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns a reference to the DOM element the `ShadowRoot` is attached to.</haxe_doc>
		</host>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Sets or returns a reference to the DOM tree inside the `ShadowRoot`.</haxe_doc>
		</innerHTML>
		<activeElement public="1" set="null"><c path="js.html.Element"/></activeElement>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<fullscreenElement public="1" set="null"><c path="js.html.Element"/></fullscreenElement>
		<getElementById public="1" set="method" override="1"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<getElementsByTagName public="1" set="method"><f a="localName">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method"><f a="namespace:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method"><f a="classNames">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByClassName>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<elementsFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="js.html.Element"/></c>
</f></elementsFromPoint>
		<haxe_doc><![CDATA[The `ShadowRoot` interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.

	Documentation [ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot>]]></haxe_doc>
		<meta><m n=":native"><e>"ShadowRoot"</e></m></meta>
	</class>
	<typedef path="js.html.ShadowRootInit" params="" file="/usr/local/lib/haxe/std/js/html/ShadowRootInit.hx"><a><mode><x path="js.html.ShadowRootMode"/></mode></a></typedef>
	<abstract path="js.html.ShadowRootMode" params="" file="/usr/local/lib/haxe/std/js/html/ShadowRootMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ShadowRootMode.ShadowRootMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ShadowRootMode.hx" private="1" module="js.html.ShadowRootMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.SlotElement" params="" file="/usr/local/lib/haxe/std/js/html/SlotElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>`DOMString`: Can be used to get and set the slot's name.</haxe_doc>
		</name>
		<assignedNodes public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.AssignedNodesOptions"/></x>
				<c path="Array"><c path="js.html.Node"/></c>
			</f>
			<haxe_doc>Returns the sequence of elements assigned to this slot, or alternatively the slot's fallback content.</haxe_doc>
		</assignedNodes>
		<haxe_doc><![CDATA[The `HTMLSlotElement` interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML `slot` element.

	Documentation [HTMLSlotElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSlotElement"</e></m></meta>
	</class>
	<class path="js.html.SourceElement" params="" file="/usr/local/lib/haxe/std/js/html/SourceElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `src` HTML attribute, containing the URL for the media resource. The `HTMLSourceElement.src` property has a meaning only when the associated `source` element is nested in a media element that is a `video` or an `audio` element. It has no meaning and is ignored when it is nested in a `picture` element. 
		 Note: If the `src` property is updated (along with any siblings), the parent `HTMLMediaElement`'s `load` method should be called when done, since `source` elements are not re-scanned automatically.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `type` HTML attribute, containing the type of the media resource.</haxe_doc>
		</type>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing image sizes between breakpoints</haxe_doc>
		</sizes>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `media` HTML attribute, containing the intended type of the media resource.</haxe_doc>
		</media>
		<haxe_doc><![CDATA[The `HTMLSourceElement` interface provides special properties (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating `source` elements.

	Documentation [HTMLSourceElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSourceElement"</e></m></meta>
	</class>
	<class path="js.html.SpanElement" params="" file="/usr/local/lib/haxe/std/js/html/SpanElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLSpanElement` interface represents a `span` element and derives from the `HTMLElement` interface, but without implementing any additional properties or methods.

	Documentation [HTMLSpanElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSpanElement"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesis" params="" file="/usr/local/lib/haxe/std/js/html/SpeechSynthesis.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the utterance queue contains as-yet-unspoken utterances.</haxe_doc>
		</pending>
		<speaking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if an utterance is currently in the process of being spoken — even if `SpeechSynthesis` is in a paused state.</haxe_doc>
		</speaking>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the `SpeechSynthesis` object is in a paused state.</haxe_doc>
		</paused>
		<onvoiceschanged public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the list of `SpeechSynthesisVoice` objects that would be returned by the `SpeechSynthesis.getVoices()` method has changed.</haxe_doc>
		</onvoiceschanged>
		<speak public="1" set="method">
			<f a="utterance">
				<c path="js.html.SpeechSynthesisUtterance"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an `SpeechSynthesisUtterance` to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.</haxe_doc>
		</speak>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all utterances from the utterance queue.</haxe_doc>
		</cancel>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a paused state.</haxe_doc>
		</pause>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a non-paused state: resumes it if it was already paused.</haxe_doc>
		</resume>
		<getVoices public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.SpeechSynthesisVoice"/></c></f>
			<haxe_doc>Returns a list of `SpeechSynthesisVoice` objects representing all the available voices on the current device.</haxe_doc>
		</getVoices>
		<haxe_doc><![CDATA[The `SpeechSynthesis` interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.

	Documentation [SpeechSynthesis](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesis"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisUtterance" params="" file="/usr/local/lib/haxe/std/js/html/SpeechSynthesisUtterance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the text that will be synthesised when the utterance is spoken.</haxe_doc>
		</text>
		<lang public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the language of the utterance.</haxe_doc>
		</lang>
		<voice public="1">
			<c path="js.html.SpeechSynthesisVoice"/>
			<haxe_doc>Gets and sets the voice that will be used to speak the utterance.</haxe_doc>
		</voice>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the volume that the utterance will be spoken at.</haxe_doc>
		</volume>
		<rate public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the speed at which the utterance will be spoken at.</haxe_doc>
		</rate>
		<pitch public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the pitch at which the utterance will be spoken at.</haxe_doc>
		</pitch>
		<onstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has begun to be spoken.</haxe_doc>
		</onstart>
		<onend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has finished being spoken.</haxe_doc>
		</onend>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when an error occurs that prevents the utterance from being succesfully spoken.</haxe_doc>
		</onerror>
		<onpause public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance is paused part way through.</haxe_doc>
		</onpause>
		<onresume public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when a paused utterance is resumed.</haxe_doc>
		</onresume>
		<onmark public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a named SSML "mark" tag.</haxe_doc>
		</onmark>
		<onboundary public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a word or sentence boundary.</haxe_doc>
		</onboundary>
		<new public="1" set="method">
			<f a="text">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `SpeechSynthesisUtterance` interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)

	Documentation [SpeechSynthesisUtterance](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisUtterance"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisVoice" params="" file="/usr/local/lib/haxe/std/js/html/SpeechSynthesisVoice.hx" extern="1">
		<voiceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the type of URI and location of the speech synthesis service for this voice.</haxe_doc>
		</voiceURI>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable name that represents the voice.</haxe_doc>
		</name>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a BCP 47 language tag indicating the language of the voice.</haxe_doc>
		</lang>
		<localService public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the voice is supplied by a local speech synthesizer service (`true`), or a remote speech synthesizer service (`false`.)</haxe_doc>
		</localService>
		<default_ public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
			<haxe_doc>A `Boolean` indicating whether the voice is the default voice for the current app language (`true`), or not (`false`.)</haxe_doc>
		</default_>
		<haxe_doc><![CDATA[The `SpeechSynthesisVoice` interface of the Web Speech API represents a voice that the system supports. Every `SpeechSynthesisVoice` has its own relative speech service including information about language, name and URI.

	Documentation [SpeechSynthesisVoice](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisVoice"</e></m></meta>
	</class>
	<class path="js.html.Storage" params="" file="/usr/local/lib/haxe/std/js/html/Storage.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the number of data items stored in the `Storage` object.</haxe_doc>
		</length>
		<key public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>When passed a number n, this method will return the name of the nth key in the storage.
		@throws DOMError</haxe_doc>
		</key>
		<getItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>When passed a key name, will return that key's value.
		@throws DOMError</haxe_doc>
		</getItem>
		<setItem public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>When passed a key name and value, will add that key to the storage, or update that key's value if it already exists.
		@throws DOMError</haxe_doc>
		</setItem>
		<removeItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>When passed a key name, will remove that key from the storage.
		@throws DOMError</haxe_doc>
		</removeItem>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>When invoked, will empty all keys out of the storage.
		@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `Storage` interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.

	Documentation [Storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Storage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Storage>]]></haxe_doc>
		<meta><m n=":native"><e>"Storage"</e></m></meta>
	</class>
	<typedef path="js.html.StorageEstimate" params="" file="/usr/local/lib/haxe/std/js/html/StorageEstimate.hx">
		<a>
			<usage>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A numeric value approximating the amount of storage space currently being used by the site or Web app, out of the available space as indicated by `quota`.</haxe_doc>
			</usage>
			<quota>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A numeric value which provides a conservative approximation of the total storage the user's device or computer has available for the site origin or Web app. It's possible that there's more than this amount of space available though you can't rely on that being the case.</haxe_doc>
			</quota>
		</a>
		<haxe_doc><![CDATA[The `StorageEstimate` dictionary is used by the `StorageManager` to provide estimates of the size of a site's or application's data store and how much of it is in use. The `estimate()` method returns an object that conforms to this dictionary when its `Promise` resolves.

	Documentation [StorageEstimate](https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate>]]></haxe_doc>
	</typedef>
	<class path="js.html.StorageManager" params="" file="/usr/local/lib/haxe/std/js/html/StorageManager.hx" extern="1">
		<persisted public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if persistence has already been granted for your site's storage.
		@throws DOMError</haxe_doc>
		</persisted>
		<persist public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if the user agent is able to persist your site's storage.
		@throws DOMError</haxe_doc>
		</persist>
		<estimate public="1" set="method">
			<f a=""><c path="js.lib.Promise"><t path="js.html.StorageEstimate"/></c></f>
			<haxe_doc>Returns a `StorageEstimate` object containing usage and quota numbers for your origin.
		@throws DOMError</haxe_doc>
		</estimate>
		<haxe_doc><![CDATA[The `StorageManager` interface of the the Storage API provides an interface for managing persistance permissions and estimating available storage. You can get a reference to this interface using either `navigator.storage` or `WorkerNavigator.storage`.

	Documentation [StorageManager](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageManager>]]></haxe_doc>
		<meta><m n=":native"><e>"StorageManager"</e></m></meta>
	</class>
	<abstract path="js.html.StorageType" params="" file="/usr/local/lib/haxe/std/js/html/StorageType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._StorageType.StorageType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/StorageType.hx" private="1" module="js.html.StorageType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.StyleElement" params="" file="/usr/local/lib/haxe/std/js/html/StyleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value representing whether or not the stylesheet is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of style being applied by this statement.</haxe_doc>
		</type>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLStyleElement` interface represents a `style` element. It inherits properties and methods from its parent, `HTMLElement`, and from `LinkStyle`.

	Documentation [HTMLStyleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLStyleElement"</e></m></meta>
	</class>
	<class path="js.html.StyleSheetList" params="" file="/usr/local/lib/haxe/std/js/html/StyleSheetList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.StyleSheet"/>
</f></item>
		<haxe_doc><![CDATA[The `StyleSheetList` interface represents a list of `StyleSheet`.

	Documentation [StyleSheetList](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheetList"</e></m></meta>
	</class>
	<class path="js.html.SubtleCrypto" params="" file="/usr/local/lib/haxe/std/js/html/SubtleCrypto.hx" extern="1">
		<encrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the encrypted data corresponding to the clear text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</encrypt>
		<decrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the clear data corresponding to the encrypted text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</decrypt>
		<sign public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the signature corresponding to the text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</sign>
		<verify public="1" set="method">
			<f a="algorithm:key:signature:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `Boolean` value indicating if the signature given as parameter matches the text, algorithm and key also given as parameters.
		@throws DOMError</haxe_doc>
		</verify>
		<digest public="1" set="method">
			<f a="algorithm:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a digest generated from the algorithm and text given as parameters.
		@throws DOMError</haxe_doc>
		</digest>
		<generateKey public="1" set="method">
			<f a="algorithm:extractable:keyUsages">
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><generateKey public="1" set="method">
	<f a="algorithm:extractable:keyUsages">
		<c path="String"/>
		<x path="Bool"/>
		<c path="Array"><c path="String"/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
</generateKey></overloads>
		</generateKey>
		<deriveKey public="1" set="method">
			<f a="algorithm:baseKey:derivedKeyType:extractable:keyUsages">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey` derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
		</deriveKey>
		<deriveBits public="1" set="method">
			<f a="algorithm:baseKey:length">
				<d/>
				<c path="js.html.CryptoKey"/>
				<x path="Int"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated buffer of pseudo-random bits derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><deriveBits public="1" set="method">
	<f a="algorithm:baseKey:length">
		<c path="String"/>
		<c path="js.html.CryptoKey"/>
		<x path="Int"/>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a newly generated buffer of pseudo-random bits derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
</deriveBits></overloads>
		</deriveBits>
		<importKey public="1" set="method">
			<f a="format:keyData:algorithm:extractable:keyUsages">
				<c path="String"/>
				<d/>
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the format, the algorithm, the raw key data, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><importKey public="1" set="method">
	<f a="format:keyData:algorithm:extractable:keyUsages">
		<c path="String"/>
		<d/>
		<c path="String"/>
		<x path="Bool"/>
		<c path="Array"><c path="String"/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the format, the algorithm, the raw key data, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
</importKey></overloads>
		</importKey>
		<exportKey public="1" set="method">
			<f a="format:key">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a buffer containing the key in the format requested.
		@throws DOMError</haxe_doc>
		</exportKey>
		<wrapKey public="1" set="method">
			<f a="format:key:wrappingKey:wrapAlgorithm">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.html.CryptoKey"/>
				<d/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a wrapped symmetric key for usage (transfer, storage) in insecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.
		@throws DOMError</haxe_doc>
			<overloads><wrapKey public="1" set="method">
	<f a="format:key:wrappingKey:wrapAlgorithm">
		<c path="String"/>
		<c path="js.html.CryptoKey"/>
		<c path="js.html.CryptoKey"/>
		<c path="String"/>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a wrapped symmetric key for usage (transfer, storage) in insecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.
		@throws DOMError</haxe_doc>
</wrapKey></overloads>
		</wrapKey>
		<unwrapKey public="1" set="method">
			<f a="format:wrappedKey:unwrappingKey:unwrapAlgorithm:unwrappedKeyAlgorithm:extractable:keyUsages">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the wrapped key given in parameter.
		@throws DOMError</haxe_doc>
		</unwrapKey>
		<haxe_doc><![CDATA[The `SubtleCrypto` interface represents a set of cryptographic primitives. It is available via the `Crypto.subtle` properties available in a window context (via `Window.crypto`).

	Documentation [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto>]]></haxe_doc>
		<meta><m n=":native"><e>"SubtleCrypto"</e></m></meta>
	</class>
	<class path="js.html.TableCaptionElement" params="" file="/usr/local/lib/haxe/std/js/html/TableCaptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` which represents an enumerated attribute indicating alignment of the caption with respect to the table.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLTableCaptionElement` interface special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating table caption elements.

	Documentation [HTMLTableCaptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCaptionElement"</e></m></meta>
	</class>
	<class path="js.html.TableCellElement" params="" file="/usr/local/lib/haxe/std/js/html/TableCellElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<colSpan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the `colspan` attribute.</haxe_doc>
		</colSpan>
		<rowSpan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the `rowspan` attribute.</haxe_doc>
		</rowSpan>
		<headers public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMSettableTokenList` describing a list of `id` of `th` elements that represents headers associated with the cell. It reflects the `headers` attribute.</haxe_doc>
		</headers>
		<cellIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A long integer representing the cell's position in the `HTMLTableRowElement.cells` collection of the `tr` the cell is contained within. If the cell doesn't belong to a `tr`, it returns `-1`.</haxe_doc>
		</cellIndex>
		<abbr public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` which can be used on `th` elements (not on `td`), specifying an alternative label for the header cell.. This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell. This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool. Usually the value of `abbr` is an abbreviation or acronym, but can be any text that's appropriate contextually.</haxe_doc>
		</abbr>
		<scope public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</scope>
		<align public="1"><c path="String"/></align>
		<axis public="1"><c path="String"/></axis>
		<height public="1"><c path="String"/></height>
		<width public="1"><c path="String"/></width>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<noWrap public="1"><x path="Bool"/></noWrap>
		<vAlign public="1"><c path="String"/></vAlign>
		<bgColor public="1"><c path="String"/></bgColor>
		<haxe_doc><![CDATA[The `HTMLTableCellElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.

	Documentation [HTMLTableCellElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCellElement"</e></m></meta>
	</class>
	<class path="js.html.TableColElement" params="" file="/usr/local/lib/haxe/std/js/html/TableColElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<span public="1"><x path="Int"/></span>
		<align public="1"><c path="String"/></align>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<vAlign public="1"><c path="String"/></vAlign>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLTableColElement` interface provides special properties (beyond the `HTMLElement` interface it also has available to it inheritance) for manipulating single or grouped table column elements.

	Documentation [HTMLTableColElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableColElement"</e></m></meta>
	</class>
	<class path="js.html.TableElement" params="" file="/usr/local/lib/haxe/std/js/html/TableElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<caption public="1">
			<c path="js.html.TableCaptionElement"/>
			<haxe_doc>Is a `HTMLTableCaptionElement` representing the first `caption` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `caption`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first `caption` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</caption>
		<tHead public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `thead` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `thead`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element, and the first `thead` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tHead>
		<tFoot public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `tfoot` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `tfoot`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element, and the first `tfoot` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tFoot>
		<tBodies public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the `tbody` of the element. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</tBodies>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the rows of the element, that is all `tr` that are a child of the element, or a child or one of its `thead`, `tbody` and `tfoot` children. The rows members of a `thead` appear first, in tree order, and those members of a `tbody` last, also in tree order. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the border of the table. It reflects the obsolete `border` attribute.</haxe_doc>
		</border>
		<frame public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the external borders of the table. It reflects the obsolete `frame` attribute and can take one of the following values: `"void"`, `"above"`, `"below"`, `"hsides"`, `"vsides"`, `"lhs"`, `"rhs"`, `"box"`, or `"border"`.</haxe_doc>
		</frame>
		<rules public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the internal borders of the table. It reflects the obsolete `rules` attribute and can take one of the following values: `"none"`, `"groups"`, `"rows"`, `"cols"`, or `"all"`.</haxe_doc>
		</rules>
		<summary public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a description of the purpose or the structure of the table. It reflects the obsolete `summary` attribute.</haxe_doc>
		</summary>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the length in pixels or in percentage of the desired width fo the entire table. It reflects the obsolete `width` attribute.</haxe_doc>
		</width>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<cellPadding public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. It reflects the obsolete `cellpadding` attribute.</haxe_doc>
		</cellPadding>
		<cellSpacing public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete `cellspacing` attribute.</haxe_doc>
		</cellSpacing>
		<createCaption public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `caption` that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the `table` element.</haxe_doc>
		</createCaption>
		<deleteCaption public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `caption` that is a child of the element.</haxe_doc>
		</deleteCaption>
		<createTHead public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `thead` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element.</haxe_doc>
		</createTHead>
		<deleteTHead public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `thead` that is a child of the element.</haxe_doc>
		</deleteTHead>
		<createTFoot public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `tfoot` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element.</haxe_doc>
		</createTFoot>
		<deleteTFoot public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `tfoot` that is a child of the element.</haxe_doc>
		</deleteTFoot>
		<createTBody public="1" set="method"><f a=""><c path="js.html.Element"/></f></createTBody>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Returns an `HTMLTableRowElement` representing a new row of the table. It inserts it in the rows collection immediately before the `tr` element at the given `index` position. If necessary a `tbody` is created. If the `index` is `-1`, the new row is appended to the collection. If the `index` is smaller than `-1` or greater than the number of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.
		@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the row corresponding to the `index` given in parameter. If the `index` value is `-1` the last row is removed; if it smaller than `-1` or greater than the amount of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.
		@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.

	Documentation [HTMLTableElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableElement"</e></m></meta>
	</class>
	<class path="js.html.TableRowElement" params="" file="/usr/local/lib/haxe/std/js/html/TableRowElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the entire table. If the row is not part of a table, returns `-1`.</haxe_doc>
		</rowIndex>
		<sectionRowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns `-1`.</haxe_doc>
		</sectionRowIndex>
		<cells public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the cells in the row. The `HTMLCollection` is live and is automatically updated when cells are added or removed.</haxe_doc>
		</cells>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single character. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<insertCell public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Inserts a new cell just before the given position in the row. If the given position is not given or is `-1`, it appends the cell to the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than `-1`, it raises a `DOMException` with the `IndexSizeError` value. Returns a reference to a HTMLTableCellElement [en-US].
		@throws DOMError</haxe_doc>
		</insertCell>
		<deleteCell public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the cell at the given position in the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than `0`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</deleteCell>
		<haxe_doc><![CDATA[The `HTMLTableRowElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.

	Documentation [HTMLTableRowElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableRowElement"</e></m></meta>
	</class>
	<class path="js.html.TableSectionElement" params="" file="/usr/local/lib/haxe/std/js/html/TableSectionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the rows in the section. The `HTMLCollection` is live and is automatically updated when rows are added or removed.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Inserts a new row just before the given position in the section. If the given position is not given or is `-1`, it appends the row to the end of section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than `-1`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the cell at the given position in the section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than `0`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableSectionElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.

	Documentation [HTMLTableSectionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableSectionElement"</e></m></meta>
	</class>
	<class path="js.html.TextAreaElement" params="" file="/usr/local/lib/haxe/std/js/html/TextAreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<cols public="1"><x path="Int"/></cols>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<maxLength public="1"><x path="Int"/></maxLength>
		<minLength public="1"><x path="Int"/></minLength>
		<name public="1"><c path="String"/></name>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<rows public="1"><x path="Int"/></rows>
		<wrap public="1"><c path="String"/></wrap>
		<type public="1" set="null"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::PRESERVE">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : PRESERVE }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLTextAreaElement` interface provides special properties and methods for manipulating the layout and presentation of `textarea` elements.

	Documentation [HTMLTextAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTextAreaElement"</e></m></meta>
	</class>
	<class path="js.html.TextMetrics" params="" file="/usr/local/lib/haxe/std/js/html/TextMetrics.hx" extern="1">
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `double` giving the calculated width of a segment of inline text in CSS pixels. It takes into account the current font of the context.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `TextMetrics` interface represents the dimension of a text in the canvas, as created by the `CanvasRenderingContext2D.measureText()` method.

	Documentation [TextMetrics](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics>]]></haxe_doc>
		<meta><m n=":native"><e>"TextMetrics"</e></m></meta>
	</class>
	<class path="js.html.TextTrack" params="" file="/usr/local/lib/haxe/std/js/html/TextTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<x path="js.html.TextTrackKind"/>
			<haxe_doc>Returns a `DOMString` indicating what kind of text track the `TextTrack` describes. The value must be one of those in the TextTrackKind enum.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>A human-readable `DOMString` which contains the text track's label, if one is present; otherwise, this is an empty string (`""`), in which case a custom label may need to be generated by your code using other attributes of the track, if the track's label needs to be exposed to the user.</haxe_doc>
		</label>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which specifies the text language in which the text track's contents is written. The value must adhere to the format specified in the Tags for Identifying Languages (BCP 47) document from the IETF, just like the HTML `lang` attribute. For example, this can be `"en-US"` for United States English or `"pt-BR"` for Brazilian Portuguese.</haxe_doc>
		</language>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which identifies the track, if it has one. If it doesn't have an ID, then this value is an empty string (`""`). If the `TextTrack` is associated with a `track` element, then the track's ID matches the element's ID.</haxe_doc>
		</id>
		<inBandMetadataTrackDispatchType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` which indicates the track's in-band metadata track dispatch type. needs details</haxe_doc>
		</inBandMetadataTrackDispatchType>
		<mode public="1">
			<x path="js.html.TextTrackMode"/>
			<haxe_doc>A `DOMString` specifying the track's current mode. Changing this property's value changes the track's current mode to match. Permitted values are listed under Text track mode constants.</haxe_doc>
		</mode>
		<cues public="1" set="null">
			<c path="js.html.TextTrackCueList"/>
			<haxe_doc>A `TextTrackCueList` which contains all of the track's cues.</haxe_doc>
		</cues>
		<activeCues public="1" set="null">
			<c path="js.html.TextTrackCueList"/>
			<haxe_doc>A `TextTrackCueList` object listing the currently active set of text track cues. Track cues are active if the current playback position of the media is between the cues' start and end times.</haxe_doc>
		</activeCues>
		<oncuechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A `EventHandler` specifying a function to be called when a `cuechange` event occurs. Handling these events lets you know when cues are entered and exited. A given text cue appears when the cue is entered and disappears when the cue is exited.</haxe_doc>
		</oncuechange>
		<addCue public="1" set="method"><f a="cue">
	<c path="js.html.VTTCue"/>
	<x path="Void"/>
</f></addCue>
		<removeCue public="1" set="method">
			<f a="cue">
				<c path="js.html.VTTCue"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeCue>
		<haxe_doc><![CDATA[This interface also inherits properties from `EventTarget`.

	Documentation [TextTrack](https://developer.mozilla.org/en-US/docs/Web/API/TextTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"TextTrack"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCue" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackCue.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<track public="1" set="null"><c path="js.html.TextTrack"/></track>
		<id public="1"><c path="String"/></id>
		<startTime public="1"><x path="Float"/></startTime>
		<endTime public="1"><x path="Float"/></endTime>
		<pauseOnExit public="1"><x path="Bool"/></pauseOnExit>
		<onenter public="1"><x path="haxe.Function"/></onenter>
		<onexit public="1"><x path="haxe.Function"/></onexit>
		<meta><m n=":native"><e>"TextTrackCue"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCueList" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackCueList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getCueById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VTTCue"/>
</f></getCueById>
		<meta><m n=":native"><e>"TextTrackCueList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackKind" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackKind.TextTrackKind_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackKind.hx" private="1" module="js.html.TextTrackKind" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.TextTrackList" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.TextTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"TextTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackMode" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackMode.TextTrackMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackMode.hx" private="1" module="js.html.TextTrackMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.TimeRanges" params="" file="/usr/local/lib/haxe/std/js/html/TimeRanges.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the number of time ranges represented by the time range object.</haxe_doc>
		</length>
		<start public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the time for the start of the range with the specified index.
		@throws DOMError</haxe_doc>
		</start>
		<end public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the time for the end of the specified range.
		@throws DOMError</haxe_doc>
		</end>
		<haxe_doc><![CDATA[The `TimeRanges` interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the `audio` and `video` elements.

	Documentation [TimeRanges](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges>]]></haxe_doc>
		<meta><m n=":native"><e>"TimeRanges"</e></m></meta>
	</class>
	<class path="js.html.TitleElement" params="" file="/usr/local/lib/haxe/std/js/html/TitleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the text of the document's title.</haxe_doc>
		</text>
		<haxe_doc><![CDATA[The `HTMLTitleElement` interface contains the title for a document. This element inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLTitleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTitleElement"</e></m></meta>
	</class>
	<class path="js.html.Touch" params="" file="/usr/local/lib/haxe/std/js/html/Touch.hx" extern="1">
		<identifier public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a unique identifier for this `Touch` object. A given touch point (say, by a finger) will have the same identifier for the duration of its movement around the surface. This lets you ensure that you're tracking the same touch all the time.</haxe_doc>
		</identifier>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>Returns the `Element` on which the touch point started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.</haxe_doc>
		</target>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the screen.</haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top edge of the screen.</haxe_doc>
		</screenY>
		<clientX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset.</haxe_doc>
		</clientX>
		<clientY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset.</haxe_doc>
		</clientY>
		<pageX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the document. Unlike `clientX`, this value includes the horizontal scroll offset, if any.</haxe_doc>
		</pageX>
		<pageY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top of the document. Unlike `clientY,` this value includes the vertical scroll offset, if any.</haxe_doc>
		</pageY>
		<radiusX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenX`.</haxe_doc>
		</radiusX>
		<radiusY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenY`.</haxe_doc>
		</radiusY>
		<rotationAngle public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the angle (in degrees) that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface.</haxe_doc>
		</rotationAngle>
		<force public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the amount of pressure being applied to the surface by the user, as a `float` between `0.0` (no pressure) and `1.0` (maximum pressure).</haxe_doc>
		</force>
		<new public="1" set="method">
			<f a="touchInitDict">
				<t path="js.html.TouchInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Touch` interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.

	Documentation [Touch](https://developer.mozilla.org/en-US/docs/Web/API/Touch) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Touch$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Touch>]]></haxe_doc>
		<meta><m n=":native"><e>"Touch"</e></m></meta>
	</class>
	<typedef path="js.html.TouchInit" params="" file="/usr/local/lib/haxe/std/js/html/TouchInit.hx"><a>
	<target><c path="js.html.EventTarget"/></target>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<rotationAngle>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</rotationAngle>
	<radiusY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</radiusY>
	<radiusX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</radiusX>
	<pageY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pageY>
	<pageX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pageX>
	<identifier><x path="Int"/></identifier>
	<force>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</force>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
</a></typedef>
	<class path="js.html.TouchList" params="" file="/usr/local/lib/haxe/std/js/html/TouchList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of `Touch` objects in the `TouchList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Touch"/>
			</f>
			<haxe_doc>Returns the `Touch` object at the specified index in the list.</haxe_doc>
		</item>
		<haxe_doc><![CDATA[The `TouchList` interface represents a list of contact points with a touch surface; for example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding `TouchList` object would have one `Touch` object for each finger, for a total of three entries.

	Documentation [TouchList](https://developer.mozilla.org/en-US/docs/Web/API/TouchList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TouchList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TouchList>]]></haxe_doc>
		<meta><m n=":native"><e>"TouchList"</e></m></meta>
	</class>
	<class path="js.html.TrackElement" params="" file="/usr/local/lib/haxe/std/js/html/TrackElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NONE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<LOADING public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LOADING>
		<LOADED public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LOADED>
		<ERROR public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</ERROR>
		<kind public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `kind` HTML attribute, indicating how the text track is meant to be used. Possible values are: subtitles, captions, descriptions, chapters, metadata.</haxe_doc>
		</kind>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, indicating the address of the text track data.</haxe_doc>
		</src>
		<srclang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `srclang` HTML attribute, indicating the language of the text track data.</haxe_doc>
		</srclang>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `label` HTML attribute, indicating a user-readable title for the track.</haxe_doc>
		</label>
		<default_ public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
			<haxe_doc>Is a `Boolean` reflects the `default` HTML attribute, indicating that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate.</haxe_doc>
		</default_>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns  an <code>unsigned short</code> that show the readiness state of the track:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NONE</code></td>
		    <td>0</td>
		    <td>Indicates that the text track's cues have not been obtained.</td>
		   </tr>
		   <tr>
		    <td><code>LOADING</code></td>
		    <td>1</td>
		    <td>Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track by the parser.</td>
		   </tr>
		   <tr>
		    <td><code>LOADED</code></td>
		    <td>2</td>
		    <td>Indicates that the text track has been loaded with no fatal errors.</td>
		   </tr>
		   <tr>
		    <td><code>ERROR</code></td>
		    <td>3</td>
		    <td>Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way. Some or all of the cues are likely missing and will not be obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</readyState>
		<track public="1" set="null">
			<c path="js.html.TextTrack"/>
			<haxe_doc>Returns `TextTrack` is the track element's text track data.</haxe_doc>
		</track>
		<haxe_doc><![CDATA[The `HTMLTrackElement`

	Documentation [HTMLTrackElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTrackElement"</e></m></meta>
	</class>
	<class path="js.html.TreeWalker" params="" file="/usr/local/lib/haxe/std/js/html/TreeWalker.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `TreeWalker` was created.</haxe_doc>
		</root>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Numerical value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ALL</code></td>
		    <td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
		    <td>Shows all nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ATTRIBUTE</code> {{deprecated_inline}}</td>
		    <td><code>2</code></td>
		    <td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Attr</code> node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_CDATA_SECTION</code> {{deprecated_inline}}</td>
		    <td><code>8</code></td>
		    <td>Shows <code>CDATASection</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_COMMENT</code></td>
		    <td><code>128</code></td>
		    <td>Shows <code>Comment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT</code></td>
		    <td><code>256</code></td>
		    <td>Shows <code>Document</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
		    <td><code>1024</code></td>
		    <td>Shows <code>DocumentFragment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
		    <td><code>512</code></td>
		    <td>Shows <code>DocumentType</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ELEMENT</code></td>
		    <td><code>1</code></td>
		    <td>Shows <code>Element</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY</code> {{deprecated_inline}}</td>
		    <td><code>32</code></td>
		    <td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> {{deprecated_inline}}</td>
		    <td><code>16</code></td>
		    <td>Shows <code>EntityReference</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_NOTATION</code> {{deprecated_inline}}</td>
		    <td><code>2048</code></td>
		    <td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
		    <td><code>64</code></td>
		    <td>Shows <code>ProcessingInstruction</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_TEXT</code></td>
		    <td><code>4</code></td>
		    <td>Shows <code>Text</code> nodes.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<x path="haxe.extern.EitherType">
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeFilter"/>
			</x>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<currentNode public="1">
			<c path="js.html.Node"/>
			<haxe_doc>Is the `Node` on which the `TreeWalker` is currently pointing at.</haxe_doc>
		</currentNode>
		<parentNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</parentNode>
		<firstChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</firstChild>
		<lastChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, `null` is returned and the current node is not changed.
		@throws DOMError</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to its previous sibling, if any, and returns the found sibling. If there is no such node, return `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to its next sibling, if any, and returns the found sibling. If there is no such node, `null` is returned and the current node is not changed.
		@throws DOMError</haxe_doc>
		</nextSibling>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</previousNode>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</nextNode>
		<haxe_doc><![CDATA[The `TreeWalker` object represents the nodes of a document subtree and a position within them.

	Documentation [TreeWalker](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker>]]></haxe_doc>
		<meta><m n=":native"><e>"TreeWalker"</e></m></meta>
	</class>
	<class path="js.html.UListElement" params="" file="/usr/local/lib/haxe/std/js/html/UListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLUListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating unordered list elements.

	Documentation [HTMLUListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLUListElement"</e></m></meta>
	</class>
	<class path="js.html.URLSearchParams" params="" file="/usr/local/lib/haxe/std/js/html/URLSearchParams.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a specified key/value pair as a new search parameter.</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the given search parameter, and its associated value, from the list of all search parameters.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the first value associated to the given search parameter.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns all the values associated with a given search parameter.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if such a search parameter exists.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.</haxe_doc>
		</set>
		<sort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sorts all key/value pairs, if any, by their keys.
		@throws DOMError</haxe_doc>
		</sort>
		<entries public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<c path="Array"><c path="Array"><c path="String"/></c></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?init">
						<x path="haxe.DynamicAccess"><c path="String"/></x>
						<c path="js.html.URLSearchParams"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?init" v="&quot;&quot;">
						<c path="String"/>
						<c path="js.html.URLSearchParams"/>
					</f>
					<meta><m n=":value"><e>{ init : "" }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `URLSearchParams` interface defines utility methods to work with the query string of a URL.

	Documentation [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams>]]></haxe_doc>
		<meta><m n=":native"><e>"URLSearchParams"</e></m></meta>
	</class>
	<typedef path="js.html.URLSearchParamsIterator" params="" file="/usr/local/lib/haxe/std/js/html/URLSearchParamsIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.VTTCue" params="" file="/usr/local/lib/haxe/std/js/html/VTTCue.hx" extern="1">
		<extends path="js.html.TextTrackCue"/>
		<region public="1"><c path="js.html.VTTRegion"/></region>
		<vertical public="1"><x path="js.html.DirectionSetting"/></vertical>
		<snapToLines public="1"><x path="Bool"/></snapToLines>
		<line public="1"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<x path="js.html.AutoKeyword"/>
</x></line>
		<lineAlign public="1"><x path="js.html.LineAlignSetting"/></lineAlign>
		<position public="1"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<x path="js.html.AutoKeyword"/>
</x></position>
		<positionAlign public="1"><x path="js.html.PositionAlignSetting"/></positionAlign>
		<size public="1"><x path="Float"/></size>
		<align public="1"><x path="js.html.AlignSetting"/></align>
		<text public="1"><c path="String"/></text>
		<getCueAsHTML public="1" set="method"><f a=""><c path="js.html.DocumentFragment"/></f></getCueAsHTML>
		<new public="1" set="method">
			<f a="startTime:endTime:text">
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[VTTCues represent a cue in a text track.

	Documentation [VTTCue](https://developer.mozilla.org/en-US/docs/Web/API/VTTCue) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VTTCue$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VTTCue>]]></haxe_doc>
		<meta><m n=":native"><e>"VTTCue"</e></m></meta>
	</class>
	<class path="js.html.VTTRegion" params="" file="/usr/local/lib/haxe/std/js/html/VTTRegion.hx" extern="1">
		<id public="1"><c path="String"/></id>
		<width public="1"><x path="Float"/></width>
		<lines public="1"><x path="Int"/></lines>
		<regionAnchorX public="1"><x path="Float"/></regionAnchorX>
		<regionAnchorY public="1"><x path="Float"/></regionAnchorY>
		<viewportAnchorX public="1"><x path="Float"/></viewportAnchorX>
		<viewportAnchorY public="1"><x path="Float"/></viewportAnchorY>
		<scroll public="1"><x path="js.html.ScrollSetting"/></scroll>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"VTTRegion"</e></m></meta>
	</class>
	<class path="js.html.ValidityState" params="" file="/usr/local/lib/haxe/std/js/html/ValidityState.hx" extern="1">
		<valueMissing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element has a `required` attribute, but no value.</haxe_doc>
		</valueMissing>
		<typeMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is not in the required syntax (when `type` is `email` or `url`).</haxe_doc>
		</typeMismatch>
		<patternMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not match the specified `pattern`.</haxe_doc>
		</patternMismatch>
		<tooLong public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value exceeds the specified `maxlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects. Note: This will never be `true` in Gecko, because elements' values are prevented from being longer than `maxlength`.</haxe_doc>
		</tooLong>
		<tooShort public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value fails to meet the specified `minlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects.</haxe_doc>
		</tooShort>
		<rangeUnderflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is less than the minimum specified by the `min` attribute.</haxe_doc>
		</rangeUnderflow>
		<rangeOverflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is greater than the maximum specified by the `max` attribute.</haxe_doc>
		</rangeOverflow>
		<stepMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not fit the rules determined by the `step` attribute (that is, it's not evenly divisible by the step value).</haxe_doc>
		</stepMismatch>
		<badInput public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the user has provided input that the browser is unable to convert.</haxe_doc>
		</badInput>
		<customError public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element's custom validity message has been set to a non-empty string by calling the element's `setCustomValidity()` method.</haxe_doc>
		</customError>
		<valid public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element meets all constraint validations, and is therefore considered to be valid.</haxe_doc>
		</valid>
		<haxe_doc><![CDATA[The `ValidityState` interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.

	Documentation [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ValidityState>]]></haxe_doc>
		<meta><m n=":native"><e>"ValidityState"</e></m></meta>
	</class>
	<class path="js.html.VideoElement" params="" file="/usr/local/lib/haxe/std/js/html/VideoElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, which specifies the width of the display area, in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, which specifies the height of the display area, in CSS pixels.</haxe_doc>
		</height>
		<videoWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic width of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoWidth>
		<videoHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic height of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoHeight>
		<poster public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `poster` HTML attribute, which specifies an image to show while no video data is available.</haxe_doc>
		</poster>
		<getVideoPlaybackQuality public="1" set="method">
			<f a=""><c path="js.html.VideoPlaybackQuality"/></f>
			<haxe_doc>Returns a `VideoPlaybackQuality` objects that contains the current playback metrics.</haxe_doc>
		</getVideoPlaybackQuality>
		<haxe_doc><![CDATA[The `HTMLVideoElement` interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of `HTMLMediaElement` and `HTMLElement`.

	Documentation [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLVideoElement"</e></m></meta>
	</class>
	<class path="js.html.VideoPlaybackQuality" params="" file="/usr/local/lib/haxe/std/js/html/VideoPlaybackQuality.hx" extern="1">
		<creationTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` containing the time in miliseconds since the start of the navigation and the creation of the object.</haxe_doc>
		</creationTime>
		<totalVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames created and dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</totalVideoFrames>
		<droppedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</droppedVideoFrames>
		<corruptedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames corrupted since the creation of the associated `HTMLVideoElement`. A corrupted frame may be created or dropped.</haxe_doc>
		</corruptedVideoFrames>
		<haxe_doc><![CDATA[The `VideoPlaybackQuality` interface represents the set of metrics describing the playback quality of a video.

	Documentation [VideoPlaybackQuality](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality>]]></haxe_doc>
		<meta><m n=":native"><e>"VideoPlaybackQuality"</e></m></meta>
	</class>
	<class path="js.html.VideoStreamTrack" params="" file="/usr/local/lib/haxe/std/js/html/VideoStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"VideoStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrack" params="" file="/usr/local/lib/haxe/std/js/html/VideoTrack.hx" extern="1">
		<id public="1" set="null"><c path="String"/></id>
		<kind public="1" set="null"><c path="String"/></kind>
		<label public="1" set="null"><c path="String"/></label>
		<language public="1" set="null"><c path="String"/></language>
		<selected public="1"><x path="Bool"/></selected>
		<meta><m n=":native"><e>"VideoTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrackList" params="" file="/usr/local/lib/haxe/std/js/html/VideoTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<selectedIndex public="1" set="null"><x path="Int"/></selectedIndex>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VideoTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"VideoTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.VisibilityState" params="" file="/usr/local/lib/haxe/std/js/html/VisibilityState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._VisibilityState.VisibilityState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/VisibilityState.hx" private="1" module="js.html.VisibilityState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Window" params="" file="/usr/local/lib/haxe/std/js/html/Window.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<window public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the current window.</haxe_doc>
		</window>
		<self public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an object reference to the window object itself.</haxe_doc>
		</self>
		<document public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a reference to the document that the window contains.</haxe_doc>
		</document>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the name of the window.</haxe_doc>
		</name>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Gets/sets the location, or current URL, of the window object.</haxe_doc>
		</location>
		<history public="1" set="null">
			<c path="js.html.History"/>
			<haxe_doc>Returns a reference to the history object.</haxe_doc>
		</history>
		<locationbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the locationbar object, whose visibility can be toggled in the window.</haxe_doc>
		</locationbar>
		<menubar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the menubar object, whose visibility can be toggled in the window.</haxe_doc>
		</menubar>
		<personalbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the personalbar object, whose visibility can be toggled in the window.</haxe_doc>
		</personalbar>
		<scrollbars public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the scrollbars object, whose visibility can be toggled in the window.</haxe_doc>
		</scrollbars>
		<statusbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the statusbar object, whose visibility can be toggled in the window.</haxe_doc>
		</statusbar>
		<toolbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the toolbar object, whose visibility can be toggled in the window.</haxe_doc>
		</toolbar>
		<status public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the text in the statusbar at the bottom of the browser.</haxe_doc>
		</status>
		<closed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the current window is closed or not.</haxe_doc>
		</closed>
		<event public="1" set="null">
			<d/>
			<haxe_doc>Returns the current event, which is the event currently being handled by the JavaScript code's context, or `undefined` if no event is currently being handled. The `Event` object passed directly to event handlers should be used instead whenever possible.</haxe_doc>
		</event>
		<frames public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an array of the subframes in the current window.</haxe_doc>
		</frames>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of frames in the window. See also `window.frames`.</haxe_doc>
		</length>
		<top public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the topmost window in the window hierarchy. This property is read only.</haxe_doc>
		</top>
		<opener public="1">
			<d/>
			<haxe_doc>Returns a reference to the window that opened this current window.</haxe_doc>
		</opener>
		<parent public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the parent of the current window or subframe.</haxe_doc>
		</parent>
		<frameElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the element in which the window is embedded, or null if the window is not embedded.</haxe_doc>
		</frameElement>
		<navigator public="1" set="null">
			<c path="js.html.Navigator"/>
			<haxe_doc>Returns a reference to the navigator object.</haxe_doc>
		</navigator>
		<console public="1" set="null">
			<c path="js.html.ConsoleInstance"/>
			<haxe_doc>Returns a reference to the console object which provides access to the browser's debugging console.</haxe_doc>
		</console>
		<screen public="1" set="null">
			<c path="js.html.Screen"/>
			<haxe_doc>Returns a reference to the screen object associated with the window.</haxe_doc>
		</screen>
		<innerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.</haxe_doc>
		</innerWidth>
		<innerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.</haxe_doc>
		</innerHeight>
		<scrollX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled horizontally.</haxe_doc>
		</scrollX>
		<pageXOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>An alias for `window.scrollX`.</haxe_doc>
		</pageXOffset>
		<scrollY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled vertically.</haxe_doc>
		</scrollY>
		<pageYOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>An alias for `window.scrollY`</haxe_doc>
		</pageYOffset>
		<screenX public="1">
			<d/>
			<haxe_doc>Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</haxe_doc>
		</screenX>
		<screenY public="1">
			<d/>
			<haxe_doc>Returns the vertical distance of the top border of the user's browser from the top side of the screen.</haxe_doc>
		</screenY>
		<outerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the outside of the browser window.</haxe_doc>
		</outerWidth>
		<outerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the outside of the browser window.</haxe_doc>
		</outerHeight>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Returns a `Performance` object, which includes the `Performance.timing` and `Performance.navigation` attributes, each of which is an object providing performance-related data. See also Using Navigation Timing for additional information and examples.</haxe_doc>
		</performance>
		<devicePixelRatio public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the ratio between physical pixels and device independent pixels in the current display.</haxe_doc>
		</devicePixelRatio>
		<scrollMaxX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width.</haxe_doc>
		</scrollMaxX>
		<scrollMaxY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height).</haxe_doc>
		</scrollMaxY>
		<fullScreen public="1">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the window is displayed in full screen or not.</haxe_doc>
		</fullScreen>
		<ondevicemotion public="1"><x path="haxe.Function"/></ondevicemotion>
		<ondeviceorientation public="1"><x path="haxe.Function"/></ondeviceorientation>
		<onabsolutedeviceorientation public="1"><x path="haxe.Function"/></onabsolutedeviceorientation>
		<ondeviceproximity public="1"><x path="haxe.Function"/></ondeviceproximity>
		<onuserproximity public="1"><x path="haxe.Function"/></onuserproximity>
		<ondevicelight public="1"><x path="haxe.Function"/></ondevicelight>
		<content public="1" set="null">
			<d/>
			<haxe_doc>Returns a reference to the content element in the current window. Since Firefox 57 (initially Nightly-only), both versions are only available from chrome (privileged) code, and not available to the web anymore.</haxe_doc>
		</content>
		<orientation public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the orientation in degrees (in 90 degree increments) of the viewport relative to the device's natural orientation.</haxe_doc>
		</orientation>
		<onorientationchange public="1"><x path="haxe.Function"/></onorientationchange>
		<crypto public="1" set="null">
			<c path="js.html.Crypto"/>
			<haxe_doc>Returns the browser crypto object.</haxe_doc>
		</crypto>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1"><x path="haxe.Function"/></onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<onerror public="1"><f a="::::">
	<x path="haxe.extern.EitherType">
		<c path="js.html.Event"/>
		<c path="String"/>
	</x>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<d/>
</f></onerror>
		<speechSynthesis public="1" set="null">
			<c path="js.html.SpeechSynthesis"/>
			<haxe_doc>Returns a `SpeechSynthesis` object, which is the entry point into using Web Speech API speech synthesis functionality.</haxe_doc>
		</speechSynthesis>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<localStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</localStorage>
		<origin public="1" set="null"><c path="String"/></origin>
		<isSecureContext public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether a context is capable of using features that require secure contexts.</haxe_doc>
		</isSecureContext>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<caches public="1" set="null"><c path="js.html.CacheStorage"/></caches>
		<sessionStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</sessionStorage>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the current window.
		@throws DOMError</haxe_doc>
		</close>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method stops window loading.
		@throws DOMError</haxe_doc>
		</stop>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus on the current window.
		@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus away from the window.
		@throws DOMError</haxe_doc>
		</blur>
		<open public="1" set="method">
			<f a="?url:?target:?features" v="&quot;&quot;:&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ features : "", target : "", url : "" }</e></m></meta>
			<haxe_doc>Opens a new window.
		@throws DOMError</haxe_doc>
		</open>
		<alert public="1" set="method">
			<f a="message">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an alert dialog.
		@throws DOMError</haxe_doc>
			<overloads><alert public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>Displays an alert dialog.
		@throws DOMError</haxe_doc>
</alert></overloads>
		</alert>
		<confirm public="1" set="method">
			<f a="?message" v="&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>Displays a dialog with a message that the user needs to respond to.
		@throws DOMError</haxe_doc>
		</confirm>
		<prompt public="1" set="method">
			<f a="?message:?default_" v="&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ default_ : "", message : "" }</e></m></meta>
			<haxe_doc>Returns the text entered by the user in a prompt dialog.
		@throws DOMError</haxe_doc>
		</prompt>
		<print public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Opens the Print Dialog to print the current document.
		@throws DOMError</haxe_doc>
		</print>
		<postMessage public="1" set="method">
			<f a="message:targetOrigin:?transfer">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.
		@throws DOMError</haxe_doc>
		</postMessage>
		<captureEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Registers the window to capture all events of the specified type.</haxe_doc>
		</captureEvents>
		<releaseEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the window from trapping events of a specific type.</haxe_doc>
		</releaseEvents>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>Returns the selection object representing the selected item(s).
		@throws DOMError</haxe_doc>
		</getSelection>
		<getComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>Gets computed style for the specified element. Computed style indicates the computed values of all CSS properties of the element.
		@throws DOMError</haxe_doc>
		</getComputedStyle>
		<matchMedia public="1" set="method">
			<f a="query">
				<c path="String"/>
				<c path="js.html.MediaQueryList"/>
			</f>
			<haxe_doc>Returns a `MediaQueryList` object representing the specified media query string.
		@throws DOMError</haxe_doc>
		</matchMedia>
		<moveTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the window to the specified coordinates.
		@throws DOMError</haxe_doc>
		</moveTo>
		<moveBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the current window by a specified amount.
		@throws DOMError</haxe_doc>
		</moveBy>
		<resizeTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Dynamically resizes window.
		@throws DOMError</haxe_doc>
		</resizeTo>
		<resizeBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resizes the current window by a certain amount.
		@throws DOMError</haxe_doc>
		</resizeBy>
		<scroll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the window to a particular place in the document.</haxe_doc>
			<overloads><scroll public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the window to a particular place in the document.</haxe_doc>
</scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls to a particular set of coordinates in the document.</haxe_doc>
			<overloads><scrollTo public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls to a particular set of coordinates in the document.</haxe_doc>
</scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document in the window by the given amount.</haxe_doc>
			<overloads><scrollBy public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the document in the window by the given amount.</haxe_doc>
</scrollBy></overloads>
		</scrollBy>
		<requestAnimationFrame public="1" set="method">
			<f a="callback">
				<f a="">
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Tells the browser that an animation is in progress, requesting that the browser schedule a repaint of the window for the next animation frame.
		@throws DOMError</haxe_doc>
		</requestAnimationFrame>
		<cancelAnimationFrame public="1" set="method">
			<f a="handle">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables you to cancel a callback previously scheduled with `Window.requestAnimationFrame`.
		@throws DOMError</haxe_doc>
		</cancelAnimationFrame>
		<getDefaultComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>Gets default computed style for the specified element, ignoring author stylesheets.
		@throws DOMError</haxe_doc>
		</getDefaultComputedStyle>
		<scrollByLines public="1" set="method">
			<f a="numLines:?options">
				<x path="Int"/>
				<x path="Null"><t path="js.html.ScrollOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document by the given number of lines.</haxe_doc>
		</scrollByLines>
		<scrollByPages public="1" set="method">
			<f a="numPages:?options">
				<x path="Int"/>
				<x path="Null"><t path="js.html.ScrollOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the current document by the specified number of pages.</haxe_doc>
		</scrollByPages>
		<sizeToContent public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sizes the window according to its content.
		@throws DOMError</haxe_doc>
		</sizeToContent>
		<updateCommands public="1" set="method">
			<f a="action:?sel:?reason" v="::0">
				<c path="String"/>
				<c path="js.html.Selection"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reason : 0 }</e></m></meta>
			<haxe_doc>Updates the state of commands of the current chrome window (UI).</haxe_doc>
		</updateCommands>
		<find public="1" set="method">
			<f a="?str:?caseSensitive:?backwards:?wrapAround:?wholeWord:?searchInFrames:?showDialog" v="&quot;&quot;:false:false:false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ showDialog : false, searchInFrames : false, wholeWord : false, wrapAround : false, backwards : false, caseSensitive : false, str : "" }</e></m></meta>
			<haxe_doc>Searches for a given string in a window.
		@throws DOMError</haxe_doc>
		</find>
		<dump public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes a message to the console.</haxe_doc>
		</dump>
		<setResizable public="1" set="method">
			<f a="resizable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggles a user's ability to resize a window.</haxe_doc>
		</setResizable>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Float"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Float"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Float"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Float"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aOffset:aLength:aFormat:aLayout">
				<c path="js.html.ImageElement"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.ImageBitmapFormat"/>
				<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
				<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.VideoElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.Blob"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageData"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasRenderingContext2D"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageBitmap"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
			</overloads>
		</createImageBitmap>
		<fetch public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><fetch public="1" set="method"><f a="input:?init">
	<c path="String"/>
	<x path="Null"><t path="js.html.RequestInit"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></fetch></overloads>
		</fetch>
		<haxe_doc><![CDATA[The `Window` interface represents a window containing a DOM document; the `document` property points to the DOM document loaded in that window.

	Documentation [Window](https://developer.mozilla.org/en-US/docs/Web/API/Window) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Window$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Window>]]></haxe_doc>
		<meta><m n=":native"><e>"Window"</e></m></meta>
	</class>
	<class path="js.html.WorkerGlobalScope" params="" file="/usr/local/lib/haxe/std/js/html/WorkerGlobalScope.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<self public="1" set="null">
			<c path="js.html.WorkerGlobalScope"/>
			<haxe_doc>Returns a reference to the `WorkerGlobalScope` itself. Most of the time it is a specific scope like `DedicatedWorkerGlobalScope`,  `SharedWorkerGlobalScope` or `ServiceWorkerGlobalScope`.</haxe_doc>
		</self>
		<location public="1" set="null">
			<c path="js.html.WorkerLocation"/>
			<haxe_doc>Returns the `WorkerLocation` associated with the worker. It is a specific location object, mostly a subset of the `Location` for browsing scopes, but adapted to workers.</haxe_doc>
		</location>
		<navigator public="1" set="null"><c path="js.html.WorkerNavigator"/></navigator>
		<onerror public="1">
			<f a="::::">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Event"/>
					<c path="String"/>
				</x>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `error` event is raised.</haxe_doc>
		</onerror>
		<onoffline public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `offline` event is raised.</haxe_doc>
		</onoffline>
		<ononline public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `online` event is raised.</haxe_doc>
		</ononline>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Returns the `Performance` associated with the worker. It is a regular performance object, except that only a subset of its property and methods are available to workers.</haxe_doc>
		</performance>
		<crypto public="1" set="null"><c path="js.html.Crypto"/></crypto>
		<origin public="1" set="null"><c path="String"/></origin>
		<isSecureContext public="1" set="null"><x path="Bool"/></isSecureContext>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<caches public="1" set="null"><c path="js.html.CacheStorage"/></caches>
		<importScripts public="1" set="method">
			<f a="urls">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example:` importScripts('foo.js', 'bar.js');`
		@throws DOMError</haxe_doc>
		</importScripts>
		<dump public="1" set="method">
			<f a="?str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows you to write a message to stdout — i.e. in your terminal. This is the same as Firefox's `window.dump`, but for workers.</haxe_doc>
		</dump>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aOffset:aLength:aFormat:aLayout">
				<c path="js.html.ImageElement"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.ImageBitmapFormat"/>
				<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
				<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.VideoElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.Blob"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageData"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasRenderingContext2D"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageBitmap"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
			</overloads>
		</createImageBitmap>
		<fetch public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><fetch public="1" set="method"><f a="input:?init">
	<c path="String"/>
	<x path="Null"><t path="js.html.RequestInit"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></fetch></overloads>
		</fetch>
		<haxe_doc><![CDATA[The `WorkerGlobalScope` interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by `Window` objects — in this case event handlers, the console or the associated `WorkerNavigator` object. Each `WorkerGlobalScope` has its own event loop.

	Documentation [WorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.WorkerLocation" params="" file="/usr/local/lib/haxe/std/js/html/WorkerLocation.hx" extern="1">
		<href public="1" set="null"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1" set="null"><c path="String"/></protocol>
		<host public="1" set="null"><c path="String"/></host>
		<hostname public="1" set="null"><c path="String"/></hostname>
		<port public="1" set="null"><c path="String"/></port>
		<pathname public="1" set="null"><c path="String"/></pathname>
		<search public="1" set="null"><c path="String"/></search>
		<hash public="1" set="null"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `WorkerLocation` interface defines the absolute location of the script executed by the `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.location` property obtained by calling `self.location`.

	Documentation [WorkerLocation](https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerLocation"</e></m></meta>
	</class>
	<class path="js.html.WorkerNavigator" params="" file="/usr/local/lib/haxe/std/js/html/WorkerNavigator.hx" extern="1">
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<storage public="1" set="null"><c path="js.html.StorageManager"/></storage>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<haxe_doc><![CDATA[The `WorkerNavigator` interface represents a subset of the `Navigator` interface allowed to be accessed from a `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.navigator` property obtained by calling `window.self.navigator`.

	Documentation [WorkerNavigator](https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerNavigator"</e></m></meta>
	</class>
	<class path="js.html.XMLHttpRequestEventTarget" params="" file="/usr/local/lib/haxe/std/js/html/XMLHttpRequestEventTarget.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onload public="1"><x path="haxe.Function"/></onload>
		<ontimeout public="1"><x path="haxe.Function"/></ontimeout>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<meta><m n=":native"><e>"XMLHttpRequestEventTarget"</e></m></meta>
	</class>
	<class path="js.html.XMLHttpRequest" params="" file="/usr/local/lib/haxe/std/js/html/XMLHttpRequest.hx" extern="1">
		<extends path="js.html.XMLHttpRequestEventTarget"/>
		<UNSENT public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UNSENT>
		<OPENED public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</OPENED>
		<HEADERS_RECEIVED public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HEADERS_RECEIVED>
		<LOADING public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LOADING>
		<DONE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DONE>
		<onreadystatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` that is called whenever the `readyState` attribute changes.</haxe_doc>
		</onreadystatechange>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned short`, the state of the request.</haxe_doc>
		</readyState>
		<timeout public="1">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long` representing the number of milliseconds a request can take before automatically being terminated.</haxe_doc>
		</timeout>
		<withCredentials public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that indicates whether or not cross-site `Access-Control` requests should be made using credentials such as cookies or authorization headers.</haxe_doc>
		</withCredentials>
		<upload public="1" set="null">
			<c path="js.html.XMLHttpRequestUpload"/>
			<haxe_doc>Is an `XMLHttpRequestUpload`, representing the upload process.</haxe_doc>
		</upload>
		<responseURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the serialized URL of the response or the empty string if the URL is null.</haxe_doc>
		</responseURL>
		<status public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned short` with the status of the response of the request.</haxe_doc>
		</status>
		<statusText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the response string returned by the HTTP server. Unlike `XMLHTTPRequest.status`, this includes the entire text of the response message ("`200 OK`", for example).</haxe_doc>
		</statusText>
		<responseType public="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<haxe_doc>Is an enumerated value that defines the response type.</haxe_doc>
		</responseType>
		<response public="1" set="null">
			<d/>
			<haxe_doc>Returns an `ArrayBuffer`, `Blob`, `Document`, JavaScript object, or a `DOMString`, depending on the value of `XMLHttpRequest.responseType`. that contains the response entity body.</haxe_doc>
		</response>
		<responseText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that contains the response to the request as text, or `null` if the request was unsuccessful or has not yet been sent.</haxe_doc>
		</responseText>
		<responseXML public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document` containing the response to the request, or `null` if the request was unsuccessful, has not yet been sent, or cannot be parsed as XML or HTML.</haxe_doc>
		</responseXML>
		<open public="1" set="method">
			<f a="method:url:async:?user:?password">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use `openRequest()` instead.
		@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="method:url">
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use `openRequest()` instead.
		@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<setRequestHeader public="1" set="method">
			<f a="header:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of an HTTP request header. You must call `setRequestHeader()`after `open()`, but before `send()`.
		@throws DOMError</haxe_doc>
		</setRequestHeader>
		<send public="1" set="method">
			<f a="?body">
				<c path="js.html.HTMLDocument"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.Blob"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.FormData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.URLSearchParams"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
			</overloads>
		</send>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Aborts the request if it has already been sent.
		@throws DOMError</haxe_doc>
		</abort>
		<getResponseHeader public="1" set="method">
			<f a="header">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the string containing the text of the specified header, or `null` if either the response has not yet been received or the header doesn't exist in the response.
		@throws DOMError</haxe_doc>
		</getResponseHeader>
		<getAllResponseHeaders public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns all the response headers, separated by CRLF, as a string, or `null` if no response has been received.
		@throws DOMError</haxe_doc>
		</getAllResponseHeaders>
		<overrideMimeType public="1" set="method">
			<f a="mime">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Overrides the MIME type returned by the server.
		@throws DOMError</haxe_doc>
		</overrideMimeType>
		<new public="1" set="method">
			<f a="ignored">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?params">
		<d/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[Use `XMLHttpRequest` (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.

	Documentation [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest>]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"XMLHttpRequest"</e></m>
		</meta>
	</class>
	<abstract path="js.html.XMLHttpRequestResponseType" params="" file="/usr/local/lib/haxe/std/js/html/XMLHttpRequestResponseType.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `XMLHttpRequestResponseType` type is an enumerated set of strings which are used to specify the type of data contained in the `response` of an `XMLHttpRequest`.

	Documentation [XMLHttpRequestResponseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._XMLHttpRequestResponseType.XMLHttpRequestResponseType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/XMLHttpRequestResponseType.hx" private="1" module="js.html.XMLHttpRequestResponseType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.XMLHttpRequestUpload" params="" file="/usr/local/lib/haxe/std/js/html/XMLHttpRequestUpload.hx" extern="1">
		<extends path="js.html.XMLHttpRequestEventTarget"/>
		<meta><m n=":native"><e>"XMLHttpRequestUpload"</e></m></meta>
	</class>
	<class path="js.html.XPathExpression" params="" file="/usr/local/lib/haxe/std/js/html/XPathExpression.hx" extern="1">
		<evaluate public="1" set="method">
			<f a="contextNode:?type:?result" v=":0:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>provide a context node/document, `XPathResult` constant, and `XPathResult` to store the query or null to return a new XPathResult.
		@throws DOMError</haxe_doc>
		</evaluate>
		<haxe_doc><![CDATA[An `XPathExpression` is a compiled XPath query returned from `document.createExpression()`. It has a method `evaluate()` which can be used to execute the compiled XPath.

	Documentation [XPathExpression](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathExpression"</e></m></meta>
	</class>
	<typedef path="js.html.XPathNSResolver" params="" file="/usr/local/lib/haxe/std/js/html/XPathNSResolver.hx"><a><lookupNamespaceURI set="method"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></lookupNamespaceURI></a></typedef>
	<class path="js.html.XPathResult" params="" file="/usr/local/lib/haxe/std/js/html/XPathResult.hx" extern="1">
		<ANY_TYPE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ANY_TYPE>
		<NUMBER_TYPE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NUMBER_TYPE>
		<STRING_TYPE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STRING_TYPE>
		<BOOLEAN_TYPE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BOOLEAN_TYPE>
		<UNORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</UNORDERED_NODE_ITERATOR_TYPE>
		<ORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ORDERED_NODE_ITERATOR_TYPE>
		<UNORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</UNORDERED_NODE_SNAPSHOT_TYPE>
		<ORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ORDERED_NODE_SNAPSHOT_TYPE>
		<ANY_UNORDERED_NODE_TYPE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ANY_UNORDERED_NODE_TYPE>
		<FIRST_ORDERED_NODE_TYPE public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</FIRST_ORDERED_NODE_TYPE>
		<resultType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>integer (short)</haxe_doc>
		</resultType>
		<numberValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>float</haxe_doc>
		</numberValue>
		<stringValue public="1" set="null">
			<c path="String"/>
			<haxe_doc>String</haxe_doc>
		</stringValue>
		<booleanValue public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>boolean</haxe_doc>
		</booleanValue>
		<singleNodeValue public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Node</haxe_doc>
		</singleNodeValue>
		<invalidIteratorState public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>boolean</haxe_doc>
		</invalidIteratorState>
		<snapshotLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Integer</haxe_doc>
		</snapshotLength>
		<iterateNext public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>...
		@throws DOMError</haxe_doc>
		</iterateNext>
		<snapshotItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>...
		@throws DOMError</haxe_doc>
		</snapshotItem>
		<haxe_doc><![CDATA[The `XPathResult` interface represents the results generated by evaluating an XPath 1.0 expression within the context of a given node.

	Documentation [XPathResult](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathResult>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathResult"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeyError" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeyError.hx" extern="1">
		<extends path="js.html.Event"/>
		<systemCode public="1" set="null"><x path="Int"/></systemCode>
		<meta><m n=":native"><e>"MediaKeyError"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeySession" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySession.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<error public="1" set="null"><c path="js.html.eme.MediaKeyError"/></error>
		<sessionId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains a unique string generated by the CDM for the current media object and its associated keys or licenses.</haxe_doc>
		</sessionId>
		<expiration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time after which the keys in the current session can no longer be used to decrypt media data, or `NaN` if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window.</haxe_doc>
		</expiration>
		<closed public="1" set="null">
			<c path="js.lib.Promise"><x path="Void"/></c>
			<haxe_doc>Returns a `Promise` signaling when a `MediaKeySession` closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data. </haxe_doc>
		</closed>
		<keyStatuses public="1" set="null">
			<c path="js.html.eme.MediaKeyStatusMap"/>
			<haxe_doc>Contains a reference to a read-only `MediaKeyStatusMap` of the current session's keys and their statuses.</haxe_doc>
		</keyStatuses>
		<onkeystatuseschange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when there has been a change in the keys in a session or their statuses.</haxe_doc>
		</onkeystatuseschange>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when the content decryption module has generated a message for the session.</haxe_doc>
		</onmessage>
		<generateRequest public="1" set="method">
			<f a="initDataType:initData">
				<c path="String"/>
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` after generating a media request based on initialization data.</haxe_doc>
			<overloads><generateRequest public="1" set="method">
	<f a="initDataType:initData">
		<c path="String"/>
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` after generating a media request based on initialization data.</haxe_doc>
</generateRequest></overloads>
		</generateRequest>
		<load public="1" set="method">
			<f a="sessionId">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to a boolean value after loading data for a specified session object. </haxe_doc>
		</load>
		<update public="1" set="method">
			<f a="response">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` after loading messages and licenses to the CDM.</haxe_doc>
			<overloads><update public="1" set="method">
	<f a="response">
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` after loading messages and licenses to the CDM.</haxe_doc>
</update></overloads>
		</update>
		<close public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Returns a `Promise` after notifying the current media session is no longer needed and that the CDM should release any resources associated with this object and close it.</haxe_doc>
		</close>
		<remove public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Returns a `Promise` after removing any session data associated with the current object.</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[The `MediaKeySession` interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).

	Documentation [MediaKeySession](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeySession"</e></m></meta>
	</class>
	<abstract path="js.html.eme.MediaKeySessionType" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySessionType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeySessionType.MediaKeySessionType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySessionType.hx" private="1" module="js.html.eme.MediaKeySessionType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.eme.MediaKeyStatusMap" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeyStatusMap.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of key/value pars in the status map.</haxe_doc>
		</size>
		<has public="1" set="method">
			<f a="keyId">
				<c path="js.lib.ArrayBufferView"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean asserting whether a value has been associated with the given key.</haxe_doc>
			<overloads><has public="1" set="method">
	<f a="keyId">
		<c path="js.lib.ArrayBuffer"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Returns a boolean asserting whether a value has been associated with the given key.</haxe_doc>
</has></overloads>
		</has>
		<get public="1" set="method">
			<f a="keyId">
				<c path="js.lib.ArrayBufferView"/>
				<d/>
			</f>
			<haxe_doc>Returns the value associated with the given key, or `undefined` if there is none.
		@throws DOMError</haxe_doc>
			<overloads><get public="1" set="method">
	<f a="keyId">
		<c path="js.lib.ArrayBuffer"/>
		<d/>
	</f>
	<haxe_doc>Returns the value associated with the given key, or `undefined` if there is none.
		@throws DOMError</haxe_doc>
</get></overloads>
		</get>
		<entries public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing an array of `[key, value]` for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing keys for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing values for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `callback` once for each key-value pair in the status map, in insertion order. If `argument` is present it will be passed to the callback.
		@throws DOMError</haxe_doc>
		</forEach>
		<haxe_doc><![CDATA[The `MediaKeyStatusMap` interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.

	Documentation [MediaKeyStatusMap](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeyStatusMap"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeySystemAccess" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySystemAccess.hx" extern="1">
		<keySystem public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` identifying the key system being used.</haxe_doc>
		</keySystem>
		<getConfiguration public="1" set="method">
			<f a=""><t path="js.html.eme.MediaKeySystemConfiguration"/></f>
			<haxe_doc>Returns a `MediaKeySystemConfiguration` object with the supported combination of configuration options.</haxe_doc>
		</getConfiguration>
		<createMediaKeys public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.eme.MediaKeys"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to a new `MediaKeys` object.</haxe_doc>
		</createMediaKeys>
		<haxe_doc><![CDATA[The `MediaKeySystemAccess` interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the `Navigator.requestMediaKeySystemAccess` method.

	Documentation [MediaKeySystemAccess](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeySystemAccess"</e></m></meta>
	</class>
	<typedef path="js.html.eme.MediaKeySystemConfiguration" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySystemConfiguration.hx">
		<a>
			<videoCapabilities>
				<x path="Null"><c path="Array"><t path="js.html.eme.MediaKeySystemMediaCapability"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported video type and capability pairs.</haxe_doc>
			</videoCapabilities>
			<sessionTypes>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</sessionTypes>
			<persistentState>
				<x path="Null"><x path="js.html.eme.MediaKeysRequirement"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Indicates whether the ability to persist state is required.</haxe_doc>
			</persistentState>
			<label>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</label>
			<initDataTypes>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data.</haxe_doc>
			</initDataTypes>
			<distinctiveIdentifier>
				<x path="Null"><x path="js.html.eme.MediaKeysRequirement"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Indicates whether a persistent distinctive identifier is required.</haxe_doc>
			</distinctiveIdentifier>
			<audioCapabilities>
				<x path="Null"><c path="Array"><t path="js.html.eme.MediaKeySystemMediaCapability"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported audio type and capability pairs.</haxe_doc>
			</audioCapabilities>
		</a>
		<haxe_doc><![CDATA[The `MediaKeySystemConfiguration` interface Encrypted Media Extensions API provides configuration information about the media key system.

	Documentation [MediaKeySystemConfiguration](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.eme.MediaKeySystemMediaCapability" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySystemMediaCapability.hx"><a>
	<robustness>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</robustness>
	<contentType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contentType>
</a></typedef>
	<class path="js.html.eme.MediaKeys" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeys.hx" extern="1">
		<keySystem public="1" set="null"><c path="String"/></keySystem>
		<createSession public="1" set="method">
			<f a="?sessionType" v="TEMPORARY">
				<x path="js.html.eme.MediaKeySessionType"/>
				<c path="js.html.eme.MediaKeySession"/>
			</f>
			<meta><m n=":value"><e>{ sessionType : TEMPORARY }</e></m></meta>
			<haxe_doc>Returns a new `MediaKeySession` object, which represents a context for message exchange with a content decryption module (CDM).
		@throws DOMError</haxe_doc>
		</createSession>
		<setServerCertificate public="1" set="method">
			<f a="serverCertificate">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` to a server certificate to be used to encrypt messages to the license server.</haxe_doc>
			<overloads><setServerCertificate public="1" set="method">
	<f a="serverCertificate">
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` to a server certificate to be used to encrypt messages to the license server.</haxe_doc>
</setServerCertificate></overloads>
		</setServerCertificate>
		<haxe_doc><![CDATA[The `MediaKeys` interface of EncryptedMediaExtensions API the represents a set of keys that an associated `HTMLMediaElement` can use for decryption of media data during playback.

	Documentation [MediaKeys](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeys"</e></m></meta>
	</class>
	<abstract path="js.html.eme.MediaKeysRequirement" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeysRequirement.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeysRequirement.MediaKeysRequirement_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeysRequirement.hx" private="1" module="js.html.eme.MediaKeysRequirement" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Cursor" params="" file="/usr/local/lib/haxe/std/js/html/idb/Cursor.hx" extern="1">
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<c path="js.html.idb.Index"/>
			</x>
			<haxe_doc>Returns the `IDBObjectStore` or `IDBIndex` that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.</haxe_doc>
		</source>
		<direction public="1" set="null">
			<x path="js.html.idb.CursorDirection"/>
			<haxe_doc>Returns the direction of traversal of the cursor. See Constants for possible values.</haxe_doc>
		</direction>
		<key public="1" set="null">
			<d/>
			<haxe_doc>Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to `undefined`. The cursor's key can be any data type.</haxe_doc>
		</key>
		<primaryKey public="1" set="null">
			<d/>
			<haxe_doc>Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to `undefined`. The cursor's primary key can be any data type.</haxe_doc>
		</primaryKey>
		<update public="1" set="method">
			<f a="value">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, updates the value at the current position of the cursor in the object store. This can be used to update specific records.
		@throws DOMError</haxe_doc>
		</update>
		<advance public="1" set="method">
			<f a="count">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the number times a cursor should move its position forward.
		@throws DOMError</haxe_doc>
		</advance>
		<continue_ public="1" set="method">
			<f a="?key">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"continue"</e></m></meta>
			<haxe_doc>Advances the cursor to the next position along its direction, to the item whose key matches the optional `key` parameter.
		@throws DOMError</haxe_doc>
		</continue_>
		<continuePrimaryKey public="1" set="method">
			<f a="key:primaryKey">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the cursor to the given index key and primary key given as arguments.
		@throws DOMError</haxe_doc>
		</continuePrimaryKey>
		<delete public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. This can be used to delete specific records.
		@throws DOMError</haxe_doc>
		</delete>
		<haxe_doc><![CDATA[The `IDBCursor` interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.

	Documentation [IDBCursor](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBCursor"</e></m></meta>
	</class>
	<abstract path="js.html.idb.CursorDirection" params="" file="/usr/local/lib/haxe/std/js/html/idb/CursorDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._CursorDirection.CursorDirection_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/idb/CursorDirection.hx" private="1" module="js.html.idb.CursorDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Database" params="" file="/usr/local/lib/haxe/std/js/html/idb/Database.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` that contains the name of the connected database.</haxe_doc>
		</name>
		<version public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.</haxe_doc>
		</version>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A `DOMStringList` that contains a list of the names of the object stores currently in the connected database.</haxe_doc>
		</objectStoreNames>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access of the database is aborted.</haxe_doc>
		</onabort>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when the `close` event occurs; this happens when the database is unexpectedly closed, such as during application shutdown.</haxe_doc>
		</onclose>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access to the database fails.</haxe_doc>
		</onerror>
		<onversionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when a database structure change (`IDBOpenDBRequest.onupgradeneeded` event or` ``IDBFactory.deleteDatabase()` was requested elsewhere (most probably in another window/tab on the same computer). This is different from the version change transaction (see `IDBVersionChangeEvent`), but it is related.</haxe_doc>
		</onversionchange>
		<createObjectStore public="1" set="method">
			<f a="name:?optionalParameters">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.ObjectStoreParameters"/></x>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>Creates and returns a new object store or index.
		@throws DOMError</haxe_doc>
		</createObjectStore>
		<deleteObjectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroys the object store with the given name in the connected database, along with any indexes that reference it.
		@throws DOMError</haxe_doc>
		</deleteObjectStore>
		<transaction public="1" set="method">
			<f a="storeNames:?mode" v=":READONLY">
				<c path="String"/>
				<x path="js.html.idb.TransactionMode"/>
				<c path="js.html.idb.Transaction"/>
			</f>
			<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
			<haxe_doc>Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.
		@throws DOMError</haxe_doc>
			<overloads><transaction public="1" set="method">
	<f a="storeNames:?mode" v=":READONLY">
		<c path="Array"><c path="String"/></c>
		<x path="js.html.idb.TransactionMode"/>
		<c path="js.html.idb.Transaction"/>
	</f>
	<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
	<haxe_doc>Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.
		@throws DOMError</haxe_doc>
</transaction></overloads>
		</transaction>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Returns immediately and closes the connection to a database in a separate thread.</haxe_doc>
		</close>
		<createMutableFile public="1" set="method">
			<f a="name:?type">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createMutableFile>
		<haxe_doc><![CDATA[The `IDBDatabase` interface of the IndexedDB API provides a connection to a database; you can use an `IDBDatabase` object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.

	Documentation [IDBDatabase](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBDatabase"</e></m></meta>
	</class>
	<class path="js.html.idb.Factory" params="" file="/usr/local/lib/haxe/std/js/html/idb/Factory.hx" extern="1">
		<open public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.OpenDBOptions"/></x>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="name:version">
		<c path="String"/>
		<x path="Int"/>
		<c path="js.html.idb.OpenDBRequest"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<deleteDatabase public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.OpenDBOptions"/></x>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteDatabase>
		<cmp public="1" set="method">
			<f a="first:second">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</cmp>
		<haxe_doc><![CDATA[In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBFactory](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBFactory"</e></m></meta>
	</class>
	<class path="js.html.idb.Index" params="" file="/usr/local/lib/haxe/std/js/html/idb/Index.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this index.</haxe_doc>
		</name>
		<objectStore public="1" set="null">
			<c path="js.html.idb.ObjectStore"/>
			<haxe_doc>The name of the object store referenced by this index.</haxe_doc>
		</objectStore>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this index. If null, this index is not auto-populated.</haxe_doc>
		</keyPath>
		<multiEntry public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Affects how the index behaves when the result of evaluating the index's key path yields an array. If `true`, there is one record in the index for each item in an array of keys. If `false`, then there is one record for each key that is an array.</haxe_doc>
		</multiEntry>
		<unique public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>If `true`, this index does not allow duplicate values for a key.</haxe_doc>
		</unique>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range.
		@throws DOMError</haxe_doc>
		</openCursor>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index.
		@throws DOMError</haxe_doc>
		</openKeyCursor>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, finds either the given key or the primary key, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getKey>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and in a separate thread, returns the number of records within a key range.
		@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, in a separate thread, finds all matching values in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, in a separate thread, finds all matching keys in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getAllKeys>
		<haxe_doc><![CDATA[`IDBIndex` interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.

	Documentation [IDBIndex](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBIndex"</e></m></meta>
	</class>
	<typedef path="js.html.idb.IndexParameters" params="" file="/usr/local/lib/haxe/std/js/html/idb/IndexParameters.hx"><a>
	<unique>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</unique>
	<multiEntry>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</multiEntry>
	<locale>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</locale>
</a></typedef>
	<class path="js.html.idb.ObjectStore" params="" file="/usr/local/lib/haxe/std/js/html/idb/ObjectStore.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this object store.</haxe_doc>
		</name>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this object store. If this attribute is `null`, the application must provide a key for each modification operation.</haxe_doc>
		</keyPath>
		<indexNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A list of the names of indexes on objects in this object store.</haxe_doc>
		</indexNames>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The `IDBTransaction` object to which this object store belongs.</haxe_doc>
		</transaction>
		<autoIncrement public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The value of the auto increment flag for this object store.</haxe_doc>
		</autoIncrement>
		<put public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a structured clone of the `value`, and stores the cloned value in the object store. This is for updating existing records in an object store when the transaction's mode is `readwrite`.
		@throws DOMError</haxe_doc>
		</put>
		<add public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a structured clone of the `value`, and stores the cloned value in the object store. This is for adding new records to an object store.
		@throws DOMError</haxe_doc>
		</add>
		<delete public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>returns an `IDBRequest` object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store.
		@throws DOMError</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns the store object store selected by the specified key. This is for retrieving specific records from an object store.
		@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter.
		@throws DOMError</haxe_doc>
		</getKey>
		<clear public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>Creates and immediately returns an `IDBRequest` object, and clears this object store in a separate thread. This is for deleting all current records out of an object store.
		@throws DOMError</haxe_doc>
		</clear>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursorWithValue` object. Used for iterating through an object store by primary key with a cursor.
		@throws DOMError</haxe_doc>
		</openCursor>
		<createIndex public="1" set="method">
			<f a="name:keyPath:?optionalParameters">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.IndexParameters"/></x>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.
		@throws DOMError</haxe_doc>
			<overloads><createIndex public="1" set="method">
	<f a="name:keyPath:?optionalParameters">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.html.idb.IndexParameters"/></x>
		<c path="js.html.idb.Index"/>
	</f>
	<haxe_doc>Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.
		@throws DOMError</haxe_doc>
</createIndex></overloads>
		</createIndex>
		<index public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor.
		@throws DOMError</haxe_doc>
		</index>
		<deleteIndex public="1" set="method">
			<f a="indexName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroys the specified index in the connected database, used during a version upgrade.
		@throws DOMError</haxe_doc>
		</deleteIndex>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns the total number of records that match the provided key or `IDBKeyRange`. If no arguments are provided, it returns the total number of records in the store.
		@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.
		@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.
		@throws DOMError</haxe_doc>
		</getAllKeys>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursor`. Used for iterating through an object store with a key.
		@throws DOMError</haxe_doc>
		</openKeyCursor>
		<haxe_doc><![CDATA[This example shows a variety of different uses of object stores, from updating the data structure with `IDBObjectStore.createIndex` inside an `onupgradeneeded` function, to adding a new item to our object store with `IDBObjectStore.add`. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBObjectStore](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBObjectStore"</e></m></meta>
	</class>
	<typedef path="js.html.idb.ObjectStoreParameters" params="" file="/usr/local/lib/haxe/std/js/html/idb/ObjectStoreParameters.hx"><a>
	<keyPath>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</keyPath>
	<autoIncrement>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</autoIncrement>
</a></typedef>
	<typedef path="js.html.idb.OpenDBOptions" params="" file="/usr/local/lib/haxe/std/js/html/idb/OpenDBOptions.hx"><a>
	<version>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</version>
	<storage>
		<x path="Null"><x path="js.html.StorageType"/></x>
		<meta><m n=":optional"/></meta>
	</storage>
</a></typedef>
	<class path="js.html.idb.Request" params="" file="/usr/local/lib/haxe/std/js/html/idb/Request.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<result public="1" set="null">
			<d/>
			<haxe_doc>Returns the result of the request. If the the request failed and the result is not available, an InvalidStateError exception is thrown.</haxe_doc>
		</result>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>Returns a `DOMException` in the event of an unsuccessful request, indicating what went wrong.</haxe_doc>
		</error>
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.idb.Index"/>
					<c path="js.html.idb.Cursor"/>
				</x>
			</x>
			<haxe_doc>The source of the request, such as an `IDBIndex` or an `IDBObjectStore`. If no source exists (such as when calling `IDBFactory.open`), it returns null.</haxe_doc>
		</source>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The transaction for the request. This property can be null for certain requests, for example those returned from `IDBFactory.open` unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return).</haxe_doc>
		</transaction>
		<readyState public="1" set="null">
			<x path="js.html.idb.RequestReadyState"/>
			<haxe_doc>The state of the request. Every request starts in the `pending` state. The state changes to `done` when the request completes successfully or when an error occurs.</haxe_doc>
		</readyState>
		<onsuccess public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the success event.</haxe_doc>
		</onsuccess>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the error event.</haxe_doc>
		</onerror>
		<haxe_doc><![CDATA[The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the `IDBRequest` instance.

	Documentation [IDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBRequest"</e></m></meta>
	</class>
	<class path="js.html.idb.OpenDBRequest" params="" file="/usr/local/lib/haxe/std/js/html/idb/OpenDBRequest.hx" extern="1">
		<extends path="js.html.idb.Request"/>
		<onblocked public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the blocked event. This event is triggered when the `upgradeneeded` event should be triggered because of a version change but the database is still in use (i.e. not closed) somewhere, even after the `versionchange` event was sent.</haxe_doc>
		</onblocked>
		<onupgradeneeded public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `upgradeneeded` event, fired when a database of a bigger version number than the existing stored database is loaded.</haxe_doc>
		</onupgradeneeded>
		<haxe_doc><![CDATA[Also inherits methods from its parents `IDBRequest` and `EventTarget`.

	Documentation [IDBOpenDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBOpenDBRequest"</e></m></meta>
	</class>
	<abstract path="js.html.idb.RequestReadyState" params="" file="/usr/local/lib/haxe/std/js/html/idb/RequestReadyState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._RequestReadyState.RequestReadyState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/idb/RequestReadyState.hx" private="1" module="js.html.idb.RequestReadyState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Transaction" params="" file="/usr/local/lib/haxe/std/js/html/idb/Transaction.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<mode public="1" set="null">
			<x path="js.html.idb.TransactionMode"/>
			<haxe_doc>The mode for isolating access to data in the object stores that are in the scope of the transaction. For possible values, see the Constants section below. The default value is `readonly`.</haxe_doc>
		</mode>
		<db public="1" set="null">
			<c path="js.html.idb.Database"/>
			<haxe_doc>The database connection with which this transaction is associated.</haxe_doc>
		</db>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>Returns a `DOMException` indicating the type of error that occured when there is an unsuccessful transaction. This property is `null` if the transaction is not finished, is finished and successfully committed, or was aborted with `IDBTransaction.abort` function.</haxe_doc>
		</error>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `abort` event, fired when the transaction is aborted. This can happen due to:
		 
		  bad requests, e.g. trying to add() the same key twice, or put() with the same index key with a uniqueness constraint and there is no error handler on the request to call preventDefault() on the event,
		  an explicit abort() call from script
		  uncaught exception in request's success/error handler,
		  an I/O error (actual failure to write to disk, e.g. disk detached, or other OS/hardware failure), or
		  quota exceeded.</haxe_doc>
		</onabort>
		<oncomplete public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `complete` event, thrown when the transaction completes successfully.</haxe_doc>
		</oncomplete>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `error` event, thrown when the transaction fails to complete.</haxe_doc>
		</onerror>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a `DOMStringList` of the names of `IDBObjectStore` objects.</haxe_doc>
		</objectStoreNames>
		<objectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</objectStore>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<haxe_doc><![CDATA[Note that as of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see bug 1112702.) Previously in a `readwrite` transaction `IDBTransaction.oncomplete` was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the `complete` event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The `complete` event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further.

	Documentation [IDBTransaction](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBTransaction"</e></m></meta>
	</class>
	<abstract path="js.html.idb.TransactionMode" params="" file="/usr/local/lib/haxe/std/js/html/idb/TransactionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._TransactionMode.TransactionMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/idb/TransactionMode.hx" private="1" module="js.html.idb.TransactionMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.midi.MIDIAccess" params="" file="/usr/local/lib/haxe/std/js/html/midi/MIDIAccess.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<inputs public="1" set="null">
			<c path="js.html.midi.MIDIInputMap"/>
			<haxe_doc>Returns an instance of `MIDIInputMap` which provides access to any available MIDI input ports.</haxe_doc>
		</inputs>
		<outputs public="1" set="null">
			<c path="js.html.midi.MIDIOutputMap"/>
			<haxe_doc>Returns an instance of `MIDIOutputMap` which provides access to any available MIDI output ports.</haxe_doc>
		</outputs>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Called whenever a new MIDI port is added or an existing port changes state.</haxe_doc>
		</onstatechange>
		<sysexEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance.</haxe_doc>
		</sysexEnabled>
		<haxe_doc><![CDATA[The `MIDIAccess` interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.

	Documentation [MIDIAccess](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIAccess"</e></m></meta>
	</class>
	<class path="js.html.midi.MIDIInputMap" params="" file="/usr/local/lib/haxe/std/js/html/midi/MIDIInputMap.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `MIDIInputMap` read-only interface of the Web MIDI API provides a `Map`-like interface to the currently available MIDI input ports. Though it works generally like a map, because it is read-only it does not contain `clear()`, `delete()`, or `set()` functions.

	Documentation [MIDIInputMap](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIInputMap"</e></m></meta>
	</class>
	<typedef path="js.html.midi.MIDIOptions" params="" file="/usr/local/lib/haxe/std/js/html/midi/MIDIOptions.hx"><a>
	<sysex>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</sysex>
	<software>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</software>
</a></typedef>
	<class path="js.html.midi.MIDIOutputMap" params="" file="/usr/local/lib/haxe/std/js/html/midi/MIDIOutputMap.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `MIDIOutputMap` read-only interface of the Web MIDI API provides a `Map`-like interface to the currently available MIDI output ports. Although it works like a map, because it is read-only, it does not contain `clear()`, `delete()`, or `set()` functions.

	Documentation [MIDIOutputMap](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIOutputMap"</e></m></meta>
	</class>
	<abstract path="js.html.push.PushEncryptionKeyName" params="" file="/usr/local/lib/haxe/std/js/html/push/PushEncryptionKeyName.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.push._PushEncryptionKeyName.PushEncryptionKeyName_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/push/PushEncryptionKeyName.hx" private="1" module="js.html.push.PushEncryptionKeyName" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.push.PushManager" params="" file="/usr/local/lib/haxe/std/js/html/push/PushManager.hx" extern="1">
		<subscribe public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.push.PushSubscriptionOptionsInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.push.PushSubscription"/></c>
			</f>
			<haxe_doc>Subscribes to a push service. It returns a `Promise` that resolves to a `PushSubscription` object containing details of a push subscription. A new push subscription is created if the current service worker does not have an existing subscription.
		@throws DOMError</haxe_doc>
		</subscribe>
		<getSubscription public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.push.PushSubscription"/></c></f>
			<haxe_doc>Retrieves an existing push subscription. It returns a `Promise` that resolves to a `PushSubscription` object containing details of an existing subscription. If no existing subscription exists, this resolves to a `null` value.
		@throws DOMError</haxe_doc>
		</getSubscription>
		<permissionState public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.push.PushSubscriptionOptionsInit"/></x>
				<c path="js.lib.Promise"><x path="js.html.push.PushPermissionState"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to the permission state of the current `PushManager`, which will be one of `'granted'`, `'denied'`, or `'prompt'`.
		@throws DOMError</haxe_doc>
		</permissionState>
		<new public="1" set="method">
			<f a="scope">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushManager` interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.

	Documentation [PushManager](https://developer.mozilla.org/en-US/docs/Web/API/PushManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushManager>]]></haxe_doc>
		<meta><m n=":native"><e>"PushManager"</e></m></meta>
	</class>
	<abstract path="js.html.push.PushPermissionState" params="" file="/usr/local/lib/haxe/std/js/html/push/PushPermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.push._PushPermissionState.PushPermissionState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/push/PushPermissionState.hx" private="1" module="js.html.push.PushPermissionState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.push.PushSubscription" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscription.hx" extern="1">
		<endpoint public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` containing the endpoint associated with the push subscription.</haxe_doc>
		</endpoint>
		<options public="1" set="null">
			<c path="js.html.push.PushSubscriptionOptions"/>
			<haxe_doc>An object containing the options used to create the subscription.</haxe_doc>
		</options>
		<getKey public="1" set="method">
			<f a="name">
				<x path="js.html.push.PushEncryptionKeyName"/>
				<c path="js.lib.ArrayBuffer"/>
			</f>
			<haxe_doc>Returns an `ArrayBuffer` which contains the client's public key, which can then be sent to a server and used in encrypting push message data.
		@throws DOMError</haxe_doc>
		</getKey>
		<unsubscribe public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Starts the asynchronous process of unsubscribing from the push service, returning a `Promise` that resolves to a `Boolean` when the current subscription is successfully unregistered.
		@throws DOMError</haxe_doc>
		</unsubscribe>
		<toJSON public="1" set="method">
			<f a=""><t path="js.html.push.PushSubscriptionJSON"/></f>
			<haxe_doc>Standard serializer — returns a JSON representation of the subscription properties.
		@throws DOMError</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="initDict">
				<t path="js.html.push.PushSubscriptionInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushSubscription` interface of the Push API provides a subcription's URL endpoint and allows unsubscription from a push service.

	Documentation [PushSubscription](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription>]]></haxe_doc>
		<meta><m n=":native"><e>"PushSubscription"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushSubscriptionInit" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscriptionInit.hx"><a>
	<scope><c path="String"/></scope>
	<p256dhKey>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</p256dhKey>
	<endpoint><c path="String"/></endpoint>
	<authSecret>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</authSecret>
	<appServerKey>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.lib.ArrayBufferView"/>
	<c path="js.lib.ArrayBuffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</appServerKey>
</a></typedef>
	<typedef path="js.html.push.PushSubscriptionJSON" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscriptionJSON.hx"><a>
	<keys>
		<x path="Null"><t path="js.html.push.PushSubscriptionKeys"/></x>
		<meta><m n=":optional"/></meta>
	</keys>
	<endpoint>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</endpoint>
</a></typedef>
	<typedef path="js.html.push.PushSubscriptionKeys" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscriptionKeys.hx"><a>
	<p256dh>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</p256dh>
	<auth>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</auth>
</a></typedef>
	<class path="js.html.push.PushSubscriptionOptions" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscriptionOptions.hx" extern="1">
		<applicationServerKey public="1" set="null"><c path="js.lib.ArrayBuffer"/></applicationServerKey>
		<meta><m n=":native"><e>"PushSubscriptionOptions"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushSubscriptionOptionsInit" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscriptionOptionsInit.hx"><a><applicationServerKey>
	<x path="Null"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<c path="String"/>
</x></x>
	<meta><m n=":optional"/></meta>
</applicationServerKey></a></typedef>
	<class path="js.html.svg.Angle" params="" file="/usr/local/lib/haxe/std/js/html/svg/Angle.hx" extern="1">
		<SVG_ANGLETYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>Some unknown type of value.</haxe_doc>
		</SVG_ANGLETYPE_UNKNOWN>
		<SVG_ANGLETYPE_UNSPECIFIED public="1" get="inline" set="null" expr="1" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>A unitless `number` interpreted as a value in degrees.</haxe_doc>
		</SVG_ANGLETYPE_UNSPECIFIED>
		<SVG_ANGLETYPE_DEG public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
			<haxe_doc>An `angle` with a `deg` unit.</haxe_doc>
		</SVG_ANGLETYPE_DEG>
		<SVG_ANGLETYPE_RAD public="1" get="inline" set="null" expr="3" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
			<haxe_doc>An `angle` with a `rad` unit.</haxe_doc>
		</SVG_ANGLETYPE_RAD>
		<SVG_ANGLETYPE_GRAD public="1" get="inline" set="null" expr="4" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
			<haxe_doc>An `angle` with a `grad` unit.</haxe_doc>
		</SVG_ANGLETYPE_GRAD>
		<unitType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The type of the value as specified by one of the `SVG_ANGLETYPE_*` constants defined on this interface.</haxe_doc>
		</unitType>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in user units. Setting this attribute will cause `valueInSpecifiedUnits` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</value>
		<valueInSpecifiedUnits public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in the units expressed by `unitType`. Setting this attribute will cause `value` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueInSpecifiedUnits>
		<valueAsString public="1">
			<c path="String"/>
			<haxe_doc>The value as a `DOMString` value, in the units expressed by `unitType`. Setting this attribute will cause `value`, `valueInSpecifiedUnits` and `unitType` to be updated automatically to reflect this setting.
		
		 Exceptions on setting:
		 a `DOMException` with code `SYNTAX_ERR` is raised if the assigned string cannot be parsed as a valid `angle`. a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGAngle` interface is used to represent a value that can be an `angle` or `number` value. An `SVGAngle` reflected through the `animVal` attribute is always read only.

	Documentation [SVGAngle](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAngle"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedLength" params="" file="/usr/local/lib/haxe/std/js/html/svg/AnimatedLength.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Length"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Length"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedLength` interface is used for attributes of basic type length which can be animated.

	Documentation [SVGAnimatedLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedLength"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedPreserveAspectRatio" params="" file="/usr/local/lib/haxe/std/js/html/svg/AnimatedPreserveAspectRatio.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedPreserveAspectRatio` interface is used for attributes of type `SVGPreserveAspectRatio` which can be animated.

	Documentation [SVGAnimatedPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedRect" params="" file="/usr/local/lib/haxe/std/js/html/svg/AnimatedRect.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Rect"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Rect"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedRect` interface is used for attributes of basic `SVGRect` which can be animated.

	Documentation [SVGAnimatedRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedRect"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedString" params="" file="/usr/local/lib/haxe/std/js/html/svg/AnimatedString.hx" extern="1">
		<baseVal public="1">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException.</haxe_doc>
		</baseVal>
		<animVal public="1" set="null">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal.</haxe_doc>
		</animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedString` interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.

	Documentation [SVGAnimatedString](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedString"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedTransformList" params="" file="/usr/local/lib/haxe/std/js/html/svg/AnimatedTransformList.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.TransformList"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.TransformList"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedTransformList` interface is used for attributes which take a list of numbers and which can be animated.

	Documentation [SVGAnimatedTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedTransformList"</e></m></meta>
	</class>
	<typedef path="js.html.svg.BoundingBoxOptions" params="" file="/usr/local/lib/haxe/std/js/html/svg/BoundingBoxOptions.hx"><a>
	<stroke>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stroke>
	<markers>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</markers>
	<fill>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</fill>
	<clipped>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</clipped>
</a></typedef>
	<class path="js.html.svg.Element" params="" file="/usr/local/lib/haxe/std/js/html/svg/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<ownerSVGElement public="1" set="null">
			<c path="js.html.svg.SVGElement"/>
			<haxe_doc>An `SVGSVGElement` referring to the nearest ancestor `svg` element. `null` if the given element is the outermost `svg` element.</haxe_doc>
		</ownerSVGElement>
		<viewportElement public="1" set="null">
			<c path="js.html.svg.Element"/>
			<haxe_doc>The `SVGElement`, which established the current viewport. Often, the nearest ancestor `svg` element. `null` if the given element is the outermost `svg` element.</haxe_doc>
		</viewportElement>
		<focus public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<haxe_doc><![CDATA[All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the `SVGElement` interface.

	Documentation [SVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.GraphicsElement" params="" file="/usr/local/lib/haxe/std/js/html/svg/GraphicsElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<transform public="1" set="null">
			<c path="js.html.svg.AnimatedTransformList"/>
			<haxe_doc>An `SVGAnimatedTransformList` reflecting the computed value of the `transform` property and its corresponding `transform` attribute of the given element.</haxe_doc>
		</transform>
		<nearestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></nearestViewportElement>
		<farthestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></farthestViewportElement>
		<requiredFeatures public="1" set="null"><c path="js.html.svg.StringList"/></requiredFeatures>
		<requiredExtensions public="1" set="null"><c path="js.html.svg.StringList"/></requiredExtensions>
		<systemLanguage public="1" set="null"><c path="js.html.svg.StringList"/></systemLanguage>
		<getBBox public="1" set="method">
			<f a="?aOptions">
				<x path="Null"><t path="js.html.svg.BoundingBoxOptions"/></x>
				<c path="js.html.svg.Rect"/>
			</f>
			<haxe_doc>Returns a `DOMRect` representing the computed bounding box of the current element.
		@throws DOMError</haxe_doc>
		</getBBox>
		<getCTM public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to its SVG viewport's coordinate system.</haxe_doc>
		</getCTM>
		<getScreenCTM public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to the coordinate system of the SVG viewport for the SVG document fragment.</haxe_doc>
		</getScreenCTM>
		<getTransformToElement public="1" set="method">
			<f a="element">
				<c path="js.html.svg.GraphicsElement"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getTransformToElement>
		<hasExtension public="1" set="method"><f a="extension">
	<c path="String"/>
	<x path="Bool"/>
</f></hasExtension>
		<haxe_doc><![CDATA[The `SVGGraphicsElement` interface represents SVG elements whose primary purpose is to directly render graphics into a group.

	Documentation [SVGGraphicsElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGGraphicsElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ImageElement" params="" file="/usr/local/lib/haxe/std/js/html/svg/ImageElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `image` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `image` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `image` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `image` element.</haxe_doc>
		</height>
		<preserveAspectRatio public="1" set="null">
			<c path="js.html.svg.AnimatedPreserveAspectRatio"/>
			<haxe_doc>An `SVGAnimatedPreserveAspectRatio` corresponding to the `preserveAspectRatio` attribute of the given `image` element.</haxe_doc>
		</preserveAspectRatio>
		<decoding public="1"><c path="String"/></decoding>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGImageElement` interface corresponds to the `image` element.

	Documentation [SVGImageElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGImageElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Length" params="" file="/usr/local/lib/haxe/std/js/html/svg/Length.hx" extern="1">
		<SVG_LENGTHTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_LENGTHTYPE_UNKNOWN>
		<SVG_LENGTHTYPE_NUMBER public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_LENGTHTYPE_NUMBER>
		<SVG_LENGTHTYPE_PERCENTAGE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_LENGTHTYPE_PERCENTAGE>
		<SVG_LENGTHTYPE_EMS public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_LENGTHTYPE_EMS>
		<SVG_LENGTHTYPE_EXS public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_LENGTHTYPE_EXS>
		<SVG_LENGTHTYPE_PX public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_LENGTHTYPE_PX>
		<SVG_LENGTHTYPE_CM public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_LENGTHTYPE_CM>
		<SVG_LENGTHTYPE_MM public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_LENGTHTYPE_MM>
		<SVG_LENGTHTYPE_IN public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_LENGTHTYPE_IN>
		<SVG_LENGTHTYPE_PT public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_LENGTHTYPE_PT>
		<SVG_LENGTHTYPE_PC public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_LENGTHTYPE_PC>
		<unitType public="1" set="null"><x path="Int"/></unitType>
		<value public="1"><x path="Float"/></value>
		<valueInSpecifiedUnits public="1"><x path="Float"/></valueInSpecifiedUnits>
		<valueAsString public="1"><c path="String"/></valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGLength` interface correspond to the length basic data type.

	Documentation [SVGLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLength"</e></m></meta>
	</class>
	<class path="js.html.svg.Matrix" params="" file="/usr/local/lib/haxe/std/js/html/svg/Matrix.hx" extern="1">
		<a public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the a component of the matrix.</haxe_doc>
		</a>
		<b public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the b component of the matrix.</haxe_doc>
		</b>
		<c public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the c component of the matrix.</haxe_doc>
		</c>
		<d public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the d component of the matrix.</haxe_doc>
		</d>
		<e public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the e component of the matrix.</haxe_doc>
		</e>
		<f public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the f component of the matrix.</haxe_doc>
		</f>
		<multiply public="1" set="method">
			<f a="secondMatrix">
				<c path="js.html.svg.Matrix"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Performs matrix multiplication. This matrix is post-multiplied by another matrix, returning the resulting new matrix as `SVGMatrix`.</haxe_doc>
		</multiply>
		<inverse public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns the inverse matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</inverse>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a translation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</translate>
		<scale public="1" set="method">
			<f a="scaleFactor">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a uniform scale transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</scale>
		<scaleNonUniform public="1" set="method">
			<f a="scaleFactorX:scaleFactorY">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a non-uniform scale transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</scaleNonUniform>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</rotate>
		<rotateFromVector public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`. The rotation angle is determined by taking (+/-) atan(y/x). The direction of the vector (x, y) determines whether the positive or negative angle value is used.
		@throws DOMError</haxe_doc>
		</rotateFromVector>
		<flipX public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Post-multiplies the transformation [-1 0 0 1 0 0] and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</flipX>
		<flipY public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Post-multiplies the transformation [1 0 0 -1 0 0] and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</flipY>
		<skewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</skewX>
		<skewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a skewY transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</skewY>
		<haxe_doc><![CDATA[Many of SVG's graphics operations utilize 2x3 matrices of the form:

	Documentation [SVGMatrix](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMatrix"</e></m></meta>
	</class>
	<class path="js.html.svg.Number" params="" file="/usr/local/lib/haxe/std/js/html/svg/Number.hx" extern="1">
		<value public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the number.
		 Note: If the `SVGNumber` is read-only, a `DOMException` with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `SVGNumber` interface corresponds to the `number` basic data type.

	Documentation [SVGNumber](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGNumber"</e></m></meta>
	</class>
	<class path="js.html.svg.Point" params="" file="/usr/local/lib/haxe/std/js/html/svg/Point.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<matrixTransform public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Point"/>
</f></matrixTransform>
		<haxe_doc><![CDATA[An `SVGPoint` represents a 2D or 3D point in the SVG coordinate system.

	Documentation [SVGPoint](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPoint"</e></m></meta>
	</class>
	<class path="js.html.svg.PreserveAspectRatio" params="" file="/usr/local/lib/haxe/std/js/html/svg/PreserveAspectRatio.hx" extern="1">
		<SVG_PRESERVEASPECTRATIO_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_UNKNOWN>
		<SVG_PRESERVEASPECTRATIO_NONE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_NONE>
		<SVG_PRESERVEASPECTRATIO_XMINYMIN public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMIN>
		<SVG_PRESERVEASPECTRATIO_XMIDYMIN public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMIN>
		<SVG_PRESERVEASPECTRATIO_XMAXYMIN public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMIN>
		<SVG_PRESERVEASPECTRATIO_XMINYMID public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMID>
		<SVG_PRESERVEASPECTRATIO_XMIDYMID public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMID>
		<SVG_PRESERVEASPECTRATIO_XMAXYMID public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMID>
		<SVG_PRESERVEASPECTRATIO_XMINYMAX public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMAX>
		<SVG_PRESERVEASPECTRATIO_XMIDYMAX public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMAX>
		<SVG_PRESERVEASPECTRATIO_XMAXYMAX public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMAX>
		<SVG_MEETORSLICE_UNKNOWN public="1" get="inline" set="null" expr="0" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MEETORSLICE_UNKNOWN>
		<SVG_MEETORSLICE_MEET public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MEETORSLICE_MEET>
		<SVG_MEETORSLICE_SLICE public="1" get="inline" set="null" expr="2" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MEETORSLICE_SLICE>
		<align public="1"><x path="Int"/></align>
		<meetOrSlice public="1"><x path="Int"/></meetOrSlice>
		<haxe_doc><![CDATA[The `SVGPreserveAspectRatio` interface corresponds to the `preserveAspectRatio` attribute, which is available for some of SVG's elements.

	Documentation [SVGPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.Rect" params="" file="/usr/local/lib/haxe/std/js/html/svg/Rect.hx" extern="1">
		<x public="1">
			<x path="Float"/>
			<haxe_doc>The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of `0` were specified.</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>The exact effect of this coordinate depends on each element.If the attribute is not specified, the effect is as if a value of `0` were specified.</haxe_doc>
		</y>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>This represents the width of the rectangle.A value that is negative results to an error. A value of zero disables rendering of the element</haxe_doc>
		</width>
		<height public="1"><x path="Float"/></height>
		<haxe_doc><![CDATA[The `SVGRect` represents a rectangle. Rectangles consist of an x and y coordinate pair identifying a minimum x value, a minimum y value, and a width and height, which are constrained to be non-negative.

	Documentation [SVGRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRect"</e></m></meta>
	</class>
	<class path="js.html.svg.SVGElement" params="" file="/usr/local/lib/haxe/std/js/html/svg/SVGElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<SVG_ZOOMANDPAN_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ZOOMANDPAN_UNKNOWN>
		<SVG_ZOOMANDPAN_DISABLE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ZOOMANDPAN_DISABLE>
		<SVG_ZOOMANDPAN_MAGNIFY public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ZOOMANDPAN_MAGNIFY>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `svg` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `svg` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `svg` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `svg` element.</haxe_doc>
		</height>
		<useCurrentView public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the "standard" view, i.e., based on attributes on the `svg` element such as `viewBox`) or on a "custom" view (i.e., a hyperlink into a particular `view` or other element). If the initial view is the "standard" view, then this attribute is `false`. If the initial view is a "custom" view, then this attribute is `true`.</haxe_doc>
		</useCurrentView>
		<currentScale public="1">
			<x path="Float"/>
			<haxe_doc>On an outermost `svg` element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes `currentScale` and `currentTranslate` are equivalent to the 2x3 matrix `[a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]`. If "magnification" is enabled (i.e., `zoomAndPan="magnify"`), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost `svg` element).</haxe_doc>
		</currentScale>
		<currentTranslate public="1" set="null">
			<c path="js.html.svg.Point"/>
			<haxe_doc>An `SVGPoint` representing the translation factor that takes into account user "magnification" corresponding to an outermost `svg` element. The behavior is undefined for svg elements that are not at the outermost level.</haxe_doc>
		</currentTranslate>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<zoomAndPan public="1"><x path="Int"/></zoomAndPan>
		<suspendRedraw public="1" set="method">
			<f a="maxWaitMilliseconds">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Takes a time-out value which indicates that redraw shall not occur until:
		 the corresponding unsuspendRedraw() call has been made, an unsuspendRedrawAll() call has been made, or its timer has timed out.
		
		 In environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to `suspendRedraw()` and `unsuspendRedraw()` should, but need not be, made in balanced pairs.
		
		 To suspend redraw actions as a collection of SVG DOM changes occur, precede the changes to the SVG DOM with a method call similar to:
		
		 suspendHandleID = suspendRedraw(maxWaitMilliseconds);
		
		 and follow the changes with a method call similar to:
		
		 unsuspendRedraw(suspendHandleID);
		
		 Note that multiple suspendRedraw calls can be used at once and that each such method call is treated independently of the other suspendRedraw method calls.</haxe_doc>
		</suspendRedraw>
		<unsuspendRedraw public="1" set="method">
			<f a="suspendHandleID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Cancels a specified `suspendRedraw()` by providing a unique suspend handle ID that was returned by a previous `suspendRedraw()` call.</haxe_doc>
		</unsuspendRedraw>
		<unsuspendRedrawAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels all currently active `suspendRedraw()` method calls. This method is most useful at the very end of a set of SVG DOM calls to ensure that all pending `suspendRedraw()` method calls have been cancelled.</haxe_doc>
		</unsuspendRedrawAll>
		<forceRedraw public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating.</haxe_doc>
		</forceRedraw>
		<pauseAnimations public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this `svg` element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused.</haxe_doc>
		</pauseAnimations>
		<unpauseAnimations public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unsuspends (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended.</haxe_doc>
		</unpauseAnimations>
		<animationsPaused public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if this SVG document fragment is in a paused state.</haxe_doc>
		</animationsPaused>
		<getCurrentTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the current time in seconds relative to the start time for the current SVG document fragment. If getCurrentTime is called before the document timeline has begun (for example, by script running in a `script` element before the document's SVGLoad event is dispatched), then 0 is returned.</haxe_doc>
		</getCurrentTime>
		<setCurrentTime public="1" set="method">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adjusts the clock for this SVG document fragment, establishing a new current time. If `setCurrentTime` is called before the document timeline has begun (for example, by script running in a `script` element before the document's SVGLoad event is dispatched), then the value of seconds in the last invocation of the method gives the time that the document will seek to once the document timeline has begun.</haxe_doc>
		</setCurrentTime>
		<deselectAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unselects any selected objects, including any selections of text strings and type-in bars.</haxe_doc>
		</deselectAll>
		<createSVGNumber public="1" set="method">
			<f a=""><c path="js.html.svg.Number"/></f>
			<haxe_doc>Creates an `SVGNumber` object outside of any document trees. The object is initialized to a value of zero.</haxe_doc>
		</createSVGNumber>
		<createSVGLength public="1" set="method">
			<f a=""><c path="js.html.svg.Length"/></f>
			<haxe_doc>Creates an `SVGLength` object outside of any document trees. The object is initialized to a value of zero user units.</haxe_doc>
		</createSVGLength>
		<createSVGAngle public="1" set="method">
			<f a=""><c path="js.html.svg.Angle"/></f>
			<haxe_doc>Creates an `SVGAngle` object outside of any document trees. The object is initialized to a value of zero degrees (unitless).</haxe_doc>
		</createSVGAngle>
		<createSVGPoint public="1" set="method">
			<f a=""><c path="js.html.svg.Point"/></f>
			<haxe_doc>Creates an `SVGPoint` object outside of any document trees. The object is initialized to the point (0,0) in the user coordinate system.</haxe_doc>
		</createSVGPoint>
		<createSVGMatrix public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Creates an `SVGMatrix` object outside of any document trees. The object is initialized to the identity matrix.</haxe_doc>
		</createSVGMatrix>
		<createSVGRect public="1" set="method">
			<f a=""><c path="js.html.svg.Rect"/></f>
			<haxe_doc>Creates an `SVGRect` object outside of any document trees. The object is initialized such that all values are set to 0 user units.</haxe_doc>
		</createSVGRect>
		<createSVGTransform public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>Creates an `SVGTransform` object outside of any document trees. The object is initialized to an identity matrix transform (`SVG_TRANSFORM_MATRIX`).</haxe_doc>
		</createSVGTransform>
		<createSVGTransformFromMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>Creates an `SVGTransform` object outside of any document trees. The object is initialized to the given matrix transform (i.e., `SVG_TRANSFORM_MATRIX`). The values from the parameter matrix are copied, the matrix parameter is not adopted as `SVGTransform::matrix`.</haxe_doc>
		</createSVGTransformFromMatrix>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose id is given by elementId. If an Element is found, that Element is returned. If no such element exists, returns null. Behavior is not defined if more than one element has this id.</haxe_doc>
		</getElementById>
		<haxe_doc><![CDATA[The `SVGSVGElement` interface provides access to the properties of `svg` elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.

	Documentation [SVGSVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.StringList" params="" file="/usr/local/lib/haxe/std/js/html/svg/StringList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<haxe_doc><![CDATA[The `SVGStringList` defines a list of `DOMString` objects.

	Documentation [SVGStringList](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGStringList"</e></m></meta>
	</class>
	<class path="js.html.svg.Transform" params="" file="/usr/local/lib/haxe/std/js/html/svg/Transform.hx" extern="1">
		<SVG_TRANSFORM_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_TRANSFORM_UNKNOWN>
		<SVG_TRANSFORM_MATRIX public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_TRANSFORM_MATRIX>
		<SVG_TRANSFORM_TRANSLATE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_TRANSFORM_TRANSLATE>
		<SVG_TRANSFORM_SCALE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_TRANSFORM_SCALE>
		<SVG_TRANSFORM_ROTATE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_TRANSFORM_ROTATE>
		<SVG_TRANSFORM_SKEWX public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_TRANSFORM_SKEWX>
		<SVG_TRANSFORM_SKEWY public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_TRANSFORM_SKEWY>
		<type public="1" set="null"><x path="Int"/></type>
		<matrix public="1" set="null"><c path="js.html.svg.Matrix"/></matrix>
		<angle public="1" set="null"><x path="Float"/></angle>
		<setMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setMatrix>
		<setTranslate public="1" set="method">
			<f a="tx:ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTranslate>
		<setScale public="1" set="method">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setScale>
		<setRotate public="1" set="method">
			<f a="angle:cx:cy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setRotate>
		<setSkewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewX>
		<setSkewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewY>
		<haxe_doc><![CDATA[`SVGTransform` is the interface for one of the component transformations within an `SVGTransformList`; thus, an `SVGTransform` object corresponds to a single component (e.g., `scale(…)` or `matrix(…)`) within a `transform` attribute.

	Documentation [SVGTransform](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransform"</e></m></meta>
	</class>
	<class path="js.html.svg.TransformList" params="" file="/usr/local/lib/haxe/std/js/html/svg/TransformList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<createSVGTransformFromMatrix public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Transform"/>
</f></createSVGTransformFromMatrix>
		<consolidate public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</consolidate>
		<haxe_doc><![CDATA[The `SVGTransformList` defines a list of `SVGTransform` objects.

	Documentation [SVGTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransformList"</e></m></meta>
	</class>
	<class path="js.html.webgl.ActiveInfo" params="" file="/usr/local/lib/haxe/std/js/html/webgl/ActiveInfo.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only size of the requested variable.</haxe_doc>
		</size>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only type of the requested variable.</haxe_doc>
		</type>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The read-only name of the requested variable.</haxe_doc>
		</name>
		<haxe_doc><![CDATA[The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getActiveAttrib()` and `WebGLRenderingContext.getActiveUniform()` methods.

	Documentation [WebGLActiveInfo](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLActiveInfo"</e></m></meta>
	</class>
	<class path="js.html.webgl.Buffer" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Buffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.

	Documentation [WebGLBuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLBuffer"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.ContextAttributes" params="" file="/usr/local/lib/haxe/std/js/html/webgl/ContextAttributes.hx"><a>
	<stencil>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stencil>
	<preserveDrawingBuffer>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</preserveDrawingBuffer>
	<premultipliedAlpha>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</premultipliedAlpha>
	<powerPreference>
		<x path="Null"><x path="js.html.webgl.PowerPreference"/></x>
		<meta><m n=":optional"/></meta>
	</powerPreference>
	<failIfMajorPerformanceCaveat>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</failIfMajorPerformanceCaveat>
	<depth>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</depth>
	<antialias>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</antialias>
	<alpha>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</alpha>
</a></typedef>
	<abstract path="js.html.webgl.Extension" params="T" file="/usr/local/lib/haxe/std/js/html/webgl/Extension.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.webgl._Extension.Extension_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Extension.hx" private="1" module="js.html.webgl.Extension" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.webgl.Framebuffer" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Framebuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.

	Documentation [WebGLFramebuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLFramebuffer"</e></m></meta>
	</class>
	<abstract path="js.html.webgl.PowerPreference" params="" file="/usr/local/lib/haxe/std/js/html/webgl/PowerPreference.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.webgl._PowerPreference.PowerPreference_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/webgl/PowerPreference.hx" private="1" module="js.html.webgl.PowerPreference" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.webgl.Program" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Program.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLProgram is part of the WebGL API and is a combination of two compiled `WebGLShader`s consisting of a vertex shader and a fragment shader (both written in GLSL). These are then linked into a usable program.

	Documentation [WebGLProgram](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLProgram"</e></m></meta>
	</class>
	<class path="js.html.webgl.Query" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Query.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLQuery` interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.

	Documentation [WebGLQuery](https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLQuery"</e></m></meta>
	</class>
	<class path="js.html.webgl.Renderbuffer" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Renderbuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.

	Documentation [WebGLRenderbuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderbuffer"</e></m></meta>
	</class>
	<class path="js.html.webgl.RenderingContext" params="" file="/usr/local/lib/haxe/std/js/html/webgl/RenderingContext.hx" extern="1">
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<canvas public="1" set="null">
			<c path="js.html.CanvasElement"/>
			<haxe_doc>A read-only back-reference to the `HTMLCanvasElement`. Might be `null` if it is not associated with a `canvas` element.</haxe_doc>
		</canvas>
		<drawingBufferWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only width of the current drawing buffer. Should match the width of the canvas element associated with this context.</haxe_doc>
		</drawingBufferWidth>
		<drawingBufferHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only height of the current drawing buffer. Should match the height of the canvas element associated with this context.</haxe_doc>
		</drawingBufferHeight>
		<bufferData public="1" set="method">
			<f a="target:data:usage">
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates buffer data.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:size:usage">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates buffer data.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:data:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates buffer data.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method">
			<f a="target:offset:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates buffer data starting at a passed offset.</haxe_doc>
			<overloads><bufferSubData public="1" set="method">
	<f a="target:offset:data">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.ArrayBuffer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Updates buffer data starting at a passed offset.</haxe_doc>
</bufferSubData></overloads>
		</bufferSubData>
		<compressedTexImage2D public="1" set="method">
			<f a="target:level:internalformat:width:height:border:data">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture image in a compressed format.</haxe_doc>
		</compressedTexImage2D>
		<compressedTexSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:width:height:format:data">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture sub-image in a compressed format.</haxe_doc>
		</compressedTexSubImage2D>
		<readPixels public="1" set="method">
			<f a="x:y:width:height:format:type:pixels">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Reads a block of pixels from the `WebGLFrameBuffer`.
		@throws DOMError</haxe_doc>
		</readPixels>
		<texImage2D public="1" set="method">
			<f a="target:level:internalformat:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<uniform1fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform1fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform1fv></overloads>
		</uniform1fv>
		<uniform2fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform2fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform2fv></overloads>
		</uniform2fv>
		<uniform3fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform3fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform3fv></overloads>
		</uniform3fv>
		<uniform4fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform4fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform4fv></overloads>
		</uniform4fv>
		<uniform1iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform1iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform1iv></overloads>
		</uniform1iv>
		<uniform2iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform2iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform2iv></overloads>
		</uniform2iv>
		<uniform3iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform3iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform3iv></overloads>
		</uniform3iv>
		<uniform4iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform4iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform4iv></overloads>
		</uniform4iv>
		<uniformMatrix2fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix2fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix3fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix4fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<getContextAttributes public="1" set="method">
			<f a=""><t path="js.html.webgl.ContextAttributes"/></f>
			<haxe_doc>Returns a `WebGLContextAttributes` object that contains the actual context parameters. Might return `null`, if the context is lost.</haxe_doc>
		</getContextAttributes>
		<isContextLost public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the context is lost, otherwise returns `false`.</haxe_doc>
		</isContextLost>
		<getSupportedExtensions public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an `Array` of `DOMString` elements with all the supported WebGL extensions.</haxe_doc>
		</getSupportedExtensions>
		<getExtension public="1" params="T" set="method">
			<f a="name">
				<x path="js.html.webgl.Extension"><c path="getExtension.T"/></x>
				<c path="getExtension.T"/>
			</f>
			<haxe_doc>Returns an extension object.
		@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method">
			<f a="texture">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects the active texture unit.</haxe_doc>
		</activeTexture>
		<attachShader public="1" set="method">
			<f a="program:shader">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a `WebGLShader` to a `WebGLProgram`.</haxe_doc>
		</attachShader>
		<bindAttribLocation public="1" set="method">
			<f a="program:index:name">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a generic vertex index to a named attribute variable.</haxe_doc>
		</bindAttribLocation>
		<bindBuffer public="1" set="method">
			<f a="target:buffer">
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLBuffer` object to a given target.</haxe_doc>
		</bindBuffer>
		<bindFramebuffer public="1" set="method">
			<f a="target:framebuffer">
				<x path="Int"/>
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLFrameBuffer` object to a given target.</haxe_doc>
		</bindFramebuffer>
		<bindRenderbuffer public="1" set="method">
			<f a="target:renderbuffer">
				<x path="Int"/>
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLRenderBuffer` object to a given target.</haxe_doc>
		</bindRenderbuffer>
		<bindTexture public="1" set="method">
			<f a="target:texture">
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLTexture` object to a given target.</haxe_doc>
		</bindTexture>
		<blendColor public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the source and destination blending factors.</haxe_doc>
		</blendColor>
		<blendEquation public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets both the RGB blend equation and alpha blend equation to a single equation.</haxe_doc>
		</blendEquation>
		<blendEquationSeparate public="1" set="method">
			<f a="modeRGB:modeAlpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the RGB blend equation and alpha blend equation separately.</haxe_doc>
		</blendEquationSeparate>
		<blendFunc public="1" set="method">
			<f a="sfactor:dfactor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines which function is used for blending pixel arithmetic.</haxe_doc>
		</blendFunc>
		<blendFuncSeparate public="1" set="method">
			<f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines which function is used for blending pixel arithmetic for RGB and alpha components separately.</haxe_doc>
		</blendFuncSeparate>
		<checkFramebufferStatus public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the status of the framebuffer.</haxe_doc>
		</checkFramebufferStatus>
		<clear public="1" set="method">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Clears specified buffers to preset values.</haxe_doc>
		</clear>
		<clearColor public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the color values used when clearing color buffers.</haxe_doc>
		</clearColor>
		<clearDepth public="1" set="method">
			<f a="depth">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the depth value used when clearing the depth buffer.</haxe_doc>
		</clearDepth>
		<clearStencil public="1" set="method">
			<f a="s">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the stencil value used when clearing the stencil buffer.</haxe_doc>
		</clearStencil>
		<colorMask public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets which color components to enable or to disable when drawing or rendering to a `WebGLFramebuffer`.</haxe_doc>
		</colorMask>
		<compileShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Compiles a `WebGLShader`.</haxe_doc>
		</compileShader>
		<copyTexImage2D public="1" set="method">
			<f a="target:level:internalformat:x:y:width:height:border">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a 2D texture image.</haxe_doc>
		</copyTexImage2D>
		<copyTexSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a 2D texture sub-image.</haxe_doc>
		</copyTexSubImage2D>
		<createBuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Buffer"/></f>
			<haxe_doc>Creates a `WebGLBuffer` object.</haxe_doc>
		</createBuffer>
		<createFramebuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Framebuffer"/></f>
			<haxe_doc>Creates a `WebGLFrameBuffer` object.</haxe_doc>
		</createFramebuffer>
		<createProgram public="1" set="method">
			<f a=""><c path="js.html.webgl.Program"/></f>
			<haxe_doc>Creates a `WebGLProgram`.</haxe_doc>
		</createProgram>
		<createRenderbuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Renderbuffer"/></f>
			<haxe_doc>Creates a `WebGLRenderBuffer` object.</haxe_doc>
		</createRenderbuffer>
		<createShader public="1" set="method">
			<f a="type">
				<x path="Int"/>
				<c path="js.html.webgl.Shader"/>
			</f>
			<haxe_doc>Creates a `WebGLShader`.</haxe_doc>
		</createShader>
		<createTexture public="1" set="method">
			<f a=""><c path="js.html.webgl.Texture"/></f>
			<haxe_doc>Creates a `WebGLTexture` object.</haxe_doc>
		</createTexture>
		<cullFace public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies whether or not front- and/or back-facing polygons can be culled.</haxe_doc>
		</cullFace>
		<deleteBuffer public="1" set="method">
			<f a="buffer">
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLBuffer` object.</haxe_doc>
		</deleteBuffer>
		<deleteFramebuffer public="1" set="method">
			<f a="framebuffer">
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLFrameBuffer` object.</haxe_doc>
		</deleteFramebuffer>
		<deleteProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLProgram`.</haxe_doc>
		</deleteProgram>
		<deleteRenderbuffer public="1" set="method">
			<f a="renderbuffer">
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLRenderBuffer` object.</haxe_doc>
		</deleteRenderbuffer>
		<deleteShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLShader`.</haxe_doc>
		</deleteShader>
		<deleteTexture public="1" set="method">
			<f a="texture">
				<c path="js.html.webgl.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLTexture` object.</haxe_doc>
		</deleteTexture>
		<depthFunc public="1" set="method">
			<f a="func">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a function that compares incoming pixel depth to the current depth buffer value.</haxe_doc>
		</depthFunc>
		<depthMask public="1" set="method">
			<f a="flag">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets whether writing into the depth buffer is enabled or disabled.</haxe_doc>
		</depthMask>
		<depthRange public="1" set="method">
			<f a="zNear:zFar">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the depth range mapping from normalized device coordinates to window or viewport coordinates.</haxe_doc>
		</depthRange>
		<detachShader public="1" set="method">
			<f a="program:shader">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Detaches a `WebGLShader`.</haxe_doc>
		</detachShader>
		<disable public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables specific WebGL capabilities for this context.</haxe_doc>
		</disable>
		<disableVertexAttribArray public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables a vertex attribute array at a given position.</haxe_doc>
		</disableVertexAttribArray>
		<drawArrays public="1" set="method">
			<f a="mode:first:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data.</haxe_doc>
		</drawArrays>
		<drawElements public="1" set="method">
			<f a="mode:count:type:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from element array data.</haxe_doc>
		</drawElements>
		<enable public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables specific WebGL capabilities for this context.</haxe_doc>
		</enable>
		<enableVertexAttribArray public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables a vertex attribute array at a given position.</haxe_doc>
		</enableVertexAttribArray>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Blocks execution until all previously called commands are finished.</haxe_doc>
		</finish>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties different buffer commands, causing all commands to be executed as quickly as possible.</haxe_doc>
		</flush>
		<framebufferRenderbuffer public="1" set="method">
			<f a="target:attachment:renderbuffertarget:renderbuffer">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a `WebGLRenderingBuffer` object to a `WebGLFrameBuffer` object.</haxe_doc>
		</framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method">
			<f a="target:attachment:textarget:texture:level">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a textures image to a `WebGLFrameBuffer` object.</haxe_doc>
		</framebufferTexture2D>
		<frontFace public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies whether polygons are front- or back-facing by setting a winding orientation.</haxe_doc>
		</frontFace>
		<generateMipmap public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Generates a set of mipmaps for a `WebGLTexture` object.</haxe_doc>
		</generateMipmap>
		<getActiveAttrib public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about an active attribute variable.</haxe_doc>
		</getActiveAttrib>
		<getActiveUniform public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about an active uniform variable.</haxe_doc>
		</getActiveUniform>
		<getAttachedShaders public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="js.html.webgl.Shader"/></c>
			</f>
			<haxe_doc>Returns a list of `WebGLShader` objects attached to a `WebGLProgram`.</haxe_doc>
		</getAttachedShaders>
		<getAttribLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the location of an attribute variable.</haxe_doc>
		</getAttribLocation>
		<getBufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the buffer.</haxe_doc>
		</getBufferParameter>
		<getParameter public="1" set="method">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns a value for the passed parameter name.
		@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns error information.</haxe_doc>
		</getError>
		<getFramebufferAttachmentParameter public="1" set="method">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the framebuffer.
		@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method">
			<f a="program:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the program.</haxe_doc>
		</getProgramParameter>
		<getProgramInfoLog public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the information log for a `WebGLProgram` object.</haxe_doc>
		</getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the renderbuffer.</haxe_doc>
		</getRenderbufferParameter>
		<getShaderParameter public="1" set="method">
			<f a="shader:pname">
				<c path="js.html.webgl.Shader"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the shader.</haxe_doc>
		</getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method">
			<f a="shadertype:precisiontype">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.ShaderPrecisionFormat"/>
			</f>
			<haxe_doc>Returns a `WebGLShaderPrecisionFormat` object describing the precision for the numeric format of the shader.</haxe_doc>
		</getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the information log for a `WebGLShader` object.</haxe_doc>
		</getShaderInfoLog>
		<getShaderSource public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the source code of a `WebGLShader` as a string.</haxe_doc>
		</getShaderSource>
		<getTexParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the texture.</haxe_doc>
		</getTexParameter>
		<getUniform public="1" set="method">
			<f a="program:location">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.UniformLocation"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of a uniform variable at a given location.</haxe_doc>
		</getUniform>
		<getUniformLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<c path="js.html.webgl.UniformLocation"/>
			</f>
			<haxe_doc>Returns the location of a uniform variable.</haxe_doc>
		</getUniformLocation>
		<getVertexAttrib public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a vertex attribute at a given position.
		@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the address of a given vertex attribute.</haxe_doc>
		</getVertexAttribOffset>
		<hint public="1" set="method">
			<f a="target:mode">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies hints for certain behaviors. The interpretation of these hints depend on the implementation.</haxe_doc>
		</hint>
		<isBuffer public="1" set="method">
			<f a="buffer">
				<c path="js.html.webgl.Buffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed buffer is valid.</haxe_doc>
		</isBuffer>
		<isEnabled public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether a specific WebGL capability is enabled or not for this context.</haxe_doc>
		</isEnabled>
		<isFramebuffer public="1" set="method">
			<f a="framebuffer">
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLFrameBuffer` object is valid.</haxe_doc>
		</isFramebuffer>
		<isProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLProgram` is valid.</haxe_doc>
		</isProgram>
		<isRenderbuffer public="1" set="method">
			<f a="renderbuffer">
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLRenderingBuffer` is valid.</haxe_doc>
		</isRenderbuffer>
		<isShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLShader` is valid.</haxe_doc>
		</isShader>
		<isTexture public="1" set="method">
			<f a="texture">
				<c path="js.html.webgl.Texture"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLTexture` is valid.</haxe_doc>
		</isTexture>
		<lineWidth public="1" set="method">
			<f a="width">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the line width of rasterized lines.</haxe_doc>
		</lineWidth>
		<linkProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Links the passed `WebGLProgram` object.</haxe_doc>
		</linkProgram>
		<pixelStorei public="1" set="method">
			<f a="pname:param">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the pixel storage modes</haxe_doc>
		</pixelStorei>
		<polygonOffset public="1" set="method">
			<f a="factor:units">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the scale factors and units to calculate depth values.</haxe_doc>
		</polygonOffset>
		<renderbufferStorage public="1" set="method">
			<f a="target:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a renderbuffer data store.</haxe_doc>
		</renderbufferStorage>
		<sampleCoverage public="1" set="method">
			<f a="value:invert">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies multi-sample coverage parameters for anti-aliasing effects.</haxe_doc>
		</sampleCoverage>
		<scissor public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the scissor box.</haxe_doc>
		</scissor>
		<shaderSource public="1" set="method">
			<f a="shader:source">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the source code in a `WebGLShader`.</haxe_doc>
		</shaderSource>
		<stencilFunc public="1" set="method">
			<f a="func:ref:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the both front and back function and reference value for stencil testing.</haxe_doc>
		</stencilFunc>
		<stencilFuncSeparate public="1" set="method">
			<f a="face:func:ref:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the front and/or back function and reference value for stencil testing.</haxe_doc>
		</stencilFuncSeparate>
		<stencilMask public="1" set="method">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Controls enabling and disabling of both the front and back writing of individual bits in the stencil planes.</haxe_doc>
		</stencilMask>
		<stencilMaskSeparate public="1" set="method">
			<f a="face:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Controls enabling and disabling of front and/or back writing of individual bits in the stencil planes.</haxe_doc>
		</stencilMaskSeparate>
		<stencilOp public="1" set="method">
			<f a="fail:zfail:zpass">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets both the front and back-facing stencil test actions.</haxe_doc>
		</stencilOp>
		<stencilOpSeparate public="1" set="method">
			<f a="face:fail:zfail:zpass">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the front and/or back-facing stencil test actions.</haxe_doc>
		</stencilOpSeparate>
		<texParameterf public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<uniform1f public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform2f public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform3f public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform4f public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform1i public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform2i public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform3i public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform4i public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<useProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Uses the specified `WebGLProgram` as part the current rendering state.</haxe_doc>
		</useProgram>
		<validateProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Validates a `WebGLProgram`.</haxe_doc>
		</validateProgram>
		<vertexAttrib1f public="1" set="method"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method">
			<f a="indx:size:type:normalized:stride:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the data formats and locations of vertex attributes in a vertex attributes array.</haxe_doc>
		</vertexAttribPointer>
		<viewport public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the viewport.</haxe_doc>
		</viewport>
		<haxe_doc><![CDATA[The `WebGLRenderingContext` interface provides the OpenGL ES 2.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGLRenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.Sampler" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Sampler.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLSampler` interface is part of the WebGL 2 API and stores sampling parameters for `WebGLTexture` access inside of a shader.

	Documentation [WebGLSampler](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLSampler"</e></m></meta>
	</class>
	<class path="js.html.webgl.Shader" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Shader.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A `WebGLProgram` requires both types of shaders.

	Documentation [WebGLShader](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShader"</e></m></meta>
	</class>
	<class path="js.html.webgl.ShaderPrecisionFormat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/ShaderPrecisionFormat.hx" extern="1">
		<rangeMin public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the minimum value that can be represented.</haxe_doc>
		</rangeMin>
		<rangeMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the maximum value that can be represented.</haxe_doc>
		</rangeMax>
		<precision public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of bits of precision that can be represented. For integer formats this value is always 0.</haxe_doc>
		</precision>
		<haxe_doc><![CDATA[The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getShaderPrecisionFormat()` method.

	Documentation [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShaderPrecisionFormat"</e></m></meta>
	</class>
	<class path="js.html.webgl.Sync" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Sync.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLSync` interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.

	Documentation [WebGLSync](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLSync"</e></m></meta>
	</class>
	<class path="js.html.webgl.Texture" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Texture.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.

	Documentation [WebGLTexture](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTexture"</e></m></meta>
	</class>
	<class path="js.html.webgl.TransformFeedback" params="" file="/usr/local/lib/haxe/std/js/html/webgl/TransformFeedback.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLTransformFeedback` interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.

	Documentation [WebGLTransformFeedback](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTransformFeedback"</e></m></meta>
	</class>
	<class path="js.html.webgl.UniformLocation" params="" file="/usr/local/lib/haxe/std/js/html/webgl/UniformLocation.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.

	Documentation [WebGLUniformLocation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLUniformLocation"</e></m></meta>
	</class>
	<class path="js.html.webgl.VertexArrayObject" params="" file="/usr/local/lib/haxe/std/js/html/webgl/VertexArrayObject.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLVertexArrayObject` interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.

	Documentation [WebGLVertexArrayObject](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLVertexArrayObject"</e></m></meta>
	</class>
	<class path="js.html.webgl.WebGL2RenderingContext" params="" file="/usr/local/lib/haxe/std/js/html/webgl/WebGL2RenderingContext.hx" extern="1">
		<extends path="js.html.webgl.RenderingContext"/>
		<READ_BUFFER public="1" get="inline" set="null" expr="3074" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3074</e></m></meta>
		</READ_BUFFER>
		<UNPACK_ROW_LENGTH public="1" get="inline" set="null" expr="3314" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3314</e></m></meta>
		</UNPACK_ROW_LENGTH>
		<UNPACK_SKIP_ROWS public="1" get="inline" set="null" expr="3315" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3315</e></m></meta>
		</UNPACK_SKIP_ROWS>
		<UNPACK_SKIP_PIXELS public="1" get="inline" set="null" expr="3316" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3316</e></m></meta>
		</UNPACK_SKIP_PIXELS>
		<PACK_ROW_LENGTH public="1" get="inline" set="null" expr="3330" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3330</e></m></meta>
		</PACK_ROW_LENGTH>
		<PACK_SKIP_ROWS public="1" get="inline" set="null" expr="3331" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3331</e></m></meta>
		</PACK_SKIP_ROWS>
		<PACK_SKIP_PIXELS public="1" get="inline" set="null" expr="3332" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3332</e></m></meta>
		</PACK_SKIP_PIXELS>
		<COLOR public="1" get="inline" set="null" expr="6144" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6144</e></m></meta>
		</COLOR>
		<DEPTH public="1" get="inline" set="null" expr="6145" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6145</e></m></meta>
		</DEPTH>
		<STENCIL public="1" get="inline" set="null" expr="6146" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6146</e></m></meta>
		</STENCIL>
		<RED public="1" get="inline" set="null" expr="6403" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6403</e></m></meta>
		</RED>
		<RGB8 public="1" get="inline" set="null" expr="32849" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32849</e></m></meta>
		</RGB8>
		<RGBA8 public="1" get="inline" set="null" expr="32856" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32856</e></m></meta>
		</RGBA8>
		<RGB10_A2 public="1" get="inline" set="null" expr="32857" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32857</e></m></meta>
		</RGB10_A2>
		<TEXTURE_BINDING_3D public="1" get="inline" set="null" expr="32874" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32874</e></m></meta>
		</TEXTURE_BINDING_3D>
		<UNPACK_SKIP_IMAGES public="1" get="inline" set="null" expr="32877" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32877</e></m></meta>
		</UNPACK_SKIP_IMAGES>
		<UNPACK_IMAGE_HEIGHT public="1" get="inline" set="null" expr="32878" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32878</e></m></meta>
		</UNPACK_IMAGE_HEIGHT>
		<TEXTURE_3D public="1" get="inline" set="null" expr="32879" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32879</e></m></meta>
		</TEXTURE_3D>
		<TEXTURE_WRAP_R public="1" get="inline" set="null" expr="32882" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32882</e></m></meta>
		</TEXTURE_WRAP_R>
		<MAX_3D_TEXTURE_SIZE public="1" get="inline" set="null" expr="32883" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32883</e></m></meta>
		</MAX_3D_TEXTURE_SIZE>
		<UNSIGNED_INT_2_10_10_10_REV public="1" get="inline" set="null" expr="33640" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33640</e></m></meta>
		</UNSIGNED_INT_2_10_10_10_REV>
		<MAX_ELEMENTS_VERTICES public="1" get="inline" set="null" expr="33000" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33000</e></m></meta>
		</MAX_ELEMENTS_VERTICES>
		<MAX_ELEMENTS_INDICES public="1" get="inline" set="null" expr="33001" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33001</e></m></meta>
		</MAX_ELEMENTS_INDICES>
		<TEXTURE_MIN_LOD public="1" get="inline" set="null" expr="33082" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33082</e></m></meta>
		</TEXTURE_MIN_LOD>
		<TEXTURE_MAX_LOD public="1" get="inline" set="null" expr="33083" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33083</e></m></meta>
		</TEXTURE_MAX_LOD>
		<TEXTURE_BASE_LEVEL public="1" get="inline" set="null" expr="33084" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33084</e></m></meta>
		</TEXTURE_BASE_LEVEL>
		<TEXTURE_MAX_LEVEL public="1" get="inline" set="null" expr="33085" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33085</e></m></meta>
		</TEXTURE_MAX_LEVEL>
		<MIN public="1" get="inline" set="null" expr="32775" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
		</MIN>
		<MAX public="1" get="inline" set="null" expr="32776" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
		</MAX>
		<DEPTH_COMPONENT24 public="1" get="inline" set="null" expr="33190" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33190</e></m></meta>
		</DEPTH_COMPONENT24>
		<MAX_TEXTURE_LOD_BIAS public="1" get="inline" set="null" expr="34045" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34045</e></m></meta>
		</MAX_TEXTURE_LOD_BIAS>
		<TEXTURE_COMPARE_MODE public="1" get="inline" set="null" expr="34892" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34892</e></m></meta>
		</TEXTURE_COMPARE_MODE>
		<TEXTURE_COMPARE_FUNC public="1" get="inline" set="null" expr="34893" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34893</e></m></meta>
		</TEXTURE_COMPARE_FUNC>
		<CURRENT_QUERY public="1" get="inline" set="null" expr="34917" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
		</CURRENT_QUERY>
		<QUERY_RESULT public="1" get="inline" set="null" expr="34918" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
		</QUERY_RESULT>
		<QUERY_RESULT_AVAILABLE public="1" get="inline" set="null" expr="34919" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
		</QUERY_RESULT_AVAILABLE>
		<STREAM_READ public="1" get="inline" set="null" expr="35041" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35041</e></m></meta>
		</STREAM_READ>
		<STREAM_COPY public="1" get="inline" set="null" expr="35042" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35042</e></m></meta>
		</STREAM_COPY>
		<STATIC_READ public="1" get="inline" set="null" expr="35045" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35045</e></m></meta>
		</STATIC_READ>
		<STATIC_COPY public="1" get="inline" set="null" expr="35046" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35046</e></m></meta>
		</STATIC_COPY>
		<DYNAMIC_READ public="1" get="inline" set="null" expr="35049" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35049</e></m></meta>
		</DYNAMIC_READ>
		<DYNAMIC_COPY public="1" get="inline" set="null" expr="35050" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35050</e></m></meta>
		</DYNAMIC_COPY>
		<MAX_DRAW_BUFFERS public="1" get="inline" set="null" expr="34852" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
		</MAX_DRAW_BUFFERS>
		<DRAW_BUFFER0 public="1" get="inline" set="null" expr="34853" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
		</DRAW_BUFFER0>
		<DRAW_BUFFER1 public="1" get="inline" set="null" expr="34854" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1>
		<DRAW_BUFFER2 public="1" get="inline" set="null" expr="34855" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2>
		<DRAW_BUFFER3 public="1" get="inline" set="null" expr="34856" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3>
		<DRAW_BUFFER4 public="1" get="inline" set="null" expr="34857" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4>
		<DRAW_BUFFER5 public="1" get="inline" set="null" expr="34858" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5>
		<DRAW_BUFFER6 public="1" get="inline" set="null" expr="34859" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6>
		<DRAW_BUFFER7 public="1" get="inline" set="null" expr="34860" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7>
		<DRAW_BUFFER8 public="1" get="inline" set="null" expr="34861" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8>
		<DRAW_BUFFER9 public="1" get="inline" set="null" expr="34862" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9>
		<DRAW_BUFFER10 public="1" get="inline" set="null" expr="34863" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10>
		<DRAW_BUFFER11 public="1" get="inline" set="null" expr="34864" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11>
		<DRAW_BUFFER12 public="1" get="inline" set="null" expr="34865" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12>
		<DRAW_BUFFER13 public="1" get="inline" set="null" expr="34866" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13>
		<DRAW_BUFFER14 public="1" get="inline" set="null" expr="34867" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14>
		<DRAW_BUFFER15 public="1" get="inline" set="null" expr="34868" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15>
		<MAX_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35657" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35657</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_COMPONENTS>
		<MAX_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35658" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35658</e></m></meta>
		</MAX_VERTEX_UNIFORM_COMPONENTS>
		<SAMPLER_3D public="1" get="inline" set="null" expr="35679" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35679</e></m></meta>
		</SAMPLER_3D>
		<SAMPLER_2D_SHADOW public="1" get="inline" set="null" expr="35682" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35682</e></m></meta>
		</SAMPLER_2D_SHADOW>
		<FRAGMENT_SHADER_DERIVATIVE_HINT public="1" get="inline" set="null" expr="35723" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
		</FRAGMENT_SHADER_DERIVATIVE_HINT>
		<PIXEL_PACK_BUFFER public="1" get="inline" set="null" expr="35051" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35051</e></m></meta>
		</PIXEL_PACK_BUFFER>
		<PIXEL_UNPACK_BUFFER public="1" get="inline" set="null" expr="35052" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35052</e></m></meta>
		</PIXEL_UNPACK_BUFFER>
		<PIXEL_PACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35053" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35053</e></m></meta>
		</PIXEL_PACK_BUFFER_BINDING>
		<PIXEL_UNPACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35055" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35055</e></m></meta>
		</PIXEL_UNPACK_BUFFER_BINDING>
		<FLOAT_MAT2x3 public="1" get="inline" set="null" expr="35685" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35685</e></m></meta>
		</FLOAT_MAT2x3>
		<FLOAT_MAT2x4 public="1" get="inline" set="null" expr="35686" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35686</e></m></meta>
		</FLOAT_MAT2x4>
		<FLOAT_MAT3x2 public="1" get="inline" set="null" expr="35687" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35687</e></m></meta>
		</FLOAT_MAT3x2>
		<FLOAT_MAT3x4 public="1" get="inline" set="null" expr="35688" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35688</e></m></meta>
		</FLOAT_MAT3x4>
		<FLOAT_MAT4x2 public="1" get="inline" set="null" expr="35689" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35689</e></m></meta>
		</FLOAT_MAT4x2>
		<FLOAT_MAT4x3 public="1" get="inline" set="null" expr="35690" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35690</e></m></meta>
		</FLOAT_MAT4x3>
		<SRGB public="1" get="inline" set="null" expr="35904" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
		</SRGB>
		<SRGB8 public="1" get="inline" set="null" expr="35905" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35905</e></m></meta>
		</SRGB8>
		<SRGB8_ALPHA8 public="1" get="inline" set="null" expr="35907" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
		</SRGB8_ALPHA8>
		<COMPARE_REF_TO_TEXTURE public="1" get="inline" set="null" expr="34894" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34894</e></m></meta>
		</COMPARE_REF_TO_TEXTURE>
		<RGBA32F public="1" get="inline" set="null" expr="34836" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
		</RGBA32F>
		<RGB32F public="1" get="inline" set="null" expr="34837" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
		</RGB32F>
		<RGBA16F public="1" get="inline" set="null" expr="34842" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
		</RGBA16F>
		<RGB16F public="1" get="inline" set="null" expr="34843" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
		</RGB16F>
		<VERTEX_ATTRIB_ARRAY_INTEGER public="1" get="inline" set="null" expr="35069" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35069</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_INTEGER>
		<MAX_ARRAY_TEXTURE_LAYERS public="1" get="inline" set="null" expr="35071" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35071</e></m></meta>
		</MAX_ARRAY_TEXTURE_LAYERS>
		<MIN_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="35076" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35076</e></m></meta>
		</MIN_PROGRAM_TEXEL_OFFSET>
		<MAX_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="35077" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35077</e></m></meta>
		</MAX_PROGRAM_TEXEL_OFFSET>
		<MAX_VARYING_COMPONENTS public="1" get="inline" set="null" expr="35659" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35659</e></m></meta>
		</MAX_VARYING_COMPONENTS>
		<TEXTURE_2D_ARRAY public="1" get="inline" set="null" expr="35866" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35866</e></m></meta>
		</TEXTURE_2D_ARRAY>
		<TEXTURE_BINDING_2D_ARRAY public="1" get="inline" set="null" expr="35869" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35869</e></m></meta>
		</TEXTURE_BINDING_2D_ARRAY>
		<R11F_G11F_B10F public="1" get="inline" set="null" expr="35898" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35898</e></m></meta>
		</R11F_G11F_B10F>
		<UNSIGNED_INT_10F_11F_11F_REV public="1" get="inline" set="null" expr="35899" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35899</e></m></meta>
		</UNSIGNED_INT_10F_11F_11F_REV>
		<RGB9_E5 public="1" get="inline" set="null" expr="35901" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35901</e></m></meta>
		</RGB9_E5>
		<UNSIGNED_INT_5_9_9_9_REV public="1" get="inline" set="null" expr="35902" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35902</e></m></meta>
		</UNSIGNED_INT_5_9_9_9_REV>
		<TRANSFORM_FEEDBACK_BUFFER_MODE public="1" get="inline" set="null" expr="35967" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35967</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_MODE>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS public="1" get="inline" set="null" expr="35968" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35968</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
		<TRANSFORM_FEEDBACK_VARYINGS public="1" get="inline" set="null" expr="35971" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35971</e></m></meta>
		</TRANSFORM_FEEDBACK_VARYINGS>
		<TRANSFORM_FEEDBACK_BUFFER_START public="1" get="inline" set="null" expr="35972" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35972</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_START>
		<TRANSFORM_FEEDBACK_BUFFER_SIZE public="1" get="inline" set="null" expr="35973" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35973</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_SIZE>
		<TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN public="1" get="inline" set="null" expr="35976" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35976</e></m></meta>
		</TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
		<RASTERIZER_DISCARD public="1" get="inline" set="null" expr="35977" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35977</e></m></meta>
		</RASTERIZER_DISCARD>
		<MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS public="1" get="inline" set="null" expr="35978" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35978</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="35979" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35979</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
		<INTERLEAVED_ATTRIBS public="1" get="inline" set="null" expr="35980" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35980</e></m></meta>
		</INTERLEAVED_ATTRIBS>
		<SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="35981" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35981</e></m></meta>
		</SEPARATE_ATTRIBS>
		<TRANSFORM_FEEDBACK_BUFFER public="1" get="inline" set="null" expr="35982" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35982</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER>
		<TRANSFORM_FEEDBACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35983" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35983</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_BINDING>
		<RGBA32UI public="1" get="inline" set="null" expr="36208" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36208</e></m></meta>
		</RGBA32UI>
		<RGB32UI public="1" get="inline" set="null" expr="36209" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36209</e></m></meta>
		</RGB32UI>
		<RGBA16UI public="1" get="inline" set="null" expr="36214" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36214</e></m></meta>
		</RGBA16UI>
		<RGB16UI public="1" get="inline" set="null" expr="36215" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36215</e></m></meta>
		</RGB16UI>
		<RGBA8UI public="1" get="inline" set="null" expr="36220" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36220</e></m></meta>
		</RGBA8UI>
		<RGB8UI public="1" get="inline" set="null" expr="36221" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36221</e></m></meta>
		</RGB8UI>
		<RGBA32I public="1" get="inline" set="null" expr="36226" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36226</e></m></meta>
		</RGBA32I>
		<RGB32I public="1" get="inline" set="null" expr="36227" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36227</e></m></meta>
		</RGB32I>
		<RGBA16I public="1" get="inline" set="null" expr="36232" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36232</e></m></meta>
		</RGBA16I>
		<RGB16I public="1" get="inline" set="null" expr="36233" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36233</e></m></meta>
		</RGB16I>
		<RGBA8I public="1" get="inline" set="null" expr="36238" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36238</e></m></meta>
		</RGBA8I>
		<RGB8I public="1" get="inline" set="null" expr="36239" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36239</e></m></meta>
		</RGB8I>
		<RED_INTEGER public="1" get="inline" set="null" expr="36244" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36244</e></m></meta>
		</RED_INTEGER>
		<RGB_INTEGER public="1" get="inline" set="null" expr="36248" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36248</e></m></meta>
		</RGB_INTEGER>
		<RGBA_INTEGER public="1" get="inline" set="null" expr="36249" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36249</e></m></meta>
		</RGBA_INTEGER>
		<SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36289" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36289</e></m></meta>
		</SAMPLER_2D_ARRAY>
		<SAMPLER_2D_ARRAY_SHADOW public="1" get="inline" set="null" expr="36292" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36292</e></m></meta>
		</SAMPLER_2D_ARRAY_SHADOW>
		<SAMPLER_CUBE_SHADOW public="1" get="inline" set="null" expr="36293" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36293</e></m></meta>
		</SAMPLER_CUBE_SHADOW>
		<UNSIGNED_INT_VEC2 public="1" get="inline" set="null" expr="36294" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36294</e></m></meta>
		</UNSIGNED_INT_VEC2>
		<UNSIGNED_INT_VEC3 public="1" get="inline" set="null" expr="36295" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36295</e></m></meta>
		</UNSIGNED_INT_VEC3>
		<UNSIGNED_INT_VEC4 public="1" get="inline" set="null" expr="36296" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36296</e></m></meta>
		</UNSIGNED_INT_VEC4>
		<INT_SAMPLER_2D public="1" get="inline" set="null" expr="36298" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36298</e></m></meta>
		</INT_SAMPLER_2D>
		<INT_SAMPLER_3D public="1" get="inline" set="null" expr="36299" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36299</e></m></meta>
		</INT_SAMPLER_3D>
		<INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="36300" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36300</e></m></meta>
		</INT_SAMPLER_CUBE>
		<INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36303" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36303</e></m></meta>
		</INT_SAMPLER_2D_ARRAY>
		<UNSIGNED_INT_SAMPLER_2D public="1" get="inline" set="null" expr="36306" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36306</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D>
		<UNSIGNED_INT_SAMPLER_3D public="1" get="inline" set="null" expr="36307" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36307</e></m></meta>
		</UNSIGNED_INT_SAMPLER_3D>
		<UNSIGNED_INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="36308" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36308</e></m></meta>
		</UNSIGNED_INT_SAMPLER_CUBE>
		<UNSIGNED_INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36311" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36311</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D_ARRAY>
		<DEPTH_COMPONENT32F public="1" get="inline" set="null" expr="36012" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36012</e></m></meta>
		</DEPTH_COMPONENT32F>
		<DEPTH32F_STENCIL8 public="1" get="inline" set="null" expr="36013" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36013</e></m></meta>
		</DEPTH32F_STENCIL8>
		<FLOAT_32_UNSIGNED_INT_24_8_REV public="1" get="inline" set="null" expr="36269" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36269</e></m></meta>
		</FLOAT_32_UNSIGNED_INT_24_8_REV>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING public="1" get="inline" set="null" expr="33296" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE public="1" get="inline" set="null" expr="33297" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_RED_SIZE public="1" get="inline" set="null" expr="33298" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33298</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_RED_SIZE>
		<FRAMEBUFFER_ATTACHMENT_GREEN_SIZE public="1" get="inline" set="null" expr="33299" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33299</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
		<FRAMEBUFFER_ATTACHMENT_BLUE_SIZE public="1" get="inline" set="null" expr="33300" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33300</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
		<FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE public="1" get="inline" set="null" expr="33301" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33301</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
		<FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE public="1" get="inline" set="null" expr="33302" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33302</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
		<FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE public="1" get="inline" set="null" expr="33303" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33303</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
		<FRAMEBUFFER_DEFAULT public="1" get="inline" set="null" expr="33304" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33304</e></m></meta>
		</FRAMEBUFFER_DEFAULT>
		<UNSIGNED_INT_24_8 public="1" get="inline" set="null" expr="34042" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
		</UNSIGNED_INT_24_8>
		<DEPTH24_STENCIL8 public="1" get="inline" set="null" expr="35056" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35056</e></m></meta>
		</DEPTH24_STENCIL8>
		<UNSIGNED_NORMALIZED public="1" get="inline" set="null" expr="35863" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
		</UNSIGNED_NORMALIZED>
		<DRAW_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</DRAW_FRAMEBUFFER_BINDING>
		<READ_FRAMEBUFFER public="1" get="inline" set="null" expr="36008" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36008</e></m></meta>
		</READ_FRAMEBUFFER>
		<DRAW_FRAMEBUFFER public="1" get="inline" set="null" expr="36009" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36009</e></m></meta>
		</DRAW_FRAMEBUFFER>
		<READ_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36010" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36010</e></m></meta>
		</READ_FRAMEBUFFER_BINDING>
		<RENDERBUFFER_SAMPLES public="1" get="inline" set="null" expr="36011" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36011</e></m></meta>
		</RENDERBUFFER_SAMPLES>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER public="1" get="inline" set="null" expr="36052" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36052</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
		<MAX_COLOR_ATTACHMENTS public="1" get="inline" set="null" expr="36063" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
		</MAX_COLOR_ATTACHMENTS>
		<COLOR_ATTACHMENT1 public="1" get="inline" set="null" expr="36065" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1>
		<COLOR_ATTACHMENT2 public="1" get="inline" set="null" expr="36066" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2>
		<COLOR_ATTACHMENT3 public="1" get="inline" set="null" expr="36067" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3>
		<COLOR_ATTACHMENT4 public="1" get="inline" set="null" expr="36068" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4>
		<COLOR_ATTACHMENT5 public="1" get="inline" set="null" expr="36069" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5>
		<COLOR_ATTACHMENT6 public="1" get="inline" set="null" expr="36070" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6>
		<COLOR_ATTACHMENT7 public="1" get="inline" set="null" expr="36071" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7>
		<COLOR_ATTACHMENT8 public="1" get="inline" set="null" expr="36072" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8>
		<COLOR_ATTACHMENT9 public="1" get="inline" set="null" expr="36073" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9>
		<COLOR_ATTACHMENT10 public="1" get="inline" set="null" expr="36074" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10>
		<COLOR_ATTACHMENT11 public="1" get="inline" set="null" expr="36075" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11>
		<COLOR_ATTACHMENT12 public="1" get="inline" set="null" expr="36076" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12>
		<COLOR_ATTACHMENT13 public="1" get="inline" set="null" expr="36077" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13>
		<COLOR_ATTACHMENT14 public="1" get="inline" set="null" expr="36078" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14>
		<COLOR_ATTACHMENT15 public="1" get="inline" set="null" expr="36079" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE public="1" get="inline" set="null" expr="36182" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36182</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
		<MAX_SAMPLES public="1" get="inline" set="null" expr="36183" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36183</e></m></meta>
		</MAX_SAMPLES>
		<HALF_FLOAT public="1" get="inline" set="null" expr="5131" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5131</e></m></meta>
		</HALF_FLOAT>
		<RG public="1" get="inline" set="null" expr="33319" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33319</e></m></meta>
		</RG>
		<RG_INTEGER public="1" get="inline" set="null" expr="33320" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33320</e></m></meta>
		</RG_INTEGER>
		<R8 public="1" get="inline" set="null" expr="33321" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33321</e></m></meta>
		</R8>
		<RG8 public="1" get="inline" set="null" expr="33323" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33323</e></m></meta>
		</RG8>
		<R16F public="1" get="inline" set="null" expr="33325" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33325</e></m></meta>
		</R16F>
		<R32F public="1" get="inline" set="null" expr="33326" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33326</e></m></meta>
		</R32F>
		<RG16F public="1" get="inline" set="null" expr="33327" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33327</e></m></meta>
		</RG16F>
		<RG32F public="1" get="inline" set="null" expr="33328" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33328</e></m></meta>
		</RG32F>
		<R8I public="1" get="inline" set="null" expr="33329" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33329</e></m></meta>
		</R8I>
		<R8UI public="1" get="inline" set="null" expr="33330" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33330</e></m></meta>
		</R8UI>
		<R16I public="1" get="inline" set="null" expr="33331" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33331</e></m></meta>
		</R16I>
		<R16UI public="1" get="inline" set="null" expr="33332" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33332</e></m></meta>
		</R16UI>
		<R32I public="1" get="inline" set="null" expr="33333" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33333</e></m></meta>
		</R32I>
		<R32UI public="1" get="inline" set="null" expr="33334" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33334</e></m></meta>
		</R32UI>
		<RG8I public="1" get="inline" set="null" expr="33335" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33335</e></m></meta>
		</RG8I>
		<RG8UI public="1" get="inline" set="null" expr="33336" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33336</e></m></meta>
		</RG8UI>
		<RG16I public="1" get="inline" set="null" expr="33337" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33337</e></m></meta>
		</RG16I>
		<RG16UI public="1" get="inline" set="null" expr="33338" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33338</e></m></meta>
		</RG16UI>
		<RG32I public="1" get="inline" set="null" expr="33339" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33339</e></m></meta>
		</RG32I>
		<RG32UI public="1" get="inline" set="null" expr="33340" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33340</e></m></meta>
		</RG32UI>
		<VERTEX_ARRAY_BINDING public="1" get="inline" set="null" expr="34229" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
		</VERTEX_ARRAY_BINDING>
		<R8_SNORM public="1" get="inline" set="null" expr="36756" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36756</e></m></meta>
		</R8_SNORM>
		<RG8_SNORM public="1" get="inline" set="null" expr="36757" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36757</e></m></meta>
		</RG8_SNORM>
		<RGB8_SNORM public="1" get="inline" set="null" expr="36758" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36758</e></m></meta>
		</RGB8_SNORM>
		<RGBA8_SNORM public="1" get="inline" set="null" expr="36759" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36759</e></m></meta>
		</RGBA8_SNORM>
		<SIGNED_NORMALIZED public="1" get="inline" set="null" expr="36764" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36764</e></m></meta>
		</SIGNED_NORMALIZED>
		<COPY_READ_BUFFER public="1" get="inline" set="null" expr="36662" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36662</e></m></meta>
		</COPY_READ_BUFFER>
		<COPY_WRITE_BUFFER public="1" get="inline" set="null" expr="36663" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36663</e></m></meta>
		</COPY_WRITE_BUFFER>
		<COPY_READ_BUFFER_BINDING public="1" get="inline" set="null" expr="36662" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36662</e></m></meta>
		</COPY_READ_BUFFER_BINDING>
		<COPY_WRITE_BUFFER_BINDING public="1" get="inline" set="null" expr="36663" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36663</e></m></meta>
		</COPY_WRITE_BUFFER_BINDING>
		<UNIFORM_BUFFER public="1" get="inline" set="null" expr="35345" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35345</e></m></meta>
		</UNIFORM_BUFFER>
		<UNIFORM_BUFFER_BINDING public="1" get="inline" set="null" expr="35368" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35368</e></m></meta>
		</UNIFORM_BUFFER_BINDING>
		<UNIFORM_BUFFER_START public="1" get="inline" set="null" expr="35369" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35369</e></m></meta>
		</UNIFORM_BUFFER_START>
		<UNIFORM_BUFFER_SIZE public="1" get="inline" set="null" expr="35370" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35370</e></m></meta>
		</UNIFORM_BUFFER_SIZE>
		<MAX_VERTEX_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35371" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35371</e></m></meta>
		</MAX_VERTEX_UNIFORM_BLOCKS>
		<MAX_FRAGMENT_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35373" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35373</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_BLOCKS>
		<MAX_COMBINED_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35374" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35374</e></m></meta>
		</MAX_COMBINED_UNIFORM_BLOCKS>
		<MAX_UNIFORM_BUFFER_BINDINGS public="1" get="inline" set="null" expr="35375" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35375</e></m></meta>
		</MAX_UNIFORM_BUFFER_BINDINGS>
		<MAX_UNIFORM_BLOCK_SIZE public="1" get="inline" set="null" expr="35376" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35376</e></m></meta>
		</MAX_UNIFORM_BLOCK_SIZE>
		<MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35377" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35377</e></m></meta>
		</MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
		<MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35379" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35379</e></m></meta>
		</MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
		<UNIFORM_BUFFER_OFFSET_ALIGNMENT public="1" get="inline" set="null" expr="35380" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35380</e></m></meta>
		</UNIFORM_BUFFER_OFFSET_ALIGNMENT>
		<ACTIVE_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35382" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35382</e></m></meta>
		</ACTIVE_UNIFORM_BLOCKS>
		<UNIFORM_TYPE public="1" get="inline" set="null" expr="35383" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35383</e></m></meta>
		</UNIFORM_TYPE>
		<UNIFORM_SIZE public="1" get="inline" set="null" expr="35384" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35384</e></m></meta>
		</UNIFORM_SIZE>
		<UNIFORM_BLOCK_INDEX public="1" get="inline" set="null" expr="35386" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35386</e></m></meta>
		</UNIFORM_BLOCK_INDEX>
		<UNIFORM_OFFSET public="1" get="inline" set="null" expr="35387" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35387</e></m></meta>
		</UNIFORM_OFFSET>
		<UNIFORM_ARRAY_STRIDE public="1" get="inline" set="null" expr="35388" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35388</e></m></meta>
		</UNIFORM_ARRAY_STRIDE>
		<UNIFORM_MATRIX_STRIDE public="1" get="inline" set="null" expr="35389" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35389</e></m></meta>
		</UNIFORM_MATRIX_STRIDE>
		<UNIFORM_IS_ROW_MAJOR public="1" get="inline" set="null" expr="35390" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35390</e></m></meta>
		</UNIFORM_IS_ROW_MAJOR>
		<UNIFORM_BLOCK_BINDING public="1" get="inline" set="null" expr="35391" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35391</e></m></meta>
		</UNIFORM_BLOCK_BINDING>
		<UNIFORM_BLOCK_DATA_SIZE public="1" get="inline" set="null" expr="35392" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35392</e></m></meta>
		</UNIFORM_BLOCK_DATA_SIZE>
		<UNIFORM_BLOCK_ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35394" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35394</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORMS>
		<UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES public="1" get="inline" set="null" expr="35395" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35395</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
		<UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER public="1" get="inline" set="null" expr="35396" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35396</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
		<UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER public="1" get="inline" set="null" expr="35398" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35398</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
		<INVALID_INDEX public="1" get="inline" set="null" expr="cast 4294967295" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</INVALID_INDEX>
		<MAX_VERTEX_OUTPUT_COMPONENTS public="1" get="inline" set="null" expr="37154" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37154</e></m></meta>
		</MAX_VERTEX_OUTPUT_COMPONENTS>
		<MAX_FRAGMENT_INPUT_COMPONENTS public="1" get="inline" set="null" expr="37157" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37157</e></m></meta>
		</MAX_FRAGMENT_INPUT_COMPONENTS>
		<MAX_SERVER_WAIT_TIMEOUT public="1" get="inline" set="null" expr="37137" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37137</e></m></meta>
		</MAX_SERVER_WAIT_TIMEOUT>
		<OBJECT_TYPE public="1" get="inline" set="null" expr="37138" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37138</e></m></meta>
		</OBJECT_TYPE>
		<SYNC_CONDITION public="1" get="inline" set="null" expr="37139" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37139</e></m></meta>
		</SYNC_CONDITION>
		<SYNC_STATUS public="1" get="inline" set="null" expr="37140" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37140</e></m></meta>
		</SYNC_STATUS>
		<SYNC_FLAGS public="1" get="inline" set="null" expr="37141" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37141</e></m></meta>
		</SYNC_FLAGS>
		<SYNC_FENCE public="1" get="inline" set="null" expr="37142" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37142</e></m></meta>
		</SYNC_FENCE>
		<SYNC_GPU_COMMANDS_COMPLETE public="1" get="inline" set="null" expr="37143" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37143</e></m></meta>
		</SYNC_GPU_COMMANDS_COMPLETE>
		<UNSIGNALED public="1" get="inline" set="null" expr="37144" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37144</e></m></meta>
		</UNSIGNALED>
		<SIGNALED public="1" get="inline" set="null" expr="37145" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37145</e></m></meta>
		</SIGNALED>
		<ALREADY_SIGNALED public="1" get="inline" set="null" expr="37146" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37146</e></m></meta>
		</ALREADY_SIGNALED>
		<TIMEOUT_EXPIRED public="1" get="inline" set="null" expr="37147" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37147</e></m></meta>
		</TIMEOUT_EXPIRED>
		<CONDITION_SATISFIED public="1" get="inline" set="null" expr="37148" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37148</e></m></meta>
		</CONDITION_SATISFIED>
		<WAIT_FAILED public="1" get="inline" set="null" expr="37149" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37149</e></m></meta>
		</WAIT_FAILED>
		<SYNC_FLUSH_COMMANDS_BIT public="1" get="inline" set="null" expr="1" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SYNC_FLUSH_COMMANDS_BIT>
		<VERTEX_ATTRIB_ARRAY_DIVISOR public="1" get="inline" set="null" expr="35070" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_DIVISOR>
		<ANY_SAMPLES_PASSED public="1" get="inline" set="null" expr="35887" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35887</e></m></meta>
		</ANY_SAMPLES_PASSED>
		<ANY_SAMPLES_PASSED_CONSERVATIVE public="1" get="inline" set="null" expr="36202" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36202</e></m></meta>
		</ANY_SAMPLES_PASSED_CONSERVATIVE>
		<SAMPLER_BINDING public="1" get="inline" set="null" expr="35097" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35097</e></m></meta>
		</SAMPLER_BINDING>
		<RGB10_A2UI public="1" get="inline" set="null" expr="36975" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36975</e></m></meta>
		</RGB10_A2UI>
		<INT_2_10_10_10_REV public="1" get="inline" set="null" expr="36255" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36255</e></m></meta>
		</INT_2_10_10_10_REV>
		<TRANSFORM_FEEDBACK public="1" get="inline" set="null" expr="36386" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36386</e></m></meta>
		</TRANSFORM_FEEDBACK>
		<TRANSFORM_FEEDBACK_PAUSED public="1" get="inline" set="null" expr="36387" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36387</e></m></meta>
		</TRANSFORM_FEEDBACK_PAUSED>
		<TRANSFORM_FEEDBACK_ACTIVE public="1" get="inline" set="null" expr="36388" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36388</e></m></meta>
		</TRANSFORM_FEEDBACK_ACTIVE>
		<TRANSFORM_FEEDBACK_BINDING public="1" get="inline" set="null" expr="36389" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36389</e></m></meta>
		</TRANSFORM_FEEDBACK_BINDING>
		<TEXTURE_IMMUTABLE_FORMAT public="1" get="inline" set="null" expr="37167" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37167</e></m></meta>
		</TEXTURE_IMMUTABLE_FORMAT>
		<MAX_ELEMENT_INDEX public="1" get="inline" set="null" expr="36203" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36203</e></m></meta>
		</MAX_ELEMENT_INDEX>
		<TEXTURE_IMMUTABLE_LEVELS public="1" get="inline" set="null" expr="33503" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33503</e></m></meta>
		</TEXTURE_IMMUTABLE_LEVELS>
		<TIMEOUT_IGNORED public="1" get="inline" set="null" expr="-1" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</TIMEOUT_IGNORED>
		<MAX_CLIENT_WAIT_TIMEOUT_WEBGL public="1" get="inline" set="null" expr="37447" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37447</e></m></meta>
		</MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="332" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="333" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="334" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="335" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="336" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="337" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="338" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="339" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="340" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="341" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="342" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="343" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="344" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="345" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="346" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="347" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="348" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="349" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="350" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="351" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="352" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="353" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="354" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="355" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="356" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="357" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="358" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="359" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="360" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="361" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="362" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="363" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="364" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="365" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="366" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="367" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="368" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="369" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="370" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="371" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="372" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="373" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="374" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="375" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="376" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="377" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="378" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="379" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="380" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="381" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="382" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="383" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="384" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="385" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="386" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="387" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="388" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="389" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="390" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="391" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="392" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="393" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="394" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="395" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="396" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="397" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="398" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="399" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="400" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="401" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="402" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="403" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="404" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="405" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="406" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="407" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="408" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="409" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="410" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="411" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="412" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="413" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="414" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="415" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="416" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="417" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="418" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="419" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="420" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="421" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="422" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="423" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="424" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="425" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="426" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="427" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="428" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="429" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="430" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="431" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="432" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="433" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="434" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="435" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="436" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="437" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="438" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="439" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="440" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="441" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="442" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="443" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="444" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="445" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="446" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="447" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="448" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="449" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="450" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="451" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="452" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="453" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="454" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="455" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="456" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="457" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="458" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="459" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="460" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="461" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="462" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="463" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="464" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="465" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="466" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="467" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="468" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="469" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="470" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="471" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="472" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="473" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="474" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="475" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="476" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="477" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="478" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="479" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="480" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="481" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="482" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="483" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="484" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="485" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="486" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="487" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="488" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="489" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="490" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="491" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="492" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="493" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="494" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="495" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="496" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="497" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="498" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="499" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="500" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="501" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="502" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="503" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="504" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="505" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="506" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="507" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="508" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="509" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="510" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="511" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="512" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="513" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="514" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="515" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="516" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="517" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="518" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="519" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="520" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="521" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="522" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="523" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="524" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="525" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="526" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="527" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="528" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="529" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="530" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="531" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="532" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="533" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="534" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="535" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="536" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="537" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="538" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="539" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="540" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="541" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="542" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="543" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="544" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="545" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="546" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="547" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="548" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="549" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="550" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="551" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="552" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="553" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="554" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="555" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="556" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="557" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="558" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="559" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="560" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="561" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="562" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="563" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="564" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="565" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="566" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="567" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="568" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="569" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="570" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="571" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="572" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="573" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="574" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="575" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="576" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="577" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="578" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="579" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="580" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="581" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="582" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="583" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="584" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="585" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="586" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="587" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="588" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="589" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="590" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="591" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="592" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="593" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="594" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<bufferData public="1" set="method" override="1">
			<f a="target:srcData:usage:srcOffset:?length" v="::::0">
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:size:usage">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:srcData:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:srcData:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method" override="1">
			<f a="target:dstByteOffset:srcData:srcOffset:?length" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
			<overloads>
				<bufferSubData public="1" set="method">
					<f a="target:offset:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
				</bufferSubData>
				<bufferSubData public="1" set="method">
					<f a="target:offset:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
				</bufferSubData>
			</overloads>
		</bufferSubData>
		<copyBufferSubData public="1" set="method">
			<f a="readTarget:writeTarget:readOffset:writeOffset:size">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies part of the data of a buffer to another buffer.</haxe_doc>
		</copyBufferSubData>
		<getBufferSubData public="1" set="method">
			<f a="target:srcByteOffset:dstData:?dstOffset:?length" v=":::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, dstOffset : 0 }</e></m></meta>
			<haxe_doc>Reads data from a buffer and writes them to an `ArrayBuffer` or `SharedArrayBuffer`.</haxe_doc>
		</getBufferSubData>
		<blitFramebuffer public="1" set="method">
			<f a="srcX0:srcY0:srcX1:srcY1:dstX0:dstY0:dstX1:dstY1:mask:filter">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Transfers a block of pixels from the read framebuffer to the draw framebuffer.</haxe_doc>
		</blitFramebuffer>
		<framebufferTextureLayer public="1" set="method">
			<f a="target:attachment:texture:level:layer">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a single layer of a texture to a framebuffer.</haxe_doc>
		</framebufferTextureLayer>
		<invalidateFramebuffer public="1" set="method">
			<f a="target:attachments">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Invalidates the contents of attachments in a framebuffer.
		@throws DOMError</haxe_doc>
		</invalidateFramebuffer>
		<invalidateSubFramebuffer public="1" set="method">
			<f a="target:attachments:x:y:width:height">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Invalidates portions of the contents of attachments in a framebuffer
		@throws DOMError</haxe_doc>
		</invalidateSubFramebuffer>
		<readBuffer public="1" set="method">
			<f a="src">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects a color buffer as the source for pixels.</haxe_doc>
		</readBuffer>
		<getInternalformatParameter public="1" set="method">
			<f a="target:internalformat:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about implementation-dependent support for internal formats.
		@throws DOMError</haxe_doc>
		</getInternalformatParameter>
		<renderbufferStorageMultisample public="1" set="method">
			<f a="target:samples:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates and initializes a renderbuffer object's data store and allows specifying the number of samples to be used.</haxe_doc>
		</renderbufferStorageMultisample>
		<texStorage2D public="1" set="method">
			<f a="target:levels:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies all levels of two-dimensional texture storage.</haxe_doc>
		</texStorage2D>
		<texStorage3D public="1" set="method">
			<f a="target:levels:internalformat:width:height:depth">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies all levels of a three-dimensional texture or two-dimensional array texture.</haxe_doc>
		</texStorage3D>
		<texImage2D public="1" set="method" override="1">
			<f a="target:level:internalformat:width:height:border:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texSubImage2D public="1" set="method" override="1">
			<f a="target:level:xoffset:yoffset:width:height:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<texImage3D public="1" set="method">
			<f a="target:level:internalformat:width:height:depth:border:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
			<overloads>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
			</overloads>
		</texImage3D>
		<texSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:srcData:?srcOffset" v=":::::::::::0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
			</overloads>
		</texSubImage3D>
		<copyTexSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies pixels from the current `WebGLFramebuffer` into an existing 3D texture sub-image.</haxe_doc>
		</copyTexSubImage3D>
		<compressedTexImage2D public="1" set="method" override="1">
			<f a="target:level:internalformat:width:height:border:srcData:?srcOffset:?srcLengthOverride" v=":::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<overloads><compressedTexImage2D public="1" set="method"><f a="target:level:internalformat:width:height:border:imageSize:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compressedTexImage2D></overloads>
		</compressedTexImage2D>
		<compressedTexImage3D public="1" set="method">
			<f a="target:level:internalformat:width:height:depth:border:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a three-dimensional texture image in a compressed format.</haxe_doc>
			<overloads><compressedTexImage3D public="1" set="method">
	<f a="target:level:internalformat:width:height:depth:border:imageSize:offset">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Specifies a three-dimensional texture image in a compressed format.</haxe_doc>
</compressedTexImage3D></overloads>
		</compressedTexImage3D>
		<compressedTexSubImage2D public="1" set="method" override="1">
			<f a="target:level:xoffset:yoffset:width:height:format:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<overloads><compressedTexSubImage2D public="1" set="method"><f a="target:level:xoffset:yoffset:width:height:format:imageSize:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compressedTexSubImage2D></overloads>
		</compressedTexSubImage2D>
		<compressedTexSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:srcData:?srcOffset:?srcLengthOverride" v="::::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.</haxe_doc>
			<overloads><compressedTexSubImage3D public="1" set="method">
	<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:imageSize:offset">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.</haxe_doc>
</compressedTexSubImage3D></overloads>
		</compressedTexSubImage3D>
		<getFragDataLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the binding of color numbers to user-defined varying out variables.</haxe_doc>
		</getFragDataLocation>
		<uniform1ui public="1" set="method"><f a="location:v0">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1ui>
		<uniform2ui public="1" set="method"><f a="location:v0:v1">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2ui>
		<uniform3ui public="1" set="method"><f a="location:v0:v1:v2">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3ui>
		<uniform4ui public="1" set="method"><f a="location:v0:v1:v2:v3">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4ui>
		<uniform1fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1fv></overloads>
		</uniform1fv>
		<uniform2fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2fv></overloads>
		</uniform2fv>
		<uniform3fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3fv></overloads>
		</uniform3fv>
		<uniform4fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4fv></overloads>
		</uniform4fv>
		<uniform1iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1iv></overloads>
		</uniform1iv>
		<uniform2iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2iv></overloads>
		</uniform2iv>
		<uniform3iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3iv></overloads>
		</uniform3iv>
		<uniform4iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4iv></overloads>
		</uniform4iv>
		<uniform1uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1uiv></overloads>
		</uniform1uiv>
		<uniform2uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2uiv></overloads>
		</uniform2uiv>
		<uniform3uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3uiv></overloads>
		</uniform3uiv>
		<uniform4uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4uiv></overloads>
		</uniform4uiv>
		<uniformMatrix2fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3x2fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3x2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3x2fv></overloads>
		</uniformMatrix3x2fv>
		<uniformMatrix4x2fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4x2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4x2fv></overloads>
		</uniformMatrix4x2fv>
		<uniformMatrix2x3fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2x3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2x3fv></overloads>
		</uniformMatrix2x3fv>
		<uniformMatrix3fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4x3fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4x3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4x3fv></overloads>
		</uniformMatrix4x3fv>
		<uniformMatrix2x4fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2x4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2x4fv></overloads>
		</uniformMatrix2x4fv>
		<uniformMatrix3x4fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3x4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3x4fv></overloads>
		</uniformMatrix3x4fv>
		<uniformMatrix4fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<vertexAttribI4i public="1" set="method"><f a="index:x:y:z:w">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4i>
		<vertexAttribI4iv public="1" set="method">
			<f a="index:values">
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttribI4iv public="1" set="method"><f a="index:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></vertexAttribI4iv></overloads>
		</vertexAttribI4iv>
		<vertexAttribI4ui public="1" set="method"><f a="index:x:y:z:w">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4ui>
		<vertexAttribI4uiv public="1" set="method">
			<f a="index:values">
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttribI4uiv public="1" set="method"><f a="index:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></vertexAttribI4uiv></overloads>
		</vertexAttribI4uiv>
		<vertexAttribIPointer public="1" set="method">
			<f a="index:size:type:stride:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies integer data formats and locations of vertex attributes in a vertex attributes array.</haxe_doc>
		</vertexAttribIPointer>
		<vertexAttribDivisor public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `WebGL2RenderingContext.drawArraysInstanced()` and `WebGL2RenderingContext.drawElementsInstanced()`.</haxe_doc>
		</vertexAttribDivisor>
		<drawArraysInstanced public="1" set="method">
			<f a="mode:first:count:instanceCount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data. In addition, it can execute multiple instances of the range of elements.</haxe_doc>
		</drawArraysInstanced>
		<drawElementsInstanced public="1" set="method">
			<f a="mode:count:type:offset:instanceCount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data. In addition, it can execute multiple instances of a set of elements.</haxe_doc>
		</drawElementsInstanced>
		<drawRangeElements public="1" set="method">
			<f a="mode:start:end:count:type:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data in a given range.</haxe_doc>
		</drawRangeElements>
		<readPixels public="1" set="method" override="1">
			<f a="x:y:width:height:format:type:dstData:dstOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<readPixels public="1" set="method">
					<f a="x:y:width:height:format:type:dstData">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readPixels>
				<readPixels public="1" set="method">
					<f a="x:y:width:height:format:type:offset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readPixels>
			</overloads>
		</readPixels>
		<drawBuffers public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a list of color buffers to be drawn into.</haxe_doc>
		</drawBuffers>
		<clearBufferfv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferfv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferfv></overloads>
		</clearBufferfv>
		<clearBufferiv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferiv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferiv></overloads>
		</clearBufferiv>
		<clearBufferuiv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferuiv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferuiv></overloads>
		</clearBufferuiv>
		<clearBufferfi public="1" set="method"><f a="buffer:drawbuffer:depth:stencil">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferfi>
		<createQuery public="1" set="method">
			<f a=""><c path="js.html.webgl.Query"/></f>
			<haxe_doc>Creates a new `WebGLQuery` object.</haxe_doc>
		</createQuery>
		<deleteQuery public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLQuery` object.</haxe_doc>
		</deleteQuery>
		<isQuery public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLQuery` object.</haxe_doc>
		</isQuery>
		<beginQuery public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Begins an asynchronous query.</haxe_doc>
		</beginQuery>
		<endQuery public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Marks the end of an asynchronous query.</haxe_doc>
		</endQuery>
		<getQuery public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns a `WebGLQuery` object for a given target.</haxe_doc>
		</getQuery>
		<getQueryParameter public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query.</haxe_doc>
		</getQueryParameter>
		<createSampler public="1" set="method">
			<f a=""><c path="js.html.webgl.Sampler"/></f>
			<haxe_doc>Creates a new `WebGLSampler` object.</haxe_doc>
		</createSampler>
		<deleteSampler public="1" set="method">
			<f a="sampler">
				<c path="js.html.webgl.Sampler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLSampler` object.</haxe_doc>
		</deleteSampler>
		<isSampler public="1" set="method">
			<f a="sampler">
				<c path="js.html.webgl.Sampler"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLSampler` object.</haxe_doc>
		</isSampler>
		<bindSampler public="1" set="method">
			<f a="unit:sampler">
				<x path="Int"/>
				<c path="js.html.webgl.Sampler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLSampler` to a texture unit.</haxe_doc>
		</bindSampler>
		<samplerParameteri public="1" set="method"><f a="sampler:pname:param">
	<c path="js.html.webgl.Sampler"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></samplerParameteri>
		<samplerParameterf public="1" set="method"><f a="sampler:pname:param">
	<c path="js.html.webgl.Sampler"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></samplerParameterf>
		<getSamplerParameter public="1" set="method">
			<f a="sampler:pname">
				<c path="js.html.webgl.Sampler"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns sampler parameter information.</haxe_doc>
		</getSamplerParameter>
		<fenceSync public="1" set="method">
			<f a="condition:flags">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Sync"/>
			</f>
			<haxe_doc>Creates a new `WebGLSync` object and inserts it into the GL command stream.</haxe_doc>
		</fenceSync>
		<isSync public="1" set="method">
			<f a="sync">
				<c path="js.html.webgl.Sync"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed object is a valid `WebGLSync` object.</haxe_doc>
		</isSync>
		<deleteSync public="1" set="method">
			<f a="sync">
				<c path="js.html.webgl.Sync"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLSync` object.</haxe_doc>
		</deleteSync>
		<clientWaitSync public="1" set="method">
			<f a="sync:flags:timeout">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Blocks and waits for a `WebGLSync` object to become signaled or a given timeout to be passed.</haxe_doc>
		</clientWaitSync>
		<waitSync public="1" set="method">
			<f a="sync:flags:timeout">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Returns immediately, but waits on the GL server until the given `WebGLSync` object is signaled.</haxe_doc>
		</waitSync>
		<getSyncParameter public="1" set="method">
			<f a="sync:pname">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns parameter information of a `WebGLSync` object.</haxe_doc>
		</getSyncParameter>
		<createTransformFeedback public="1" set="method">
			<f a=""><c path="js.html.webgl.TransformFeedback"/></f>
			<haxe_doc>Creates and initializes `WebGLTransformFeedback` objects.</haxe_doc>
		</createTransformFeedback>
		<deleteTransformFeedback public="1" set="method">
			<f a="tf">
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLTransformFeedback` object.</haxe_doc>
		</deleteTransformFeedback>
		<isTransformFeedback public="1" set="method">
			<f a="tf">
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed object is a valid `WebGLTransformFeedback` object.</haxe_doc>
		</isTransformFeedback>
		<bindTransformFeedback public="1" set="method">
			<f a="target:tf">
				<x path="Int"/>
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a passed `WebGLTransformFeedback` object to the current GL state.</haxe_doc>
		</bindTransformFeedback>
		<beginTransformFeedback public="1" set="method">
			<f a="primitiveMode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts a transform feedback operation.</haxe_doc>
		</beginTransformFeedback>
		<endTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Ends a transform feedback operation.</haxe_doc>
		</endTransformFeedback>
		<transformFeedbackVaryings public="1" set="method">
			<f a="program:varyings:bufferMode">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies values to record in `WebGLTransformFeedback` buffers.</haxe_doc>
		</transformFeedbackVaryings>
		<getTransformFeedbackVarying public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about varying variables from `WebGLTransformFeedback` buffers.</haxe_doc>
		</getTransformFeedbackVarying>
		<pauseTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses a transform feedback operation.</haxe_doc>
		</pauseTransformFeedback>
		<resumeTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resumes a transform feedback operation.</haxe_doc>
		</resumeTransformFeedback>
		<bindBufferBase public="1" set="method">
			<f a="target:index:buffer">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.</haxe_doc>
		</bindBufferBase>
		<bindBufferRange public="1" set="method">
			<f a="target:index:buffer:offset:size">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a range of a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.</haxe_doc>
		</bindBufferRange>
		<getIndexedParameter public="1" set="method">
			<f a="target:index">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns the indexed value for the given `target`.
		@throws DOMError</haxe_doc>
		</getIndexedParameter>
		<getUniformIndices public="1" set="method">
			<f a="program:uniformNames">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Retrieves the indices of a number of uniforms within a `WebGLProgram`.</haxe_doc>
		</getUniformIndices>
		<getActiveUniforms public="1" set="method">
			<f a="program:uniformIndices:pname">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Retrieves information about active uniforms within a `WebGLProgram`.</haxe_doc>
		</getActiveUniforms>
		<getUniformBlockIndex public="1" set="method">
			<f a="program:uniformBlockName">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Retrieves the index of a uniform block within a `WebGLProgram`.</haxe_doc>
		</getUniformBlockIndex>
		<getActiveUniformBlockParameter public="1" set="method">
			<f a="program:uniformBlockIndex:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Retrieves information about an active uniform block within a `WebGLProgram`.
		@throws DOMError</haxe_doc>
		</getActiveUniformBlockParameter>
		<getActiveUniformBlockName public="1" set="method">
			<f a="program:uniformBlockIndex">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the name of the active uniform block at a given index within a `WebGLProgram`.</haxe_doc>
		</getActiveUniformBlockName>
		<uniformBlockBinding public="1" set="method">
			<f a="program:uniformBlockIndex:uniformBlockBinding">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Assigns binding points for active uniform blocks.</haxe_doc>
		</uniformBlockBinding>
		<createVertexArray public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObject"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObject`.</haxe_doc>
		</createVertexArray>
		<deleteVertexArray public="1" set="method">
			<f a="vertexArray">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObject`.</haxe_doc>
		</deleteVertexArray>
		<isVertexArray public="1" set="method">
			<f a="vertexArray">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLVertexArrayObject`.</haxe_doc>
		</isVertexArray>
		<bindVertexArray public="1" set="method">
			<f a="array">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObject` to the buffer.</haxe_doc>
		</bindVertexArray>
		<getContextAttributes public="1" set="method" override="1"><f a=""><t path="js.html.webgl.ContextAttributes"/></f></getContextAttributes>
		<isContextLost public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isContextLost>
		<getSupportedExtensions public="1" set="method" override="1"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getExtension public="1" params="T" set="method" override="1">
			<f a="name">
				<x path="js.html.webgl.Extension"><c path="getExtension.T"/></x>
				<c path="getExtension.T"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method" override="1"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" set="method" override="1"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></attachShader>
		<bindAttribLocation public="1" set="method" override="1"><f a="program:index:name">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" set="method" override="1"><f a="target:buffer">
	<x path="Int"/>
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindFramebuffer public="1" set="method" override="1"><f a="target:framebuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" set="method" override="1"><f a="target:renderbuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindTexture public="1" set="method" override="1"><f a="target:texture">
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></bindTexture>
		<blendColor public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" set="method" override="1"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" set="method" override="1"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" set="method" override="1"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<checkFramebufferStatus public="1" set="method" override="1"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" set="method" override="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearColor public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepth public="1" set="method" override="1"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
		<clearStencil public="1" set="method" override="1"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<colorMask public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></compileShader>
		<copyTexImage2D public="1" set="method" override="1"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" set="method" override="1"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<createBuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Buffer"/></f></createBuffer>
		<createFramebuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Framebuffer"/></f></createFramebuffer>
		<createProgram public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Program"/></f></createProgram>
		<createRenderbuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Renderbuffer"/></f></createRenderbuffer>
		<createShader public="1" set="method" override="1"><f a="type">
	<x path="Int"/>
	<c path="js.html.webgl.Shader"/>
</f></createShader>
		<createTexture public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Texture"/></f></createTexture>
		<cullFace public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" set="method" override="1"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" set="method" override="1"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteRenderbuffer public="1" set="method" override="1"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteTexture public="1" set="method" override="1"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></deleteTexture>
		<depthFunc public="1" set="method" override="1"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" set="method" override="1"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRange public="1" set="method" override="1"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
		<detachShader public="1" set="method" override="1"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" set="method" override="1"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawElements public="1" set="method" override="1"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElements>
		<enable public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<finish public="1" set="method" override="1"><f a=""><x path="Void"/></f></finish>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" set="method" override="1"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method" override="1"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<frontFace public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" set="method" override="1"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" set="method" override="1"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" set="method" override="1"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveUniform>
		<getAttachedShaders public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="Array"><c path="js.html.webgl.Shader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" set="method" override="1"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBufferParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getParameter public="1" set="method" override="1">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method" override="1"><f a=""><x path="Int"/></f></getError>
		<getFramebufferAttachmentParameter public="1" set="method" override="1">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method" override="1"><f a="program:pname">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<d/>
</f></getProgramParameter>
		<getProgramInfoLog public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getShaderParameter public="1" set="method" override="1"><f a="shader:pname">
	<c path="js.html.webgl.Shader"/>
	<x path="Int"/>
	<d/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method" override="1"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.ShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderSource public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderSource>
		<getTexParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getUniform public="1" set="method" override="1"><f a="program:location">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.UniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformLocation public="1" set="method" override="1"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<c path="js.html.webgl.UniformLocation"/>
</f></getUniformLocation>
		<getVertexAttrib public="1" set="method" override="1">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method" override="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribOffset>
		<hint public="1" set="method" override="1"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<isBuffer public="1" set="method" override="1"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isEnabled public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" set="method" override="1"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Bool"/>
</f></isProgram>
		<isRenderbuffer public="1" set="method" override="1"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Bool"/>
</f></isShader>
		<isTexture public="1" set="method" override="1"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Bool"/>
</f></isTexture>
		<lineWidth public="1" set="method" override="1"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></linkProgram>
		<pixelStorei public="1" set="method" override="1"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" set="method" override="1"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<renderbufferStorage public="1" set="method" override="1"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<sampleCoverage public="1" set="method" override="1"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<scissor public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderSource public="1" set="method" override="1"><f a="shader:source">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" set="method" override="1"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" set="method" override="1"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" set="method" override="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" set="method" override="1"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" set="method" override="1"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" set="method" override="1"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texParameterf public="1" set="method" override="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method" override="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<uniform1f public="1" set="method" override="1"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform2f public="1" set="method" override="1"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform3f public="1" set="method" override="1"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform4f public="1" set="method" override="1"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform1i public="1" set="method" override="1"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform2i public="1" set="method" override="1"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform3i public="1" set="method" override="1"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform4i public="1" set="method" override="1"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<useProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" set="method" override="1"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method" override="1"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method" override="1"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method" override="1"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method" override="1"><f a="indx:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<haxe_doc><![CDATA[The WebGL2RenderingContext interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGL2RenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGL2RenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.ANGLEInstancedArrays" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/ANGLEInstancedArrays.hx" extern="1">
		<VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE public="1" get="inline" set="null" expr="35070" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
			<haxe_doc>Returns a `GLint` describing the frequency divisor used for instanced rendering when used in the `WebGLRenderingContext.getVertexAttrib()` as the `pname` parameter.</haxe_doc>
		</VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE>
		<drawArraysInstancedANGLE public="1" set="method">
			<f a="mode:first:count:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawArrays()` except that multiple instances of the range of elements are executed, and the instance advances for each iteration.</haxe_doc>
		</drawArraysInstancedANGLE>
		<drawElementsInstancedANGLE public="1" set="method">
			<f a="mode:count:type:offset:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawElements()` except that multiple instances of the set of elements are executed and the instance advances between each set.</haxe_doc>
		</drawElementsInstancedANGLE>
		<vertexAttribDivisorANGLE public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `ANGLE_instanced_arrays.drawArraysInstancedANGLE()` and `ANGLE_instanced_arrays.drawElementsInstancedANGLE()`.</haxe_doc>
		</vertexAttribDivisorANGLE>
		<haxe_doc><![CDATA[The `ANGLE_instanced_arrays` extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.

	Documentation [ANGLE_instanced_arrays](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays>]]></haxe_doc>
		<meta><m n=":native"><e>"ANGLE_instanced_arrays"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTBlendMinmax" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTBlendMinmax.hx" extern="1">
		<MIN_EXT public="1" get="inline" set="null" expr="32775" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
			<haxe_doc>Produces the minimum color components of the source and destination colors.</haxe_doc>
		</MIN_EXT>
		<MAX_EXT public="1" get="inline" set="null" expr="32776" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
			<haxe_doc>Produces the maximum color components of the source and destination colors.</haxe_doc>
		</MAX_EXT>
		<haxe_doc><![CDATA[The `EXT_blend_minmax` extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.

	Documentation [EXT_blend_minmax](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_blend_minmax"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.EXTColorBufferFloat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTColorBufferFloat.hx"><a/></typedef>
	<class path="js.html.webgl.extension.EXTColorBufferHalfFloat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTColorBufferHalfFloat.hx" extern="1">
		<RGBA16F_EXT public="1" get="inline" set="null" expr="34842" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
			<haxe_doc>RGBA 16-bit floating-point color-renderable format.</haxe_doc>
		</RGBA16F_EXT>
		<RGB16F_EXT public="1" get="inline" set="null" expr="34843" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
			<haxe_doc>RGB 16-bit floating-point color-renderable format.</haxe_doc>
		</RGB16F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `EXT_color_buffer_half_float` extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.

	Documentation [EXT_color_buffer_half_float](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_color_buffer_half_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTDisjointTimerQuery" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTDisjointTimerQuery.hx" extern="1">
		<QUERY_COUNTER_BITS_EXT public="1" get="inline" set="null" expr="34916" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34916</e></m></meta>
			<haxe_doc>A `GLint` indicating the number of bits used to hold the query result for the given target.</haxe_doc>
		</QUERY_COUNTER_BITS_EXT>
		<CURRENT_QUERY_EXT public="1" get="inline" set="null" expr="34917" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
			<haxe_doc>A `WebGLQuery` object, which is the currently active query for the given target.</haxe_doc>
		</CURRENT_QUERY_EXT>
		<QUERY_RESULT_EXT public="1" get="inline" set="null" expr="34918" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
			<haxe_doc>A `GLuint64EXT` containing the query result.</haxe_doc>
		</QUERY_RESULT_EXT>
		<QUERY_RESULT_AVAILABLE_EXT public="1" get="inline" set="null" expr="34919" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
			<haxe_doc>A `GLboolean` indicating whether or not a query result is available.</haxe_doc>
		</QUERY_RESULT_AVAILABLE_EXT>
		<TIME_ELAPSED_EXT public="1" get="inline" set="null" expr="35007" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35007</e></m></meta>
			<haxe_doc>Elapsed time (in nanoseconds).</haxe_doc>
		</TIME_ELAPSED_EXT>
		<TIMESTAMP_EXT public="1" get="inline" set="null" expr="36392" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36392</e></m></meta>
			<haxe_doc>The current time.</haxe_doc>
		</TIMESTAMP_EXT>
		<GPU_DISJOINT_EXT public="1" get="inline" set="null" expr="36795" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36795</e></m></meta>
			<haxe_doc>A `GLboolean` indicating whether or not the GPU performed any disjoint operation.</haxe_doc>
		</GPU_DISJOINT_EXT>
		<createQueryEXT public="1" set="method">
			<f a=""><c path="js.html.webgl.Query"/></f>
			<haxe_doc>Creates a new `WebGLQuery`.</haxe_doc>
		</createQueryEXT>
		<deleteQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLQuery`.</haxe_doc>
		</deleteQueryEXT>
		<isQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLQuery`.</haxe_doc>
		</isQueryEXT>
		<beginQueryEXT public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer starts when all commands prior to `beginQueryEXT` have been fully executed.</haxe_doc>
		</beginQueryEXT>
		<endQueryEXT public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer stops when all commands prior to `endQueryEXT` have been fully executed.</haxe_doc>
		</endQueryEXT>
		<queryCounterEXT public="1" set="method">
			<f a="query:target">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Records the current time into the corresponding query object.</haxe_doc>
		</queryCounterEXT>
		<getQueryEXT public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query target.</haxe_doc>
		</getQueryEXT>
		<getQueryObjectEXT public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Return the state of a query object.</haxe_doc>
		</getQueryObjectEXT>
		<haxe_doc><![CDATA[The EXT_disjoint_timer_query extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.

	Documentation [EXT_disjoint_timer_query](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_disjoint_timer_query"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.EXTFragDepth" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTFragDepth.hx"><a/></typedef>
	<typedef path="js.html.webgl.extension.EXTShaderTextureLod" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTShaderTextureLod.hx"><a/></typedef>
	<class path="js.html.webgl.extension.EXTSrgb" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTSrgb.hx" extern="1">
		<SRGB_EXT public="1" get="inline" set="null" expr="35904" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
			<haxe_doc>Unsized sRGB format that leaves the precision up to the driver.</haxe_doc>
		</SRGB_EXT>
		<SRGB_ALPHA_EXT public="1" get="inline" set="null" expr="35906" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35906</e></m></meta>
			<haxe_doc>Unsized sRGB format with unsized alpha component.</haxe_doc>
		</SRGB_ALPHA_EXT>
		<SRGB8_ALPHA8_EXT public="1" get="inline" set="null" expr="35907" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
			<haxe_doc>Sized (8-bit) sRGB and alpha formats.</haxe_doc>
		</SRGB8_ALPHA8_EXT>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT public="1" get="inline" set="null" expr="33296" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
			<haxe_doc>Returns the framebuffer color encoding (`gl.LINEAR` or `ext.SRGB_EXT`).</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT>
		<haxe_doc><![CDATA[The `EXT_sRGB` extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.

	Documentation [EXT_sRGB](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_sRGB"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTTextureFilterAnisotropic" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTTextureFilterAnisotropic.hx" extern="1">
		<TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34046" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34046</e></m></meta>
			<haxe_doc>This is the `pname` argument to the `WebGLRenderingContext.getTexParameter` and `WebGLRenderingContext.texParameterf` / `WebGLRenderingContext.texParameteri` calls and sets the desired maximum anisotropy for a texture.</haxe_doc>
		</TEXTURE_MAX_ANISOTROPY_EXT>
		<MAX_TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34047" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34047</e></m></meta>
			<haxe_doc>This is the `pname` argument to the `WebGLRenderingContext.getParameter` call, and it returns the maximum available anisotropy.</haxe_doc>
		</MAX_TEXTURE_MAX_ANISOTROPY_EXT>
		<haxe_doc><![CDATA[The `EXT_texture_filter_anisotropic` extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).

	Documentation [EXT_texture_filter_anisotropic](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_texture_filter_anisotropic"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESElementIndexUint" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESElementIndexUint.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESStandardDerivatives" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESStandardDerivatives.hx" extern="1">
		<FRAGMENT_SHADER_DERIVATIVE_HINT_OES public="1" get="inline" set="null" expr="35723" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
			<haxe_doc>A `Glenum` indicating the accuracy of the derivative calculation for the GLSL built-in functions: `dFdx`, `dFdy`, and `fwidth`.</haxe_doc>
		</FRAGMENT_SHADER_DERIVATIVE_HINT_OES>
		<haxe_doc><![CDATA[The `OES_standard_derivatives` extension is part of the WebGL API and adds the GLSL derivative functions `dFdx`, `dFdy`, and `fwidth`.

	Documentation [OES_standard_derivatives](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_standard_derivatives"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESTextureFloat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESTextureFloat.hx"><a/></typedef>
	<typedef path="js.html.webgl.extension.OESTextureFloatLinear" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESTextureFloatLinear.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESTextureHalfFloat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESTextureHalfFloat.hx" extern="1">
		<HALF_FLOAT_OES public="1" get="inline" set="null" expr="36193" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36193</e></m></meta>
			<haxe_doc>Half floating-point type (16-bit).</haxe_doc>
		</HALF_FLOAT_OES>
		<haxe_doc><![CDATA[The `OES_texture_half_float` extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.

	Documentation [OES_texture_half_float](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_texture_half_float"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESTextureHalfFloatLinear" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESTextureHalfFloatLinear.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESVertexArrayObject" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESVertexArrayObject.hx" extern="1">
		<VERTEX_ARRAY_BINDING_OES public="1" get="inline" set="null" expr="34229" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
			<haxe_doc>Returns a `WebGLVertexArrayObject` object when used in the `WebGLRenderingContext.getParameter()` method as the `pname` parameter.</haxe_doc>
		</VERTEX_ARRAY_BINDING_OES>
		<createVertexArrayOES public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObject"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObject`.</haxe_doc>
		</createVertexArrayOES>
		<deleteVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObject`.</haxe_doc>
		</deleteVertexArrayOES>
		<isVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLVertexArrayObject`.</haxe_doc>
		</isVertexArrayOES>
		<bindVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObject` to the buffer.</haxe_doc>
		</bindVertexArrayOES>
		<haxe_doc><![CDATA[The OES_vertex_array_object extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.

	Documentation [OES_vertex_array_object](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_vertex_array_object"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLColorBufferFloat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLColorBufferFloat.hx" extern="1">
		<RGBA32F_EXT public="1" get="inline" set="null" expr="34836" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
			<haxe_doc>RGBA 32-bit floating-point color-renderable format.</haxe_doc>
		</RGBA32F_EXT>
		<RGB32F_EXT public="1" get="inline" set="null" expr="34837" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
			<haxe_doc>RGB 32-bit floating-point color-renderable format.</haxe_doc>
		</RGB32F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `WEBGL_color_buffer_float` extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.

	Documentation [WEBGL_color_buffer_float](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_color_buffer_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureAstc" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureAstc.hx" extern="1">
		<COMPRESSED_RGBA_ASTC_4x4_KHR public="1" get="inline" set="null" expr="37808" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37808</e></m></meta>
		</COMPRESSED_RGBA_ASTC_4x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x4_KHR public="1" get="inline" set="null" expr="37809" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37809</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x5_KHR public="1" get="inline" set="null" expr="37810" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37810</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x5_KHR public="1" get="inline" set="null" expr="37811" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37811</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x6_KHR public="1" get="inline" set="null" expr="37812" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37812</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x5_KHR public="1" get="inline" set="null" expr="37813" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37813</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x5_KHR>
		<COMPRESSED_RGBA_ASTC_8x6_KHR public="1" get="inline" set="null" expr="37814" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37814</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x8_KHR public="1" get="inline" set="null" expr="37815" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37815</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x5_KHR public="1" get="inline" set="null" expr="37816" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37816</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x5_KHR>
		<COMPRESSED_RGBA_ASTC_10x6_KHR public="1" get="inline" set="null" expr="37817" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37817</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x6_KHR>
		<COMPRESSED_RGBA_ASTC_10x8_KHR public="1" get="inline" set="null" expr="37818" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37818</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x10_KHR public="1" get="inline" set="null" expr="37819" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37819</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x10_KHR public="1" get="inline" set="null" expr="37820" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37820</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x12_KHR public="1" get="inline" set="null" expr="37821" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37821</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x12_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR public="1" get="inline" set="null" expr="37840" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37840</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR public="1" get="inline" set="null" expr="37841" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37841</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR public="1" get="inline" set="null" expr="37842" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37842</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR public="1" get="inline" set="null" expr="37843" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37843</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR public="1" get="inline" set="null" expr="37844" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37844</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR public="1" get="inline" set="null" expr="37845" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37845</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR public="1" get="inline" set="null" expr="37846" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37846</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR public="1" get="inline" set="null" expr="37847" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37847</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR public="1" get="inline" set="null" expr="37848" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37848</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR public="1" get="inline" set="null" expr="37849" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37849</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR public="1" get="inline" set="null" expr="37850" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37850</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR public="1" get="inline" set="null" expr="37851" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37851</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR public="1" get="inline" set="null" expr="37852" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37852</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR public="1" get="inline" set="null" expr="37853" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37853</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR>
		<getSupportedProfiles public="1" set="method"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedProfiles>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_astc` extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.

	Documentation [WEBGL_compressed_texture_astc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_astc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureAtc" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureAtc.hx" extern="1">
		<COMPRESSED_RGB_ATC_WEBGL public="1" get="inline" set="null" expr="35986" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35986</e></m></meta>
			<haxe_doc>Compresses RGB textures with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB_ATC_WEBGL>
		<COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL public="1" get="inline" set="null" expr="35987" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35987</e></m></meta>
			<haxe_doc>Compresses RGBA textures using explicit alpha encoding (useful when alpha transitions are sharp).</haxe_doc>
		</COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL>
		<COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL public="1" get="inline" set="null" expr="34798" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34798</e></m></meta>
			<haxe_doc>Compresses RGBA textures using interpolated alpha encoding (useful when alpha transitions are gradient).</haxe_doc>
		</COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_atc` extension is part of the WebGL API and exposes 3 ATC compressed texture formats. ATC is a proprietary compression algorithm for compressing textures on handheld devices.

	Documentation [WEBGL_compressed_texture_atc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_atc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureEtc" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureEtc.hx" extern="1">
		<COMPRESSED_R11_EAC public="1" get="inline" set="null" expr="37488" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37488</e></m></meta>
			<haxe_doc>One-channel (red) unsigned format compression.</haxe_doc>
		</COMPRESSED_R11_EAC>
		<COMPRESSED_SIGNED_R11_EAC public="1" get="inline" set="null" expr="37489" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37489</e></m></meta>
			<haxe_doc>One-channel (red) signed format compression.</haxe_doc>
		</COMPRESSED_SIGNED_R11_EAC>
		<COMPRESSED_RG11_EAC public="1" get="inline" set="null" expr="37490" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37490</e></m></meta>
			<haxe_doc>Two-channel (red and green) unsigned format compression.</haxe_doc>
		</COMPRESSED_RG11_EAC>
		<COMPRESSED_SIGNED_RG11_EAC public="1" get="inline" set="null" expr="37491" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37491</e></m></meta>
			<haxe_doc>Two-channel (red and green) signed format compression.</haxe_doc>
		</COMPRESSED_SIGNED_RG11_EAC>
		<COMPRESSED_RGB8_ETC2 public="1" get="inline" set="null" expr="37492" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37492</e></m></meta>
			<haxe_doc>Compresses RGB8 data with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB8_ETC2>
		<COMPRESSED_SRGB8_ETC2 public="1" get="inline" set="null" expr="37493" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37493</e></m></meta>
			<haxe_doc>Compresses sRGB8 data with no alpha channel.</haxe_doc>
		</COMPRESSED_SRGB8_ETC2>
		<COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37494" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37494</e></m></meta>
			<haxe_doc>Similar to `RGB8_ETC`, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.</haxe_doc>
		</COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37495" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37495</e></m></meta>
			<haxe_doc>Similar to `SRGB8_ETC`, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.</haxe_doc>
		</COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_RGBA8_ETC2_EAC public="1" get="inline" set="null" expr="37496" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37496</e></m></meta>
			<haxe_doc>Compresses RGBA8 data. The RGB part is encoded the same as `RGB_ETC2`, but the alpha part is encoded separately.</haxe_doc>
		</COMPRESSED_RGBA8_ETC2_EAC>
		<COMPRESSED_SRGB8_ALPHA8_ETC2_EAC public="1" get="inline" set="null" expr="37497" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37497</e></m></meta>
			<haxe_doc>Compresses sRGBA8 data. The sRGB part is encoded the same as `SRGB_ETC2`, but the alpha part is encoded separately.</haxe_doc>
		</COMPRESSED_SRGB8_ALPHA8_ETC2_EAC>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc` extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.

	Documentation [WEBGL_compressed_texture_etc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureEtc1" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureEtc1.hx" extern="1">
		<COMPRESSED_RGB_ETC1_WEBGL public="1" get="inline" set="null" expr="36196" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36196</e></m></meta>
			<haxe_doc>Compresses 24-bit RGB data with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB_ETC1_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc1` extension is part of the WebGL API and exposes the ETC1 compressed texture format.

	Documentation [WEBGL_compressed_texture_etc1](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc1"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTexturePvrtc" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTexturePvrtc.hx" extern="1">
		<COMPRESSED_RGB_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35840" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35840</e></m></meta>
			<haxe_doc>RGB compression in 4-bit mode. One block for each 4×4 pixels.</haxe_doc>
		</COMPRESSED_RGB_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGB_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35841" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35841</e></m></meta>
			<haxe_doc>RGB compression in 2-bit mode. One block for each 8×4 pixels.</haxe_doc>
		</COMPRESSED_RGB_PVRTC_2BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35842" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35842</e></m></meta>
			<haxe_doc>RGBA compression in 4-bit mode. One block for each 4×4 pixels.</haxe_doc>
		</COMPRESSED_RGBA_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35843" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35843</e></m></meta>
			<haxe_doc>RGBA compression in 2-bit mode. One block for each 8×4 pixels.</haxe_doc>
		</COMPRESSED_RGBA_PVRTC_2BPPV1_IMG>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_pvrtc` extension is part of the WebGL API and exposes four PVRTC compressed texture formats.

	Documentation [WEBGL_compressed_texture_pvrtc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_pvrtc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureS3tc" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureS3tc.hx" extern="1">
		<COMPRESSED_RGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33776" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33776</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an RGB image format.</haxe_doc>
		</COMPRESSED_RGB_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33777" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33777</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an RGB image format with a simple on/off alpha value.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="33778" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33778</e></m></meta>
			<haxe_doc>A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT3_EXT>
		<COMPRESSED_RGBA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="33779" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33779</e></m></meta>
			<haxe_doc>A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc` extension is part of the WebGL API and exposes four S3TC compressed texture formats.

	Documentation [WEBGL_compressed_texture_s3tc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureS3tcSrgb" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureS3tcSrgb.hx" extern="1">
		<COMPRESSED_SRGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="35916" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35916</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an sRGB image format.</haxe_doc>
		</COMPRESSED_SRGB_S3TC_DXT1_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="35917" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35917</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an sRGB image format with a simple on/off alpha value.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="35918" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35918</e></m></meta>
			<haxe_doc>A DXT3-compressed image in an sRGBA image format.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="35919" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35919</e></m></meta>
			<haxe_doc>A DXT5-compressed image in an sRGBA image format.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc_srgb` extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.

	Documentation [WEBGL_compressed_texture_s3tc_srgb](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc_srgb"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLDebugRendererInfo" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLDebugRendererInfo.hx" extern="1">
		<UNMASKED_VENDOR_WEBGL public="1" get="inline" set="null" expr="37445" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37445</e></m></meta>
		</UNMASKED_VENDOR_WEBGL>
		<UNMASKED_RENDERER_WEBGL public="1" get="inline" set="null" expr="37446" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37446</e></m></meta>
		</UNMASKED_RENDERER_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_debug_renderer_info` extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.

	Documentation [WEBGL_debug_renderer_info](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_debug_renderer_info"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.WEBGLDebugShaders" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLDebugShaders.hx"><a><getTranslatedShaderSource set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getTranslatedShaderSource></a></typedef>
	<class path="js.html.webgl.extension.WEBGLDepthTexture" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLDepthTexture.hx" extern="1">
		<UNSIGNED_INT_24_8_WEBGL public="1" get="inline" set="null" expr="34042" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
			<haxe_doc>Unsigned integer type for 24-bit depth texture data.</haxe_doc>
		</UNSIGNED_INT_24_8_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_depth_texture` extension is part of the WebGL API and defines 2D depth and depth-stencil textures.

	Documentation [WEBGL_depth_texture](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_depth_texture"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLDrawBuffers" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLDrawBuffers.hx" extern="1">
		<COLOR_ATTACHMENT0_WEBGL public="1" get="inline" set="null" expr="36064" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
			<haxe_doc>A `GLenum` specifying a color buffer.</haxe_doc>
		</COLOR_ATTACHMENT0_WEBGL>
		<COLOR_ATTACHMENT1_WEBGL public="1" get="inline" set="null" expr="36065" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1_WEBGL>
		<COLOR_ATTACHMENT2_WEBGL public="1" get="inline" set="null" expr="36066" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2_WEBGL>
		<COLOR_ATTACHMENT3_WEBGL public="1" get="inline" set="null" expr="36067" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3_WEBGL>
		<COLOR_ATTACHMENT4_WEBGL public="1" get="inline" set="null" expr="36068" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4_WEBGL>
		<COLOR_ATTACHMENT5_WEBGL public="1" get="inline" set="null" expr="36069" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5_WEBGL>
		<COLOR_ATTACHMENT6_WEBGL public="1" get="inline" set="null" expr="36070" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6_WEBGL>
		<COLOR_ATTACHMENT7_WEBGL public="1" get="inline" set="null" expr="36071" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7_WEBGL>
		<COLOR_ATTACHMENT8_WEBGL public="1" get="inline" set="null" expr="36072" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8_WEBGL>
		<COLOR_ATTACHMENT9_WEBGL public="1" get="inline" set="null" expr="36073" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9_WEBGL>
		<COLOR_ATTACHMENT10_WEBGL public="1" get="inline" set="null" expr="36074" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10_WEBGL>
		<COLOR_ATTACHMENT11_WEBGL public="1" get="inline" set="null" expr="36075" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11_WEBGL>
		<COLOR_ATTACHMENT12_WEBGL public="1" get="inline" set="null" expr="36076" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12_WEBGL>
		<COLOR_ATTACHMENT13_WEBGL public="1" get="inline" set="null" expr="36077" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13_WEBGL>
		<COLOR_ATTACHMENT14_WEBGL public="1" get="inline" set="null" expr="36078" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14_WEBGL>
		<COLOR_ATTACHMENT15_WEBGL public="1" get="inline" set="null" expr="36079" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15_WEBGL>
		<DRAW_BUFFER0_WEBGL public="1" get="inline" set="null" expr="34853" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
			<haxe_doc>A `GLenum` returning a draw buffer.</haxe_doc>
		</DRAW_BUFFER0_WEBGL>
		<DRAW_BUFFER1_WEBGL public="1" get="inline" set="null" expr="34854" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1_WEBGL>
		<DRAW_BUFFER2_WEBGL public="1" get="inline" set="null" expr="34855" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2_WEBGL>
		<DRAW_BUFFER3_WEBGL public="1" get="inline" set="null" expr="34856" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3_WEBGL>
		<DRAW_BUFFER4_WEBGL public="1" get="inline" set="null" expr="34857" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4_WEBGL>
		<DRAW_BUFFER5_WEBGL public="1" get="inline" set="null" expr="34858" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5_WEBGL>
		<DRAW_BUFFER6_WEBGL public="1" get="inline" set="null" expr="34859" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6_WEBGL>
		<DRAW_BUFFER7_WEBGL public="1" get="inline" set="null" expr="34860" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7_WEBGL>
		<DRAW_BUFFER8_WEBGL public="1" get="inline" set="null" expr="34861" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8_WEBGL>
		<DRAW_BUFFER9_WEBGL public="1" get="inline" set="null" expr="34862" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9_WEBGL>
		<DRAW_BUFFER10_WEBGL public="1" get="inline" set="null" expr="34863" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10_WEBGL>
		<DRAW_BUFFER11_WEBGL public="1" get="inline" set="null" expr="34864" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11_WEBGL>
		<DRAW_BUFFER12_WEBGL public="1" get="inline" set="null" expr="34865" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12_WEBGL>
		<DRAW_BUFFER13_WEBGL public="1" get="inline" set="null" expr="34866" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13_WEBGL>
		<DRAW_BUFFER14_WEBGL public="1" get="inline" set="null" expr="34867" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14_WEBGL>
		<DRAW_BUFFER15_WEBGL public="1" get="inline" set="null" expr="34868" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15_WEBGL>
		<MAX_COLOR_ATTACHMENTS_WEBGL public="1" get="inline" set="null" expr="36063" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
			<haxe_doc>A `GLint` indicating the maximum number of framebuffer color attachment points.</haxe_doc>
		</MAX_COLOR_ATTACHMENTS_WEBGL>
		<MAX_DRAW_BUFFERS_WEBGL public="1" get="inline" set="null" expr="34852" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
			<haxe_doc>A `GLint` indicating the maximum number of draw buffers.</haxe_doc>
		</MAX_DRAW_BUFFERS_WEBGL>
		<drawBuffersWEBGL public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the draw buffers to which all fragment colors are written. (When using `WebGL2RenderingContext`, this method is available as `WebGL2RenderingContext.drawBuffers()` by default).</haxe_doc>
		</drawBuffersWEBGL>
		<haxe_doc><![CDATA[The `WEBGL_draw_buffers` extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.

	Documentation [WEBGL_draw_buffers](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_draw_buffers"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.WEBGLLoseContext" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLLoseContext.hx"><a>
	<restoreContext set="method"><f a=""><x path="Void"/></f></restoreContext>
	<loseContext set="method"><f a=""><x path="Void"/></f></loseContext>
</a></typedef>
	<class path="js.lib._ArrayBuffer.ArrayBufferCompat" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBuffer.hx" private="1" module="js.lib.ArrayBuffer">
		<sliceImpl set="method" line="40" static="1"><f a="begin:?end">
	<x path="Null"><x path="Int"/></x>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></sliceImpl>
		<meta>
			<m n=":keep"/>
			<m n=":ifFeature"><e>"js.lib.ArrayBuffer.slice"</e></m>
		</meta>
	</class>
	<class path="js.lib.Error" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Float32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float32Array"/>
	</f>
	<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float32Array` typed array represents an array of 32-bit floating point numbers
	(corresponding to the C float data type) in the platform byte order. If control over byte order is
	needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation)

	Documentation [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float32Array"</e></m></meta>
	</class>
	<class path="js.lib.Float64Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float64Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 8 in the case of an `Float64Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float64Array"/>
	</f>
	<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float64Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float64Array` typed array represents an array of 64-bit floating point numbers
	(corresponding to the C double data type) in the platform byte order. If control over byte order
	is needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation).

	Documentation [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/usr/local/lib/haxe/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.Int16Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Int16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int16Array"/>
	</f>
	<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int16Array"</e></m></meta>
	</class>
	<class path="js.lib.Int32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Int32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int32Array"/>
	</f>
	<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int32Array` typed array represents an array of twos-complement 32-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to `0`. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int32Array"</e></m></meta>
	</class>
	<class path="js.lib.Int8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Int8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int8Array"/>
	</f>
	<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<typedef path="js.lib.Iterator" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx">
		<a><next set="method"><f a=""><t path="js.lib.IteratorStep"><c path="js.lib.Iterator.T"/></t></f></next></a>
		<haxe_doc>Native JavaScript iterator structure. To enable haxe for-in iteration, use `js.lib.HaxeIterator`, for example `for (v in new js.lib.HaxeIterator(jsIterator))` or add `using js.lib.HaxeIterator;` to your module

	See [Iteration Protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)</haxe_doc>
	</typedef>
	<typedef path="js.lib.AsyncIterator" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx" module="js.lib.Iterator">
		<a><next set="method"><f a=""><c path="js.lib.Promise"><t path="js.lib.IteratorStep"><c path="js.lib.AsyncIterator.T"/></t></c></f></next></a>
		<haxe_doc>Native JavaScript async iterator structure. 

	See [for await...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)</haxe_doc>
	</typedef>
	<typedef path="js.lib.IteratorStep" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx" module="js.lib.Iterator"><a>
	<value>
		<x path="Null"><c path="js.lib.IteratorStep.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.lib.KeyValue" params="K:V" file="/usr/local/lib/haxe/std/js/lib/KeyValue.hx">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper.</haxe_doc>
		<impl><class path="js.lib._KeyValue.KeyValue_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/KeyValue.hx" private="1" module="js.lib.KeyValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Object" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<x path="haxe.extern.Rest"><a/></x>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
			<overloads><defineProperty public="1" params="T" set="method">
	<f a="obj:prop:descriptor">
		<c path="defineProperty.T"/>
		<c path="js.lib.Symbol"/>
		<t path="js.lib.ObjectPropertyDescriptor"/>
		<c path="defineProperty.T"/>
	</f>
	<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
</defineProperty></overloads>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
			<overloads>
				<getOwnPropertyDescriptor public="1" params="T" set="method">
					<f a="target:propertyKey">
						<c path="Array"><c path="getOwnPropertyDescriptor.T"/></c>
						<x path="Int"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
				<getOwnPropertyDescriptor public="1" set="method">
					<f a="obj:prop">
						<a/>
						<c path="js.lib.Symbol"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
			</overloads>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Object"</e></m>
		</meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Promise" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="resolve.T"/></x>
				<c path="js.lib.Promise"><c path="resolve.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
			<overloads><resolve public="1" params="T" set="method">
	<f a="?value">
		<c path="resolve.T"/>
		<c path="js.lib.Promise"><c path="resolve.T"/></c>
	</f>
	<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
</resolve></overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1">
			<f a="?reason">
				<d/>
				<c path="js.lib.Promise"><c path="reject.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is rejected with the given reason.</haxe_doc>
		</reject>
		<all public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><c path="Array"><d/></c></c>
			</f>
			<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
		</all>
		<race public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
		</race>
		<then public="1" params="TOut" set="method">
			<f a="onFulfilled:?onRejected">
				<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.Promise.T"/>
	<c path="then.TOut"/>
</x></x>
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="then.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="then.TOut"/></c>
			</f>
			<haxe_doc>Appends fulfillment and rejection handlers to the promise and returns a
		new promise resolving to the return value of the called handler, or to
		its original settled value if the promise was not handled
		(i.e. if the relevant handler onFulfilled or onRejected is not a function).</haxe_doc>
		</then>
		<catchError public="1" set="method">
			<f a="onRejected">
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="js.lib.Promise.T"/>
				</x>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
			<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
			<overloads><catch public="1" params="TOut" set="method">
	<f a="onRejected">
		<x path="js.lib.PromiseHandler">
			<d/>
			<c path="catchError.TOut"/>
		</x>
		<c path="js.lib.Promise"><x path="haxe.extern.EitherType">
	<c path="js.lib.Promise.T"/>
	<c path="catchError.TOut"/>
</x></c>
	</f>
	<meta><m n=":native"><e>"catch"</e></m></meta>
	<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
</catch></overloads>
		</catchError>
		<finally public="1" set="method">
			<f a="onFinally">
				<f a=""><x path="Void"/></f>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<haxe_doc>Returns a Promise. When the promise is settled, i.e either fulfilled or rejected,
		the specified callback function is executed. This provides a way for code to be run
		whether the promise was fulfilled successfully or rejected once the Promise has been dealt with.</haxe_doc>
		</finally>
		<new public="1" set="method">
			<f a="init">
				<f a="resolve:reject">
					<f a="value">
						<c path="js.lib.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="reason">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc>The Promise object represents the eventual completion (or failure) of an
	asynchronous operation and its resulting value.

	Documentation [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<abstract path="js.lib.PromiseHandler" params="T:TOut" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.Promise"><c path="js.lib.PromiseHandler.TOut"/></c>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<x path="js.lib.Thenable"><c path="js.lib.PromiseHandler.TOut"/></x>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.PromiseHandler.TOut"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<d/>
</f></this>
		<haxe_doc>Handler type for the Promise object.</haxe_doc>
		<impl><class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="js.lib.Thenable" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from><icast><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></icast></from>
		<this><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></this>
		<haxe_doc>A value with a `then` method.</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="js.lib._Promise.Thenable_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="js.lib.ThenableStruct" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise"><a><then params="TOut" set="method"><f a="onFulfilled:?onRejected">
	<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.ThenableStruct.T"/>
	<c path="then.TOut"/>
</x></x>
	<x path="js.lib.PromiseHandler">
		<d/>
		<c path="then.TOut"/>
	</x>
	<x path="js.lib.Thenable"><c path="then.TOut"/></x>
</f></then></a></typedef>
	<class path="js.lib.RegExpMatch" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The index of the search at which the result was found.</haxe_doc>
		</index>
		<input public="1">
			<c path="String"/>
			<haxe_doc>A copy of the search string.</haxe_doc>
		</input>
		<groups public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>Named capturing groups or undefined if no named capturing groups were defined.
		See [Groups and Ranges](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) for more information.

		Note: Not all browsers support this feature; refer to the [compatibility table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Browser_compatibility).</haxe_doc>
		</groups>
		<haxe_doc>A return value of the `RegExp.exec` method.</haxe_doc>
	</class>
	<class path="js.lib.Symbol" params="" file="/usr/local/lib/haxe/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<asyncIterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the default AsyncIterator for an object.</haxe_doc>
		</asyncIterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="66">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="js.lib.Uint16Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Uint16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint16Array"/>
	</f>
	<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint16Array` typed array represents an array of 16-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint16Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Uint32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint32Array"/>
	</f>
	<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint32Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint8ClampedArray" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8ClampedArray.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8ClampedArray`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8ClampedArray"/>
	</f>
	<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8ClampedArray` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8ClampedArray`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8ClampedArray"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped
	to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead;
	if you specify a non-integer, the nearest integer will be set. The contents are initialized to `0`.
	Once established, you can reference elements in the array using the object's methods, or using
	standard array index syntax (that is, using bracket notation).

	Documentation [Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<abstract path="js.lib.intl.LocaleMatcher" params="" file="/usr/local/lib/haxe/std/js/lib/intl/LocaleMatcher.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.intl.NumberFormat" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="number">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a number according to the locale
		and formatting options of this `NumberFormat` object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="?number">
				<x path="Float"/>
				<c path="Array"><t path="js.lib.intl.NumberFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the number string in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.NumberFormatResolvedOption"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.

	Documentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.NumberFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatOptions" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
		The default is `true`.</haxe_doc>
	</useGrouping>
	<style>
		<x path="Null"><x path="js.lib.intl.NumberFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The formatting style to use.
		The default is `Decimal`.</haxe_doc>
	</style>
	<minimumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of significant digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumSignificantDigits>
	<minimumIntegerDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of integer digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumIntegerDigits>
	<minimumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number and percent formatting is 0;
		the default for currency formatting is the number of minor unit digits provided by the
		[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information).</haxe_doc>
	</minimumFractionDigits>
	<maximumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of significant digits to use.
		Possible values are from 1 to 21; the default is 21.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number formatting is the larger of
		minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits
		and the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information); the default for percent formatting is the larger of
		minimumFractionDigits and 0.</haxe_doc>
	</maximumFractionDigits>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<currencyDisplay>
		<x path="Null"><x path="js.lib.intl.CurrencyDisplay"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>How to display the currency in currency formatting.
		The default is `Symbol`.</haxe_doc>
	</currencyDisplay>
	<currency>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,
		such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the
		[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).
		There is no default value; if the style is "currency", the currency property must be provided.]]></haxe_doc>
	</currency>
</a></typedef>
	<typedef path="js.lib.intl.NumberFormatResolvedOption" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</useGrouping>
	<style final="1" set="null"><x path="js.lib.intl.NumberFormatStyle"/></style>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the `options` argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were
		requested in the input BCP 47 language tag that led to this locale, the key-value pairs that
		were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<currencyDisplay final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are only present if `style` is `"currency"`.</haxe_doc>
	</currencyDisplay>
	<currency final="1" set="null"><c path="String"/></currency>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatStyle" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.lib.intl.CurrencyDisplay" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatPart" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<type final="1" set="null"><x path="js.lib.intl.NumberFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatPartType" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatSupportedLocalesOfOptions" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<typedef path="js.node.Buffer" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Buffer.hx"><c path="js.node.buffer.Buffer"/></typedef>
	<typedef path="js.node._ChildProcess.ChildProcessCommonOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" private="1" module="js.node.ChildProcess">
		<a>
			<uid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the user identity of the process. See setuid(2).</haxe_doc>
			</uid>
			<shell>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Shell to execute the command with.
		Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows.

		The shell should understand the -c switch on UNIX or /s /c on Windows.
		On Windows, command line parsing should be compatible with cmd.exe.</haxe_doc>
			</shell>
			<gid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the group identity of the process. See setgid(2).</haxe_doc>
			</gid>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Environment key-value pairs</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Current working directory of the child process.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>Common options for all `ChildProcess` methods.</haxe_doc>
	</typedef>
	<typedef path="js.node._ChildProcess.ChildProcessSpawnOptionsBase" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" private="1" module="js.node.ChildProcess">
		<a>
			<uid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the user identity of the process. See setuid(2).</haxe_doc>
			</uid>
			<stdio>
				<x path="Null"><t path="js.node.ChildProcessSpawnOptionsStdio"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Child's stdio configuration.</haxe_doc>
			</stdio>
			<shell>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Shell to execute the command with.
		Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows.

		The shell should understand the -c switch on UNIX or /s /c on Windows.
		On Windows, command line parsing should be compatible with cmd.exe.</haxe_doc>
			</shell>
			<gid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the group identity of the process. See setgid(2).</haxe_doc>
			</gid>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Environment key-value pairs</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Current working directory of the child process.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>Common options for `spawn` and `spawnSync` methods.</haxe_doc>
	</typedef>
	<typedef path="js.node.ChildProcessSpawnOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess">
		<a>
			<uid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the user identity of the process. See setuid(2).</haxe_doc>
			</uid>
			<stdio>
				<x path="Null"><t path="js.node.ChildProcessSpawnOptionsStdio"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Child's stdio configuration.</haxe_doc>
			</stdio>
			<shell>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Shell to execute the command with.
		Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows.

		The shell should understand the -c switch on UNIX or /s /c on Windows.
		On Windows, command line parsing should be compatible with cmd.exe.</haxe_doc>
			</shell>
			<gid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the group identity of the process. See setgid(2).</haxe_doc>
			</gid>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Environment key-value pairs</haxe_doc>
			</env>
			<detached>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The child will be a process group leader.</haxe_doc>
			</detached>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Current working directory of the child process.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>Options for the `spawn` method.</haxe_doc>
	</typedef>
	<typedef path="js.node.ChildProcessSpawnSyncOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess">
		<a>
			<uid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the user identity of the process. See setuid(2).</haxe_doc>
			</uid>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If greater than 0, then it will kill the child process if it runs longer than timeout milliseconds.</haxe_doc>
			</timeout>
			<stdio>
				<x path="Null"><t path="js.node.ChildProcessSpawnOptionsStdio"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Child's stdio configuration.</haxe_doc>
			</stdio>
			<shell>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Shell to execute the command with.
		Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows.

		The shell should understand the -c switch on UNIX or /s /c on Windows.
		On Windows, command line parsing should be compatible with cmd.exe.</haxe_doc>
			</shell>
			<maxBuffer>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The largest amount of data allowed on stdout or stderr.
		If this value is exceeded then the child process is killed.
		Default: 200*1024</haxe_doc>
			</maxBuffer>
			<killSignal>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The child process is killed with `killSignal` (default: 'SIGTERM').</haxe_doc>
			</killSignal>
			<input>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</input>
			<gid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the group identity of the process. See setgid(2).</haxe_doc>
			</gid>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Environment key-value pairs</haxe_doc>
			</env>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Default: 'utf8'</haxe_doc>
			</encoding>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Current working directory of the child process.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>Options for the `spawnSync` method.</haxe_doc>
	</typedef>
	<typedef path="js.node.ChildProcessSpawnOptionsStdio" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess">
		<x path="haxe.extern.EitherType">
			<x path="js.node.ChildProcessSpawnOptionsStdioSimple"/>
			<t path="js.node.ChildProcessSpawnOptionsStdioFull"/>
		</x>
		<haxe_doc>The `stdio` option is an array where each index corresponds to a fd in the child.
	The value is one of the following:

		* 'pipe' - Create a pipe between the child process and the parent process.
				   The parent end of the pipe is exposed to the parent as a property on the child_process object as ChildProcess.stdio[fd].
				   Pipes created for fds 0 - 2 are also available as ChildProcess.stdin, ChildProcess.stdout and ChildProcess.stderr, respectively.

		* 'ipc' - Create an IPC channel for passing messages/file descriptors between parent and child.
				  A ChildProcess may have at most one IPC stdio file descriptor. Setting this option enables the ChildProcess.send() method.
				  If the child writes JSON messages to this file descriptor, then this will trigger ChildProcess.on('message').
				  If the child is a Node.js program, then the presence of an IPC channel will enable process.send() and process.on('message').

		* 'ignore' - Do not set this file descriptor in the child. Note that Node will always open fd 0 - 2 for the processes it spawns.
					 When any of these is ignored node will open /dev/null and attach it to the child's fd.

		* Stream object - Share a readable or writable stream that refers to a tty, file, socket, or a pipe with the child process.
						  The stream's underlying file descriptor is duplicated in the child process to the fd that corresponds to the index
						  in the stdio array. Note that the stream must have an underlying descriptor (file streams do not until the 'open'
						  event has occurred).

		* Positive integer - The integer value is interpreted as a file descriptor that is is currently open in the parent process.
							 It is shared with the child process, similar to how Stream objects can be shared.

		* null - Use default value. For stdio fds 0, 1 and 2 (in other words, stdin, stdout, and stderr) a pipe is created.
				 For fd 3 and up, the default is 'ignore'.

	 As a shorthand, the stdio argument may also be one of the following strings, rather than an array:
		ignore - ['ignore', 'ignore', 'ignore']
		pipe - ['pipe', 'pipe', 'pipe']
		inherit - [process.stdin, process.stdout, process.stderr] or [0,1,2]</haxe_doc>
	</typedef>
	<abstract path="js.node.ChildProcessSpawnOptionsStdioSimple" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>A shorthand for the `stdio` argument in `ChildProcessSpawnOptions`</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._ChildProcess.ChildProcessSpawnOptionsStdioSimple_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" private="1" module="js.node.ChildProcess" extern="1" final="1">
	<Ignore public="1" get="inline" set="null" expr="cast &quot;ignore&quot;" line="143" static="1">
		<x path="js.node.ChildProcessSpawnOptionsStdioSimple"/>
		<meta>
			<m n=":value"><e>cast "ignore"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Equivalent to ['ignore', 'ignore', 'ignore']</haxe_doc>
	</Ignore>
	<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="148" static="1">
		<x path="js.node.ChildProcessSpawnOptionsStdioSimple"/>
		<meta>
			<m n=":value"><e>cast "pipe"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Equivalent to ['pipe', 'pipe', 'pipe']</haxe_doc>
	</Pipe>
	<Inherit public="1" get="inline" set="null" expr="cast &quot;inherit&quot;" line="153" static="1">
		<x path="js.node.ChildProcessSpawnOptionsStdioSimple"/>
		<meta>
			<m n=":value"><e>cast "inherit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Equivalent to [process.stdin, process.stdout, process.stderr] or [0,1,2]</haxe_doc>
	</Inherit>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._ChildProcess.ChildProcessSpawnOptionsStdioSimple_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" private="1" module="js.node.ChildProcess" extern="1" final="1">
		<Ignore public="1" get="inline" set="null" expr="cast &quot;ignore&quot;" line="143" static="1">
			<x path="js.node.ChildProcessSpawnOptionsStdioSimple"/>
			<meta>
				<m n=":value"><e>cast "ignore"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Equivalent to ['ignore', 'ignore', 'ignore']</haxe_doc>
		</Ignore>
		<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="148" static="1">
			<x path="js.node.ChildProcessSpawnOptionsStdioSimple"/>
			<meta>
				<m n=":value"><e>cast "pipe"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Equivalent to ['pipe', 'pipe', 'pipe']</haxe_doc>
		</Pipe>
		<Inherit public="1" get="inline" set="null" expr="cast &quot;inherit&quot;" line="153" static="1">
			<x path="js.node.ChildProcessSpawnOptionsStdioSimple"/>
			<meta>
				<m n=":value"><e>cast "inherit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Equivalent to [process.stdin, process.stdout, process.stderr] or [0,1,2]</haxe_doc>
		</Inherit>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.ChildProcessSpawnOptionsStdioBehaviour" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible `stdio` behaviours.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._ChildProcess.ChildProcessSpawnOptionsStdioBehaviour_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" private="1" module="js.node.ChildProcess" extern="1" final="1">
	<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="165" static="1">
		<x path="js.node.ChildProcessSpawnOptionsStdioBehaviour"/>
		<meta>
			<m n=":value"><e>cast "pipe"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Create a pipe between the child process and the parent process.
		The parent end of the pipe is exposed to the parent as a property on the child_process object as ChildProcess.stdio[fd].
		Pipes created for fds 0 - 2 are also available as ChildProcess.stdin, ChildProcess.stdout and ChildProcess.stderr, respectively.</haxe_doc>
	</Pipe>
	<Ipc public="1" get="inline" set="null" expr="cast &quot;ipc&quot;" line="179" static="1">
		<x path="js.node.ChildProcessSpawnOptionsStdioBehaviour"/>
		<meta>
			<m n=":value"><e>cast "ipc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Create an IPC channel for passing messages/file descriptors between parent and child.
		A ChildProcess may have at most one IPC stdio file descriptor.

		Setting this option enables the ChildProcess.send() method.

		If the child writes JSON messages to this file descriptor, then this will trigger
		ChildProcess.on('message').

		If the child is a Node.js program, then the presence of an IPC channel will
		enable process.send() and process.on('message').</haxe_doc>
	</Ipc>
	<Ignore public="1" get="inline" set="null" expr="cast &quot;ignore&quot;" line="186" static="1">
		<x path="js.node.ChildProcessSpawnOptionsStdioBehaviour"/>
		<meta>
			<m n=":value"><e>cast "ignore"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Do not set this file descriptor in the child.
		Note that Node will always open fd 0 - 2 for the processes it spawns.
		When any of these is ignored node will open /dev/null and attach it to the child's fd.</haxe_doc>
	</Ignore>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._ChildProcess.ChildProcessSpawnOptionsStdioBehaviour_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" private="1" module="js.node.ChildProcess" extern="1" final="1">
		<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="165" static="1">
			<x path="js.node.ChildProcessSpawnOptionsStdioBehaviour"/>
			<meta>
				<m n=":value"><e>cast "pipe"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Create a pipe between the child process and the parent process.
		The parent end of the pipe is exposed to the parent as a property on the child_process object as ChildProcess.stdio[fd].
		Pipes created for fds 0 - 2 are also available as ChildProcess.stdin, ChildProcess.stdout and ChildProcess.stderr, respectively.</haxe_doc>
		</Pipe>
		<Ipc public="1" get="inline" set="null" expr="cast &quot;ipc&quot;" line="179" static="1">
			<x path="js.node.ChildProcessSpawnOptionsStdioBehaviour"/>
			<meta>
				<m n=":value"><e>cast "ipc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Create an IPC channel for passing messages/file descriptors between parent and child.
		A ChildProcess may have at most one IPC stdio file descriptor.

		Setting this option enables the ChildProcess.send() method.

		If the child writes JSON messages to this file descriptor, then this will trigger
		ChildProcess.on('message').

		If the child is a Node.js program, then the presence of an IPC channel will
		enable process.send() and process.on('message').</haxe_doc>
		</Ipc>
		<Ignore public="1" get="inline" set="null" expr="cast &quot;ignore&quot;" line="186" static="1">
			<x path="js.node.ChildProcessSpawnOptionsStdioBehaviour"/>
			<meta>
				<m n=":value"><e>cast "ignore"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Do not set this file descriptor in the child.
		Note that Node will always open fd 0 - 2 for the processes it spawns.
		When any of these is ignored node will open /dev/null and attach it to the child's fd.</haxe_doc>
		</Ignore>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.ChildProcessSpawnOptionsStdioFull" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess"><c path="Array"><d/></c></typedef>
	<typedef path="js.node._ChildProcess.ChildProcessExecOptionsBase" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" private="1" module="js.node.ChildProcess">
		<a>
			<uid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the user identity of the process. See setuid(2).</haxe_doc>
			</uid>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If greater than 0, then it will kill the child process if it runs longer than timeout milliseconds.</haxe_doc>
			</timeout>
			<shell>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Shell to execute the command with.
		Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows.

		The shell should understand the -c switch on UNIX or /s /c on Windows.
		On Windows, command line parsing should be compatible with cmd.exe.</haxe_doc>
			</shell>
			<maxBuffer>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The largest amount of data allowed on stdout or stderr.
		If this value is exceeded then the child process is killed.
		Default: 200*1024</haxe_doc>
			</maxBuffer>
			<killSignal>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The child process is killed with `killSignal` (default: 'SIGTERM').</haxe_doc>
			</killSignal>
			<gid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the group identity of the process. See setgid(2).</haxe_doc>
			</gid>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Environment key-value pairs</haxe_doc>
			</env>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Default: 'utf8'</haxe_doc>
			</encoding>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Current working directory of the child process.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>Common options for `exec` and `execFile` methods.</haxe_doc>
	</typedef>
	<typedef path="js.node.ChildProcessExecOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess">
		<a>
			<uid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the user identity of the process. See setuid(2).</haxe_doc>
			</uid>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If greater than 0, then it will kill the child process if it runs longer than timeout milliseconds.</haxe_doc>
			</timeout>
			<shell>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Shell to execute the command with.
		Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows.

		The shell should understand the -c switch on UNIX or /s /c on Windows.
		On Windows, command line parsing should be compatible with cmd.exe.</haxe_doc>
			</shell>
			<maxBuffer>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The largest amount of data allowed on stdout or stderr.
		If this value is exceeded then the child process is killed.
		Default: 200*1024</haxe_doc>
			</maxBuffer>
			<killSignal>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The child process is killed with `killSignal` (default: 'SIGTERM').</haxe_doc>
			</killSignal>
			<gid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the group identity of the process. See setgid(2).</haxe_doc>
			</gid>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Environment key-value pairs</haxe_doc>
			</env>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Default: 'utf8'</haxe_doc>
			</encoding>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Current working directory of the child process.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>Options for the `exec` method.</haxe_doc>
	</typedef>
	<typedef path="js.node.ChildProcessExecFileOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess">
		<a>
			<uid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the user identity of the process. See setuid(2).</haxe_doc>
			</uid>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If greater than 0, then it will kill the child process if it runs longer than timeout milliseconds.</haxe_doc>
			</timeout>
			<shell>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Shell to execute the command with.
		Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows.

		The shell should understand the -c switch on UNIX or /s /c on Windows.
		On Windows, command line parsing should be compatible with cmd.exe.</haxe_doc>
			</shell>
			<maxBuffer>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The largest amount of data allowed on stdout or stderr.
		If this value is exceeded then the child process is killed.
		Default: 200*1024</haxe_doc>
			</maxBuffer>
			<killSignal>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The child process is killed with `killSignal` (default: 'SIGTERM').</haxe_doc>
			</killSignal>
			<gid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the group identity of the process. See setgid(2).</haxe_doc>
			</gid>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Environment key-value pairs</haxe_doc>
			</env>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Default: 'utf8'</haxe_doc>
			</encoding>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Current working directory of the child process.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>Options for the `execFile` method.</haxe_doc>
	</typedef>
	<typedef path="js.node.ChildProcessForkOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess">
		<a>
			<uid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the user identity of the process. See setuid(2).</haxe_doc>
			</uid>
			<silent>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If `true`, stdin, stdout, and stderr of the child will be piped to the parent,
		otherwise they will be inherited from the parent, see the "pipe" and "inherit"
		options for `ChildProcessSpawnOptions.stdio` for more details (default is `false`)</haxe_doc>
			</silent>
			<shell>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Shell to execute the command with.
		Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows.

		The shell should understand the -c switch on UNIX or /s /c on Windows.
		On Windows, command line parsing should be compatible with cmd.exe.</haxe_doc>
			</shell>
			<gid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets the group identity of the process. See setgid(2).</haxe_doc>
			</gid>
			<execPath>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Executable used to create the child process</haxe_doc>
			</execPath>
			<execArgv>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>List of string arguments passed to the executable (Default: process.execArgv)</haxe_doc>
			</execArgv>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Environment key-value pairs</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Current working directory of the child process.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>Options for the `fork` method.</haxe_doc>
	</typedef>
	<class path="js.node.ChildProcessExecError" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess" extern="1">
		<extends path="js.lib.Error"/>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>the exit code of the child proces.</haxe_doc>
		</code>
		<signal public="1" set="null">
			<c path="String"/>
			<haxe_doc>the signal that terminated the process.</haxe_doc>
		</signal>
		<haxe_doc>An error passed to the `ChildProcess.exec` callback.</haxe_doc>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="js.node.ChildProcessExecCallback" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess">
		<f a="error:stdout:stderr">
			<x path="Null"><c path="js.node.ChildProcessExecError"/></x>
			<x path="haxe.extern.EitherType">
				<t path="js.node.Buffer"/>
				<c path="String"/>
			</x>
			<x path="haxe.extern.EitherType">
				<t path="js.node.Buffer"/>
				<c path="String"/>
			</x>
			<x path="Void"/>
		</f>
		<haxe_doc>A callback type for `ChildProcess.exec`.
	It receives three arguments: `error`, `stdout`, `stderr`.

	On success, error will be `null`. On error, `error` will be an instance of `Error`
	and `error.code` will be the exit code of the child process, and `error.signal` will be set
	to the signal that terminated the process (see `ChildProcessExecError`).</haxe_doc>
	</typedef>
	<typedef path="js.node.ChildProcessSpawnSyncResult" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" module="js.node.ChildProcess">
		<a>
			<stdout>
				<x path="haxe.extern.EitherType">
					<t path="js.node.Buffer"/>
					<c path="String"/>
				</x>
				<haxe_doc>The contents of output[1]</haxe_doc>
			</stdout>
			<stderr>
				<x path="haxe.extern.EitherType">
					<t path="js.node.Buffer"/>
					<c path="String"/>
				</x>
				<haxe_doc>The contents of output[2]</haxe_doc>
			</stderr>
			<status>
				<x path="Int"/>
				<haxe_doc>The exit code of the child process</haxe_doc>
			</status>
			<signal>
				<c path="String"/>
				<haxe_doc>The signal used to kill the child process</haxe_doc>
			</signal>
			<pid>
				<x path="Int"/>
				<haxe_doc>Pid of the child process</haxe_doc>
			</pid>
			<output>
				<c path="Array"><x path="haxe.extern.EitherType">
	<t path="js.node.Buffer"/>
	<c path="String"/>
</x></c>
				<haxe_doc>Array of results from stdio output</haxe_doc>
			</output>
			<error>
				<c path="js.lib.Error"/>
				<haxe_doc>The error object if the child process failed or timed out</haxe_doc>
			</error>
		</a>
		<haxe_doc>Object returned from the `spawnSync` method.</haxe_doc>
	</typedef>
	<class path="js.node.ChildProcess" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/ChildProcess.hx" extern="1">
		<spawn public="1" set="method" static="1">
			<f a="command:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
			</f>
			<haxe_doc>Launches a new process with the given `command`, with command line arguments in `args`.
		If omitted, `args` defaults to an empty `Array`.

		The third argument is used to specify additional options, which defaults to:
			{ cwd: null,
			  env: process.env
			}

		Note that if spawn receives an empty options object, it will result in spawning the process with an empty
		environment rather than using `process.env`. This due to backwards compatibility issues with a deprecated API.</haxe_doc>
			<overloads>
				<spawn public="1" set="method">
					<f a="command:?options">
						<c path="String"/>
						<x path="Null"><t path="js.node.ChildProcessSpawnOptions"/></x>
						<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
					</f>
					<haxe_doc>Launches a new process with the given `command`, with command line arguments in `args`.
		If omitted, `args` defaults to an empty `Array`.

		The third argument is used to specify additional options, which defaults to:
			{ cwd: null,
			  env: process.env
			}

		Note that if spawn receives an empty options object, it will result in spawning the process with an empty
		environment rather than using `process.env`. This due to backwards compatibility issues with a deprecated API.</haxe_doc>
				</spawn>
				<spawn public="1" set="method">
					<f a="command:args:?options">
						<c path="String"/>
						<c path="Array"><c path="String"/></c>
						<x path="Null"><t path="js.node.ChildProcessSpawnOptions"/></x>
						<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
					</f>
					<haxe_doc>Launches a new process with the given `command`, with command line arguments in `args`.
		If omitted, `args` defaults to an empty `Array`.

		The third argument is used to specify additional options, which defaults to:
			{ cwd: null,
			  env: process.env
			}

		Note that if spawn receives an empty options object, it will result in spawning the process with an empty
		environment rather than using `process.env`. This due to backwards compatibility issues with a deprecated API.</haxe_doc>
				</spawn>
			</overloads>
		</spawn>
		<exec public="1" set="method" static="1">
			<f a="command:callback">
				<c path="String"/>
				<t path="js.node.ChildProcessExecCallback"/>
				<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
			</f>
			<haxe_doc>Runs a command in a shell and buffers the output.

		`command` is the command to run, with space-separated arguments.

		The default `options` are:
			{ encoding: 'utf8',
			  timeout: 0,
			  maxBuffer: 200*1024,
			  killSignal: 'SIGTERM',
			  cwd: null,
			  env: null }</haxe_doc>
			<overloads><exec public="1" set="method">
	<f a="command:options:callback">
		<c path="String"/>
		<t path="js.node.ChildProcessExecOptions"/>
		<t path="js.node.ChildProcessExecCallback"/>
		<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
	</f>
	<haxe_doc>Runs a command in a shell and buffers the output.

		`command` is the command to run, with space-separated arguments.

		The default `options` are:
			{ encoding: 'utf8',
			  timeout: 0,
			  maxBuffer: 200*1024,
			  killSignal: 'SIGTERM',
			  cwd: null,
			  env: null }</haxe_doc>
</exec></overloads>
		</exec>
		<execFile public="1" set="method" static="1">
			<f a="file:?callback">
				<c path="String"/>
				<x path="Null"><t path="js.node.ChildProcessExecCallback"/></x>
				<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
			</f>
			<haxe_doc>This is similar to `exec` except it does not execute a subshell but rather the specified file directly.
		This makes it slightly leaner than `exec`</haxe_doc>
			<overloads>
				<execFile public="1" set="method">
					<f a="file:args:options:?callback">
						<c path="String"/>
						<c path="Array"><c path="String"/></c>
						<t path="js.node.ChildProcessExecFileOptions"/>
						<x path="Null"><t path="js.node.ChildProcessExecCallback"/></x>
						<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
					</f>
					<haxe_doc>This is similar to `exec` except it does not execute a subshell but rather the specified file directly.
		This makes it slightly leaner than `exec`</haxe_doc>
				</execFile>
				<execFile public="1" set="method">
					<f a="file:options:?callback">
						<c path="String"/>
						<t path="js.node.ChildProcessExecFileOptions"/>
						<x path="Null"><t path="js.node.ChildProcessExecCallback"/></x>
						<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
					</f>
					<haxe_doc>This is similar to `exec` except it does not execute a subshell but rather the specified file directly.
		This makes it slightly leaner than `exec`</haxe_doc>
				</execFile>
				<execFile public="1" set="method">
					<f a="file:args:?callback">
						<c path="String"/>
						<c path="Array"><c path="String"/></c>
						<x path="Null"><t path="js.node.ChildProcessExecCallback"/></x>
						<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
					</f>
					<haxe_doc>This is similar to `exec` except it does not execute a subshell but rather the specified file directly.
		This makes it slightly leaner than `exec`</haxe_doc>
				</execFile>
			</overloads>
		</execFile>
		<fork public="1" set="method" static="1">
			<f a="modulePath:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
			</f>
			<haxe_doc>This is a special case of the `spawn` functionality for spawning Node processes.
		In addition to having all the methods in a normal `ChildProcess` instance,
		the returned object has a communication channel built-in.
		See `send` for details.</haxe_doc>
			<overloads>
				<fork public="1" set="method">
					<f a="modulePath:args:options">
						<c path="String"/>
						<c path="Array"><c path="String"/></c>
						<t path="js.node.ChildProcessForkOptions"/>
						<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
					</f>
					<haxe_doc>This is a special case of the `spawn` functionality for spawning Node processes.
		In addition to having all the methods in a normal `ChildProcess` instance,
		the returned object has a communication channel built-in.
		See `send` for details.</haxe_doc>
				</fork>
				<fork public="1" set="method">
					<f a="modulePath:options">
						<c path="String"/>
						<t path="js.node.ChildProcessForkOptions"/>
						<t path="js.node.child_process._ChildProcess.ChildProcessObject"/>
					</f>
					<haxe_doc>This is a special case of the `spawn` functionality for spawning Node processes.
		In addition to having all the methods in a normal `ChildProcess` instance,
		the returned object has a communication channel built-in.
		See `send` for details.</haxe_doc>
				</fork>
			</overloads>
		</fork>
		<spawnSync public="1" set="method" static="1">
			<f a="command:?options">
				<c path="String"/>
				<x path="Null"><t path="js.node.ChildProcessSpawnSyncOptions"/></x>
				<t path="js.node.ChildProcessSpawnSyncResult"/>
			</f>
			<haxe_doc>Synchronous version of `spawn`.

		`spawnSync` will not return until the child process has fully closed.
		When a timeout has been encountered and `killSignal` is sent, the method won't return until the process
		has completely exited. That is to say, if the process handles the SIGTERM signal and doesn't exit,
		your process will wait until the child process has exited.</haxe_doc>
			<overloads><spawnSync public="1" set="method">
	<f a="command:args:?options">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.node.ChildProcessSpawnSyncOptions"/></x>
		<t path="js.node.ChildProcessSpawnSyncResult"/>
	</f>
	<haxe_doc>Synchronous version of `spawn`.

		`spawnSync` will not return until the child process has fully closed.
		When a timeout has been encountered and `killSignal` is sent, the method won't return until the process
		has completely exited. That is to say, if the process handles the SIGTERM signal and doesn't exit,
		your process will wait until the child process has exited.</haxe_doc>
</spawnSync></overloads>
		</spawnSync>
		<execFileSync public="1" set="method" static="1">
			<f a="command:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.Buffer"/>
				</x>
			</f>
			<haxe_doc>Synchronous version of `execFile`.

		`execFileSync` will not return until the child process has fully closed.
		When a timeout has been encountered and `killSignal` is sent, the method won't return until the process
		has completely exited. That is to say, if the process handles the SIGTERM signal and doesn't exit,
		your process will wait until the child process has exited.

		If the process times out, or has a non-zero exit code, this method will throw.
		The Error object will contain the entire result from `spawnSync`</haxe_doc>
			<overloads>
				<execFileSync public="1" set="method">
					<f a="command:?options">
						<c path="String"/>
						<x path="Null"><t path="js.node.ChildProcessSpawnSyncOptions"/></x>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<t path="js.node.Buffer"/>
						</x>
					</f>
					<haxe_doc>Synchronous version of `execFile`.

		`execFileSync` will not return until the child process has fully closed.
		When a timeout has been encountered and `killSignal` is sent, the method won't return until the process
		has completely exited. That is to say, if the process handles the SIGTERM signal and doesn't exit,
		your process will wait until the child process has exited.

		If the process times out, or has a non-zero exit code, this method will throw.
		The Error object will contain the entire result from `spawnSync`</haxe_doc>
				</execFileSync>
				<execFileSync public="1" set="method">
					<f a="command:args:?options">
						<c path="String"/>
						<c path="Array"><c path="String"/></c>
						<x path="Null"><t path="js.node.ChildProcessSpawnSyncOptions"/></x>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<t path="js.node.Buffer"/>
						</x>
					</f>
					<haxe_doc>Synchronous version of `execFile`.

		`execFileSync` will not return until the child process has fully closed.
		When a timeout has been encountered and `killSignal` is sent, the method won't return until the process
		has completely exited. That is to say, if the process handles the SIGTERM signal and doesn't exit,
		your process will wait until the child process has exited.

		If the process times out, or has a non-zero exit code, this method will throw.
		The Error object will contain the entire result from `spawnSync`</haxe_doc>
				</execFileSync>
			</overloads>
		</execFileSync>
		<execSync public="1" set="method" static="1">
			<f a="command:?options">
				<c path="String"/>
				<x path="Null"><t path="js.node.ChildProcessSpawnSyncOptions"/></x>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.Buffer"/>
				</x>
			</f>
			<haxe_doc>Synchronous version of `exec`.

		`execSync` will not return until the child process has fully closed.
		When a timeout has been encountered and `killSignal` is sent, the method won't return until the process
		has completely exited. That is to say, if the process handles the SIGTERM signal and doesn't exit,
		your process will wait until the child process has exited.

		If the process times out, or has a non-zero exit code, this method will throw.
		The Error object will contain the entire result from `spawnSync`</haxe_doc>
		</execSync>
		<meta><m n=":jsRequire"><e>"child_process"</e></m></meta>
	</class>
	<abstract path="js.node.DnsAddressFamily" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>Enumeration of possible Int `options` values for `Dns.lookup`.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Dns.DnsAddressFamily_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" private="1" module="js.node.Dns" extern="1" final="1">
	<IPv4 public="1" get="inline" set="null" expr="cast 4" line="36" static="1">
		<x path="js.node.DnsAddressFamily"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IPv4>
	<IPv6 public="1" get="inline" set="null" expr="cast 6" line="37" static="1">
		<x path="js.node.DnsAddressFamily"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IPv6>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Dns.DnsAddressFamily_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" private="1" module="js.node.Dns" extern="1" final="1">
		<IPv4 public="1" get="inline" set="null" expr="cast 4" line="36" static="1">
			<x path="js.node.DnsAddressFamily"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IPv4>
		<IPv6 public="1" get="inline" set="null" expr="cast 6" line="37" static="1">
			<x path="js.node.DnsAddressFamily"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IPv6>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.DnsLookupOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns">
		<a>
			<hints>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If present, it should be one or more of the supported `getaddrinfo` flags.
		If hints is not provided, then no flags are passed to `getaddrinfo`.
		Multiple flags can be passed through hints by logically ORing their values.</haxe_doc>
			</hints>
			<family>
				<x path="Null"><x path="js.node.DnsAddressFamily"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The record family. If not provided, both IP v4 and v6 addresses are accepted.</haxe_doc>
			</family>
			<all>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>When true, the callback returns all resolved addresses in an array, otherwise returns a single address.
		Defaults to false.</haxe_doc>
			</all>
		</a>
		<haxe_doc>Type of the `options` argument for `Dns.lookup`.</haxe_doc>
	</typedef>
	<abstract path="js.node.DnsRrtype" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible `rrtype` value for `Dns.resolve`.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Dns.DnsRrtype_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" private="1" module="js.node.Dns" extern="1" final="1">
	<A public="1" get="inline" set="null" expr="cast &quot;A&quot;" line="70" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "A"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>IPV4 addresses, default</haxe_doc>
	</A>
	<AAAA public="1" get="inline" set="null" expr="cast &quot;AAAA&quot;" line="75" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "AAAA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>IPV6 addresses</haxe_doc>
	</AAAA>
	<MX public="1" get="inline" set="null" expr="cast &quot;MX&quot;" line="80" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "MX"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>mail exchange records</haxe_doc>
	</MX>
	<TXT public="1" get="inline" set="null" expr="cast &quot;TXT&quot;" line="85" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "TXT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>text records</haxe_doc>
	</TXT>
	<SRV public="1" get="inline" set="null" expr="cast &quot;SRV&quot;" line="90" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "SRV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>SRV records</haxe_doc>
	</SRV>
	<PTR public="1" get="inline" set="null" expr="cast &quot;PTR&quot;" line="95" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "PTR"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>used for reverse IP lookups</haxe_doc>
	</PTR>
	<NS public="1" get="inline" set="null" expr="cast &quot;NS&quot;" line="100" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "NS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>name server records</haxe_doc>
	</NS>
	<CNAME public="1" get="inline" set="null" expr="cast &quot;CNAME&quot;" line="105" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "CNAME"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>canonical name records</haxe_doc>
	</CNAME>
	<SOA public="1" get="inline" set="null" expr="cast &quot;SOA&quot;" line="110" static="1">
		<x path="js.node.DnsRrtype"/>
		<meta>
			<m n=":value"><e>cast "SOA"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>start of authority record</haxe_doc>
	</SOA>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Dns.DnsRrtype_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" private="1" module="js.node.Dns" extern="1" final="1">
		<A public="1" get="inline" set="null" expr="cast &quot;A&quot;" line="70" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "A"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>IPV4 addresses, default</haxe_doc>
		</A>
		<AAAA public="1" get="inline" set="null" expr="cast &quot;AAAA&quot;" line="75" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "AAAA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>IPV6 addresses</haxe_doc>
		</AAAA>
		<MX public="1" get="inline" set="null" expr="cast &quot;MX&quot;" line="80" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "MX"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>mail exchange records</haxe_doc>
		</MX>
		<TXT public="1" get="inline" set="null" expr="cast &quot;TXT&quot;" line="85" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "TXT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>text records</haxe_doc>
		</TXT>
		<SRV public="1" get="inline" set="null" expr="cast &quot;SRV&quot;" line="90" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "SRV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>SRV records</haxe_doc>
		</SRV>
		<PTR public="1" get="inline" set="null" expr="cast &quot;PTR&quot;" line="95" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "PTR"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>used for reverse IP lookups</haxe_doc>
		</PTR>
		<NS public="1" get="inline" set="null" expr="cast &quot;NS&quot;" line="100" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "NS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>name server records</haxe_doc>
		</NS>
		<CNAME public="1" get="inline" set="null" expr="cast &quot;CNAME&quot;" line="105" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "CNAME"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>canonical name records</haxe_doc>
		</CNAME>
		<SOA public="1" get="inline" set="null" expr="cast &quot;SOA&quot;" line="110" static="1">
			<x path="js.node.DnsRrtype"/>
			<meta>
				<m n=":value"><e>cast "SOA"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>start of authority record</haxe_doc>
		</SOA>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.DnsResolvedAddressMX" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns">
		<a>
			<priority><x path="Int"/></priority>
			<exchange><c path="String"/></exchange>
		</a>
		<haxe_doc>Types of address data returned by `resolve` functions.</haxe_doc>
	</typedef>
	<typedef path="js.node.DnsResolvedAddressSRV" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns"><a>
	<weight><x path="Int"/></weight>
	<priority><x path="Int"/></priority>
	<port><x path="Int"/></port>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="js.node.DnsResolvedAddressSOA" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns"><a>
	<serial><x path="Int"/></serial>
	<retry><x path="Int"/></retry>
	<refresh><x path="Int"/></refresh>
	<nsname><c path="String"/></nsname>
	<minttl><x path="Int"/></minttl>
	<hostmaster><c path="String"/></hostmaster>
	<expire><x path="Int"/></expire>
</a></typedef>
	<typedef path="js.node.DnsResolvedAddress" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<t path="js.node.DnsResolvedAddressMX"/>
		<x path="haxe.extern.EitherType">
			<t path="js.node.DnsResolvedAddressSOA"/>
			<t path="js.node.DnsResolvedAddressSRV"/>
		</x>
	</x>
</x></typedef>
	<class path="js.node.DnsError" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns" extern="1">
		<extends path="js.lib.Error"/>
		<code public="1" set="null">
			<x path="js.node.DnsErrorCode"/>
			<haxe_doc>Values for error codes are listed in `Dns` class.</haxe_doc>
		</code>
		<haxe_doc>Error objects returned by dns lookups are of this type</haxe_doc>
	</class>
	<abstract path="js.node.DnsErrorCode" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns">
		<this><c path="String"/></this>
		<haxe_doc>Each DNS query can return one of the following error codes</haxe_doc>
		<meta>
			<m n=":jsRequire"><e>"dns"</e></m>
			<m n=":enum"/>
		</meta>
		<impl><class path="js.node._Dns.DnsErrorCode_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" private="1" module="js.node.Dns" extern="1" final="1">
	<NODATA public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>DNS server returned answer with no data.</haxe_doc>
	</NODATA>
	<FORMERR public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>DNS server claims query was misformatted.</haxe_doc>
	</FORMERR>
	<SERVFAIL public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>DNS server returned general failure.</haxe_doc>
	</SERVFAIL>
	<NOTFOUND public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Domain name not found.</haxe_doc>
	</NOTFOUND>
	<NOTIMP public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>DNS server does not implement requested operation.</haxe_doc>
	</NOTIMP>
	<REFUSED public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>DNS server refused query.</haxe_doc>
	</REFUSED>
	<BADQUERY public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Misformatted DNS query.</haxe_doc>
	</BADQUERY>
	<BADNAME public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Misformatted domain name.</haxe_doc>
	</BADNAME>
	<BADFAMILY public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Unsupported address family.</haxe_doc>
	</BADFAMILY>
	<BADRESP public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Misformatted DNS reply.</haxe_doc>
	</BADRESP>
	<CONNREFUSED public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Could not contact DNS servers.</haxe_doc>
	</CONNREFUSED>
	<TIMEOUT public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Timeout while contacting DNS servers.</haxe_doc>
	</TIMEOUT>
	<EOF public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>End of file.</haxe_doc>
	</EOF>
	<FILE public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Error reading file.</haxe_doc>
	</FILE>
	<NOMEM public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Out of memory.</haxe_doc>
	</NOMEM>
	<DESTRUCTION public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Channel is being destroyed.</haxe_doc>
	</DESTRUCTION>
	<BADSTR public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Misformatted string.</haxe_doc>
	</BADSTR>
	<BADFLAGS public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Illegal flags specified.</haxe_doc>
	</BADFLAGS>
	<NONAME public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Given hostname is not numeric.</haxe_doc>
	</NONAME>
	<BADHINTS public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Illegal hints flags specified.</haxe_doc>
	</BADHINTS>
	<NOTINITIALIZED public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>c-ares library initialization not yet performed.</haxe_doc>
	</NOTINITIALIZED>
	<LOADIPHLPAPI public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Error loading iphlpapi.dll.</haxe_doc>
	</LOADIPHLPAPI>
	<ADDRGETNETWORKPARAMS public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Could not find GetNetworkParams function.</haxe_doc>
	</ADDRGETNETWORKPARAMS>
	<CANCELLED public="1" set="null" static="1">
		<x path="js.node.DnsErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>DNS query cancelled.</haxe_doc>
	</CANCELLED>
	<meta>
		<m n=":enum"/>
		<m n=":jsRequire"><e>"dns"</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="js.node._Dns.DnsErrorCode_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" private="1" module="js.node.Dns" extern="1" final="1">
		<NODATA public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>DNS server returned answer with no data.</haxe_doc>
		</NODATA>
		<FORMERR public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>DNS server claims query was misformatted.</haxe_doc>
		</FORMERR>
		<SERVFAIL public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>DNS server returned general failure.</haxe_doc>
		</SERVFAIL>
		<NOTFOUND public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Domain name not found.</haxe_doc>
		</NOTFOUND>
		<NOTIMP public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>DNS server does not implement requested operation.</haxe_doc>
		</NOTIMP>
		<REFUSED public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>DNS server refused query.</haxe_doc>
		</REFUSED>
		<BADQUERY public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Misformatted DNS query.</haxe_doc>
		</BADQUERY>
		<BADNAME public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Misformatted domain name.</haxe_doc>
		</BADNAME>
		<BADFAMILY public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Unsupported address family.</haxe_doc>
		</BADFAMILY>
		<BADRESP public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Misformatted DNS reply.</haxe_doc>
		</BADRESP>
		<CONNREFUSED public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Could not contact DNS servers.</haxe_doc>
		</CONNREFUSED>
		<TIMEOUT public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Timeout while contacting DNS servers.</haxe_doc>
		</TIMEOUT>
		<EOF public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>End of file.</haxe_doc>
		</EOF>
		<FILE public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Error reading file.</haxe_doc>
		</FILE>
		<NOMEM public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Out of memory.</haxe_doc>
		</NOMEM>
		<DESTRUCTION public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Channel is being destroyed.</haxe_doc>
		</DESTRUCTION>
		<BADSTR public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Misformatted string.</haxe_doc>
		</BADSTR>
		<BADFLAGS public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Illegal flags specified.</haxe_doc>
		</BADFLAGS>
		<NONAME public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Given hostname is not numeric.</haxe_doc>
		</NONAME>
		<BADHINTS public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Illegal hints flags specified.</haxe_doc>
		</BADHINTS>
		<NOTINITIALIZED public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>c-ares library initialization not yet performed.</haxe_doc>
		</NOTINITIALIZED>
		<LOADIPHLPAPI public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Error loading iphlpapi.dll.</haxe_doc>
		</LOADIPHLPAPI>
		<ADDRGETNETWORKPARAMS public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Could not find GetNetworkParams function.</haxe_doc>
		</ADDRGETNETWORKPARAMS>
		<CANCELLED public="1" set="null" static="1">
			<x path="js.node.DnsErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>DNS query cancelled.</haxe_doc>
		</CANCELLED>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire"><e>"dns"</e></m>
		</meta>
	</class>
	<typedef path="js.node.DnsLookupCallbackSingle" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns"><f a="err:address:family">
	<c path="js.node.DnsError"/>
	<c path="String"/>
	<x path="js.node.DnsAddressFamily"/>
	<x path="Void"/>
</f></typedef>
	<typedef path="js.node.DnsLookupCallbackAll" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns"><f a="err:addresses">
	<c path="js.node.DnsError"/>
	<c path="Array"><t path="js.node.DnsLookupCallbackAllEntry"/></c>
	<x path="Void"/>
</f></typedef>
	<typedef path="js.node.DnsLookupCallbackAllEntry" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" module="js.node.Dns"><a>
	<family><x path="js.node.DnsAddressFamily"/></family>
	<address><c path="String"/></address>
</a></typedef>
	<class path="js.node.Dns" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Dns.hx" extern="1">
		<lookup public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<t path="js.node.DnsLookupCallbackSingle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resolves a `hostname` (e.g. 'google.com') into the first found A (IPv4) or AAAA (IPv6) record.

		If `options` is not provided, then IP v4 and v6 addresses are both valid.

		The `family` can be the integer 4 or 6. Defaults to null that indicates both Ip v4 and v6 address family.

		The `callback` has arguments (err, address, family).
		The `address` argument is a string representation of a IP v4 or v6 address.
		The `family` argument is either the integer 4 or 6 and denotes the family
		of address (not necessarily the value initially passed to lookup).

		With the `all` option set, the arguments change to (err, addresses), with addresses being an array of objects
		with the properties `address` and `family`.

		Keep in mind that `err.code` will be set to 'ENOENT' not only when the hostname does not exist but
		also when the lookup fails in other ways such as no available file descriptors.

		`lookup` doesn't necessarily have anything to do with the DNS protocol. It's only an operating system facility
		that can associate name with addresses, and vice versa.</haxe_doc>
			<overloads><lookup public="1" set="method">
	<f a="hostname:options:callback">
		<c path="String"/>
		<x path="haxe.extern.EitherType">
			<x path="js.node.DnsAddressFamily"/>
			<t path="js.node.DnsLookupOptions"/>
		</x>
		<x path="haxe.extern.EitherType">
			<t path="js.node.DnsLookupCallbackSingle"/>
			<t path="js.node.DnsLookupCallbackAll"/>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>Resolves a `hostname` (e.g. 'google.com') into the first found A (IPv4) or AAAA (IPv6) record.

		If `options` is not provided, then IP v4 and v6 addresses are both valid.

		The `family` can be the integer 4 or 6. Defaults to null that indicates both Ip v4 and v6 address family.

		The `callback` has arguments (err, address, family).
		The `address` argument is a string representation of a IP v4 or v6 address.
		The `family` argument is either the integer 4 or 6 and denotes the family
		of address (not necessarily the value initially passed to lookup).

		With the `all` option set, the arguments change to (err, addresses), with addresses being an array of objects
		with the properties `address` and `family`.

		Keep in mind that `err.code` will be set to 'ENOENT' not only when the hostname does not exist but
		also when the lookup fails in other ways such as no available file descriptors.

		`lookup` doesn't necessarily have anything to do with the DNS protocol. It's only an operating system facility
		that can associate name with addresses, and vice versa.</haxe_doc>
</lookup></overloads>
		</lookup>
		<ADDRCONFIG public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A flag passed in the `hints` argument of `lookup` method.

		Returned address types are determined by the types of addresses supported by the current system.
		For example, IPv4 addresses are only returned if the current system has at least one IPv4 address configured.
		Loopback addresses are not considered.</haxe_doc>
		</ADDRCONFIG>
		<V4MAPPED public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A flag passed in the `hints` argument of `lookup` method.

		If the IPv6 family was specified, but no IPv6 addresses were found, then return IPv4 mapped IPv6 addresses.
		Note that it is not supported on some operating systems (e.g FreeBSD 10.1).</haxe_doc>
		</V4MAPPED>
		<lookupService public="1" set="method" static="1">
			<f a="address:port:callback">
				<c path="String"/>
				<x path="Int"/>
				<f a="::">
					<c path="js.node.DnsError"/>
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Resolves the given `address` and `port` into a hostname and service using `getnameinfo`.

		The `callback` has arguments (err, hostname, service).
		The `hostname` and `service` arguments are strings (e.g. 'localhost' and 'http' respectively).

		On error, `err` is an Error object, where `err.code` is the error code.</haxe_doc>
		</lookupService>
		<resolve public="1" set="method" static="1">
			<f a="hostname:rrtype:callback">
				<c path="String"/>
				<x path="js.node.DnsRrtype"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><t path="js.node.DnsResolvedAddress"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Resolves a `hostname` (e.g. 'google.com') into an array of the record types specified by `rrtype`.

		The `callback` has arguments (err, addresses).
		The type of each item in `addresses` is determined by the record type,
		and described in the documentation for the corresponding lookup methods below.

		On error, `err` is an Error object, where `err.code` is the error code.</haxe_doc>
			<overloads><resolve public="1" set="method">
	<f a="hostname:callback">
		<c path="String"/>
		<f a=":">
			<c path="js.node.DnsError"/>
			<c path="Array"><t path="js.node.DnsResolvedAddress"/></c>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Resolves a `hostname` (e.g. 'google.com') into an array of the record types specified by `rrtype`.

		The `callback` has arguments (err, addresses).
		The type of each item in `addresses` is determined by the record type,
		and described in the documentation for the corresponding lookup methods below.

		On error, `err` is an Error object, where `err.code` is the error code.</haxe_doc>
</resolve></overloads>
		</resolve>
		<resolve4 public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for IPv4 queries (A records).
		`addresses` is an array of IPv4 addresses (e.g. ['74.125.79.104', '74.125.79.105', '74.125.79.106']).</haxe_doc>
		</resolve4>
		<resolve6 public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve4` except for IPv6 queries (an AAAA query).</haxe_doc>
		</resolve6>
		<resolveMx public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><t path="js.node.DnsResolvedAddressMX"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for mail exchange queries (MX records).
		`addresses` is an array of MX records, each with a priority
		and an exchange attribute (e.g. [{'priority': 10, 'exchange': 'mx.example.com'},...]).</haxe_doc>
		</resolveMx>
		<resolveTxt public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="Array"><c path="String"/></c></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for text queries (TXT records).
		`addresses` is a 2-d array of the text records available for hostname (e.g., [ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]).
		Each sub-array contains TXT chunks of one record. Depending on the use case, the could be either joined together
		or treated separately.</haxe_doc>
		</resolveTxt>
		<resolveSrv public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><t path="js.node.DnsResolvedAddressSRV"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for service records (SRV records).
		`addresses` is an array of the SRV records available for `hostname`.
		Properties of SRV records are priority, weight, port, and name
		(e.g., [{'priority': 10, 'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]).</haxe_doc>
		</resolveSrv>
		<resolvePtr public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Uses the DNS protocol to resolve pointer records (PTR records) for the `hostname`.
		The addresses argument passed to the callback function will be an array of strings containing the reply records.</haxe_doc>
		</resolvePtr>
		<resolveSoa public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<t path="js.node.DnsResolvedAddressSOA"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for start of authority record queries (SOA record).

		`addresses` is an object with the following structure:
		{
		  nsname: 'ns.example.com',
		  hostmaster: 'root.example.com',
		  serial: 2013101809,
		  refresh: 10000,
		  retry: 2400,
		  expire: 604800,
		  minttl: 3600
		}</haxe_doc>
		</resolveSoa>
		<resolveNs public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for name server records (NS records).
		`addresses` is an array of the name server records available for hostname (e.g., ['ns1.example.com', 'ns2.example.com']).</haxe_doc>
		</resolveNs>
		<resolveCname public="1" set="method" static="1">
			<f a="hostname:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `resolve`, but only for canonical name records (CNAME records).
		`addresses` is an array of the canonical name records available for hostname (e.g., ['bar.example.com']).</haxe_doc>
		</resolveCname>
		<reverse public="1" set="method" static="1">
			<f a="ip:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.node.DnsError"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Reverse resolves an `ip` address to an array of hostnames.
		The `callback` has arguments (err, hostname).</haxe_doc>
		</reverse>
		<getServers public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an array of IP addresses as strings that are currently being used for resolution.</haxe_doc>
		</getServers>
		<setServers public="1" set="method" static="1">
			<f a="servers">
				<c path="Array"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Given an array of IP addresses as strings, set them as the servers to use for resolving.

		If you specify a port with the address it will be stripped, as the underlying library doesn't support that.

		This will throw if you pass invalid input.</haxe_doc>
		</setServers>
		<haxe_doc>This module contains functions that belong to two different categories:

	1) Functions that use the underlying operating system facilities to perform name resolution,
	and that do not necessarily do any network communication. This category contains only one function: `lookup`.
	Developers looking to perform name resolution in the same way that other applications on the same operating
	system behave should use `lookup`.

	2) Functions that connect to an actual DNS server to perform name resolution,
	and that always use the network to perform DNS queries. This category contains all functions in the dns module but `lookup`.
	These functions do not use the same set of configuration files than what `lookup` uses. For instance,
	they do not use the configuration from /etc/hosts. These functions should be used by developers who do not want
	to use the underlying operating system's facilities for name resolution, and instead want to always perform DNS queries.</haxe_doc>
		<meta><m n=":jsRequire"><e>"dns"</e></m></meta>
	</class>
	<typedef path="js.node.FsPath" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" module="js.node.Fs">
		<x path="haxe.extern.EitherType">
			<c path="String"/>
			<t path="js.node.Buffer"/>
		</x>
		<haxe_doc>Most FS functions now support passing `String` and `Buffer`.
	This type is used for path arguments and allows passing either of those.</haxe_doc>
	</typedef>
	<typedef path="js.node.FsWatchFileOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" module="js.node.Fs">
		<a>
			<persistent>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>indicates whether the process should continue to run as long as files are being watched
		default: true</haxe_doc>
			</persistent>
			<interval>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>indicates how often the target should be polled, in milliseconds
		default: 5007</haxe_doc>
			</interval>
		</a>
		<haxe_doc>Possible options for `Fs.watchFile`.</haxe_doc>
	</typedef>
	<typedef path="js.node.FsMode" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" module="js.node.Fs">
		<x path="haxe.extern.EitherType">
			<x path="Int"/>
			<c path="String"/>
		</x>
		<haxe_doc>The `mode` argument used by `Fs.open` and related functions
	can be either an integer or a string with octal number.</haxe_doc>
	</typedef>
	<typedef path="js.node.FsWriteFileOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" module="js.node.Fs">
		<a>
			<mode>
				<x path="Null"><t path="js.node.FsMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default = 438 (aka 0666 in Octal)</haxe_doc>
			</mode>
			<flag>
				<x path="Null"><x path="js.node.FsOpenFlag"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: 'w' for `Fs.writeFile`, 'a' for `Fs.appendFile`</haxe_doc>
			</flag>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Encoding for writing strings.
		Defaults to 'utf8'.
		Ignored if data is a buffer</haxe_doc>
			</encoding>
		</a>
		<haxe_doc>Possible options for `Fs.writeFile` and `Fs.appendFile`.</haxe_doc>
	</typedef>
	<typedef path="js.node.FsCreateReadStreamOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" module="js.node.Fs">
		<a>
			<start>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Start of the range of bytes to read</haxe_doc>
			</start>
			<mode>
				<x path="Null"><t path="js.node.FsMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: 0666</haxe_doc>
			</mode>
			<flags>
				<x path="Null"><x path="js.node.FsOpenFlag"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: 'r'</haxe_doc>
			</flags>
			<fd>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: null</haxe_doc>
			</fd>
			<end>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>End of the range of bytes to read</haxe_doc>
			</end>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>can be 'utf8', 'ascii', or 'base64'.
		default: null</haxe_doc>
			</encoding>
			<autoClose>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If autoClose is false, then the file descriptor won't be closed, even if there's an error.
		It is your responsiblity to close it and make sure there's no file descriptor leak.

		If autoClose is set to true (default behavior), on error or end the file
		descriptor will be closed automatically.</haxe_doc>
			</autoClose>
		</a>
		<haxe_doc>Defaults:
	{ flags: 'r',
	  encoding: null,
	  fd: null,
	  mode: 0666,
	  autoClose: true
	}</haxe_doc>
	</typedef>
	<typedef path="js.node.FsCreateWriteStreamOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" module="js.node.Fs">
		<a>
			<start>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>position to write data the beginning of the file.</haxe_doc>
			</start>
			<mode>
				<x path="Null"><t path="js.node.FsMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: 0666</haxe_doc>
			</mode>
			<flags>
				<x path="Null"><x path="js.node.FsOpenFlag"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: 'w'</haxe_doc>
			</flags>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>default: null</haxe_doc>
			</encoding>
		</a>
		<haxe_doc>Options for `Fs.createWriteStream`.</haxe_doc>
	</typedef>
	<abstract path="js.node.SymlinkType" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" module="js.node.Fs">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible symlink types</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Fs.SymlinkType_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" private="1" module="js.node.Fs" extern="1" final="1">
	<Dir public="1" get="inline" set="null" expr="cast &quot;dir&quot;" line="172" static="1">
		<x path="js.node.SymlinkType"/>
		<meta>
			<m n=":value"><e>cast "dir"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Dir>
	<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="173" static="1">
		<x path="js.node.SymlinkType"/>
		<meta>
			<m n=":value"><e>cast "file"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</File>
	<Junction public="1" get="inline" set="null" expr="cast &quot;junction&quot;" line="174" static="1">
		<x path="js.node.SymlinkType"/>
		<meta>
			<m n=":value"><e>cast "junction"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Junction>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Fs.SymlinkType_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" private="1" module="js.node.Fs" extern="1" final="1">
		<Dir public="1" get="inline" set="null" expr="cast &quot;dir&quot;" line="172" static="1">
			<x path="js.node.SymlinkType"/>
			<meta>
				<m n=":value"><e>cast "dir"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Dir>
		<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="173" static="1">
			<x path="js.node.SymlinkType"/>
			<meta>
				<m n=":value"><e>cast "file"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</File>
		<Junction public="1" get="inline" set="null" expr="cast &quot;junction&quot;" line="174" static="1">
			<x path="js.node.SymlinkType"/>
			<meta>
				<m n=":value"><e>cast "junction"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Junction>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.FsOpenFlag" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" module="js.node.Fs">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible flags for opening file.

	The exclusive flag 'x' (O_EXCL flag in open(2)) ensures that path is newly created.
	On POSIX systems, path is considered to exist even if it is a symlink to a non-existent file.
	The exclusive flag may or may not work with network file systems.

	On Linux, positional writes don't work when the file is opened in append mode.
	The kernel ignores the position argument and always appends the data to the end of the file.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Fs.FsOpenFlag_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" private="1" module="js.node.Fs" extern="1" final="1">
	<Read public="1" get="inline" set="null" expr="cast &quot;r&quot;" line="192" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "r"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading.
		An exception occurs if the file does not exist.</haxe_doc>
	</Read>
	<ReadWrite public="1" get="inline" set="null" expr="cast &quot;r+&quot;" line="198" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "r+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading and writing.
		An exception occurs if the file does not exist.</haxe_doc>
	</ReadWrite>
	<ReadSync public="1" get="inline" set="null" expr="cast &quot;rs&quot;" line="209" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "rs"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading in synchronous mode. Instructs the operating system to bypass the local file system cache.

		This is primarily useful for opening files on NFS mounts as it allows you to skip the potentially stale local cache.
		It has a very real impact on I/O performance so don't use this flag unless you need it.

		Note that this doesn't turn `Fs.open` into a synchronous blocking call.
		If that's what you want then you should be using `Fs.openSync`</haxe_doc>
	</ReadSync>
	<ReadWriteSync public="1" get="inline" set="null" expr="cast &quot;rs+&quot;" line="215" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "rs+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading and writing, telling the OS to open it synchronously.
		See notes for `ReadSync` about using this with caution.</haxe_doc>
	</ReadWriteSync>
	<WriteCreate public="1" get="inline" set="null" expr="cast &quot;w&quot;" line="221" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "w"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for writing.
		The file is created (if it does not exist) or truncated (if it exists).</haxe_doc>
	</WriteCreate>
	<WriteCheck public="1" get="inline" set="null" expr="cast &quot;wx&quot;" line="226" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "wx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Like `WriteCreate` but fails if path exists.</haxe_doc>
	</WriteCheck>
	<WriteReadCreate public="1" get="inline" set="null" expr="cast &quot;w+&quot;" line="232" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "w+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading and writing.
		The file is created (if it does not exist) or truncated (if it exists).</haxe_doc>
	</WriteReadCreate>
	<WriteReadCheck public="1" get="inline" set="null" expr="cast &quot;wx+&quot;" line="237" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "wx+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Like `WriteReadCreate` but fails if path exists.</haxe_doc>
	</WriteReadCheck>
	<AppendCreate public="1" get="inline" set="null" expr="cast &quot;a&quot;" line="243" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "a"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for appending.
		The file is created if it does not exist.</haxe_doc>
	</AppendCreate>
	<AppendCheck public="1" get="inline" set="null" expr="cast &quot;ax&quot;" line="248" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "ax"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Like `AppendCreate` but fails if path exists.</haxe_doc>
	</AppendCheck>
	<AppendReadCreate public="1" get="inline" set="null" expr="cast &quot;a+&quot;" line="254" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "a+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Open file for reading and appending.
		The file is created if it does not exist.</haxe_doc>
	</AppendReadCreate>
	<AppendReadCheck public="1" get="inline" set="null" expr="cast &quot;ax+&quot;" line="259" static="1">
		<x path="js.node.FsOpenFlag"/>
		<meta>
			<m n=":value"><e>cast "ax+"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Like `AppendReadCreate` but fails if path exists.</haxe_doc>
	</AppendReadCheck>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Fs.FsOpenFlag_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" private="1" module="js.node.Fs" extern="1" final="1">
		<Read public="1" get="inline" set="null" expr="cast &quot;r&quot;" line="192" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "r"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading.
		An exception occurs if the file does not exist.</haxe_doc>
		</Read>
		<ReadWrite public="1" get="inline" set="null" expr="cast &quot;r+&quot;" line="198" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "r+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading and writing.
		An exception occurs if the file does not exist.</haxe_doc>
		</ReadWrite>
		<ReadSync public="1" get="inline" set="null" expr="cast &quot;rs&quot;" line="209" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "rs"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading in synchronous mode. Instructs the operating system to bypass the local file system cache.

		This is primarily useful for opening files on NFS mounts as it allows you to skip the potentially stale local cache.
		It has a very real impact on I/O performance so don't use this flag unless you need it.

		Note that this doesn't turn `Fs.open` into a synchronous blocking call.
		If that's what you want then you should be using `Fs.openSync`</haxe_doc>
		</ReadSync>
		<ReadWriteSync public="1" get="inline" set="null" expr="cast &quot;rs+&quot;" line="215" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "rs+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading and writing, telling the OS to open it synchronously.
		See notes for `ReadSync` about using this with caution.</haxe_doc>
		</ReadWriteSync>
		<WriteCreate public="1" get="inline" set="null" expr="cast &quot;w&quot;" line="221" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "w"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for writing.
		The file is created (if it does not exist) or truncated (if it exists).</haxe_doc>
		</WriteCreate>
		<WriteCheck public="1" get="inline" set="null" expr="cast &quot;wx&quot;" line="226" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "wx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Like `WriteCreate` but fails if path exists.</haxe_doc>
		</WriteCheck>
		<WriteReadCreate public="1" get="inline" set="null" expr="cast &quot;w+&quot;" line="232" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "w+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading and writing.
		The file is created (if it does not exist) or truncated (if it exists).</haxe_doc>
		</WriteReadCreate>
		<WriteReadCheck public="1" get="inline" set="null" expr="cast &quot;wx+&quot;" line="237" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "wx+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Like `WriteReadCreate` but fails if path exists.</haxe_doc>
		</WriteReadCheck>
		<AppendCreate public="1" get="inline" set="null" expr="cast &quot;a&quot;" line="243" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "a"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for appending.
		The file is created if it does not exist.</haxe_doc>
		</AppendCreate>
		<AppendCheck public="1" get="inline" set="null" expr="cast &quot;ax&quot;" line="248" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "ax"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Like `AppendCreate` but fails if path exists.</haxe_doc>
		</AppendCheck>
		<AppendReadCreate public="1" get="inline" set="null" expr="cast &quot;a+&quot;" line="254" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "a+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Open file for reading and appending.
		The file is created if it does not exist.</haxe_doc>
		</AppendReadCreate>
		<AppendReadCheck public="1" get="inline" set="null" expr="cast &quot;ax+&quot;" line="259" static="1">
			<x path="js.node.FsOpenFlag"/>
			<meta>
				<m n=":value"><e>cast "ax+"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Like `AppendReadCreate` but fails if path exists.</haxe_doc>
		</AppendReadCheck>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.FsConstants" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" module="js.node.Fs">
		<a>
			<X_OK>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the file can be executed by the calling process.
		Meant for use with `Fs.access`.</haxe_doc>
			</X_OK>
			<W_OK>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the file can be written by the calling process.
		Meant for use with `Fs.access`.</haxe_doc>
			</W_OK>
			<S_IXUSR>
				<x path="Int"/>
				<haxe_doc>File mode indicating executable by owner.</haxe_doc>
			</S_IXUSR>
			<S_IXOTH>
				<x path="Int"/>
				<haxe_doc>File mode indicating executable by others.</haxe_doc>
			</S_IXOTH>
			<S_IXGRP>
				<x path="Int"/>
				<haxe_doc>File mode indicating executable by group.</haxe_doc>
			</S_IXGRP>
			<S_IWUSR>
				<x path="Int"/>
				<haxe_doc>File mode indicating writable by owner.</haxe_doc>
			</S_IWUSR>
			<S_IWOTH>
				<x path="Int"/>
				<haxe_doc>File mode indicating writable by others.</haxe_doc>
			</S_IWOTH>
			<S_IWGRP>
				<x path="Int"/>
				<haxe_doc>File mode indicating writable by group.</haxe_doc>
			</S_IWGRP>
			<S_IRWXU>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable, writable and executable by owner.</haxe_doc>
			</S_IRWXU>
			<S_IRWXO>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable, writable and executable by others.</haxe_doc>
			</S_IRWXO>
			<S_IRWXG>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable, writable and executable by group.</haxe_doc>
			</S_IRWXG>
			<S_IRUSR>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable by owner.</haxe_doc>
			</S_IRUSR>
			<S_IROTH>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable by others.</haxe_doc>
			</S_IROTH>
			<S_IRGRP>
				<x path="Int"/>
				<haxe_doc>File mode indicating readable by group.</haxe_doc>
			</S_IRGRP>
			<S_IFSOCK>
				<x path="Int"/>
				<haxe_doc>File type constant for a socket.</haxe_doc>
			</S_IFSOCK>
			<S_IFREG>
				<x path="Int"/>
				<haxe_doc>File type constant for a regular file.</haxe_doc>
			</S_IFREG>
			<S_IFMT>
				<x path="Int"/>
				<haxe_doc>Bit mask used to extract the file type code.</haxe_doc>
			</S_IFMT>
			<S_IFLNK>
				<x path="Int"/>
				<haxe_doc>File type constant for a symbolic link.</haxe_doc>
			</S_IFLNK>
			<S_IFIFO>
				<x path="Int"/>
				<haxe_doc>File type constant for a FIFO/pipe.</haxe_doc>
			</S_IFIFO>
			<S_IFDIR>
				<x path="Int"/>
				<haxe_doc>File type constant for a directory.</haxe_doc>
			</S_IFDIR>
			<S_IFCHR>
				<x path="Int"/>
				<haxe_doc>File type constant for a character-oriented device file.</haxe_doc>
			</S_IFCHR>
			<S_IFBLK>
				<x path="Int"/>
				<haxe_doc>File type constant for a block-oriented device file.</haxe_doc>
			</S_IFBLK>
			<R_OK>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the file can be read by the calling process.
		Meant for use with `Fs.access`.</haxe_doc>
			</R_OK>
			<O_WRONLY>
				<x path="Int"/>
				<haxe_doc>Flag indicating to open a file for write-only access.</haxe_doc>
			</O_WRONLY>
			<O_TRUNC>
				<x path="Int"/>
				<haxe_doc>Flag indicating that if the file exists and is a regular file, and the file is opened successfully for write access, its length shall be truncated to zero.</haxe_doc>
			</O_TRUNC>
			<O_SYNC>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the file is opened for synchronous I/O.</haxe_doc>
			</O_SYNC>
			<O_SYMLINK>
				<x path="Int"/>
				<haxe_doc>Flag indicating to open the symbolic link itself rather than the resource it is pointing to.</haxe_doc>
			</O_SYMLINK>
			<O_RDWR>
				<x path="Int"/>
				<haxe_doc>Flag indicating to open a file for read-write access.</haxe_doc>
			</O_RDWR>
			<O_RDONLY>
				<x path="Int"/>
				<haxe_doc>Flag indicating to open a file for read-only access.</haxe_doc>
			</O_RDONLY>
			<O_NONBLOCK>
				<x path="Int"/>
				<haxe_doc>Flag indicating to open the file in nonblocking mode when possible.</haxe_doc>
			</O_NONBLOCK>
			<O_NOFOLLOW>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the open should fail if the path is a symbolic link.</haxe_doc>
			</O_NOFOLLOW>
			<O_NOCTTY>
				<x path="Int"/>
				<haxe_doc>Flag indicating that if path identifies a terminal device, opening the path shall not cause that terminal to become the controlling terminal for the process (if the process does not already have one).</haxe_doc>
			</O_NOCTTY>
			<O_NOATIME>
				<x path="Int"/>
				<haxe_doc>Flag indicating reading accesses to the file system will no longer result in an update to the atime information associated with the file. This flag is available on Linux operating systems only.</haxe_doc>
			</O_NOATIME>
			<O_EXCL>
				<x path="Int"/>
				<haxe_doc>Flag indicating that opening a file should fail if the O_CREAT flag is set and the file already exists.</haxe_doc>
			</O_EXCL>
			<O_DIRECTORY>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the open should fail if the path is not a directory.</haxe_doc>
			</O_DIRECTORY>
			<O_DIRECT>
				<x path="Int"/>
				<haxe_doc>When set, an attempt will be made to minimize caching effects of file I/O.</haxe_doc>
			</O_DIRECT>
			<O_CREAT>
				<x path="Int"/>
				<haxe_doc>Flag indicating to create the file if it does not already exist.</haxe_doc>
			</O_CREAT>
			<O_APPEND>
				<x path="Int"/>
				<haxe_doc>Flag indicating that data will be appended to the end of the file.</haxe_doc>
			</O_APPEND>
			<F_OK>
				<x path="Int"/>
				<haxe_doc>Flag indicating that the file is visible to the calling process.
		Meant for use with `Fs.access`.</haxe_doc>
			</F_OK>
		</a>
		<haxe_doc>Constants for use in `Fs` module.

	Note: Not every constant will be available on every operating system.</haxe_doc>
	</typedef>
	<class path="js.node.Fs" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Fs.hx" extern="1">
		<constants public="1" set="null" static="1">
			<t path="js.node.FsConstants"/>
			<haxe_doc>An object containing commonly used constants for file system operations.</haxe_doc>
		</constants>
		<rename public="1" set="method" static="1">
			<f a="oldPath:newPath:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous rename(2).</haxe_doc>
		</rename>
		<renameSync public="1" set="method" static="1">
			<f a="oldPath:newPath">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous rename(2).</haxe_doc>
		</renameSync>
		<ftruncate public="1" set="method" static="1">
			<f a="fd:len:callback">
				<x path="Int"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous ftruncate(2).</haxe_doc>
		</ftruncate>
		<ftruncateSync public="1" set="method" static="1">
			<f a="fd:len">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous ftruncate(2).</haxe_doc>
		</ftruncateSync>
		<truncate public="1" set="method" static="1">
			<f a="path:len:callback">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous truncate(2).</haxe_doc>
		</truncate>
		<truncateSync public="1" set="method" static="1">
			<f a="path:len">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous truncate(2).</haxe_doc>
		</truncateSync>
		<chown public="1" set="method" static="1">
			<f a="path:uid:gid:callback">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous chown(2).</haxe_doc>
		</chown>
		<chownSync public="1" set="method" static="1">
			<f a="path:uid:gid">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous chown(2).</haxe_doc>
		</chownSync>
		<fchown public="1" set="method" static="1">
			<f a="fd:uid:gid:callback">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous fchown(2).</haxe_doc>
		</fchown>
		<fchownSync public="1" set="method" static="1">
			<f a="fd:uid:gid">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous fchown(2).</haxe_doc>
		</fchownSync>
		<lchown public="1" set="method" static="1">
			<f a="path:uid:gid:callback">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous lchown(2).</haxe_doc>
		</lchown>
		<lchownSync public="1" set="method" static="1">
			<f a="path:uid:gid">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous lchown(2).</haxe_doc>
		</lchownSync>
		<chmod public="1" set="method" static="1">
			<f a="path:mode:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsMode"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous chmod(2).</haxe_doc>
		</chmod>
		<chmodSync public="1" set="method" static="1">
			<f a="path:mode">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsMode"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous chmod(2).</haxe_doc>
		</chmodSync>
		<fchmod public="1" set="method" static="1">
			<f a="fd:mode:callback">
				<x path="Int"/>
				<t path="js.node.FsMode"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous fchmod(2).</haxe_doc>
		</fchmod>
		<fchmodSync public="1" set="method" static="1">
			<f a="fd:mode">
				<x path="Int"/>
				<t path="js.node.FsMode"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous fchmod(2).</haxe_doc>
		</fchmodSync>
		<lchmod public="1" set="method" static="1">
			<f a="path:mode:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsMode"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous lchmod(2).
		Only available on Mac OS X.</haxe_doc>
		</lchmod>
		<lchmodSync public="1" set="method" static="1">
			<f a="path:mode">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsMode"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous lchmod(2).</haxe_doc>
		</lchmodSync>
		<stat public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="js.node.fs.Stats"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous stat(2).</haxe_doc>
		</stat>
		<lstat public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="js.node.fs.Stats"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous lstat(2).

		lstat() is identical to stat(), except that if path is a symbolic link,
		then the link itself is stat-ed, not the file that it refers to.</haxe_doc>
		</lstat>
		<fstat public="1" set="method" static="1">
			<f a="fd:callback">
				<x path="Int"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="js.node.fs.Stats"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous fstat(2).

		fstat() is identical to stat(), except that the file to be stat-ed
		is specified by the file descriptor fd.</haxe_doc>
		</fstat>
		<statSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<c path="js.node.fs.Stats"/>
			</f>
			<haxe_doc>Synchronous stat(2).</haxe_doc>
		</statSync>
		<lstatSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<c path="js.node.fs.Stats"/>
			</f>
			<haxe_doc>Synchronous lstat(2).</haxe_doc>
		</lstatSync>
		<fstatSync public="1" set="method" static="1">
			<f a="fd">
				<x path="Int"/>
				<c path="js.node.fs.Stats"/>
			</f>
			<haxe_doc>Synchronous fstat(2).</haxe_doc>
		</fstatSync>
		<link public="1" set="method" static="1">
			<f a="srcpath:dstpath:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous link(2).</haxe_doc>
		</link>
		<linkSync public="1" set="method" static="1">
			<f a="srcpath:dstpath">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous link(2).</haxe_doc>
		</linkSync>
		<symlink public="1" set="method" static="1">
			<f a="srcpath:dstpath:type:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<x path="js.node.SymlinkType"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous symlink(2).

		The `type` argument can be set to 'dir', 'file', or 'junction' (default is 'file')
		and is only available on Windows (ignored on other platforms). Note that Windows junction
		points require the destination path to be absolute. When using 'junction', the destination
		argument will automatically be normalized to absolute path.</haxe_doc>
			<overloads><symlink public="1" set="method">
	<f a="srcpath:dstpath:callback">
		<t path="js.node.FsPath"/>
		<t path="js.node.FsPath"/>
		<f a="">
			<c path="js.lib.Error"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Asynchronous symlink(2).

		The `type` argument can be set to 'dir', 'file', or 'junction' (default is 'file')
		and is only available on Windows (ignored on other platforms). Note that Windows junction
		points require the destination path to be absolute. When using 'junction', the destination
		argument will automatically be normalized to absolute path.</haxe_doc>
</symlink></overloads>
		</symlink>
		<symlinkSync public="1" set="method" static="1">
			<f a="srcpath:dstpath:type">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsPath"/>
				<x path="js.node.SymlinkType"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous symlink(2).</haxe_doc>
			<overloads><symlinkSync public="1" set="method">
	<f a="srcpath:dstpath">
		<t path="js.node.FsPath"/>
		<t path="js.node.FsPath"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Synchronous symlink(2).</haxe_doc>
</symlinkSync></overloads>
		</symlinkSync>
		<readlink public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous readlink(2).</haxe_doc>
		</readlink>
		<readlinkSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<c path="String"/>
			</f>
			<haxe_doc>Synchronous readlink(2).
		Returns the symbolic link's string value.</haxe_doc>
		</readlinkSync>
		<realpath public="1" set="method" static="1">
			<f a="path:cache:callback">
				<t path="js.node.FsPath"/>
				<x path="haxe.DynamicAccess"><c path="String"/></x>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous realpath(2).

		The callback gets two arguments (err, resolvedPath).

		May use process.cwd to resolve relative paths.

		`cache` is an object literal of mapped paths that can be used to force a specific path resolution
		or avoid additional `stat` calls for known real paths.</haxe_doc>
			<overloads><realpath public="1" set="method">
	<f a="path:callback">
		<t path="js.node.FsPath"/>
		<f a=":">
			<c path="js.lib.Error"/>
			<c path="String"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Asynchronous realpath(2).

		The callback gets two arguments (err, resolvedPath).

		May use process.cwd to resolve relative paths.

		`cache` is an object literal of mapped paths that can be used to force a specific path resolution
		or avoid additional `stat` calls for known real paths.</haxe_doc>
</realpath></overloads>
		</realpath>
		<realpathSync public="1" set="method" static="1">
			<f a="path:cache">
				<t path="js.node.FsPath"/>
				<x path="haxe.DynamicAccess"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Synchronous realpath(2).
		Returns the resolved path.</haxe_doc>
			<overloads><realpathSync public="1" set="method">
	<f a="path">
		<t path="js.node.FsPath"/>
		<c path="String"/>
	</f>
	<haxe_doc>Synchronous realpath(2).
		Returns the resolved path.</haxe_doc>
</realpathSync></overloads>
		</realpathSync>
		<unlink public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous unlink(2).</haxe_doc>
		</unlink>
		<unlinkSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous unlink(2).</haxe_doc>
		</unlinkSync>
		<rmdir public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous rmdir(2).</haxe_doc>
		</rmdir>
		<rmdirSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous rmdir(2).</haxe_doc>
		</rmdirSync>
		<mkdir public="1" set="method" static="1">
			<f a="path:mode:callback">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsMode"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous mkdir(2).
		`mode` defaults to 0777.</haxe_doc>
			<overloads><mkdir public="1" set="method">
	<f a="path:callback">
		<t path="js.node.FsPath"/>
		<f a="">
			<c path="js.lib.Error"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Asynchronous mkdir(2).
		`mode` defaults to 0777.</haxe_doc>
</mkdir></overloads>
		</mkdir>
		<mkdirSync public="1" set="method" static="1">
			<f a="path:?mode">
				<t path="js.node.FsPath"/>
				<x path="Null"><t path="js.node.FsMode"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous mkdir(2).</haxe_doc>
		</mkdirSync>
		<mkdtemp public="1" set="method" static="1">
			<f a="prefix:callback">
				<c path="String"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a unique temporary directory.

		Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.

		The created folder path is passed as a string to the `callback`'s second parameter.</haxe_doc>
		</mkdtemp>
		<mkdtempSync public="1" set="method" static="1">
			<f a="template">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The synchronous version of `mkdtemp`.

		Returns the created folder path.</haxe_doc>
		</mkdtempSync>
		<readdir public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="Array"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous readdir(3).
		Reads the contents of a directory.

		The callback gets two arguments (err, files) where files is an array of the
		names of the files in the directory excluding '.' and '..'.</haxe_doc>
		</readdir>
		<readdirSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Synchronous readdir(3).
		Returns an array of filenames excluding '.' and '..'.</haxe_doc>
		</readdirSync>
		<close public="1" set="method" static="1">
			<f a="fd:callback">
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous close(2).</haxe_doc>
		</close>
		<closeSync public="1" set="method" static="1">
			<f a="fd">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous close(2).</haxe_doc>
		</closeSync>
		<open public="1" set="method" static="1">
			<f a="path:flags:mode:callback">
				<t path="js.node.FsPath"/>
				<x path="js.node.FsOpenFlag"/>
				<t path="js.node.FsMode"/>
				<f a=":">
					<c path="js.lib.Error"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous file open. See open(2).

		See `FsOpenFlag` for description of possible `flags`.

		`mode` sets the file mode (permission and sticky bits), but only if the file was created.
		It defaults to 0666, readable and writeable.

		The `callback` gets two arguments (err, fd).</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="path:flags:callback">
		<t path="js.node.FsPath"/>
		<x path="js.node.FsOpenFlag"/>
		<f a=":">
			<c path="js.lib.Error"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Asynchronous file open. See open(2).

		See `FsOpenFlag` for description of possible `flags`.

		`mode` sets the file mode (permission and sticky bits), but only if the file was created.
		It defaults to 0666, readable and writeable.

		The `callback` gets two arguments (err, fd).</haxe_doc>
</open></overloads>
		</open>
		<openSync public="1" set="method" static="1">
			<f a="path:flags:mode">
				<t path="js.node.FsPath"/>
				<x path="js.node.FsOpenFlag"/>
				<t path="js.node.FsMode"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Synchronous version of open().</haxe_doc>
			<overloads><openSync public="1" set="method">
	<f a="path:flags">
		<t path="js.node.FsPath"/>
		<x path="js.node.FsOpenFlag"/>
		<x path="Int"/>
	</f>
	<haxe_doc>Synchronous version of open().</haxe_doc>
</openSync></overloads>
		</openSync>
		<utimes public="1" set="method" static="1">
			<f a="path:atime:mtime:callback">
				<t path="js.node.FsPath"/>
				<c path="Date"/>
				<c path="Date"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Change file timestamps of the file referenced by the supplied path.</haxe_doc>
		</utimes>
		<utimesSync public="1" set="method" static="1">
			<f a="path:atime:mtime">
				<t path="js.node.FsPath"/>
				<c path="Date"/>
				<c path="Date"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change file timestamps of the file referenced by the supplied path.</haxe_doc>
		</utimesSync>
		<futimes public="1" set="method" static="1">
			<f a="fd:atime:mtime:callback">
				<x path="Int"/>
				<c path="Date"/>
				<c path="Date"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the file timestamps of a file referenced by the supplied file descriptor.</haxe_doc>
		</futimes>
		<futimesSync public="1" set="method" static="1">
			<f a="fd:atime:mtime">
				<x path="Int"/>
				<c path="Date"/>
				<c path="Date"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the file timestamps of a file referenced by the supplied file descriptor.</haxe_doc>
		</futimesSync>
		<fsync public="1" set="method" static="1">
			<f a="fd:callback">
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronous fsync(2).</haxe_doc>
		</fsync>
		<fsyncSync public="1" set="method" static="1">
			<f a="fd">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous fsync(2).</haxe_doc>
		</fsyncSync>
		<write public="1" set="method" static="1">
			<f a="fd:buffer:offset:length:position:callback">
				<x path="Int"/>
				<t path="js.node.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a="::">
					<c path="js.lib.Error"/>
					<x path="Int"/>
					<t path="js.node.Buffer"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Documentation for the overloads with the `buffer` argument:

		Write `buffer` to the file specified by `fd`.

		`offset` and `length` determine the part of the `buffer` to be written.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If position is null, the data will be written at the current position. See pwrite(2).

		The `callback` will be given three arguments (err, written, buffer)
		where `written` specifies how many bytes were written from `buffer`.

		---

		Documentation for the overloads with the `data` argument:

		Write `data` to the file specified by `fd`. If `data` is not a `Buffer` instance then
		the value will be coerced to a string.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If omitted, the data will be written at the current position. See pwrite(2).

		`encoding` is the expected string encoding.

		The `callback` will receive the arguments (err, written, string) where written specifies how many bytes
		the passed string required to be written. Note that bytes written is not the same as string characters.
		See `Buffer.byteLength`.

		Unlike when writing `buffer`, the entire string must be written. No substring may be specified.
		This is because the byte offset of the resulting data may not be the same as the string offset.

		---

		Common notes:

		Note that it is unsafe to use `write` multiple times on the same file without waiting for the callback.
		For this scenario, `createWriteStream` is strongly recommended.

		On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position
		argument and always appends the data to the end of the file.</haxe_doc>
			<overloads>
				<write public="1" set="method">
					<f a="fd:data:position:encoding:callback">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<c path="String"/>
						<f a="::">
							<c path="js.lib.Error"/>
							<x path="Int"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Documentation for the overloads with the `buffer` argument:

		Write `buffer` to the file specified by `fd`.

		`offset` and `length` determine the part of the `buffer` to be written.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If position is null, the data will be written at the current position. See pwrite(2).

		The `callback` will be given three arguments (err, written, buffer)
		where `written` specifies how many bytes were written from `buffer`.

		---

		Documentation for the overloads with the `data` argument:

		Write `data` to the file specified by `fd`. If `data` is not a `Buffer` instance then
		the value will be coerced to a string.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If omitted, the data will be written at the current position. See pwrite(2).

		`encoding` is the expected string encoding.

		The `callback` will receive the arguments (err, written, string) where written specifies how many bytes
		the passed string required to be written. Note that bytes written is not the same as string characters.
		See `Buffer.byteLength`.

		Unlike when writing `buffer`, the entire string must be written. No substring may be specified.
		This is because the byte offset of the resulting data may not be the same as the string offset.

		---

		Common notes:

		Note that it is unsafe to use `write` multiple times on the same file without waiting for the callback.
		For this scenario, `createWriteStream` is strongly recommended.

		On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position
		argument and always appends the data to the end of the file.</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="fd:data:position:callback">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<f a="::">
							<c path="js.lib.Error"/>
							<x path="Int"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Documentation for the overloads with the `buffer` argument:

		Write `buffer` to the file specified by `fd`.

		`offset` and `length` determine the part of the `buffer` to be written.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If position is null, the data will be written at the current position. See pwrite(2).

		The `callback` will be given three arguments (err, written, buffer)
		where `written` specifies how many bytes were written from `buffer`.

		---

		Documentation for the overloads with the `data` argument:

		Write `data` to the file specified by `fd`. If `data` is not a `Buffer` instance then
		the value will be coerced to a string.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If omitted, the data will be written at the current position. See pwrite(2).

		`encoding` is the expected string encoding.

		The `callback` will receive the arguments (err, written, string) where written specifies how many bytes
		the passed string required to be written. Note that bytes written is not the same as string characters.
		See `Buffer.byteLength`.

		Unlike when writing `buffer`, the entire string must be written. No substring may be specified.
		This is because the byte offset of the resulting data may not be the same as the string offset.

		---

		Common notes:

		Note that it is unsafe to use `write` multiple times on the same file without waiting for the callback.
		For this scenario, `createWriteStream` is strongly recommended.

		On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position
		argument and always appends the data to the end of the file.</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="fd:data:callback">
						<x path="Int"/>
						<d/>
						<f a="::">
							<c path="js.lib.Error"/>
							<x path="Int"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Documentation for the overloads with the `buffer` argument:

		Write `buffer` to the file specified by `fd`.

		`offset` and `length` determine the part of the `buffer` to be written.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If position is null, the data will be written at the current position. See pwrite(2).

		The `callback` will be given three arguments (err, written, buffer)
		where `written` specifies how many bytes were written from `buffer`.

		---

		Documentation for the overloads with the `data` argument:

		Write `data` to the file specified by `fd`. If `data` is not a `Buffer` instance then
		the value will be coerced to a string.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If omitted, the data will be written at the current position. See pwrite(2).

		`encoding` is the expected string encoding.

		The `callback` will receive the arguments (err, written, string) where written specifies how many bytes
		the passed string required to be written. Note that bytes written is not the same as string characters.
		See `Buffer.byteLength`.

		Unlike when writing `buffer`, the entire string must be written. No substring may be specified.
		This is because the byte offset of the resulting data may not be the same as the string offset.

		---

		Common notes:

		Note that it is unsafe to use `write` multiple times on the same file without waiting for the callback.
		For this scenario, `createWriteStream` is strongly recommended.

		On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position
		argument and always appends the data to the end of the file.</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="fd:buffer:offset:length:callback">
						<x path="Int"/>
						<t path="js.node.Buffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<f a="::">
							<c path="js.lib.Error"/>
							<x path="Int"/>
							<t path="js.node.Buffer"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Documentation for the overloads with the `buffer` argument:

		Write `buffer` to the file specified by `fd`.

		`offset` and `length` determine the part of the `buffer` to be written.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If position is null, the data will be written at the current position. See pwrite(2).

		The `callback` will be given three arguments (err, written, buffer)
		where `written` specifies how many bytes were written from `buffer`.

		---

		Documentation for the overloads with the `data` argument:

		Write `data` to the file specified by `fd`. If `data` is not a `Buffer` instance then
		the value will be coerced to a string.

		`position` refers to the offset from the beginning of the file where this data should be written.
		If omitted, the data will be written at the current position. See pwrite(2).

		`encoding` is the expected string encoding.

		The `callback` will receive the arguments (err, written, string) where written specifies how many bytes
		the passed string required to be written. Note that bytes written is not the same as string characters.
		See `Buffer.byteLength`.

		Unlike when writing `buffer`, the entire string must be written. No substring may be specified.
		This is because the byte offset of the resulting data may not be the same as the string offset.

		---

		Common notes:

		Note that it is unsafe to use `write` multiple times on the same file without waiting for the callback.
		For this scenario, `createWriteStream` is strongly recommended.

		On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position
		argument and always appends the data to the end of the file.</haxe_doc>
				</write>
			</overloads>
		</write>
		<writeSync public="1" set="method" static="1">
			<f a="fd:buffer:offset:length:?position">
				<x path="Int"/>
				<t path="js.node.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Synchronous version of `write`. Returns the number of bytes written.</haxe_doc>
			<overloads>
				<writeSync public="1" set="method">
					<f a="fd:data:position:encoding">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Synchronous version of `write`. Returns the number of bytes written.</haxe_doc>
				</writeSync>
				<writeSync public="1" set="method">
					<f a="fd:data:?position">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Synchronous version of `write`. Returns the number of bytes written.</haxe_doc>
				</writeSync>
			</overloads>
		</writeSync>
		<read public="1" set="method" static="1">
			<f a="fd:buffer:offset:length:position:callback">
				<x path="Int"/>
				<t path="js.node.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
				<f a="::">
					<c path="js.lib.Error"/>
					<x path="Int"/>
					<t path="js.node.Buffer"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Read data from the file specified by `fd`.

		`buffer` is the buffer that the data will be written to.

		`offset` is the offset in the `buffer` to start writing at.

		`length` is an integer specifying the number of bytes to read.

		`position` is an integer specifying where to begin reading from in the file.
		If position is null, data will be read from the current file position.

		The `callback` is given the three arguments, (err, bytesRead, buffer).</haxe_doc>
		</read>
		<readSync public="1" set="method" static="1">
			<f a="fd:buffer:offset:length:position">
				<x path="Int"/>
				<t path="js.node.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>Synchronous version of `read`. Returns the number of bytes read.</haxe_doc>
		</readSync>
		<readFile public="1" set="method" static="1">
			<f a="filename:options:callback">
				<t path="js.node.FsPath"/>
				<a>
					<flag>
						<x path="Null"><x path="js.node.FsOpenFlag"/></x>
						<meta><m n=":optional"/></meta>
					</flag>
					<encoding><c path="String"/></encoding>
				</a>
				<f a=":">
					<c path="js.lib.Error"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronously reads the entire contents of a file.

		The `callback` is passed two arguments (err, data), where data is the contents of the file.
		If no `encoding` is specified, then the raw buffer is returned.

		If `options` is a string, then it specifies the encoding.</haxe_doc>
			<overloads>
				<readFile public="1" set="method">
					<f a="filename:callback">
						<t path="js.node.FsPath"/>
						<f a=":">
							<c path="js.lib.Error"/>
							<t path="js.node.Buffer"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously reads the entire contents of a file.

		The `callback` is passed two arguments (err, data), where data is the contents of the file.
		If no `encoding` is specified, then the raw buffer is returned.

		If `options` is a string, then it specifies the encoding.</haxe_doc>
				</readFile>
				<readFile public="1" set="method">
					<f a="filename:options:callback">
						<t path="js.node.FsPath"/>
						<a><flag><x path="js.node.FsOpenFlag"/></flag></a>
						<f a=":">
							<c path="js.lib.Error"/>
							<t path="js.node.Buffer"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously reads the entire contents of a file.

		The `callback` is passed two arguments (err, data), where data is the contents of the file.
		If no `encoding` is specified, then the raw buffer is returned.

		If `options` is a string, then it specifies the encoding.</haxe_doc>
				</readFile>
				<readFile public="1" set="method">
					<f a="filename:options:callback">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<f a=":">
							<c path="js.lib.Error"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously reads the entire contents of a file.

		The `callback` is passed two arguments (err, data), where data is the contents of the file.
		If no `encoding` is specified, then the raw buffer is returned.

		If `options` is a string, then it specifies the encoding.</haxe_doc>
				</readFile>
			</overloads>
		</readFile>
		<readFileSync public="1" set="method" static="1">
			<f a="filename:options">
				<t path="js.node.FsPath"/>
				<a>
					<flag>
						<x path="Null"><x path="js.node.FsOpenFlag"/></x>
						<meta><m n=":optional"/></meta>
					</flag>
					<encoding><c path="String"/></encoding>
				</a>
				<c path="String"/>
			</f>
			<haxe_doc>Synchronous version of `readFile`. Returns the contents of the filename.
		If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer.</haxe_doc>
			<overloads>
				<readFileSync public="1" set="method">
					<f a="filename">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
					</f>
					<haxe_doc>Synchronous version of `readFile`. Returns the contents of the filename.
		If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer.</haxe_doc>
				</readFileSync>
				<readFileSync public="1" set="method">
					<f a="filename:options">
						<t path="js.node.FsPath"/>
						<a><flag><x path="js.node.FsOpenFlag"/></flag></a>
						<t path="js.node.Buffer"/>
					</f>
					<haxe_doc>Synchronous version of `readFile`. Returns the contents of the filename.
		If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer.</haxe_doc>
				</readFileSync>
				<readFileSync public="1" set="method">
					<f a="filename:options">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<c path="String"/>
					</f>
					<haxe_doc>Synchronous version of `readFile`. Returns the contents of the filename.
		If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer.</haxe_doc>
				</readFileSync>
			</overloads>
		</readFileSync>
		<writeFile public="1" set="method" static="1">
			<f a="filename:data:options:callback">
				<t path="js.node.FsPath"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.FsWriteFileOptions"/>
				</x>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronously writes data to a file, replacing the file if it already exists.

		`data` can be a string or a buffer.

		The encoding option is ignored if data is a buffer. It defaults to 'utf8'.</haxe_doc>
			<overloads>
				<writeFile public="1" set="method">
					<f a="filename:data:callback">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously writes data to a file, replacing the file if it already exists.

		`data` can be a string or a buffer.

		The encoding option is ignored if data is a buffer. It defaults to 'utf8'.</haxe_doc>
				</writeFile>
				<writeFile public="1" set="method">
					<f a="filename:data:callback">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously writes data to a file, replacing the file if it already exists.

		`data` can be a string or a buffer.

		The encoding option is ignored if data is a buffer. It defaults to 'utf8'.</haxe_doc>
				</writeFile>
				<writeFile public="1" set="method">
					<f a="filename:data:options:callback">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<t path="js.node.FsWriteFileOptions"/>
						</x>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously writes data to a file, replacing the file if it already exists.

		`data` can be a string or a buffer.

		The encoding option is ignored if data is a buffer. It defaults to 'utf8'.</haxe_doc>
				</writeFile>
			</overloads>
		</writeFile>
		<writeFileSync public="1" set="method" static="1">
			<f a="filename:data:options">
				<t path="js.node.FsPath"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.FsWriteFileOptions"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>The synchronous version of `writeFile`.</haxe_doc>
			<overloads>
				<writeFileSync public="1" set="method">
					<f a="filename:data">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `writeFile`.</haxe_doc>
				</writeFileSync>
				<writeFileSync public="1" set="method">
					<f a="filename:data">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `writeFile`.</haxe_doc>
				</writeFileSync>
				<writeFileSync public="1" set="method">
					<f a="filename:data:options">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<t path="js.node.FsWriteFileOptions"/>
						</x>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `writeFile`.</haxe_doc>
				</writeFileSync>
			</overloads>
		</writeFileSync>
		<appendFile public="1" set="method" static="1">
			<f a="filename:data:options:callback">
				<t path="js.node.FsPath"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.FsWriteFileOptions"/>
				</x>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronously append data to a file, creating the file if it not yet exists.
		`data` can be a string or a buffer.</haxe_doc>
			<overloads>
				<appendFile public="1" set="method">
					<f a="filename:data:callback">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously append data to a file, creating the file if it not yet exists.
		`data` can be a string or a buffer.</haxe_doc>
				</appendFile>
				<appendFile public="1" set="method">
					<f a="filename:data:callback">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously append data to a file, creating the file if it not yet exists.
		`data` can be a string or a buffer.</haxe_doc>
				</appendFile>
				<appendFile public="1" set="method">
					<f a="filename:data:options:callback">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<t path="js.node.FsWriteFileOptions"/>
						</x>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>Asynchronously append data to a file, creating the file if it not yet exists.
		`data` can be a string or a buffer.</haxe_doc>
				</appendFile>
			</overloads>
		</appendFile>
		<appendFileSync public="1" set="method" static="1">
			<f a="filename:data:options">
				<t path="js.node.FsPath"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.FsWriteFileOptions"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>The synchronous version of `appendFile`.</haxe_doc>
			<overloads>
				<appendFileSync public="1" set="method">
					<f a="filename:data">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `appendFile`.</haxe_doc>
				</appendFileSync>
				<appendFileSync public="1" set="method">
					<f a="filename:data">
						<t path="js.node.FsPath"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `appendFile`.</haxe_doc>
				</appendFileSync>
				<appendFileSync public="1" set="method">
					<f a="filename:data:options">
						<t path="js.node.FsPath"/>
						<t path="js.node.Buffer"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<t path="js.node.FsWriteFileOptions"/>
						</x>
						<x path="Void"/>
					</f>
					<haxe_doc>The synchronous version of `appendFile`.</haxe_doc>
				</appendFileSync>
			</overloads>
		</appendFileSync>
		<watchFile public="1" set="method" static="1">
			<f a="filename:options:listener">
				<t path="js.node.FsPath"/>
				<t path="js.node.FsWatchFileOptions"/>
				<f a=":">
					<c path="js.node.fs.Stats"/>
					<c path="js.node.fs.Stats"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Unstable. Use `watch` instead, if possible.

		Watch for changes on `filename`.
		The callback `listener` will be called each time the file is accessed.

		The `options` if provided should be an object containing two members:
			- `persistent` indicates whether the process should continue to run as long as files are being watched.
			- `interval` indicates how often the target should be polled, in milliseconds.
		The default is { persistent: true, interval: 5007 }.

		The `listener` gets two arguments: the current stat object and the previous stat object.</haxe_doc>
			<overloads><watchFile public="1" set="method">
	<f a="filename:listener">
		<t path="js.node.FsPath"/>
		<f a=":">
			<c path="js.node.fs.Stats"/>
			<c path="js.node.fs.Stats"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Unstable. Use `watch` instead, if possible.

		Watch for changes on `filename`.
		The callback `listener` will be called each time the file is accessed.

		The `options` if provided should be an object containing two members:
			- `persistent` indicates whether the process should continue to run as long as files are being watched.
			- `interval` indicates how often the target should be polled, in milliseconds.
		The default is { persistent: true, interval: 5007 }.

		The `listener` gets two arguments: the current stat object and the previous stat object.</haxe_doc>
</watchFile></overloads>
		</watchFile>
		<unwatchFile public="1" set="method" static="1">
			<f a="filename:?listener">
				<t path="js.node.FsPath"/>
				<f a=":">
					<c path="js.node.fs.Stats"/>
					<c path="js.node.fs.Stats"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Unstable. Use `watch` instead, if possible.

		Stop watching for changes on filename.
		If `listener` is specified, only that particular listener is removed.
		Otherwise, all listeners are removed and you have effectively stopped watching filename.
		Calling `unwatchFile` with a `filename` that is not being watched is a no-op, not an error.</haxe_doc>
		</unwatchFile>
		<watch public="1" set="method" static="1">
			<f a="filename:listener">
				<t path="js.node.FsPath"/>
				<f a=":">
					<x path="js.node.fs.FSWatcherChangeType"/>
					<t path="js.node.FsPath"/>
					<x path="Void"/>
				</f>
				<c path="js.node.fs.FSWatcher"/>
			</f>
			<haxe_doc>Watch for changes on `filename`, where filename is either a file or a directory.

		`persistent` indicates whether the process should continue to run as long as files are being watched. Default is `true`.

		The `listener` callback gets two arguments (event, filename). event is either 'rename' or 'change', and filename
		is the name of the file which triggered the event.</haxe_doc>
			<overloads>
				<watch public="1" set="method">
					<f a="filename">
						<t path="js.node.FsPath"/>
						<c path="js.node.fs.FSWatcher"/>
					</f>
					<haxe_doc>Watch for changes on `filename`, where filename is either a file or a directory.

		`persistent` indicates whether the process should continue to run as long as files are being watched. Default is `true`.

		The `listener` callback gets two arguments (event, filename). event is either 'rename' or 'change', and filename
		is the name of the file which triggered the event.</haxe_doc>
				</watch>
				<watch public="1" set="method">
					<f a="filename:options:listener">
						<t path="js.node.FsPath"/>
						<a>
							<recursive>
								<x path="Null"><x path="Bool"/></x>
								<meta><m n=":optional"/></meta>
							</recursive>
							<persistent><x path="Bool"/></persistent>
						</a>
						<f a=":">
							<x path="js.node.fs.FSWatcherChangeType"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<c path="js.node.fs.FSWatcher"/>
					</f>
					<haxe_doc>Watch for changes on `filename`, where filename is either a file or a directory.

		`persistent` indicates whether the process should continue to run as long as files are being watched. Default is `true`.

		The `listener` callback gets two arguments (event, filename). event is either 'rename' or 'change', and filename
		is the name of the file which triggered the event.</haxe_doc>
				</watch>
			</overloads>
		</watch>
		<exists public="1" set="method" static="1">
			<f a="path:callback">
				<t path="js.node.FsPath"/>
				<f a="">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"Use Fs.stat or Fs.access instead"</e></m></meta>
			<haxe_doc>Test whether or not the given `path` exists by checking with the file system.
		Then call the `callback` argument with either `true` or `false`.

		`exists` is an anachronism and exists only for historical reasons.
		There should almost never be a reason to use it in your own code.

		In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions:
		another process may remove the file between the calls to `exists` and `open`.

		Just open the file and handle the error when it's not there.</haxe_doc>
		</exists>
		<existsSync public="1" set="method" static="1">
			<f a="path">
				<t path="js.node.FsPath"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Synchronous version of `exists`.</haxe_doc>
		</existsSync>
		<access public="1" set="method" static="1">
			<f a="path:mode:callback">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Tests a user's permissions for the file or directory specified by `path`.

		The `mode` argument is an optional integer that specifies the accessibility checks to be performed.
		The following constants define the possible values of `mode`. It is possible to create a mask consisting
		of the bitwise OR of two or more values.

		* `Fs.constants.F_OK` - path is visible to the calling process. This is useful for determining if a file exists,
		  but says nothing about `rwx` permissions. Default if no `mode` is specified.
		* `Fs.constants.R_OK` - path can be read by the calling process.
		* `Fs.constants.W_OK` - path can be written by the calling process.
		* `Fs.constants.X_OK` - path can be executed by the calling process.
		  This has no effect on Windows (will behave like `Fs.constants.F_OK`).

		The final argument, `callback`, is a callback function that is invoked with a possible error argument.
		If any of the accessibility checks fail, the error argument will be populated.</haxe_doc>
			<overloads><access public="1" set="method">
	<f a="path:callback">
		<t path="js.node.FsPath"/>
		<f a="">
			<c path="js.lib.Error"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Tests a user's permissions for the file or directory specified by `path`.

		The `mode` argument is an optional integer that specifies the accessibility checks to be performed.
		The following constants define the possible values of `mode`. It is possible to create a mask consisting
		of the bitwise OR of two or more values.

		* `Fs.constants.F_OK` - path is visible to the calling process. This is useful for determining if a file exists,
		  but says nothing about `rwx` permissions. Default if no `mode` is specified.
		* `Fs.constants.R_OK` - path can be read by the calling process.
		* `Fs.constants.W_OK` - path can be written by the calling process.
		* `Fs.constants.X_OK` - path can be executed by the calling process.
		  This has no effect on Windows (will behave like `Fs.constants.F_OK`).

		The final argument, `callback`, is a callback function that is invoked with a possible error argument.
		If any of the accessibility checks fail, the error argument will be populated.</haxe_doc>
</access></overloads>
		</access>
		<F_OK public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A mode flag for `access` and `accessSync` methods:

		File is visible to the calling process.
		This is useful for determining if a file exists, but says nothing about rwx permissions.</haxe_doc>
		</F_OK>
		<R_OK public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A mode flag for `access` and `accessSync` methods:

		File can be read by the calling process.</haxe_doc>
		</R_OK>
		<W_OK public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A mode flag for `access` and `accessSync` methods:

		File can be written by the calling process.</haxe_doc>
		</W_OK>
		<X_OK public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>A mode flag for `access` and `accessSync` methods:

		File can be executed by the calling process.
		This has no effect on Windows.</haxe_doc>
		</X_OK>
		<accessSync public="1" set="method" static="1">
			<f a="path:?mode">
				<t path="js.node.FsPath"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronous version of `access`.
		This throws if any accessibility checks fail, and does nothing otherwise.</haxe_doc>
		</accessSync>
		<createReadStream public="1" set="method" static="1">
			<f a="path:?options">
				<t path="js.node.FsPath"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.FsCreateReadStreamOptions"/>
				</x>
				<c path="js.node.fs.ReadStream"/>
			</f>
			<haxe_doc>Returns a new ReadStream object (See Readable Stream).

		`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file.
		Both `start` and `end` are inclusive and start at 0.

		The encoding can be 'utf8', 'ascii', or 'base64'.

		If `autoClose` is `false`, then the file descriptor won't be closed, even if there's an error.
		It is your responsiblity to close it and make sure there's no file descriptor leak.
		If `autoClose` is set to true (default behavior), on error or end the file descriptor will be closed automatically.</haxe_doc>
		</createReadStream>
		<createWriteStream public="1" set="method" static="1">
			<f a="path:?options">
				<t path="js.node.FsPath"/>
				<x path="Null"><t path="js.node.FsCreateWriteStreamOptions"/></x>
				<c path="js.node.fs.WriteStream"/>
			</f>
			<haxe_doc>Returns a new WriteStream object (See Writable Stream).

		`options` may also include a `start` option to allow writing data at some position past the beginning of the file.

		Modifying a file rather than replacing it may require a flags mode of r+ rather than the default mode w.</haxe_doc>
		</createWriteStream>
		<haxe_doc>File I/O is provided by simple wrappers around standard POSIX functions.
	All the methods have asynchronous and synchronous forms.

	The asynchronous form always take a completion callback as its last argument.
	The arguments passed to the completion callback depend on the method,
	but the first argument is always reserved for an exception.

	If the operation was completed successfully, then the first argument will be null.

	When using the synchronous form any exceptions are immediately thrown.
	You can use try/catch to handle exceptions or allow them to bubble up.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":jsRequire"><e>"fs"</e></m>
		</meta>
	</class>
	<class path="js.node.Http" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Http.hx" extern="1">
		<METHODS public="1" static="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>A list of the HTTP methods that are supported by the parser.</haxe_doc>
		</METHODS>
		<STATUS_CODES public="1" set="null" static="1">
			<x path="haxe.DynamicAccess"><c path="String"/></x>
			<haxe_doc>A collection of all the standard HTTP response status codes, and the short description of each.
		For example, `http.STATUS_CODES[404] === 'Not Found'`.</haxe_doc>
		</STATUS_CODES>
		<createServer public="1" set="method" static="1">
			<f a="?requestListener">
				<f a="request:response">
					<c path="js.node.http.IncomingMessage"/>
					<c path="js.node.http.ServerResponse"/>
					<x path="Void"/>
				</f>
				<c path="js.node.http.Server"/>
			</f>
			<haxe_doc>Returns a new web server object.

		The `requestListener` is a function which is automatically added to the `'request'` event.</haxe_doc>
			<overloads><createServer public="1" set="method">
	<f a="options:?requestListener">
		<t path="js.node.HttpCreateServerOptions"/>
		<f a="request:response">
			<c path="js.node.http.IncomingMessage"/>
			<c path="js.node.http.ServerResponse"/>
			<x path="Void"/>
		</f>
		<c path="js.node.http.Server"/>
	</f>
	<haxe_doc>Returns a new web server object.

		The `requestListener` is a function which is automatically added to the `'request'` event.</haxe_doc>
</createServer></overloads>
		</createServer>
		<get public="1" set="method" static="1">
			<f a="options:?callback">
				<t path="js.node.HttpRequestOptions"/>
				<f a="">
					<c path="js.node.http.IncomingMessage"/>
					<x path="Void"/>
				</f>
				<c path="js.node.http.ClientRequest"/>
			</f>
			<haxe_doc>Since most requests are GET requests without bodies, Node.js provides this convenience method.
		The only difference between this method and `request()` is that it sets the method to GET and calls `end()` automatically.
		The callback must take care to consume the response data for reasons stated in `http.ClientRequest` section.</haxe_doc>
			<overloads>
				<get public="1" set="method">
					<f a="url:?options:?callback">
						<c path="js.node.url.URL"/>
						<x path="Null"><t path="js.node.HttpRequestOptions"/></x>
						<f a="">
							<c path="js.node.http.IncomingMessage"/>
							<x path="Void"/>
						</f>
						<c path="js.node.http.ClientRequest"/>
					</f>
					<haxe_doc>Since most requests are GET requests without bodies, Node.js provides this convenience method.
		The only difference between this method and `request()` is that it sets the method to GET and calls `end()` automatically.
		The callback must take care to consume the response data for reasons stated in `http.ClientRequest` section.</haxe_doc>
				</get>
				<get public="1" set="method">
					<f a="url:?options:?callback">
						<c path="String"/>
						<x path="Null"><t path="js.node.HttpRequestOptions"/></x>
						<f a="">
							<c path="js.node.http.IncomingMessage"/>
							<x path="Void"/>
						</f>
						<c path="js.node.http.ClientRequest"/>
					</f>
					<haxe_doc>Since most requests are GET requests without bodies, Node.js provides this convenience method.
		The only difference between this method and `request()` is that it sets the method to GET and calls `end()` automatically.
		The callback must take care to consume the response data for reasons stated in `http.ClientRequest` section.</haxe_doc>
				</get>
			</overloads>
		</get>
		<globalAgent public="1" static="1">
			<c path="js.node.http.Agent"/>
			<haxe_doc>Global instance of Agent which is used as the default for all http client requests.</haxe_doc>
		</globalAgent>
		<maxHeaderSize public="1" static="1"><x path="Int"/></maxHeaderSize>
		<request public="1" set="method" static="1">
			<f a="options:?callback">
				<t path="js.node.HttpRequestOptions"/>
				<f a="">
					<c path="js.node.http.IncomingMessage"/>
					<x path="Void"/>
				</f>
				<c path="js.node.http.ClientRequest"/>
			</f>
			<haxe_doc>Node.js maintains several connections per server to make HTTP requests.
		This function allows one to transparently issue requests.

		`url` can be a string or a URL object.
		If `url` is a string, it is automatically parsed with `new URL()`.
		If it is a `URL` object, it will be automatically converted to an ordinary `options` object.

		If both `url` and `options` are specified, the objects are merged, with the `options` properties taking precedence.

		The optional `callback` parameter will be added as a one-time listener for the `'response'` event.

		`request()` returns an instance of the `http.ClientRequest` class.
		The `ClientRequest` instance is a writable stream.
		If one needs to upload a file with a POST request, then write to the `ClientRequest` object.</haxe_doc>
			<overloads>
				<request public="1" set="method">
					<f a="url:?options:?callback">
						<c path="js.node.url.URL"/>
						<x path="Null"><t path="js.node.HttpRequestOptions"/></x>
						<f a="">
							<c path="js.node.http.IncomingMessage"/>
							<x path="Void"/>
						</f>
						<c path="js.node.http.ClientRequest"/>
					</f>
					<haxe_doc>Node.js maintains several connections per server to make HTTP requests.
		This function allows one to transparently issue requests.

		`url` can be a string or a URL object.
		If `url` is a string, it is automatically parsed with `new URL()`.
		If it is a `URL` object, it will be automatically converted to an ordinary `options` object.

		If both `url` and `options` are specified, the objects are merged, with the `options` properties taking precedence.

		The optional `callback` parameter will be added as a one-time listener for the `'response'` event.

		`request()` returns an instance of the `http.ClientRequest` class.
		The `ClientRequest` instance is a writable stream.
		If one needs to upload a file with a POST request, then write to the `ClientRequest` object.</haxe_doc>
				</request>
				<request public="1" set="method">
					<f a="url:?options:?callback">
						<c path="String"/>
						<x path="Null"><t path="js.node.HttpRequestOptions"/></x>
						<f a="">
							<c path="js.node.http.IncomingMessage"/>
							<x path="Void"/>
						</f>
						<c path="js.node.http.ClientRequest"/>
					</f>
					<haxe_doc>Node.js maintains several connections per server to make HTTP requests.
		This function allows one to transparently issue requests.

		`url` can be a string or a URL object.
		If `url` is a string, it is automatically parsed with `new URL()`.
		If it is a `URL` object, it will be automatically converted to an ordinary `options` object.

		If both `url` and `options` are specified, the objects are merged, with the `options` properties taking precedence.

		The optional `callback` parameter will be added as a one-time listener for the `'response'` event.

		`request()` returns an instance of the `http.ClientRequest` class.
		The `ClientRequest` instance is a writable stream.
		If one needs to upload a file with a POST request, then write to the `ClientRequest` object.</haxe_doc>
				</request>
			</overloads>
		</request>
		<haxe_doc>The HTTP interfaces in Node are designed to support many features of the protocol
	which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages.
	The interface is careful to never buffer entire requests or responses--the user is able to stream data.

	HTTP message headers are represented by an object like this:
		{ 'content-length': '123',
		  'content-type': 'text/plain',
		  'connection': 'keep-alive' }
	Keys are lowercased. Values are not modified.

	In order to support the full spectrum of possible HTTP applications, Node's HTTP API is very low-level.
	It deals with stream handling and message parsing only. It parses a message into headers and body but
	it does not parse the actual headers or the body.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":jsRequire"><e>"http"</e></m>
		</meta>
	</class>
	<typedef path="js.node.HttpCreateServerOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Http.hx" module="js.node.Http"><a>
	<ServerResponse>
		<x path="Null"><x path="Class"><d/></x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Specifies the `ServerResponse` class to be used. Useful for extending the original `ServerResponse`.

		Default: `ServerResponse`.</haxe_doc>
	</ServerResponse>
	<IncomingMessage>
		<x path="Null"><x path="Class"><d/></x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Specifies the `IncomingMessage` class to be used. Useful for extending the original `IncomingMessage`.

		Default: `js.node.http.IncomingMessage`.</haxe_doc>
	</IncomingMessage>
</a></typedef>
	<typedef path="js.node.HttpRequestOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Http.hx" module="js.node.Http">
		<a>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A number specifying the socket timeout in milliseconds.
		This will set the timeout before the socket is connected.</haxe_doc>
			</timeout>
			<socketPath>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Unix Domain Socket (cannot be used if one of host or port is specified, those specify a TCP Socket).</haxe_doc>
			</socketPath>
			<setHost>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Specifies whether or not to automatically add the Host header.
		Defaults to `true`.</haxe_doc>
			</setHost>
			<protocol>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Protocol to use.

		Default: `'http:'`.</haxe_doc>
			</protocol>
			<port>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Port of remote server.

		Default: `defaultPort` if set, else `80`.</haxe_doc>
			</port>
			<path>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Request path. Should include query string if any. E.G. `'/index.html?page=12'`.
		An exception is thrown when the request path contains illegal characters.
		Currently, only spaces are rejected but that may change in the future.

		Default: `'/'`.</haxe_doc>
			</path>
			<method>
				<x path="Null"><x path="js.node.http.Method"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A string specifying the HTTP request method.

		Default: `'GET'`.</haxe_doc>
			</method>
			<localAddress>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Local interface to bind for network connections.</haxe_doc>
			</localAddress>
			<hostname>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Alias for `host`.
		To support `url.parse()`, hostname will be used if both `host` and `hostname` are specified.</haxe_doc>
			</hostname>
			<host>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A domain name or IP address of the server to issue the request to.

		Default: `'localhost'`.</haxe_doc>
			</host>
			<headers>
				<x path="Null"><x path="haxe.DynamicAccess"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An object containing request headers.</haxe_doc>
			</headers>
			<family>
				<x path="Null"><x path="js.node.DnsAddressFamily"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>IP address family to use when resolving `host` or `hostname`.
		Valid values are `4` or `6`. When unspecified, both IP v4 and v6 will be used.</haxe_doc>
			</family>
			<defaultPort>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Default port for the protocol.

		Default: `agent.defaultPort` if an Agent is used, else `undefined`.</haxe_doc>
			</defaultPort>
			<createConnection>
				<x path="Null"><f a="options:?callabck">
	<t path="js.node.net.SocketConnectOptionsTcp"/>
	<f a="err:stream">
		<c path="js.lib.Error"/>
		<c path="js.node.stream.IDuplex"/>
		<x path="Void"/>
	</f>
	<c path="js.node.stream.IDuplex"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function that produces a socket/stream to use for the request when the `agent` option is not used.
		This can be used to avoid creating a custom `Agent` class just to override the default `createConnection` function.
		See [agent.createConnection()](https://nodejs.org/api/http.html#http_agent_createconnection_options_callback) for more details.
		Any `Duplex` stream is a valid return value.</haxe_doc>
			</createConnection>
			<auth>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Basic authentication i.e. `'user:password'` to compute an Authorization header.</haxe_doc>
			</auth>
			<agent>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.node.http.Agent"/>
	<x path="Bool"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Controls Agent behavior.

		Possible values:

		- `undefined` (default): use http.globalAgent for this host and port.
		- `Agent` object: explicitly use the passed in `Agent`.
		- `false` : causes a new `Agent` with default values to be used.</haxe_doc>
			</agent>
		</a>
		<haxe_doc>Type of the options object passed to `Http.request`.</haxe_doc>
	</typedef>
	<class path="js.node.Https" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Https.hx" extern="1">
		<createServer public="1" set="method" static="1">
			<f a="?requestListener">
				<f a="request:response">
					<c path="js.node.http.IncomingMessage"/>
					<c path="js.node.http.ServerResponse"/>
					<x path="Void"/>
				</f>
				<c path="js.node.https.Server"/>
			</f>
			<haxe_doc>Returns a new HTTPS web server object.</haxe_doc>
			<overloads><createServer public="1" set="method">
	<f a="options:?requestListener">
		<t path="js.node.HttpsCreateServerOptions"/>
		<f a="request:response">
			<c path="js.node.http.IncomingMessage"/>
			<c path="js.node.http.ServerResponse"/>
			<x path="Void"/>
		</f>
		<c path="js.node.https.Server"/>
	</f>
	<haxe_doc>Returns a new HTTPS web server object.</haxe_doc>
</createServer></overloads>
		</createServer>
		<get public="1" set="method" static="1">
			<f a="options:?callback">
				<t path="js.node.HttpsRequestOptions"/>
				<f a="">
					<c path="js.node.http.IncomingMessage"/>
					<x path="Void"/>
				</f>
				<c path="js.node.http.ClientRequest"/>
			</f>
			<haxe_doc>Like `Http.get` but for HTTPS.

		`options` can be an object, a string, or a `URL` object.
		If `options` is a string, it is automatically parsed with `new URL()`.
		If it is a `URL` object, it will be automatically converted to an ordinary `options` object.</haxe_doc>
			<overloads>
				<get public="1" set="method">
					<f a="url:?options:?callback">
						<c path="js.node.url.URL"/>
						<x path="Null"><t path="js.node.HttpsRequestOptions"/></x>
						<f a="">
							<c path="js.node.http.IncomingMessage"/>
							<x path="Void"/>
						</f>
						<c path="js.node.http.ClientRequest"/>
					</f>
					<haxe_doc>Like `Http.get` but for HTTPS.

		`options` can be an object, a string, or a `URL` object.
		If `options` is a string, it is automatically parsed with `new URL()`.
		If it is a `URL` object, it will be automatically converted to an ordinary `options` object.</haxe_doc>
				</get>
				<get public="1" set="method">
					<f a="url:?options:?callback">
						<c path="String"/>
						<x path="Null"><t path="js.node.HttpsRequestOptions"/></x>
						<f a="">
							<c path="js.node.http.IncomingMessage"/>
							<x path="Void"/>
						</f>
						<c path="js.node.http.ClientRequest"/>
					</f>
					<haxe_doc>Like `Http.get` but for HTTPS.

		`options` can be an object, a string, or a `URL` object.
		If `options` is a string, it is automatically parsed with `new URL()`.
		If it is a `URL` object, it will be automatically converted to an ordinary `options` object.</haxe_doc>
				</get>
			</overloads>
		</get>
		<globalAgent public="1" static="1">
			<c path="js.node.https.Agent"/>
			<haxe_doc>Global instance of `https.Agent` for all HTTPS client requests.</haxe_doc>
		</globalAgent>
		<request public="1" set="method" static="1">
			<f a="options:?callback">
				<t path="js.node.HttpsRequestOptions"/>
				<f a="">
					<c path="js.node.http.IncomingMessage"/>
					<x path="Void"/>
				</f>
				<c path="js.node.http.ClientRequest"/>
			</f>
			<haxe_doc>Makes a request to a secure web server.

		The following additional `options` from `tls.connect()` are also accepted:
		`ca`, `cert`, `ciphers`, `clientCertEngine`, `crl`, `dhparam`, `ecdhCurve`, `honorCipherOrder`, `key`, `passphrase`, `pfx`,
		`rejectUnauthorized`, `secureOptions`, `secureProtocol`, `servername`, `sessionIdContext`.

		`options` can be an object, a string, or a `URL` object.
		If `options` is a string, it is automatically parsed with `new URL()`.
		If it is a `URL` object, it will be automatically converted to an ordinary `options` object.</haxe_doc>
			<overloads>
				<request public="1" set="method">
					<f a="options:?options:?callback">
						<c path="js.node.url.URL"/>
						<x path="Null"><t path="js.node.HttpsRequestOptions"/></x>
						<f a="">
							<c path="js.node.http.IncomingMessage"/>
							<x path="Void"/>
						</f>
						<c path="js.node.http.ClientRequest"/>
					</f>
					<haxe_doc>Makes a request to a secure web server.

		The following additional `options` from `tls.connect()` are also accepted:
		`ca`, `cert`, `ciphers`, `clientCertEngine`, `crl`, `dhparam`, `ecdhCurve`, `honorCipherOrder`, `key`, `passphrase`, `pfx`,
		`rejectUnauthorized`, `secureOptions`, `secureProtocol`, `servername`, `sessionIdContext`.

		`options` can be an object, a string, or a `URL` object.
		If `options` is a string, it is automatically parsed with `new URL()`.
		If it is a `URL` object, it will be automatically converted to an ordinary `options` object.</haxe_doc>
				</request>
				<request public="1" set="method">
					<f a="options:?options:?callback">
						<c path="String"/>
						<x path="Null"><t path="js.node.HttpsRequestOptions"/></x>
						<f a="">
							<c path="js.node.http.IncomingMessage"/>
							<x path="Void"/>
						</f>
						<c path="js.node.http.ClientRequest"/>
					</f>
					<haxe_doc>Makes a request to a secure web server.

		The following additional `options` from `tls.connect()` are also accepted:
		`ca`, `cert`, `ciphers`, `clientCertEngine`, `crl`, `dhparam`, `ecdhCurve`, `honorCipherOrder`, `key`, `passphrase`, `pfx`,
		`rejectUnauthorized`, `secureOptions`, `secureProtocol`, `servername`, `sessionIdContext`.

		`options` can be an object, a string, or a `URL` object.
		If `options` is a string, it is automatically parsed with `new URL()`.
		If it is a `URL` object, it will be automatically converted to an ordinary `options` object.</haxe_doc>
				</request>
			</overloads>
		</request>
		<haxe_doc>HTTPS is the HTTP protocol over TLS/SSL.
	In Node.js this is implemented as a separate module.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":jsRequire"><e>"https"</e></m>
		</meta>
	</class>
	<typedef path="js.node.HttpsCreateServerOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Https.hx" module="js.node.Https"><a>
	<ticketKeys>
		<x path="Null"><t path="js.node.Buffer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A 48-byte `Buffer` instance consisting of 16-byte prefix, 16-byte hmac key, 16-byte AES key.
		You could use it to accept tls session tickets on multiple instances of tls server.

		NOTE: Automatically shared between cluster module workers.</haxe_doc>
	</ticketKeys>
	<sessionTimeout>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>An integer specifying the seconds after which TLS session identifiers
		and TLS session tickets created by the server are timed out.
		See SSL_CTX_set_timeout for more details.</haxe_doc>
	</sessionTimeout>
	<sessionIdContext>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>opaque identifier for session resumption.
		If `requestCert` is true, the default is MD5 hash value generated from command-line.
		Otherwise, the default is not provided.</haxe_doc>
	</sessionIdContext>
	<secureProtocol>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The SSL method to use, e.g. SSLv3_method to force SSL version 3.
		The possible values depend on your installation of OpenSSL and are defined in the constant SSL_METHODS.</haxe_doc>
	</secureProtocol>
	<requestCert>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true the server will request a certificate from clients that connect
		and attempt to verify that certificate.
		Default: false.</haxe_doc>
	</requestCert>
	<rejectUnauthorized>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true the server will reject any connection which is not authorized with the list of supplied CAs.
		This option only has an effect if `requestCert` is true.
		Default: false.</haxe_doc>
	</rejectUnauthorized>
	<pfx>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>private key, certificate and CA certs of the server in PFX or PKCS12 format.</haxe_doc>
	</pfx>
	<passphrase>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>passphrase for the private key or pfx.</haxe_doc>
	</passphrase>
	<key>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>private key of the server in PEM format.</haxe_doc>
	</key>
	<honorCipherOrder>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>When choosing a cipher, use the server's preferences instead of the client preferences.
		Default: true.</haxe_doc>
	</honorCipherOrder>
	<handshakeTimeout>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Abort the connection if the SSL/TLS handshake does not finish in this many milliseconds.
		The default is 120 seconds.
		A 'clientError' is emitted on the `tls.Server` object whenever a handshake times out.</haxe_doc>
	</handshakeTimeout>
	<ecdhCurve>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>named curve to use for ECDH key agreement or false to disable ECDH.

		Defaults to prime256v1 (NIST P-256). Use `Crypto.getCurves` to obtain a list of available curve names.
		On recent releases, openssl ecparam -list_curves will also display the name and description
		of each available elliptic curve.</haxe_doc>
	</ecdhCurve>
	<dhparam>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Diffie Hellman parameters, required for Perfect Forward Secrecy.

		Use openssl dhparam to create it. Its key length should be greater than or equal to 1024 bits,
		otherwise it throws an error. It is strongly recommended to use 2048 bits or more for stronger security.
		If omitted or invalid, it is silently discarded and DHE ciphers won't be available.</haxe_doc>
	</dhparam>
	<crl>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>PEM encoded CRLs (Certificate Revocation List)</haxe_doc>
	</crl>
	<ciphers>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>ciphers to use or exclude.

		To mitigate BEAST attacks it is recommended that you use this option in conjunction with the `honorCipherOrder`
		option described below to prioritize the non-CBC cipher.

		Defaults to AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH.

		Consult the OpenSSL cipher list format documentation for details on the format.
		ECDH (Elliptic Curve Diffie-Hellman) ciphers are not yet supported.</haxe_doc>
	</ciphers>
	<cert>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>certificate key of the server in PEM format.</haxe_doc>
	</cert>
	<ca>
		<x path="Null"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>trusted certificates in PEM format.
		If this is omitted several well known "root" CAs will be used, like VeriSign.
		These are used to authorize connections.</haxe_doc>
	</ca>
	<ServerResponse>
		<x path="Null"><x path="Class"><d/></x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Specifies the `ServerResponse` class to be used. Useful for extending the original `ServerResponse`.

		Default: `ServerResponse`.</haxe_doc>
	</ServerResponse>
	<SNICallback>
		<x path="Null"><f a="servername:cb">
	<c path="String"/>
	<f a="">
		<c path="js.lib.Error"/>
		<c path="js.node.tls.SecureContext"/>
	</f>
	<x path="Void"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A function that will be called if client supports SNI TLS extension.
		Two argument will be passed to it: `servername`, and `cb`.
		SNICallback should invoke `cb(null, ctx)`, where `ctx` is a SecureContext instance.
		(You can use tls.createSecureContext(...) to get proper `SecureContext`).
		If `SNICallback` wasn't provided - default callback with high-level API will be used.</haxe_doc>
	</SNICallback>
	<NPNProtocols>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="String"/></c>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>possible NPN protocols. (Protocols should be ordered by their priority).</haxe_doc>
	</NPNProtocols>
	<IncomingMessage>
		<x path="Null"><x path="Class"><d/></x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Specifies the `IncomingMessage` class to be used. Useful for extending the original `IncomingMessage`.

		Default: `js.node.http.IncomingMessage`.</haxe_doc>
	</IncomingMessage>
</a></typedef>
	<typedef path="js.node.HttpsRequestOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Https.hx" module="js.node.Https"><a>
	<timeout>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A number specifying the socket timeout in milliseconds.
		This will set the timeout before the socket is connected.</haxe_doc>
	</timeout>
	<socketPath>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Unix Domain Socket (cannot be used if one of host or port is specified, those specify a TCP Socket).</haxe_doc>
	</socketPath>
	<socket>
		<x path="Null"><c path="js.node.net.Socket"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Establish secure connection on a given socket rather than creating a new socket.
		If this option is specified, `host` and `port` are ignored.</haxe_doc>
	</socket>
	<setHost>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Specifies whether or not to automatically add the Host header.
		Defaults to `true`.</haxe_doc>
	</setHost>
	<sessionIdContext>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>opaque identifier for session resumption.
		If `requestCert` is true, the default is MD5 hash value generated from command-line.
		Otherwise, the default is not provided.</haxe_doc>
	</sessionIdContext>
	<session>
		<x path="Null"><t path="js.node.Buffer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A Buffer instance, containing TLS session.</haxe_doc>
	</session>
	<servername>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Servername for SNI (Server Name Indication) TLS extension.</haxe_doc>
	</servername>
	<secureProtocol>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The SSL method to use, e.g. SSLv3_method to force SSL version 3.
		The possible values depend on your installation of OpenSSL and are defined in the constant SSL_METHODS.</haxe_doc>
	</secureProtocol>
	<requestOCSP>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true - OCSP status request extension would be added to client hello,
		and OCSPResponse event will be emitted on socket before establishing secure communication</haxe_doc>
	</requestOCSP>
	<rejectUnauthorized>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true the server will reject any connection which is not authorized with the list of supplied CAs.
		This option only has an effect if `requestCert` is true.
		Default: false.</haxe_doc>
	</rejectUnauthorized>
	<protocol>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Protocol to use.

		Default: `'http:'`.</haxe_doc>
	</protocol>
	<port>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Port of remote server.

		Default: `defaultPort` if set, else `80`.</haxe_doc>
	</port>
	<pfx>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>private key, certificate and CA certs of the server in PFX or PKCS12 format.</haxe_doc>
	</pfx>
	<path>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Request path. Should include query string if any. E.G. `'/index.html?page=12'`.
		An exception is thrown when the request path contains illegal characters.
		Currently, only spaces are rejected but that may change in the future.

		Default: `'/'`.</haxe_doc>
	</path>
	<passphrase>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>passphrase for the private key or pfx.</haxe_doc>
	</passphrase>
	<method>
		<x path="Null"><x path="js.node.http.Method"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A string specifying the HTTP request method.

		Default: `'GET'`.</haxe_doc>
	</method>
	<localAddress>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Local interface to bind for network connections.</haxe_doc>
	</localAddress>
	<key>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>private key of the server in PEM format.</haxe_doc>
	</key>
	<hostname>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Alias for `host`.
		To support `url.parse()`, hostname will be used if both `host` and `hostname` are specified.</haxe_doc>
	</hostname>
	<host>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A domain name or IP address of the server to issue the request to.

		Default: `'localhost'`.</haxe_doc>
	</host>
	<honorCipherOrder>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>When choosing a cipher, use the server's preferences instead of the client preferences.
		Default: true.</haxe_doc>
	</honorCipherOrder>
	<headers>
		<x path="Null"><x path="haxe.DynamicAccess"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>An object containing request headers.</haxe_doc>
	</headers>
	<family>
		<x path="Null"><x path="js.node.DnsAddressFamily"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>IP address family to use when resolving `host` or `hostname`.
		Valid values are `4` or `6`. When unspecified, both IP v4 and v6 will be used.</haxe_doc>
	</family>
	<ecdhCurve>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>named curve to use for ECDH key agreement or false to disable ECDH.

		Defaults to prime256v1 (NIST P-256). Use `Crypto.getCurves` to obtain a list of available curve names.
		On recent releases, openssl ecparam -list_curves will also display the name and description
		of each available elliptic curve.</haxe_doc>
	</ecdhCurve>
	<dhparam>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Diffie Hellman parameters, required for Perfect Forward Secrecy.

		Use openssl dhparam to create it. Its key length should be greater than or equal to 1024 bits,
		otherwise it throws an error. It is strongly recommended to use 2048 bits or more for stronger security.
		If omitted or invalid, it is silently discarded and DHE ciphers won't be available.</haxe_doc>
	</dhparam>
	<defaultPort>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Default port for the protocol.

		Default: `agent.defaultPort` if an Agent is used, else `undefined`.</haxe_doc>
	</defaultPort>
	<crl>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>PEM encoded CRLs (Certificate Revocation List)</haxe_doc>
	</crl>
	<createConnection>
		<x path="Null"><f a="options:?callabck">
	<t path="js.node.net.SocketConnectOptionsTcp"/>
	<f a="err:stream">
		<c path="js.lib.Error"/>
		<c path="js.node.stream.IDuplex"/>
		<x path="Void"/>
	</f>
	<c path="js.node.stream.IDuplex"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A function that produces a socket/stream to use for the request when the `agent` option is not used.
		This can be used to avoid creating a custom `Agent` class just to override the default `createConnection` function.
		See [agent.createConnection()](https://nodejs.org/api/http.html#http_agent_createconnection_options_callback) for more details.
		Any `Duplex` stream is a valid return value.</haxe_doc>
	</createConnection>
	<ciphers>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>ciphers to use or exclude.

		To mitigate BEAST attacks it is recommended that you use this option in conjunction with the `honorCipherOrder`
		option described below to prioritize the non-CBC cipher.

		Defaults to AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH.

		Consult the OpenSSL cipher list format documentation for details on the format.
		ECDH (Elliptic Curve Diffie-Hellman) ciphers are not yet supported.</haxe_doc>
	</ciphers>
	<checkServerIdentity>
		<x path="Null"><f a=":">
	<c path="String"/>
	<a/>
	<d/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>An override for checking server's hostname against the certificate.
		Should return an error if verification fails. Return `js.Lib.undefined` if passing.</haxe_doc>
	</checkServerIdentity>
	<cert>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>certificate key of the server in PEM format.</haxe_doc>
	</cert>
	<ca>
		<x path="Null"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>trusted certificates in PEM format.
		If this is omitted several well known "root" CAs will be used, like VeriSign.
		These are used to authorize connections.</haxe_doc>
	</ca>
	<auth>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Basic authentication i.e. `'user:password'` to compute an Authorization header.</haxe_doc>
	</auth>
	<agent>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.node.http.Agent"/>
	<x path="Bool"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Controls Agent behavior.

		Possible values:

		- `undefined` (default): use http.globalAgent for this host and port.
		- `Agent` object: explicitly use the passed in `Agent`.
		- `false` : causes a new `Agent` with default values to be used.</haxe_doc>
	</agent>
	<NPNProtocols>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="String"/></c>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>possible NPN protocols. (Protocols should be ordered by their priority).</haxe_doc>
	</NPNProtocols>
</a></typedef>
	<typedef path="js.node.Iterator" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Iterator.hx"><t path="js.lib.Iterator"><c path="js.node.Iterator.T"/></t></typedef>
	<typedef path="js.node.IteratorStep" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Iterator.hx" module="js.node.Iterator"><t path="js.lib.IteratorStep"><c path="js.node.IteratorStep.T"/></t></typedef>
	<abstract path="js.node.KeyValue" params="K:V" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/KeyValue.hx">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper.</haxe_doc>
		<impl><class path="js.node._KeyValue.KeyValue_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/KeyValue.hx" private="1" module="js.node.KeyValue" final="1">
	<key public="1" get="accessor" set="null" static="1">
		<c path="js.node.KeyValue.K"/>
		<meta><m n=":impl"/></meta>
	</key>
	<value public="1" get="accessor" set="null" static="1">
		<c path="js.node.KeyValue.V"/>
		<meta><m n=":impl"/></meta>
	</value>
	<get_key get="inline" set="null" line="32" static="1">
		<f a="this">
			<c path="Array"><x path="Any"/></c>
			<c path="js.node.KeyValue.K"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_key>
	<get_value get="inline" set="null" line="36" static="1">
		<f a="this">
			<c path="Array"><x path="Any"/></c>
			<c path="js.node.KeyValue.V"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_value>
</class></impl>
	</abstract>
	<class path="js.node._KeyValue.KeyValue_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/KeyValue.hx" private="1" module="js.node.KeyValue" final="1">
		<key public="1" get="accessor" set="null" static="1">
			<c path="js.node.KeyValue.K"/>
			<meta><m n=":impl"/></meta>
		</key>
		<value public="1" get="accessor" set="null" static="1">
			<c path="js.node.KeyValue.V"/>
			<meta><m n=":impl"/></meta>
		</value>
		<get_key get="inline" set="null" line="32" static="1">
			<f a="this">
				<c path="Array"><x path="Any"/></c>
				<c path="js.node.KeyValue.K"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_key>
		<get_value get="inline" set="null" line="36" static="1">
			<f a="this">
				<c path="Array"><x path="Any"/></c>
				<c path="js.node.KeyValue.V"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_value>
	</class>
	<class path="js.node.Module" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Module.hx" extern="1">
		<builtinModules public="1" set="null" static="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>A list of the names of all modules provided by Node.js.
		Can be used to verify if a module is maintained by a third party or not.

		@see https://nodejs.org/api/modules.html#modules_module_builtinmodules</haxe_doc>
		</builtinModules>
		<createRequire public="1" set="method" static="1">
			<f a="filename">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<d/>
				</f>
			</f>
			<haxe_doc>@see https://nodejs.org/api/modules.html#modules_module_createrequire_filename</haxe_doc>
			<overloads><createRequire public="1" set="method">
	<f a="filename">
		<c path="js.node.url.URL"/>
		<f a="">
			<c path="String"/>
			<d/>
		</f>
	</f>
	<haxe_doc>@see https://nodejs.org/api/modules.html#modules_module_createrequire_filename</haxe_doc>
</createRequire></overloads>
		</createRequire>
		<syncBuiltinESMExports public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The `module.syncBuiltinESMExports()` method updates all the live bindings for builtin ES Modules to match the
		properties of the CommonJS exports.
		It does not add or remove exported names from the ES Modules.

		@see https://nodejs.org/api/modules.html#modules_module_syncbuiltinesmexports</haxe_doc>
		</syncBuiltinESMExports>
		<children public="1" set="null">
			<c path="Array"><c path="js.node.Module"/></c>
			<haxe_doc>The module objects required for the first time by this one.

		@see https://nodejs.org/api/modules.html#modules_module_children</haxe_doc>
		</children>
		<exports public="1">
			<d/>
			<haxe_doc>The `module.exports` object is created by the Module system.
		Sometimes this is not acceptable; many want their module to be an instance of some class.
		To do this, assign the desired export object to `module.exports`.
		Assigning the desired object to `exports` will simply rebind the local `exports` variable, which is probably not
		what is desired.

		@see https://nodejs.org/api/modules.html#modules_module_exports</haxe_doc>
		</exports>
		<filename public="1" set="null">
			<c path="String"/>
			<haxe_doc>The fully resolved filename of the module.

		@see https://nodejs.org/api/modules.html#modules_module_filename</haxe_doc>
		</filename>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>The identifier for the module.
		Typically this is the fully resolved filename.

		@see https://nodejs.org/api/modules.html#modules_module_id</haxe_doc>
		</id>
		<loaded public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether or not the module is done loading, or is in the process of loading.

		@see https://nodejs.org/api/modules.html#modules_module_loaded</haxe_doc>
		</loaded>
		<parent public="1" set="null">
			<c path="js.node.Module"/>
			<haxe_doc>The module that first required this one.

		@see https://nodejs.org/api/modules.html#modules_module_parent</haxe_doc>
		</parent>
		<paths public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>The search paths for the module.

		@see https://nodejs.org/api/modules.html#modules_module_paths</haxe_doc>
		</paths>
		<require public="1" set="method">
			<f a="id">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>The `module.require()` method provides a way to load a module as if `require()` was called from the original
		module.

		@see https://nodejs.org/api/modules.html#modules_module_require_id</haxe_doc>
		</require>
		<haxe_doc>In each module, the `module` free variable is a reference to the object representing the current module.
	For convenience, `module.exports` is also accessible via the `exports` module-global.
	`module` is not actually a global but rather local to each module.

	@see https://nodejs.org/api/modules.html#modules_the_module_object</haxe_doc>
		<meta><m n=":jsRequire"><e>"module"</e></m></meta>
	</class>
	<class path="js.node.Os" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Os.hx" extern="1">
		<EOL public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc>A string constant defining the operating system-specific end-of-line marker:

		@see https://nodejs.org/api/os.html#os_os_eol</haxe_doc>
		</EOL>
		<arch public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>The `os.arch()` method returns a string identifying the operating system CPU architecture for which the Node.js binary was compiled.

		@see https://nodejs.org/api/os.html#os_os_arch</haxe_doc>
		</arch>
		<constants public="1" set="null" static="1">
			<t path="js.node.OsConstants"/>
			<haxe_doc>Returns an object containing commonly used operating system specific constants for error codes, process signals, and so on. The specific constants currently defined are described in OS Constants.

		@see https://nodejs.org/api/os.html#os_os_constants</haxe_doc>
		</constants>
		<cpus public="1" set="method" static="1">
			<f a=""><c path="Array"><t path="js.node.CPU"/></c></f>
			<haxe_doc>The `os.cpus()` method returns an array of objects containing information about each logical CPU core.

		@see https://nodejs.org/api/os.html#os_os_cpus</haxe_doc>
		</cpus>
		<endianness public="1" set="method" static="1">
			<f a=""><x path="js.node.Endianness"/></f>
			<haxe_doc>The `os.endianness()` method returns a string identifying the endianness of the CPU for which the Node.js binary was compiled.

		@see https://nodejs.org/api/os.html#os_os_endianness</haxe_doc>
		</endianness>
		<freemem public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>The `os.freemem()` method returns the amount of free system memory in bytes as an integer.

		@see https://nodejs.org/api/os.html#os_os_freemem</haxe_doc>
		</freemem>
		<getPriority public="1" set="method" static="1">
			<f a="?pid">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>The `os.getPriority()` method returns the scheduling priority for the process specified by `pid`. If `pid` is not provided, or is `0`, the priority of the current process is returned.

		@see https://nodejs.org/api/os.html#os_os_getpriority_pid</haxe_doc>
		</getPriority>
		<homedir public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>The `os.homedir()` method returns the home directory of the current user as a string.

		@see https://nodejs.org/api/os.html#os_os_homedir</haxe_doc>
		</homedir>
		<hostname public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>The `os.hostname()` method returns the hostname of the operating system as a string.

		@see https://nodejs.org/api/os.html#os_os_hostname</haxe_doc>
		</hostname>
		<loadavg public="1" set="method" static="1">
			<f a=""><c path="Array"><x path="Float"/></c></f>
			<haxe_doc>The `os.loadavg()` method returns an array containing the 1, 5, and 15 minute load averages.

		@see https://nodejs.org/api/os.html#os_os_loadavg</haxe_doc>
		</loadavg>
		<networkInterfaces public="1" set="method" static="1">
			<f a=""><x path="haxe.DynamicAccess"><t path="js.node.NetworkInterface"/></x></f>
			<haxe_doc>The `os.networkInterfaces()` method returns an object containing only network interfaces that have been assigned a network address.

		@see https://nodejs.org/api/os.html#os_os_networkinterfaces</haxe_doc>
		</networkInterfaces>
		<platform public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>The `os.platform()` method returns a string identifying the operating system platform as set during compile time of Node.js.

		@see https://nodejs.org/api/os.html#os_os_platform</haxe_doc>
		</platform>
		<release public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>The `os.release()` method returns a string identifying the operating system release.

		@see https://nodejs.org/api/os.html#os_os_release</haxe_doc>
		</release>
		<setPriority public="1" set="method" static="1">
			<f a="?pid:priority">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The `os.setPriority()` method attempts to set the scheduling priority for the process specified by `pid`. If `pid` is not provided, or is `0`, the priority of the current process is used.

		@see https://nodejs.org/api/os.html#os_os_setpriority_pid_priority</haxe_doc>
		</setPriority>
		<uptime public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>The `os.uptime()` method returns the system uptime in number of seconds.

		@see https://nodejs.org/api/os.html#os_os_uptime</haxe_doc>
		</uptime>
		<userInfo public="1" set="method" static="1">
			<f a="?options">
				<a><encoding><c path="String"/></encoding></a>
				<t path="js.node.OsUserInfo"/>
			</f>
			<haxe_doc>The `os.userInfo()` method returns information about the currently effective user — on POSIX platforms, this is typically a subset of the password file. The returned object includes the `username`, `uid`, `gid`, `shell`, and `homedir`. On Windows, the `uid` and `gid` fields are `-1`, and `shell` is `null`.

		@see https://nodejs.org/api/os.html#os_os_userinfo_options</haxe_doc>
		</userInfo>
		<tmpdir public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>The `os.tmpdir()` method returns a string specifying the operating system's default directory for temporary files.

		@see https://nodejs.org/api/os.html#os_os_tmpdir</haxe_doc>
		</tmpdir>
		<totalmem public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>The `os.totalmem()` method returns the total amount of system memory in bytes as an integer.

		@see https://nodejs.org/api/os.html#os_os_totalmem</haxe_doc>
		</totalmem>
		<type public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>The `os.type()` method returns a string identifying the operating system name as returned by uname(3). For example, `'Linux'` on Linux, `'Darwin'` on macOS, and `'Windows_NT'` on Windows.

		@see https://nodejs.org/api/os.html#os_os_type</haxe_doc>
		</type>
		<haxe_doc>The `os` module provides a number of operating system-related utility methods.

	@see https://nodejs.org/api/os.html#os_os</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":jsRequire"><e>"os"</e></m>
		</meta>
	</class>
	<typedef path="js.node.OsUserInfo" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Os.hx" module="js.node.Os">
		<a>
			<username><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></username>
			<uid>
				<x path="Int"/>
				<haxe_doc>-1 on Windows</haxe_doc>
			</uid>
			<shell>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
				<haxe_doc>null on Windows</haxe_doc>
			</shell>
			<homedir>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="js.node.Buffer"/>
				</x>
				<haxe_doc>Provided by the operating system. This differs from the result of `Os.homedir`,
		which queries several environment variables for the home directory
		before falling back to the operating system response.</haxe_doc>
			</homedir>
			<gid>
				<x path="Int"/>
				<haxe_doc>-1 on Windows</haxe_doc>
			</gid>
		</a>
		<haxe_doc>Information about the currently effective user (returned by `Os.userInfo` method).

	On POSIX platforms, this is typically a subset of the password file.

	@see https://nodejs.org/api/os.html#os_os_userinfo_options</haxe_doc>
	</typedef>
	<typedef path="js.node.CPUTime" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Os.hx" module="js.node.Os">
		<a>
			<user>
				<x path="Int"/>
				<haxe_doc>The number of milliseconds the CPU has spent in user mode.</haxe_doc>
			</user>
			<sys>
				<x path="Int"/>
				<haxe_doc>The number of milliseconds the CPU has spent in sys mode.</haxe_doc>
			</sys>
			<nice>
				<x path="Int"/>
				<haxe_doc>The number of milliseconds the CPU has spent in nice mode.</haxe_doc>
			</nice>
			<irq>
				<x path="Int"/>
				<haxe_doc>The number of milliseconds the CPU has spent in irq mode.</haxe_doc>
			</irq>
			<idle>
				<x path="Int"/>
				<haxe_doc>The number of milliseconds the CPU has spent in idle mode.</haxe_doc>
			</idle>
		</a>
		<haxe_doc>Object containing the number of milliseconds the CPU/core spent in: `user`, `nice`, `sys`, `idle`, and `irq`

	@see https://nodejs.org/api/os.html#os_os_cpus</haxe_doc>
	</typedef>
	<typedef path="js.node.CPU" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Os.hx" module="js.node.Os">
		<a>
			<times>
				<t path="js.node.CPUTime"/>
				<haxe_doc>CPUTime data.</haxe_doc>
			</times>
			<speed>
				<x path="Int"/>
				<haxe_doc>MHz Speed.
		E.g. 2926</haxe_doc>
			</speed>
			<model>
				<c path="String"/>
				<haxe_doc>CPU Model.
		E.g. 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz'</haxe_doc>
			</model>
		</a>
		<haxe_doc>Object containing information about each CPU/core installed. Returned by `Os.cpus` method.

	@see https://nodejs.org/api/os.html#os_os_cpus</haxe_doc>
	</typedef>
	<typedef path="js.node.NetworkInterface" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Os.hx" module="js.node.Os">
		<c path="Array"><t path="js.node.NetworkInterfaceAddressInfo"/></c>
		<haxe_doc>Objects containing information about network interface addresses.

	@see https://nodejs.org/api/os.html#os_os_networkinterfaces</haxe_doc>
	</typedef>
	<typedef path="js.node.NetworkInterfaceAddressInfo" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Os.hx" module="js.node.Os"><a>
	<scopeid>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The numeric IPv6 scope ID (only specified when `family` is `IPv6`)</haxe_doc>
	</scopeid>
	<netmask>
		<c path="String"/>
		<haxe_doc>The IPv4 or IPv6 network mask.</haxe_doc>
	</netmask>
	<mac>
		<c path="String"/>
		<haxe_doc>The MAC address of the network interface.</haxe_doc>
	</mac>
	<internal>
		<x path="Bool"/>
		<haxe_doc>`True` if the network interface is a loopback or similar interface that is not remotely accessible; otherwise `false`</haxe_doc>
	</internal>
	<family>
		<x path="js.node.net.SocketAdressFamily"/>
		<haxe_doc>IP address family (either `IPv4` or `IPv6`).</haxe_doc>
	</family>
	<cidr>
		<x path="Null"><c path="String"/></x>
		<haxe_doc>The assigned IPv4 or IPv6 address with the routing prefix in CIDR notation. If the `netmask` is invalid, this property is set to `null`.</haxe_doc>
	</cidr>
	<address>
		<c path="String"/>
		<haxe_doc>The assigned IPv4 or IPv6 address.</haxe_doc>
	</address>
</a></typedef>
	<abstract path="js.node.Endianness" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Os.hx" module="js.node.Os">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Os.Endianness_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Os.hx" private="1" module="js.node.Os" extern="1" final="1">
	<BigEndian public="1" get="inline" set="null" expr="cast &quot;BE&quot;" line="302" static="1">
		<x path="js.node.Endianness"/>
		<meta>
			<m n=":value"><e>cast "BE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BigEndian>
	<LittleEndian public="1" get="inline" set="null" expr="cast &quot;LE&quot;" line="303" static="1">
		<x path="js.node.Endianness"/>
		<meta>
			<m n=":value"><e>cast "LE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LittleEndian>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Os.Endianness_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Os.hx" private="1" module="js.node.Os" extern="1" final="1">
		<BigEndian public="1" get="inline" set="null" expr="cast &quot;BE&quot;" line="302" static="1">
			<x path="js.node.Endianness"/>
			<meta>
				<m n=":value"><e>cast "BE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BigEndian>
		<LittleEndian public="1" get="inline" set="null" expr="cast &quot;LE&quot;" line="303" static="1">
			<x path="js.node.Endianness"/>
			<meta>
				<m n=":value"><e>cast "LE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LittleEndian>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.OsConstants" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Os.hx" module="js.node.Os">
		<a>
			<signals>
				<a>
					<SIGXFSZ>
						<x path="Int"/>
						<haxe_doc>Sent to a process when it grows a file larger than the maximum allowed.</haxe_doc>
					</SIGXFSZ>
					<SIGXCPU>
						<x path="Int"/>
						<haxe_doc>Sent to a process when it has exceeded its limit on CPU usage.</haxe_doc>
					</SIGXCPU>
					<SIGWINCH>
						<x path="Int"/>
						<haxe_doc>Sent to a process when the controlling terminal has changed its size.</haxe_doc>
					</SIGWINCH>
					<SIGVTALRM>
						<x path="Int"/>
						<haxe_doc>Sent to a process when a virtual timer has elapsed.</haxe_doc>
					</SIGVTALRM>
					<SIGUSR1>
						<x path="Int"/>
						<haxe_doc>SIGUSR2	Sent to a process to identify user-defined conditions.</haxe_doc>
					</SIGUSR1>
					<SIGURG>
						<x path="Int"/>
						<haxe_doc>Sent to a process when a socket has urgent data to read.</haxe_doc>
					</SIGURG>
					<SIGUNUSED>
						<x path="Int"/>
						<haxe_doc>Synonym for SIGSYS</haxe_doc>
					</SIGUNUSED>
					<SIGTTOU>
						<x path="Int"/>
						<haxe_doc>Sent to a process when it writes to the TTY while in the background.</haxe_doc>
					</SIGTTOU>
					<SIGTTIN>
						<x path="Int"/>
						<haxe_doc>Sent to a process when it reads from the TTY while in the background.</haxe_doc>
					</SIGTTIN>
					<SIGTSTP>
						<x path="Int"/>
						<haxe_doc>Sent to a process to request it to stop.</haxe_doc>
					</SIGTSTP>
					<SIGTRAP>
						<x path="Int"/>
						<haxe_doc>Sent to a process when an exception has occurred.</haxe_doc>
					</SIGTRAP>
					<SIGTERM>
						<x path="Int"/>
						<haxe_doc>Sent to a process to request termination.</haxe_doc>
					</SIGTERM>
					<SIGSYS>
						<x path="Int"/>
						<haxe_doc>Sent to a process to notify of a bad argument.</haxe_doc>
					</SIGSYS>
					<SIGSTOP>
						<x path="Int"/>
						<haxe_doc>Sent to instruct the operating system to halt a process.</haxe_doc>
					</SIGSTOP>
					<SIGSTKFLT>
						<x path="Int"/>
						<haxe_doc>Sent to a process to indicate a stack fault on a coprocessor.</haxe_doc>
					</SIGSTKFLT>
					<SIGSEGV>
						<x path="Int"/>
						<haxe_doc>Sent to a process to notify of a segmentation fault.</haxe_doc>
					</SIGSEGV>
					<SIGQUIT>
						<x path="Int"/>
						<haxe_doc>Sent to indicate when a user wishes to terminate a process and perform a core dump.</haxe_doc>
					</SIGQUIT>
					<SIGPWR>
						<x path="Int"/>
						<haxe_doc>Sent to a process to notify of a power failure.</haxe_doc>
					</SIGPWR>
					<SIGPROF>
						<x path="Int"/>
						<haxe_doc>Sent to a process when a system timer has elapsed.</haxe_doc>
					</SIGPROF>
					<SIGPOLL>
						<x path="Int"/>
						<haxe_doc>Synonym for SIGIO</haxe_doc>
					</SIGPOLL>
					<SIGPIPE>
						<x path="Int"/>
						<haxe_doc>Sent to a process when it has attempted to write to a disconnected pipe.</haxe_doc>
					</SIGPIPE>
					<SIGLOST>
						<x path="Int"/>
						<haxe_doc>Sent to a process when a file lock has been lost.</haxe_doc>
					</SIGLOST>
					<SIGKILL>
						<x path="Int"/>
						<haxe_doc>Sent to a process to terminate it immediately.</haxe_doc>
					</SIGKILL>
					<SIGIOT>
						<x path="Int"/>
						<haxe_doc>Synonym for `SIGABRT`</haxe_doc>
					</SIGIOT>
					<SIGIO>
						<x path="Int"/>
						<haxe_doc>Sent to a process when I/O is available.</haxe_doc>
					</SIGIO>
					<SIGINT>
						<x path="Int"/>
						<haxe_doc>Sent to indicate when a user wishes to interrupt a process (`(Ctrl+C)`).</haxe_doc>
					</SIGINT>
					<SIGINFO>
						<x path="Int"/>
						<haxe_doc>Synonym for SIGPWR</haxe_doc>
					</SIGINFO>
					<SIGILL>
						<x path="Int"/>
						<haxe_doc>Sent to a process to notify that it has attempted to perform an illegal, malformed, unknown or privileged instruction.</haxe_doc>
					</SIGILL>
					<SIGHUP>
						<x path="Int"/>
						<haxe_doc>Sent to indicate when a controlling terminal is closed or a parent process exits.</haxe_doc>
					</SIGHUP>
					<SIGFPE>
						<x path="Int"/>
						<haxe_doc>Sent to a process to notify that it has performed an illegal arithmetic operation.</haxe_doc>
					</SIGFPE>
					<SIGCONT>
						<x path="Int"/>
						<haxe_doc>Sent to instruct the operating system to continue a paused process.</haxe_doc>
					</SIGCONT>
					<SIGCHLD>
						<x path="Int"/>
						<haxe_doc>Sent to a process when a child process terminates.</haxe_doc>
					</SIGCHLD>
					<SIGBUS>
						<x path="Int"/>
						<haxe_doc>Sent to a process to notify that it has caused a bus error.</haxe_doc>
					</SIGBUS>
					<SIGBREAK>
						<x path="Int"/>
						<haxe_doc>Sent to indicate when a user wishes to interrupt a process.</haxe_doc>
					</SIGBREAK>
					<SIGALRM>
						<x path="Int"/>
						<haxe_doc>Sent to a process when a system timer elapses.</haxe_doc>
					</SIGALRM>
					<SIGABRT>
						<x path="Int"/>
						<haxe_doc>Sent to a process to request that it abort.</haxe_doc>
					</SIGABRT>
				</a>
				<haxe_doc>The following signal constants are exported by os.constants.signals:

		@see https://nodejs.org/api/os.html#os_signal_constants</haxe_doc>
			</signals>
			<priority>
				<a>
					<PRIORITY_NORMAL>
						<x path="Int"/>
						<haxe_doc>The default process scheduling priority. This corresponds to `NORMAL_PRIORITY_CLASS` on Windows, and a nice value of `0` on all other platforms.</haxe_doc>
					</PRIORITY_NORMAL>
					<PRIORITY_LOW>
						<x path="Int"/>
						<haxe_doc>The lowest process scheduling priority. This corresponds to `IDLE_PRIORITY_CLASS` on Windows, and a nice value of `19` on all other platforms.</haxe_doc>
					</PRIORITY_LOW>
					<PRIORITY_HIGHEST>
						<x path="Int"/>
						<haxe_doc>The highest process scheduling priority. This corresponds to `REALTIME_PRIORITY_CLASS` on Windows, and a nice value of `-20` on all other platforms.</haxe_doc>
					</PRIORITY_HIGHEST>
					<PRIORITY_HIGH>
						<x path="Int"/>
						<haxe_doc>The process scheduling priority above `PRIORITY_ABOVE_NORMAL` and below `PRIORITY_HIGHEST`. This corresponds to `HIGH_PRIORITY_CLASS` on Windows, and a nice value of `-14` on all other platforms.</haxe_doc>
					</PRIORITY_HIGH>
					<PRIORITY_BELOW_NORMAL>
						<x path="Int"/>
						<haxe_doc>The process scheduling priority above `PRIORITY_LOW` and below `PRIORITY_NORMAL`. This corresponds to `BELOW_NORMAL_PRIORITY_CLASS` on Windows, and a nice value of `10` on all other platforms.</haxe_doc>
					</PRIORITY_BELOW_NORMAL>
					<PRIORITY_ABOVE_NORMAL>
						<x path="Int"/>
						<haxe_doc>The process scheduling priority above `PRIORITY_NORMAL` and below `PRIORITY_HIGH`. This corresponds to `ABOVE_NORMAL_PRIORITY_CLASS` on Windows, and a nice value of `-7` on all other platforms.</haxe_doc>
					</PRIORITY_ABOVE_NORMAL>
				</a>
				<haxe_doc>The following process scheduling constants are exported by os.constants.priority:

		@see https://nodejs.org/api/os.html#os_priority_constants</haxe_doc>
			</priority>
			<errno>
				<a>
					<WSA_E_NO_MORE>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that there are no more results.</haxe_doc>
					</WSA_E_NO_MORE>
					<WSA_E_CANCELLED>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the call was canceled.</haxe_doc>
					</WSA_E_CANCELLED>
					<WSAVERNOTSUPPORTED>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the winsock.dll version is out of range.</haxe_doc>
					</WSAVERNOTSUPPORTED>
					<WSATYPE_NOT_FOUND>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that a class type was not found.</haxe_doc>
					</WSATYPE_NOT_FOUND>
					<WSASYSNOTREADY>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the network subsystem is not ready.</haxe_doc>
					</WSASYSNOTREADY>
					<WSASYSCALLFAILURE>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates a system call failure.</haxe_doc>
					</WSASYSCALLFAILURE>
					<WSASERVICE_NOT_FOUND>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that a service was not found.</haxe_doc>
					</WSASERVICE_NOT_FOUND>
					<WSANOTINITIALISED>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that successful WSAStartup has not yet been performed.</haxe_doc>
					</WSANOTINITIALISED>
					<WSAEWOULDBLOCK>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that a resource is temporarily unavailable.</haxe_doc>
					</WSAEWOULDBLOCK>
					<WSAEUSERS>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the user quota has been exceeded.</haxe_doc>
					</WSAEUSERS>
					<WSAETOOMANYREFS>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that there are too many references.</haxe_doc>
					</WSAETOOMANYREFS>
					<WSAETIMEDOUT>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the connection has timed out.</haxe_doc>
					</WSAETIMEDOUT>
					<WSAESTALE>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates a stale file handle reference.</haxe_doc>
					</WSAESTALE>
					<WSAESOCKTNOSUPPORT>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the socket type is not supported.</haxe_doc>
					</WSAESOCKTNOSUPPORT>
					<WSAESHUTDOWN>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that data cannot be sent after the socket has been shutdown.</haxe_doc>
					</WSAESHUTDOWN>
					<WSAEREMOTE>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the item is remote.</haxe_doc>
					</WSAEREMOTE>
					<WSAEREFUSED>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that a database query was refused.</haxe_doc>
					</WSAEREFUSED>
					<WSAEPROVIDERFAILEDINIT>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the service provider failed to initialized.</haxe_doc>
					</WSAEPROVIDERFAILEDINIT>
					<WSAEPROTOTYPE>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates the wrong protocol type for the socket.</haxe_doc>
					</WSAEPROTOTYPE>
					<WSAEPROTONOSUPPORT>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the protocol is not supported.</haxe_doc>
					</WSAEPROTONOSUPPORT>
					<WSAEPROCLIM>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that there are too many processes.</haxe_doc>
					</WSAEPROCLIM>
					<WSAEPFNOSUPPORT>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the protocol family is not supported.</haxe_doc>
					</WSAEPFNOSUPPORT>
					<WSAEOPNOTSUPP>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the operation is not supported.</haxe_doc>
					</WSAEOPNOTSUPP>
					<WSAENOTSOCK>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the resource is not a socket.</haxe_doc>
					</WSAENOTSOCK>
					<WSAENOTEMPTY>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the directory is not empty.</haxe_doc>
					</WSAENOTEMPTY>
					<WSAENOTCONN>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the socket is not connected.</haxe_doc>
					</WSAENOTCONN>
					<WSAENOPROTOOPT>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates a bad protocol option.</haxe_doc>
					</WSAENOPROTOOPT>
					<WSAENOMORE>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that there are no more results.</haxe_doc>
					</WSAENOMORE>
					<WSAENOBUFS>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that there is no buffer space available.</haxe_doc>
					</WSAENOBUFS>
					<WSAENETUNREACH>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the network is unreachable.</haxe_doc>
					</WSAENETUNREACH>
					<WSAENETRESET>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the network connection has been reset.</haxe_doc>
					</WSAENETRESET>
					<WSAENETDOWN>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the network is down.</haxe_doc>
					</WSAENETDOWN>
					<WSAENAMETOOLONG>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that a name was too long.</haxe_doc>
					</WSAENAMETOOLONG>
					<WSAEMSGSIZE>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the message size is too long.</haxe_doc>
					</WSAEMSGSIZE>
					<WSAEMFILE>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that there are too many open files.</haxe_doc>
					</WSAEMFILE>
					<WSAELOOP>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that a name cannot be translated.</haxe_doc>
					</WSAELOOP>
					<WSAEISCONN>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the socket is already connected.</haxe_doc>
					</WSAEISCONN>
					<WSAEINVALIDPROVIDER>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates an invalid service provider.</haxe_doc>
					</WSAEINVALIDPROVIDER>
					<WSAEINVALIDPROCTABLE>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the procedure call table is invalid.</haxe_doc>
					</WSAEINVALIDPROCTABLE>
					<WSAEINVAL>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that an invalid argument was passed.</haxe_doc>
					</WSAEINVAL>
					<WSAEINTR>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates an interrupted function call.</haxe_doc>
					</WSAEINTR>
					<WSAEINPROGRESS>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that an operation is currently in progress.</haxe_doc>
					</WSAEINPROGRESS>
					<WSAEHOSTUNREACH>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that there is no route to a network host.</haxe_doc>
					</WSAEHOSTUNREACH>
					<WSAEHOSTDOWN>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that a network host is down.</haxe_doc>
					</WSAEHOSTDOWN>
					<WSAEFAULT>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates an invalid pointer address.</haxe_doc>
					</WSAEFAULT>
					<WSAEDQUOT>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the disk quota has been exceeded.</haxe_doc>
					</WSAEDQUOT>
					<WSAEDISCON>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that a graceful shutdown is in progress.</haxe_doc>
					</WSAEDISCON>
					<WSAEDESTADDRREQ>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that a destination address is required.</haxe_doc>
					</WSAEDESTADDRREQ>
					<WSAECONNRESET>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the connection has been reset by the peer.</haxe_doc>
					</WSAECONNRESET>
					<WSAECONNREFUSED>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the connection has been refused.</haxe_doc>
					</WSAECONNREFUSED>
					<WSAECONNABORTED>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the connection has been aborted.</haxe_doc>
					</WSAECONNABORTED>
					<WSAECANCELLED>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that an operation has been canceled.</haxe_doc>
					</WSAECANCELLED>
					<WSAEBADF>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates an invalid file handle.</haxe_doc>
					</WSAEBADF>
					<WSAEALREADY>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that an operation is already in progress.</haxe_doc>
					</WSAEALREADY>
					<WSAEAFNOSUPPORT>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the address family is not supported.</haxe_doc>
					</WSAEAFNOSUPPORT>
					<WSAEADDRNOTAVAIL>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the network address is not available.</haxe_doc>
					</WSAEADDRNOTAVAIL>
					<WSAEADDRINUSE>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates that the network address is already in use.</haxe_doc>
					</WSAEADDRINUSE>
					<WSAEACCES>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Indicates insufficient permissions to complete the operation.</haxe_doc>
					</WSAEACCES>
					<EXDEV>
						<x path="Int"/>
						<haxe_doc>Indicates an improper link.</haxe_doc>
					</EXDEV>
					<EWOULDBLOCK>
						<x path="Int"/>
						<haxe_doc>Indicates that the operation would block.</haxe_doc>
					</EWOULDBLOCK>
					<ETXTBSY>
						<x path="Int"/>
						<haxe_doc>Indicates that a text file is busy.</haxe_doc>
					</ETXTBSY>
					<ETIMEDOUT>
						<x path="Int"/>
						<haxe_doc>Indicates that the connection timed out.</haxe_doc>
					</ETIMEDOUT>
					<ETIME>
						<x path="Int"/>
						<haxe_doc>Indicates an expired timer.</haxe_doc>
					</ETIME>
					<ESTALE>
						<x path="Int"/>
						<haxe_doc>Indicates that the file handle is stale.</haxe_doc>
					</ESTALE>
					<ESRCH>
						<x path="Int"/>
						<haxe_doc>Indicates that there is no such process.</haxe_doc>
					</ESRCH>
					<ESPIPE>
						<x path="Int"/>
						<haxe_doc>Indicates an invalid seek operation.</haxe_doc>
					</ESPIPE>
					<EROFS>
						<x path="Int"/>
						<haxe_doc>Indicates that the file system is read only.</haxe_doc>
					</EROFS>
					<ERANGE>
						<x path="Int"/>
						<haxe_doc>Indicates that the results are too large.</haxe_doc>
					</ERANGE>
					<EPROTOTYPE>
						<x path="Int"/>
						<haxe_doc>Indicates the wrong type of protocol for a socket.</haxe_doc>
					</EPROTOTYPE>
					<EPROTONOSUPPORT>
						<x path="Int"/>
						<haxe_doc>Indicates that a protocol is not supported.</haxe_doc>
					</EPROTONOSUPPORT>
					<EPROTO>
						<x path="Int"/>
						<haxe_doc>Indicates a protocol error.</haxe_doc>
					</EPROTO>
					<EPIPE>
						<x path="Int"/>
						<haxe_doc>Indicates a broken pipe.</haxe_doc>
					</EPIPE>
					<EPERM>
						<x path="Int"/>
						<haxe_doc>Indicates that the operation is not permitted.</haxe_doc>
					</EPERM>
					<EOVERFLOW>
						<x path="Int"/>
						<haxe_doc>Indicates that a value is too large to be stored in a given data type.</haxe_doc>
					</EOVERFLOW>
					<EOPNOTSUPP>
						<x path="Int"/>
						<haxe_doc>Indicates that an operation is not supported on the socket. Note that while ENOTSUP and EOPNOTSUPP have the same value on Linux, according to POSIX.1 these error values should be distinct.)</haxe_doc>
					</EOPNOTSUPP>
					<ENXIO>
						<x path="Int"/>
						<haxe_doc>Indicates no such device or address.</haxe_doc>
					</ENXIO>
					<ENOTTY>
						<x path="Int"/>
						<haxe_doc>Indicates an inappropriate I/O control operation.</haxe_doc>
					</ENOTTY>
					<ENOTSUP>
						<x path="Int"/>
						<haxe_doc>Indicates that a given operation is not supported.</haxe_doc>
					</ENOTSUP>
					<ENOTSOCK>
						<x path="Int"/>
						<haxe_doc>Indicates that the given item is not a socket.</haxe_doc>
					</ENOTSOCK>
					<ENOTEMPTY>
						<x path="Int"/>
						<haxe_doc>Indicates that the directory is not empty.</haxe_doc>
					</ENOTEMPTY>
					<ENOTDIR>
						<x path="Int"/>
						<haxe_doc>Indicates that the path is not a directory.</haxe_doc>
					</ENOTDIR>
					<ENOTCONN>
						<x path="Int"/>
						<haxe_doc>Indicates that the socket is not connected.</haxe_doc>
					</ENOTCONN>
					<ENOSYS>
						<x path="Int"/>
						<haxe_doc>Indicates that a function has not been implemented.</haxe_doc>
					</ENOSYS>
					<ENOSTR>
						<x path="Int"/>
						<haxe_doc>Indicates that a given resource is not a stream.</haxe_doc>
					</ENOSTR>
					<ENOSR>
						<x path="Int"/>
						<haxe_doc>Indicates that there are no stream resources available.</haxe_doc>
					</ENOSR>
					<ENOSPC>
						<x path="Int"/>
						<haxe_doc>Indicates that there is no space available on the device.</haxe_doc>
					</ENOSPC>
					<ENOPROTOOPT>
						<x path="Int"/>
						<haxe_doc>Indicates that a given protocol is not available.</haxe_doc>
					</ENOPROTOOPT>
					<ENOMSG>
						<x path="Int"/>
						<haxe_doc>Indicates that there is no message of the desired type.</haxe_doc>
					</ENOMSG>
					<ENOMEM>
						<x path="Int"/>
						<haxe_doc>Indicates that there is not enough space.</haxe_doc>
					</ENOMEM>
					<ENOLINK>
						<x path="Int"/>
						<haxe_doc>Indications that a link has been severed.</haxe_doc>
					</ENOLINK>
					<ENOLCK>
						<x path="Int"/>
						<haxe_doc>Indicates that there are no locks available.</haxe_doc>
					</ENOLCK>
					<ENOEXEC>
						<x path="Int"/>
						<haxe_doc>Indicates an exec format error.</haxe_doc>
					</ENOEXEC>
					<ENOENT>
						<x path="Int"/>
						<haxe_doc>Indicates that there is no such file or directory.</haxe_doc>
					</ENOENT>
					<ENODEV>
						<x path="Int"/>
						<haxe_doc>Indicates that there is no such device.</haxe_doc>
					</ENODEV>
					<ENODATA>
						<x path="Int"/>
						<haxe_doc>Indicates that no message is available on the stream head read queue.</haxe_doc>
					</ENODATA>
					<ENOBUFS>
						<x path="Int"/>
						<haxe_doc>Indicates that no buffer space is available.</haxe_doc>
					</ENOBUFS>
					<ENFILE>
						<x path="Int"/>
						<haxe_doc>Indicates too many open files in the system.</haxe_doc>
					</ENFILE>
					<ENETUNREACH>
						<x path="Int"/>
						<haxe_doc>Indicates that the network is unreachable.</haxe_doc>
					</ENETUNREACH>
					<ENETRESET>
						<x path="Int"/>
						<haxe_doc>Indicates that the connection has been aborted by the network.</haxe_doc>
					</ENETRESET>
					<ENETDOWN>
						<x path="Int"/>
						<haxe_doc>Indicates that the network is down.</haxe_doc>
					</ENETDOWN>
					<ENAMETOOLONG>
						<x path="Int"/>
						<haxe_doc>Indicates that the filename is too long.</haxe_doc>
					</ENAMETOOLONG>
					<EMULTIHOP>
						<x path="Int"/>
						<haxe_doc>Indicates that a multihop was attempted.</haxe_doc>
					</EMULTIHOP>
					<EMSGSIZE>
						<x path="Int"/>
						<haxe_doc>Indicates that the provided message is too long.</haxe_doc>
					</EMSGSIZE>
					<EMLINK>
						<x path="Int"/>
						<haxe_doc>Indicates that there are too many hard links to a file.</haxe_doc>
					</EMLINK>
					<EMFILE>
						<x path="Int"/>
						<haxe_doc>Indicates that there are too many open files.</haxe_doc>
					</EMFILE>
					<ELOOP>
						<x path="Int"/>
						<haxe_doc>Indicates too many levels of symbolic links in a path.</haxe_doc>
					</ELOOP>
					<EISDIR>
						<x path="Int"/>
						<haxe_doc>Indicates that the path is a directory.</haxe_doc>
					</EISDIR>
					<EISCONN>
						<x path="Int"/>
						<haxe_doc>Indicates that the socket is connected.</haxe_doc>
					</EISCONN>
					<EIO>
						<x path="Int"/>
						<haxe_doc>Indicates an otherwise unspecified I/O error.</haxe_doc>
					</EIO>
					<EINVAL>
						<x path="Int"/>
						<haxe_doc>Indicates that an invalid argument was provided.</haxe_doc>
					</EINVAL>
					<EINTR>
						<x path="Int"/>
						<haxe_doc>Indicates that a function call was interrupted.</haxe_doc>
					</EINTR>
					<EINPROGRESS>
						<x path="Int"/>
						<haxe_doc>Indicates that an operation is already in progress.</haxe_doc>
					</EINPROGRESS>
					<EILSEQ>
						<x path="Int"/>
						<haxe_doc>Indicates an illegal byte sequence.</haxe_doc>
					</EILSEQ>
					<EIDRM>
						<x path="Int"/>
						<haxe_doc>Indicates that the identifier has been removed.</haxe_doc>
					</EIDRM>
					<EHOSTUNREACH>
						<x path="Int"/>
						<haxe_doc>Indicates that the host is unreachable.</haxe_doc>
					</EHOSTUNREACH>
					<EFBIG>
						<x path="Int"/>
						<haxe_doc>Indicates that the file is too large.</haxe_doc>
					</EFBIG>
					<EFAULT>
						<x path="Int"/>
						<haxe_doc>Indicates an invalid pointer address.</haxe_doc>
					</EFAULT>
					<EEXIST>
						<x path="Int"/>
						<haxe_doc>Indicates that the file already exists.</haxe_doc>
					</EEXIST>
					<EDQUOT>
						<x path="Int"/>
						<haxe_doc>Indicates that the disk quota has been exceeded.</haxe_doc>
					</EDQUOT>
					<EDOM>
						<x path="Int"/>
						<haxe_doc>Indicates that an argument is out of the domain of the function.</haxe_doc>
					</EDOM>
					<EDESTADDRREQ>
						<x path="Int"/>
						<haxe_doc>Indicates that a destination address is required.</haxe_doc>
					</EDESTADDRREQ>
					<EDEADLK>
						<x path="Int"/>
						<haxe_doc>Indicates that a resource deadlock has been avoided.</haxe_doc>
					</EDEADLK>
					<ECONNRESET>
						<x path="Int"/>
						<haxe_doc>Indicates that the network connection has been reset.</haxe_doc>
					</ECONNRESET>
					<ECONNREFUSED>
						<x path="Int"/>
						<haxe_doc>Indicates that the network connection has been refused.</haxe_doc>
					</ECONNREFUSED>
					<ECONNABORTED>
						<x path="Int"/>
						<haxe_doc>Indicates that the network connection has been aborted.</haxe_doc>
					</ECONNABORTED>
					<ECHILD>
						<x path="Int"/>
						<haxe_doc>Indicates that there are no child processes.</haxe_doc>
					</ECHILD>
					<ECANCELED>
						<x path="Int"/>
						<haxe_doc>Indicates that an operation was canceled.</haxe_doc>
					</ECANCELED>
					<EBUSY>
						<x path="Int"/>
						<haxe_doc>Indicates that a device or resource is busy.</haxe_doc>
					</EBUSY>
					<EBADMSG>
						<x path="Int"/>
						<haxe_doc>Indicates an invalid data message.</haxe_doc>
					</EBADMSG>
					<EBADF>
						<x path="Int"/>
						<haxe_doc>Indicates that a file descriptor is not valid.</haxe_doc>
					</EBADF>
					<EALREADY>
						<x path="Int"/>
						<haxe_doc>Indicates that the socket already has a pending connection in progress.</haxe_doc>
					</EALREADY>
					<EAGAIN>
						<x path="Int"/>
						<haxe_doc>Indicates that there is currently no data available and to try the operation again later.</haxe_doc>
					</EAGAIN>
					<EAFNOSUPPORT>
						<x path="Int"/>
						<haxe_doc>Indicates that the network address family is not supported.</haxe_doc>
					</EAFNOSUPPORT>
					<EADDRNOTAVAIL>
						<x path="Int"/>
						<haxe_doc>Indicates that the network address is currently unavailable for use.</haxe_doc>
					</EADDRNOTAVAIL>
					<EADDRINUSE>
						<x path="Int"/>
						<haxe_doc>Indicates that the network address is already in use.</haxe_doc>
					</EADDRINUSE>
					<EACCES>
						<x path="Int"/>
						<haxe_doc>Indicates that the operation did not have sufficient permissions.</haxe_doc>
					</EACCES>
					<E2BIG>
						<x path="Int"/>
						<haxe_doc>Indicates that the list of arguments is longer than expected.</haxe_doc>
					</E2BIG>
				</a>
				<haxe_doc>The following error constants are exported by os.constants.errno:

		@see https://nodejs.org/api/os.html#os_error_constants</haxe_doc>
			</errno>
			<dlopen>
				<a>
					<RTLD_NOW>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Resolve all undefined symbols in the library before dlopen(3) returns.</haxe_doc>
					</RTLD_NOW>
					<RTLD_LOCAL>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>The converse of `RTLD_GLOBAL`. This is the default behavior if neither flag is specified.</haxe_doc>
					</RTLD_LOCAL>
					<RTLD_LAZY>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Perform lazy binding. Node.js sets this flag by default.</haxe_doc>
					</RTLD_LAZY>
					<RTLD_GLOBAL>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Symbols defined by the library will be made available for symbol resolution of subsequently loaded libraries.</haxe_doc>
					</RTLD_GLOBAL>
					<RTLD_DEEPBIND>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>Make a self-contained library use its own symbols in preference to symbols from previously loaded libraries.</haxe_doc>
					</RTLD_DEEPBIND>
				</a>
				<haxe_doc>If available on the operating system, the following constants are exported in os.constants.dlopen. See dlopen(3) for detailed information.

		@see https://nodejs.org/api/os.html#os_dlopen_constants</haxe_doc>
			</dlopen>
			<UV_UDP_REUSEADDR>
				<x path="Int"/>
				<haxe_doc>libuv-specific constant</haxe_doc>
			</UV_UDP_REUSEADDR>
		</a>
		<haxe_doc>Constants object returned by `Os.constants`.

	@see https://nodejs.org/api/os.html#os_os_constants_1</haxe_doc>
	</typedef>
	<class path="js.node.Path" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Path.hx" extern="1">
		<basename public="1" set="method" static="1">
			<f a="path:?ext">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.basename()` methods returns the last portion of a `path`, similar to the Unix `basename` command. Trailing directory separators are ignored, see path.sep.

		@see https://nodejs.org/api/path.html#path_path_basename_path_ext</haxe_doc>
		</basename>
		<delimiter public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc>Platform-specific path delimiter:

		`;` for Windows
		`:` for POSIX
		@see https://nodejs.org/api/path.html#path_path_delimiter</haxe_doc>
		</delimiter>
		<dirname public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.dirname()` method returns the directory name of a `path`, similar to the Unix `dirname` command. Trailing directory separators are ignored, see path.sep.

		@see https://nodejs.org/api/path.html#path_path_dirname_path</haxe_doc>
		</dirname>
		<extname public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.extname()` method returns the extension of the `path`, from the last occurrence of the `.` (period) character to end of string in the last portion of the `path`.
		If there is no `.` in the last portion of the `path`, or if there are no `.` characters other than the first character of the basename of `path` (see `path.basename()`) ,
		an empty string is returned.

		@see https://nodejs.org/api/path.html#path_path_extname_path</haxe_doc>
		</extname>
		<format public="1" set="method" static="1">
			<f a="pathObject">
				<t path="js.node.PathObject"/>
				<c path="String"/>
			</f>
			<haxe_doc>The path.format() method returns a path string from an object. This is the opposite of path.parse().

		@see https://nodejs.org/api/path.html#path_path_format_pathobject</haxe_doc>
		</format>
		<isAbsolute public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The `path.isAbsolute()` method determines if `path` is an absolute path.

		@see https://nodejs.org/api/path.html#path_path_isabsolute_path</haxe_doc>
		</isAbsolute>
		<join public="1" set="method" static="1">
			<f a="paths">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.join()` method joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.

		@see https://nodejs.org/api/path.html#path_path_join_paths</haxe_doc>
		</join>
		<normalize public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.normalize()` method normalizes the given `path`, resolving `'..'` and `'.'` segments.

		@see https://nodejs.org/api/path.html#path_path_normalize_path</haxe_doc>
		</normalize>
		<parse public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<t path="js.node.PathObject"/>
			</f>
			<haxe_doc>The `path.parse()` method returns an object whose properties represent significant elements of the `path`. Trailing directory separators are ignored, see path.sep.

		@see https://nodejs.org/api/path.html#path_path_parse_path</haxe_doc>
		</parse>
		<posix public="1" set="null" static="1">
			<t path="js.node._Path.PathModule"/>
			<haxe_doc>The `path.posix` property provides access to POSIX specific implementations of the `path` methods.

		@see https://nodejs.org/api/path.html#path_path_posix</haxe_doc>
		</posix>
		<relative public="1" set="method" static="1">
			<f a="from:to">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.relative()` method returns the relative path from `from` to `to` based on the current working directory.
		If `from` and `to` each resolve to the same path (after calling path.resolve() on each), a zero-length string is returned.

		@see https://nodejs.org/api/path.html#path_path_relative_from_to</haxe_doc>
		</relative>
		<resolve public="1" set="method" static="1">
			<f a="paths">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>The `path.resolve()` method resolves a sequence of paths or path segments into an absolute path.

		@see https://nodejs.org/api/path.html#path_path_resolve_paths</haxe_doc>
		</resolve>
		<sep public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc>Provides the platform-specific path segment separator:

		`\` on Windows
		`/` on POSIX

		@see https://nodejs.org/api/path.html#path_path_sep</haxe_doc>
		</sep>
		<toNamespacedPath public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>On Windows systems only, returns an equivalent namespace-prefixed path for the given `path`. If `path` is not a string, `path` will be returned without modifications.

		@see https://nodejs.org/api/path.html#path_path_tonamespacedpath_path</haxe_doc>
		</toNamespacedPath>
		<win32 public="1" set="null" static="1">
			<t path="js.node._Path.PathModule"/>
			<haxe_doc>The path.win32 property provides access to Windows-specific implementations of the path methods.

		@see https://nodejs.org/api/path.html#path_path_win32</haxe_doc>
		</win32>
		<haxe_doc>The `path` module provides utilities for working with file and directory paths.

	@see https://nodejs.org/api/path.html#path_path</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":jsRequire"><e>"path"</e></m>
		</meta>
	</class>
	<typedef path="js.node.PathObject" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Path.hx" module="js.node.Path">
		<a>
			<root>
				<c path="String"/>
				<haxe_doc>E.g. "C:\" for "C:\path\dir\index.html"</haxe_doc>
			</root>
			<name>
				<c path="String"/>
				<haxe_doc>E.g. "index" for "C:\path\dir\index.html"</haxe_doc>
			</name>
			<ext>
				<c path="String"/>
				<haxe_doc>E.g. ".html" for "C:\path\dir\index.html"</haxe_doc>
			</ext>
			<dir>
				<c path="String"/>
				<haxe_doc>E.g. "C:\path\dir" for "C:\path\dir\index.html"</haxe_doc>
			</dir>
			<base>
				<c path="String"/>
				<haxe_doc>E.g. "index.html" for "C:\path\dir\index.html"</haxe_doc>
			</base>
		</a>
		<haxe_doc>Path object returned from `Path.parse` and taken by `Path.format`.

	@see https://nodejs.org/api/path.html#path_path_format_pathobject</haxe_doc>
	</typedef>
	<typedef path="js.node._Path.PathModule" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Path.hx" private="1" module="js.node.Path"><a>
	<sep set="null"><c path="String"/></sep>
	<resolve set="method"><f a="paths">
	<x path="haxe.extern.Rest"><c path="String"/></x>
	<c path="String"/>
</f></resolve>
	<relative set="method"><f a="from:to">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></relative>
	<parse set="method"><f a="pathString">
	<c path="String"/>
	<t path="js.node.PathObject"/>
</f></parse>
	<normalize set="method"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></normalize>
	<join set="method"><f a="paths">
	<x path="haxe.extern.Rest"><c path="String"/></x>
	<c path="String"/>
</f></join>
	<isAbsolute set="method"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></isAbsolute>
	<format set="method"><f a="pathObject">
	<t path="js.node.PathObject"/>
	<c path="String"/>
</f></format>
	<extname set="method"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></extname>
	<dirname set="method"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></dirname>
	<delimiter set="null"><c path="String"/></delimiter>
	<basename set="method"><f a="path:?ext">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></basename>
</a></typedef>
	<abstract path="js.node.ProcessEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Process.hx" module="js.node.Process">
		<this><x path="js.node.events.Event"><c path="js.node.ProcessEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.ProcessEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by the Process class.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node._Process.ProcessEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Process.hx" private="1" module="js.node.Process" extern="1" final="1">
	<Exit public="1" get="inline" set="null" expr="cast &quot;exit&quot;" line="50" static="1">
		<x path="js.node.ProcessEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "exit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the process is about to exit.
		There is no way to prevent the exiting of the event loop at this point,
		and once all exit listeners have finished running the process will exit.
		Therefore you must only perform synchronous operations in this handler.
		This is a good hook to perform checks on the module's state (like for unit tests).
		The callback takes one argument, the code the process is exiting with.</haxe_doc>
	</Exit>
	<BeforeExit public="1" get="inline" set="null" expr="cast &quot;beforeExit&quot;" line="62" static="1">
		<x path="js.node.ProcessEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "beforeExit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when node empties it's event loop and has nothing else to schedule.

		Normally, node exits when there is no work scheduled, but a listener for `beforeExit`
		can make asynchronous calls, and cause node to continue.

		`beforeExit` is not emitted for conditions causing explicit termination, such as `process.exit()`
		or uncaught exceptions, and should not be used as an alternative to the `exit` event
		unless the intention is to schedule more work.</haxe_doc>
	</BeforeExit>
	<UncaughtException public="1" get="inline" set="null" expr="cast &quot;uncaughtException&quot;" line="69" static="1">
		<x path="js.node.ProcessEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "uncaughtException"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when an exception bubbles all the way back to the event loop.
		If a listener is added for this exception, the default action (which is to print a stack trace and exit)
		will not occur.</haxe_doc>
	</UncaughtException>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node._Process.ProcessEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Process.hx" private="1" module="js.node.Process" extern="1" final="1">
		<Exit public="1" get="inline" set="null" expr="cast &quot;exit&quot;" line="50" static="1">
			<x path="js.node.ProcessEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "exit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the process is about to exit.
		There is no way to prevent the exiting of the event loop at this point,
		and once all exit listeners have finished running the process will exit.
		Therefore you must only perform synchronous operations in this handler.
		This is a good hook to perform checks on the module's state (like for unit tests).
		The callback takes one argument, the code the process is exiting with.</haxe_doc>
		</Exit>
		<BeforeExit public="1" get="inline" set="null" expr="cast &quot;beforeExit&quot;" line="62" static="1">
			<x path="js.node.ProcessEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "beforeExit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when node empties it's event loop and has nothing else to schedule.

		Normally, node exits when there is no work scheduled, but a listener for `beforeExit`
		can make asynchronous calls, and cause node to continue.

		`beforeExit` is not emitted for conditions causing explicit termination, such as `process.exit()`
		or uncaught exceptions, and should not be used as an alternative to the `exit` event
		unless the intention is to schedule more work.</haxe_doc>
		</BeforeExit>
		<UncaughtException public="1" get="inline" set="null" expr="cast &quot;uncaughtException&quot;" line="69" static="1">
			<x path="js.node.ProcessEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "uncaughtException"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when an exception bubbles all the way back to the event loop.
		If a listener is added for this exception, the default action (which is to print a stack trace and exit)
		will not occur.</haxe_doc>
		</UncaughtException>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.events.IEventEmitter" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/events/EventEmitter.hx" module="js.node.events.EventEmitter" extern="1" interface="1">
		<addListener public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="addListener.T"/></x>
	<c path="addListener.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></addListener>
		<emit public="1" params="T" set="method"><f a="eventName:args">
	<x path="js.node.events.Event"><c path="emit.T"/></x>
	<x path="haxe.extern.Rest"><d/></x>
	<x path="Bool"/>
</f></emit>
		<eventNames public="1" set="method"><f a=""><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="js.lib.Symbol"/>
</x></c></f></eventNames>
		<getMaxListeners public="1" set="method"><f a=""><x path="Int"/></f></getMaxListeners>
		<listenerCount public="1" params="T" set="method"><f a="eventName">
	<x path="js.node.events.Event"><c path="listenerCount.T"/></x>
	<x path="Int"/>
</f></listenerCount>
		<listeners public="1" params="T" set="method"><f a="eventName">
	<x path="js.node.events.Event"><c path="listeners.T"/></x>
	<c path="Array"><c path="listeners.T"/></c>
</f></listeners>
		<off public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="off.T"/></x>
	<c path="off.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></off>
		<on public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="on.T"/></x>
	<c path="on.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></on>
		<once public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="once.T"/></x>
	<c path="once.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></once>
		<prependListener public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="prependListener.T"/></x>
	<c path="prependListener.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></prependListener>
		<prependOnceListener public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="prependOnceListener.T"/></x>
	<c path="prependOnceListener.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></prependOnceListener>
		<removeAllListeners public="1" params="T" set="method"><f a="?eventName">
	<x path="js.node.events.Event"><c path="removeAllListeners.T"/></x>
	<c path="js.node.events.IEventEmitter"/>
</f></removeAllListeners>
		<removeListener public="1" params="T" set="method"><f a="eventName:listener">
	<x path="js.node.events.Event"><c path="removeListener.T"/></x>
	<c path="removeListener.T"/>
	<c path="js.node.events.IEventEmitter"/>
</f></removeListener>
		<setMaxListeners public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></setMaxListeners>
		<rawListeners public="1" params="T" set="method"><f a="eventName">
	<x path="js.node.events.Event"><c path="rawListeners.T"/></x>
	<c path="Array"><c path="rawListeners.T"/></c>
</f></rawListeners>
		<haxe_doc>`IEventEmitter` interface is used as "any EventEmitter".

	See `EventEmitter` for actual class documentation.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.events.EventEmitter" params="TSelf" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/events/EventEmitter.hx" extern="1">
		<defaultMaxListeners public="1" static="1">
			<x path="Int"/>
			<haxe_doc>By default, a maximum of `10` listeners can be registered for any single
		event. This limit can be changed for individual `EventEmitter` instances
		using the `emitter.setMaxListeners(n)` method. To change the default
		for all `EventEmitter` instances, the `EventEmitter.defaultMaxListeners`
		property can be used. If this value is not a positive number, a `TypeError`
		will be thrown.

		@see https://nodejs.org/api/events.html#events_eventemitter_defaultmaxlisteners</haxe_doc>
		</defaultMaxListeners>
		<addListener public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="addListener.T"/></x>
				<c path="addListener.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Alias for `emitter.on(eventName, listener)`.

		@see https://nodejs.org/api/events.html#events_emitter_addlistener_eventname_listener</haxe_doc>
		</addListener>
		<emit public="1" params="T" set="method">
			<f a="eventName:args">
				<x path="js.node.events.Event"><c path="emit.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Synchronously calls each of the listeners registered for the event named
		`eventName`, in the order they were registered, passing the supplied arguments
		to each.

		@see https://nodejs.org/api/events.html#events_emitter_emit_eventname_args</haxe_doc>
		</emit>
		<eventNames public="1" set="method">
			<f a=""><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="js.lib.Symbol"/>
</x></c></f>
			<haxe_doc>Returns an array listing the events for which the emitter has registered
		listeners. The values in the array will be strings or `Symbol`s.

		@see https://nodejs.org/api/events.html#events_emitter_eventnames</haxe_doc>
		</eventNames>
		<getMaxListeners public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the current max listener value for the `EventEmitter` which is either
		set by `emitter.setMaxListeners(n)` or defaults to
		`EventEmitter.defaultMaxListeners`.

		@see https://nodejs.org/api/events.html#events_emitter_getmaxlisteners</haxe_doc>
		</getMaxListeners>
		<listenerCount public="1" params="T" set="method">
			<f a="eventName">
				<x path="js.node.events.Event"><c path="listenerCount.T"/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of listeners listening to the event named `eventName`.

		@see https://nodejs.org/api/events.html#events_emitter_listenercount_eventname</haxe_doc>
		</listenerCount>
		<listeners public="1" params="T" set="method">
			<f a="eventName">
				<x path="js.node.events.Event"><c path="listeners.T"/></x>
				<c path="Array"><c path="listeners.T"/></c>
			</f>
			<haxe_doc>Returns a copy of the array of listeners for the event named `eventName`.

		@see https://nodejs.org/api/events.html#events_emitter_listeners_eventname</haxe_doc>
		</listeners>
		<off public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="off.T"/></x>
				<c path="off.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Alias for `emitter.removeListener()`.

		@see https://nodejs.org/api/events.html#events_emitter_off_eventname_listener</haxe_doc>
		</off>
		<on public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="on.T"/></x>
				<c path="on.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Adds the `listener` function to the end of the listeners array for the
		event named `eventName`. No checks are made to see if the `listener` has
		already been added. Multiple calls passing the same combination of `eventName`
		and `listener` will result in the `listener` being added, and called, multiple
		times.

		@see https://nodejs.org/api/events.html#events_emitter_on_eventname_listener</haxe_doc>
		</on>
		<once public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="once.T"/></x>
				<c path="once.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Adds a one-time `listener` function for the event named `eventName`. The
		next time `eventName` is triggered, this listener is removed and then invoked.

		@see https://nodejs.org/api/events.html#events_emitter_once_eventname_listener</haxe_doc>
		</once>
		<prependListener public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="prependListener.T"/></x>
				<c path="prependListener.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Adds the `listener` function to the beginning of the listeners array for the
		event named `eventName`. No checks are made to see if the `listener` has
		already been added. Multiple calls passing the same combination of `eventName`
		and `listener` will result in the `listener` being added, and called, multiple
		times.

		@see https://nodejs.org/api/events.html#events_emitter_prependlistener_eventname_listener</haxe_doc>
		</prependListener>
		<prependOnceListener public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="prependOnceListener.T"/></x>
				<c path="prependOnceListener.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Adds a one-time `listener` function for the event named `eventName` to the
		beginning of the listeners array. The next time `eventName` is triggered, this
		listener is removed, and then invoked.

		@see https://nodejs.org/api/events.html#events_emitter_prependoncelistener_eventname_listener</haxe_doc>
		</prependOnceListener>
		<removeAllListeners public="1" params="T" set="method">
			<f a="?eventName">
				<x path="js.node.events.Event"><c path="removeAllListeners.T"/></x>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Removes all listeners, or those of the specified `eventName`.

		@see https://nodejs.org/api/events.html#events_emitter_removealllisteners_eventname</haxe_doc>
		</removeAllListeners>
		<removeListener public="1" params="T" set="method">
			<f a="eventName:listener">
				<x path="js.node.events.Event"><c path="removeListener.T"/></x>
				<c path="removeListener.T"/>
				<c path="js.node.events.EventEmitter.TSelf"/>
			</f>
			<haxe_doc>Removes the specified `listener` from the listener array for the event named
		`eventName`.

		@see https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener</haxe_doc>
		</removeListener>
		<setMaxListeners public="1" set="method">
			<f a="n">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>By default `EventEmitter`s will print a warning if more than `10` listeners are
		added for a particular event. This is a useful default that helps finding
		memory leaks. Obviously, not all events should be limited to just 10 listeners.
		The `emitter.setMaxListeners()` method allows the limit to be modified for this
		specific `EventEmitter` instance. The value can be set to `Infinity` (or `0`)
		to indicate an unlimited number of listeners.

		@see https://nodejs.org/api/events.html#events_emitter_setmaxlisteners_n</haxe_doc>
		</setMaxListeners>
		<rawListeners public="1" params="T" set="method">
			<f a="eventName">
				<x path="js.node.events.Event"><c path="rawListeners.T"/></x>
				<c path="Array"><c path="rawListeners.T"/></c>
			</f>
			<haxe_doc>Returns a copy of the array of listeners for the event named `eventName`,
		including any wrappers (such as those created by `.once()`).

		@see https://nodejs.org/api/events.html#events_emitter_rawlisteners_eventname</haxe_doc>
		</rawListeners>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The `EventEmitter` class is defined and exposed by the `events` module:

	@see https://nodejs.org/api/events.html#events_class_eventemitter</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"events"</e>
	<e>"EventEmitter"</e>
</m></meta>
	</class>
	<class path="js.node.Process" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Process.hx" extern="1">
		<extends path="js.node.events.EventEmitter"><c path="js.node.Process"/></extends>
		<stdout public="1">
			<c path="js.node.stream.IWritable"/>
			<haxe_doc>A Writable Stream to stdout.

		`stderr` and `stdout` are unlike other streams in Node in that writes to them are usually blocking.</haxe_doc>
		</stdout>
		<stderr public="1">
			<c path="js.node.stream.IWritable"/>
			<haxe_doc>A writable stream to stderr.

		`stderr` and `stdout` are unlike other streams in Node in that writes to them are usually blocking.</haxe_doc>
		</stderr>
		<stdin public="1">
			<c path="js.node.stream.IReadable"/>
			<haxe_doc>A Readable Stream for stdin.</haxe_doc>
		</stdin>
		<argv public="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>An array containing the command line arguments.
		The first element will be `node`, the second element will be the name of the JavaScript file.
		The next elements will be any additional command line arguments.

		E.g:
			$ node process-2.js one two=three four
			0: node
			1: /Users/mjr/work/node/process-2.js
			2: one
			3: two=three
			4: four</haxe_doc>
		</argv>
		<execPath public="1">
			<c path="String"/>
			<haxe_doc>This is the absolute pathname of the executable that started the process.</haxe_doc>
		</execPath>
		<execArgv public="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>This is the set of node-specific command line options from the executable that started the process.
		These options do not show up in `argv`, and do not include the node executable, the name of the script,
		or any options following the script name.

		These options are useful in order to spawn child processes with the same execution environment as the parent.</haxe_doc>
		</execArgv>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This causes node to emit an abort. This will cause node to exit and generate a core file.</haxe_doc>
		</abort>
		<chdir public="1" set="method">
			<f a="directory">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory of the process or throws an exception if that fails.</haxe_doc>
		</chdir>
		<cwd public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the current working directory of the process.</haxe_doc>
		</cwd>
		<env public="1">
			<x path="haxe.DynamicAccess"><c path="String"/></x>
			<haxe_doc>An object containing the user environment. See environ(7).</haxe_doc>
		</env>
		<exit public="1" set="method">
			<f a="?code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Ends the process with the specified `code`. If the `code` is omitted, exit uses either the
		'success' code `0` or the value of `process.exitCode` if specified.</haxe_doc>
		</exit>
		<exitCode public="1">
			<x path="Null"><x path="Int"/></x>
			<haxe_doc>A number which will be the process exit code, when the process either exits gracefully,
		or is exited via `process.exit()` without specifying a code.

		Specifying a code to `process.exit(code)` will override any previous setting of `process.exitCode`.</haxe_doc>
		</exitCode>
		<getgid public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Gets the group identity of the process. See getgid(2).
		Note: this function is only available on POSIX platforms (i.e. not Windows)</haxe_doc>
		</getgid>
		<setgid public="1" set="method">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the group identity of the process. See setgid(2).
		This accepts either a numerical ID or a groupname string.
		If a groupname is specified, this method blocks while resolving it to a numerical ID.

		Note: this function is only available on POSIX platforms (i.e. not Windows)</haxe_doc>
			<overloads><setgid public="1" set="method">
	<f a="id">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Sets the group identity of the process. See setgid(2).
		This accepts either a numerical ID or a groupname string.
		If a groupname is specified, this method blocks while resolving it to a numerical ID.

		Note: this function is only available on POSIX platforms (i.e. not Windows)</haxe_doc>
</setgid></overloads>
		</setgid>
		<getuid public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Gets the user identity of the process. See getuid(2).
		Note: this function is only available on POSIX platforms (i.e. not Windows)</haxe_doc>
		</getuid>
		<setuid public="1" set="method">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the user identity of the process. See setuid(2).
		This accepts either a numerical ID or a username string.
		If a username is specified, this method blocks while resolving it to a numerical ID.

		Note: this function is only available on POSIX platforms (i.e. not Windows)</haxe_doc>
			<overloads><setuid public="1" set="method">
	<f a="id">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Sets the user identity of the process. See setuid(2).
		This accepts either a numerical ID or a username string.
		If a username is specified, this method blocks while resolving it to a numerical ID.

		Note: this function is only available on POSIX platforms (i.e. not Windows)</haxe_doc>
</setuid></overloads>
		</setuid>
		<getgroups public="1" set="method">
			<f a=""><c path="Array"><x path="Int"/></c></f>
			<haxe_doc>Returns an array with the supplementary group IDs.
		POSIX leaves it unspecified if the effective group ID is included but node.js ensures it always is.
		Note: this function is only available on POSIX platforms (i.e. not Windows)</haxe_doc>
		</getgroups>
		<setgroups public="1" set="method">
			<f a="groups">
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="Int"/>
</x></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the supplementary group IDs.
		This is a privileged operation, meaning you need to be root or have the CAP_SETGID capability.

		Note: this function is only available on POSIX platforms (i.e. not Windows)
		The list can contain group IDs, group names or both.</haxe_doc>
		</setgroups>
		<initgroups public="1" set="method">
			<f a="user:extra_group">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<x path="Int"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Reads /etc/group and initializes the group access list, using all groups of which the user is a member.
		This is a privileged operation, meaning you need to be root or have the CAP_SETGID capability.

		Note: this function is only available on POSIX platforms (i.e. not Windows)</haxe_doc>
		</initgroups>
		<version public="1" set="null">
			<c path="String"/>
			<haxe_doc>A compiled-in property that exposes NODE_VERSION.</haxe_doc>
		</version>
		<versions public="1">
			<x path="haxe.DynamicAccess"><c path="String"/></x>
			<haxe_doc>A property exposing version strings of node and its dependencies.</haxe_doc>
		</versions>
		<config public="1">
			<d><d/></d>
			<haxe_doc>An Object containing the JavaScript representation of the configure options that were used to compile the current node executable.
		This is the same as the "config.gypi" file that was produced when running the ./configure script.</haxe_doc>
		</config>
		<kill public="1" set="method">
			<f a="pid:?signal">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Send a signal to a process.
		`pid` is the process id and `signal` is the string describing the signal to send. Signal names are strings like 'SIGINT' or 'SIGHUP'.

		If omitted, the `signal` will be 'SIGTERM'. See Signal Events and kill(2) for more information.

		Will throw an error if target does not exist, and as a special case,
		a signal of 0 can be used to test for the existence of a process.

		Note that just because the name of this function is `kill`, it is really just a signal sender, like the kill system call.
		The signal sent may do something other than kill the target process.</haxe_doc>
		</kill>
		<pid public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The PID of the process.</haxe_doc>
		</pid>
		<title public="1">
			<c path="String"/>
			<haxe_doc>Getter/setter to set what is displayed in 'ps'.

		When used as a setter, the maximum length is platform-specific and probably short.
		On Linux and OS X, it's limited to the size of the binary name plus the length of the
		command line arguments because it overwrites the argv memory.</haxe_doc>
		</title>
		<arch public="1">
			<c path="String"/>
			<haxe_doc>What processor architecture you're running on: 'arm', 'ia32', or 'x64'.</haxe_doc>
		</arch>
		<platform public="1">
			<c path="String"/>
			<haxe_doc>What platform you're running on: 'darwin', 'freebsd', 'linux', 'sunos' or 'win32'</haxe_doc>
		</platform>
		<memoryUsage public="1" set="method">
			<f a=""><t path="js.node.MemoryUsage"/></f>
			<haxe_doc>Returns an object describing the memory usage of the Node process measured in bytes.</haxe_doc>
		</memoryUsage>
		<nextTick public="1" set="method">
			<f a="callback:args">
				<f a=""><x path="Void"/></f>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>On the next loop around the event loop call this callback.
		This is not a simple alias to setTimeout(fn, 0), it's much more efficient.
		It typically runs before any other I/O events fire, but there are some exceptions.

		This is important in developing APIs where you want to give the user the chance to
		assign event handlers after an object has been constructed, but before any I/O has occurred.</haxe_doc>
		</nextTick>
		<umask public="1" set="method">
			<f a="?mask">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Sets or reads the process's file mode creation mask.
		Child processes inherit the mask from the parent process.
		Returns the old mask if mask argument is given, otherwise returns the current mask.</haxe_doc>
		</umask>
		<uptime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Number of seconds Node has been running.</haxe_doc>
		</uptime>
		<hrtime public="1" set="method">
			<f a=""><c path="Array"><x path="Float"/></c></f>
			<haxe_doc>Returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array.
		It is relative to an arbitrary time in the past.
		It is not related to the time of day and therefore not subject to clock drift.
		The primary use is for measuring performance between intervals.
		You may pass in the result of a previous call to `hrtime` to get a diff reading,
		useful for benchmarks and measuring intervals</haxe_doc>
			<overloads><hrtime public="1" set="method">
	<f a="prev">
		<c path="Array"><x path="Float"/></c>
		<c path="Array"><x path="Float"/></c>
	</f>
	<haxe_doc>Returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array.
		It is relative to an arbitrary time in the past.
		It is not related to the time of day and therefore not subject to clock drift.
		The primary use is for measuring performance between intervals.
		You may pass in the result of a previous call to `hrtime` to get a diff reading,
		useful for benchmarks and measuring intervals</haxe_doc>
</hrtime></overloads>
		</hrtime>
		<mainModule public="1" set="null">
			<c path="js.node.Module"/>
			<haxe_doc>Alternate way to retrieve require.main. The difference is that if the main module changes at runtime,
		require.main might still refer to the original main module in modules that were required
		before the change occurred. Generally it's safe to assume that the two refer to the same module.

		As with require.main, it will be undefined if there was no entry script.</haxe_doc>
		</mainModule>
		<send public="1" set="method">
			<f a="message:?callback">
				<d/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Send a message to the parent process.

		Only available for child processes. See `ChildProcess.send`.</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a="message:sendHandle:options:?callback">
						<d/>
						<d/>
						<t path="js.node.child_process.ChildProcessSendOptions"/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Bool"/>
					</f>
					<haxe_doc>Send a message to the parent process.

		Only available for child processes. See `ChildProcess.send`.</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="message:sendHandle:?callback">
						<d/>
						<d/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Bool"/>
					</f>
					<haxe_doc>Send a message to the parent process.

		Only available for child processes. See `ChildProcess.send`.</haxe_doc>
				</send>
			</overloads>
		</send>
		<disconnect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the IPC channel to parent process.

		Only available for child processes. See `ChildProcess.disconnect`.</haxe_doc>
		</disconnect>
		<noDeprecation public="1">
			<x path="Bool"/>
			<haxe_doc>Disable run-time deprecation warnings.
		See `Util.deprecate`.</haxe_doc>
		</noDeprecation>
		<traceDeprecation public="1">
			<x path="Bool"/>
			<haxe_doc>Enable logging of deprecation warnings.
		See `Util.deprecate`.</haxe_doc>
		</traceDeprecation>
		<throwDeprecation public="1">
			<x path="Bool"/>
			<haxe_doc>Throw on deprecated API usage.
		See `Util.deprecate`.</haxe_doc>
		</throwDeprecation>
	</class>
	<typedef path="js.node.MemoryUsage" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Process.hx" module="js.node.Process"><a>
	<rss><x path="Float"/></rss>
	<heapUsed><x path="Float"/></heapUsed>
	<heapTotal><x path="Float"/></heapTotal>
</a></typedef>
	<class path="js.node.IStream" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Stream.hx" module="js.node.Stream" extern="1" interface="1">
		<haxe_doc>`IStream` interface is used as "any Stream".

	See `Stream` for actual class.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.Stream" params="TSelf" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Stream.hx" extern="1">
		<extends path="js.node.events.EventEmitter"><c path="js.node.Stream.TSelf"/></extends>
		<pipeline public="1" set="method" static="1">
			<f a="readable:streams">
				<c path="js.node.stream.IReadable"/>
				<x path="haxe.extern.Rest"><c path="js.node.stream.IWritable"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
			<overloads>
				<pipeline public="1" set="method">
					<f a="readable:callback">
						<c path="js.node.stream.IReadable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:writable4:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:writable4:writable5:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:writable4:writable5:writable6:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:writable4:writable5:writable6:writable7:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
				<pipeline public="1" set="method">
					<f a="readable:writable1:writable2:writable3:writable4:writable5:writable6:writable7:writable8:callback">
						<c path="js.node.stream.IReadable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<c path="js.node.stream.IWritable"/>
						<f a="">
							<x path="Null"><c path="js.lib.Error"/></x>
							<x path="Void"/>
						</f>
						<x path="Void"/>
					</f>
					<haxe_doc>A module method to pipe between streams forwarding errors and properly cleaning up
		and provide a callback when the pipeline is complete.

		@see https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback</haxe_doc>
				</pipeline>
			</overloads>
		</pipeline>
		<new set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Base class for all streams.</haxe_doc>
		<meta><m n=":jsRequire"><e>"stream"</e></m></meta>
	</class>
	<class path="js.node.Timers" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Timers.hx" extern="1">
		<setImmediate public="1" set="method" static="1">
			<f a="callback:args">
				<x path="haxe.Function"/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.node.Immediate"/>
			</f>
			<haxe_doc>Schedules the "immediate" execution of the callback after I/O events' callbacks.

		When multiple calls to `setImmediate()` are made, the `callback` functions are queued for execution
		in the order in which they are created. The entire callback queue is processed every event loop iteration.
		If an immediate timer is queued from inside an executing callback, that timer will not be triggered until
		the next event loop iteration.

		If `callback` is not a function, a `TypeError` will be thrown.

		This method has a custom variant for promises that is available using `util.promisify()`.</haxe_doc>
		</setImmediate>
		<setInterval public="1" set="method" static="1">
			<f a="callback:delay:args">
				<x path="haxe.Function"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.node.Timeout"/>
			</f>
			<haxe_doc>Schedules repeated execution of `callback` every `delay` milliseconds.

		When delay is larger than `2147483647` or less than `1`, the `delay` will be set to `1`.
		Non-integer delays are truncated to an integer.

		If `callback` is not a function, a `TypeError` will be thrown.

		This method has a custom variant for promises that is available using `util.promisify()`.</haxe_doc>
		</setInterval>
		<setTimeout public="1" set="method" static="1">
			<f a="callback:delay:args">
				<x path="haxe.Function"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.node.Timeout"/>
			</f>
			<haxe_doc>Schedules execution of a one-time `callback` after `delay` milliseconds.

		The `callback` will likely not be invoked in precisely `delay` milliseconds.
		Node.js makes no guarantees about the exact timing of when callbacks will fire, nor of their ordering.
		The callback will be called as close as possible to the time specified.

		When delay is larger than `2147483647` or less than `1`, the delay will be set to `1`.
		Non-integer delays are truncated to an integer.

		If `callback` is not a function, a `TypeError` will be thrown.

		This method has a custom variant for promises that is available using `util.promisify()`.</haxe_doc>
		</setTimeout>
		<clearImmediate public="1" set="method" static="1">
			<f a="immediate">
				<c path="js.node.Immediate"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Cancels an Immediate object created by `setImmediate()`.</haxe_doc>
		</clearImmediate>
		<clearInterval public="1" set="method" static="1">
			<f a="timeout">
				<c path="js.node.Timeout"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Cancels a Timeout object created by `setInterval()`.</haxe_doc>
		</clearInterval>
		<clearTimeout public="1" set="method" static="1">
			<f a="timeout">
				<c path="js.node.Timeout"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Cancels a Timeout object created by `setTimeout()`.</haxe_doc>
		</clearTimeout>
		<haxe_doc>The `timer` module exposes a global API for scheduling functions to be called at some future period of time.
	Because the timer functions are globals, there is no need to call `require('timers')` to use the API.

	The timer functions within Node.js implement a similar API as the timers API provided by Web Browsers
	but use a different internal implementation that is built around the Node.js Event Loop.</haxe_doc>
		<meta><m n=":jsRequire"><e>"timers"</e></m></meta>
	</class>
	<class path="js.node.Immediate" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Timers.hx" module="js.node.Timers" extern="1">
		<hasRef public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>If true, the `Immediate` object will keep the Node.js event loop active.</haxe_doc>
		</hasRef>
		<ref public="1" set="method">
			<f a=""><c path="js.node.Immediate"/></f>
			<haxe_doc>When called, requests that the Node.js event loop not exit so long as the `Immediate` is active.
		Calling `immediate.ref()` multiple times will have no effect.

		By default, all `Immediate` objects are "ref'ed", making it normally unnecessary to call `immediate.ref()`
		unless `immediate.unref()` had been called previously.</haxe_doc>
		</ref>
		<unref public="1" set="method">
			<f a=""><c path="js.node.Immediate"/></f>
			<haxe_doc>When called, the active `Immediate` object will not require the Node.js event loop to remain active.
		If there is no other activity keeping the event loop running, the process may exit before the `Immediate` object's
		callback is invoked. Calling immediate.unref() multiple times will have no effect.</haxe_doc>
		</unref>
		<haxe_doc>This object is created internally and is returned from `setImmediate()`.
	It can be passed to `clearImmediate()` in order to cancel the scheduled actions.</haxe_doc>
	</class>
	<class path="js.node.Timeout" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Timers.hx" module="js.node.Timers" extern="1">
		<hasRef public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>If true, the `Timeout` object will keep the Node.js event loop active.</haxe_doc>
		</hasRef>
		<ref public="1" set="method">
			<f a=""><c path="js.node.Timeout"/></f>
			<haxe_doc>When called, the active `Timeout` object will not require the Node.js event loop to remain active.
		If there is no other activity keeping the event loop running, the process may exit before the `Timeout` object's
		callback is invoked. Calling `timeout.unref()` multiple times will have no effect.

		Calling `timeout.unref()` creates an internal timer that will wake the Node.js event loop.
		Creating too many of these can adversely impact performance of the Node.js application.</haxe_doc>
		</ref>
		<refresh public="1" set="method">
			<f a=""><c path="js.node.Timeout"/></f>
			<haxe_doc>Sets the timer's start time to the current time, and reschedules the timer to call its callback at the previously
		specified duration adjusted to the current time. This is useful for refreshing a timer without allocating
		a new JavaScript object.

		Using this on a timer that has already called its callback will reactivate the timer.</haxe_doc>
		</refresh>
		<unref public="1" set="method">
			<f a=""><c path="js.node.Timeout"/></f>
			<haxe_doc>When called, the active `Timeout` object will not require the Node.js event loop to remain active.
		If there is no other activity keeping the event loop running, the process may exit before the `Timeout` object's
		callback is invoked. Calling `timeout.unref()` multiple times will have no effect.

		Calling `timeout.unref()` creates an internal timer that will wake the Node.js event loop.
		Creating too many of these can adversely impact performance of the Node.js application.</haxe_doc>
		</unref>
		<haxe_doc>This object is created internally and is returned from `setTimeout()` and `setInterval()`.
	It can be passed to either `clearTimeout()` or `clearInterval()` in order to cancel the scheduled actions.</haxe_doc>
	</class>
	<typedef path="js.node.TlsOptionsBase" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Tls.hx" module="js.node.Tls"><a>
	<rejectUnauthorized>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true the server will reject any connection which is not authorized with the list of supplied CAs.
		This option only has an effect if `requestCert` is true.
		Default: false.</haxe_doc>
	</rejectUnauthorized>
	<NPNProtocols>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="String"/></c>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>possible NPN protocols. (Protocols should be ordered by their priority).</haxe_doc>
	</NPNProtocols>
</a></typedef>
	<typedef path="js.node.TlsServerOptionsBase" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Tls.hx" module="js.node.Tls"><a>
	<requestCert>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true the server will request a certificate from clients that connect
		and attempt to verify that certificate.
		Default: false.</haxe_doc>
	</requestCert>
	<rejectUnauthorized>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true the server will reject any connection which is not authorized with the list of supplied CAs.
		This option only has an effect if `requestCert` is true.
		Default: false.</haxe_doc>
	</rejectUnauthorized>
	<SNICallback>
		<x path="Null"><f a="servername:cb">
	<c path="String"/>
	<f a="">
		<c path="js.lib.Error"/>
		<c path="js.node.tls.SecureContext"/>
	</f>
	<x path="Void"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A function that will be called if client supports SNI TLS extension.
		Two argument will be passed to it: `servername`, and `cb`.
		SNICallback should invoke `cb(null, ctx)`, where `ctx` is a SecureContext instance.
		(You can use tls.createSecureContext(...) to get proper `SecureContext`).
		If `SNICallback` wasn't provided - default callback with high-level API will be used.</haxe_doc>
	</SNICallback>
	<NPNProtocols>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="String"/></c>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>possible NPN protocols. (Protocols should be ordered by their priority).</haxe_doc>
	</NPNProtocols>
</a></typedef>
	<typedef path="js.node.TlsClientOptionsBase" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Tls.hx" module="js.node.Tls"><a>
	<session>
		<x path="Null"><t path="js.node.Buffer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A Buffer instance, containing TLS session.</haxe_doc>
	</session>
	<requestOCSP>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true - OCSP status request extension would be added to client hello,
		and OCSPResponse event will be emitted on socket before establishing secure communication</haxe_doc>
	</requestOCSP>
	<rejectUnauthorized>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true the server will reject any connection which is not authorized with the list of supplied CAs.
		This option only has an effect if `requestCert` is true.
		Default: false.</haxe_doc>
	</rejectUnauthorized>
	<NPNProtocols>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="String"/></c>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>possible NPN protocols. (Protocols should be ordered by their priority).</haxe_doc>
	</NPNProtocols>
</a></typedef>
	<typedef path="js.node.TlsCreateServerOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Tls.hx" module="js.node.Tls">
		<a>
			<ticketKeys>
				<x path="Null"><t path="js.node.Buffer"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A 48-byte `Buffer` instance consisting of 16-byte prefix, 16-byte hmac key, 16-byte AES key.
		You could use it to accept tls session tickets on multiple instances of tls server.

		NOTE: Automatically shared between cluster module workers.</haxe_doc>
			</ticketKeys>
			<sessionTimeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An integer specifying the seconds after which TLS session identifiers
		and TLS session tickets created by the server are timed out.
		See SSL_CTX_set_timeout for more details.</haxe_doc>
			</sessionTimeout>
			<sessionIdContext>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>opaque identifier for session resumption.
		If `requestCert` is true, the default is MD5 hash value generated from command-line.
		Otherwise, the default is not provided.</haxe_doc>
			</sessionIdContext>
			<secureProtocol>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The SSL method to use, e.g. SSLv3_method to force SSL version 3.
		The possible values depend on your installation of OpenSSL and are defined in the constant SSL_METHODS.</haxe_doc>
			</secureProtocol>
			<requestCert>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If true the server will request a certificate from clients that connect
		and attempt to verify that certificate.
		Default: false.</haxe_doc>
			</requestCert>
			<rejectUnauthorized>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If true the server will reject any connection which is not authorized with the list of supplied CAs.
		This option only has an effect if `requestCert` is true.
		Default: false.</haxe_doc>
			</rejectUnauthorized>
			<pfx>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>private key, certificate and CA certs of the server in PFX or PKCS12 format.</haxe_doc>
			</pfx>
			<passphrase>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>passphrase for the private key or pfx.</haxe_doc>
			</passphrase>
			<key>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>private key of the server in PEM format.</haxe_doc>
			</key>
			<honorCipherOrder>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>When choosing a cipher, use the server's preferences instead of the client preferences.
		Default: true.</haxe_doc>
			</honorCipherOrder>
			<handshakeTimeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Abort the connection if the SSL/TLS handshake does not finish in this many milliseconds.
		The default is 120 seconds.
		A 'clientError' is emitted on the `tls.Server` object whenever a handshake times out.</haxe_doc>
			</handshakeTimeout>
			<ecdhCurve>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>named curve to use for ECDH key agreement or false to disable ECDH.

		Defaults to prime256v1 (NIST P-256). Use `Crypto.getCurves` to obtain a list of available curve names.
		On recent releases, openssl ecparam -list_curves will also display the name and description
		of each available elliptic curve.</haxe_doc>
			</ecdhCurve>
			<dhparam>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Diffie Hellman parameters, required for Perfect Forward Secrecy.

		Use openssl dhparam to create it. Its key length should be greater than or equal to 1024 bits,
		otherwise it throws an error. It is strongly recommended to use 2048 bits or more for stronger security.
		If omitted or invalid, it is silently discarded and DHE ciphers won't be available.</haxe_doc>
			</dhparam>
			<crl>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>PEM encoded CRLs (Certificate Revocation List)</haxe_doc>
			</crl>
			<ciphers>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>ciphers to use or exclude.

		To mitigate BEAST attacks it is recommended that you use this option in conjunction with the `honorCipherOrder`
		option described below to prioritize the non-CBC cipher.

		Defaults to AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH.

		Consult the OpenSSL cipher list format documentation for details on the format.
		ECDH (Elliptic Curve Diffie-Hellman) ciphers are not yet supported.</haxe_doc>
			</ciphers>
			<cert>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>certificate key of the server in PEM format.</haxe_doc>
			</cert>
			<ca>
				<x path="Null"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>trusted certificates in PEM format.
		If this is omitted several well known "root" CAs will be used, like VeriSign.
		These are used to authorize connections.</haxe_doc>
			</ca>
			<SNICallback>
				<x path="Null"><f a="servername:cb">
	<c path="String"/>
	<f a="">
		<c path="js.lib.Error"/>
		<c path="js.node.tls.SecureContext"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function that will be called if client supports SNI TLS extension.
		Two argument will be passed to it: `servername`, and `cb`.
		SNICallback should invoke `cb(null, ctx)`, where `ctx` is a SecureContext instance.
		(You can use tls.createSecureContext(...) to get proper `SecureContext`).
		If `SNICallback` wasn't provided - default callback with high-level API will be used.</haxe_doc>
			</SNICallback>
			<NPNProtocols>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="String"/></c>
	<t path="js.node.Buffer"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>possible NPN protocols. (Protocols should be ordered by their priority).</haxe_doc>
			</NPNProtocols>
		</a>
		<haxe_doc>Base structure for options object used in tls methods.</haxe_doc>
	</typedef>
	<typedef path="js.node.TlsConnectOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Tls.hx" module="js.node.Tls"><a>
	<socket>
		<x path="Null"><c path="js.node.net.Socket"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Establish secure connection on a given socket rather than creating a new socket.
		If this option is specified, `host` and `port` are ignored.</haxe_doc>
	</socket>
	<sessionIdContext>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>opaque identifier for session resumption.
		If `requestCert` is true, the default is MD5 hash value generated from command-line.
		Otherwise, the default is not provided.</haxe_doc>
	</sessionIdContext>
	<session>
		<x path="Null"><t path="js.node.Buffer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A Buffer instance, containing TLS session.</haxe_doc>
	</session>
	<servername>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Servername for SNI (Server Name Indication) TLS extension.</haxe_doc>
	</servername>
	<secureProtocol>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The SSL method to use, e.g. SSLv3_method to force SSL version 3.
		The possible values depend on your installation of OpenSSL and are defined in the constant SSL_METHODS.</haxe_doc>
	</secureProtocol>
	<requestOCSP>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true - OCSP status request extension would be added to client hello,
		and OCSPResponse event will be emitted on socket before establishing secure communication</haxe_doc>
	</requestOCSP>
	<rejectUnauthorized>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true the server will reject any connection which is not authorized with the list of supplied CAs.
		This option only has an effect if `requestCert` is true.
		Default: false.</haxe_doc>
	</rejectUnauthorized>
	<port>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Port the client should connect to</haxe_doc>
	</port>
	<pfx>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>private key, certificate and CA certs of the server in PFX or PKCS12 format.</haxe_doc>
	</pfx>
	<path>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Creates unix socket connection to path.
		If this option is specified, host and port are ignored.</haxe_doc>
	</path>
	<passphrase>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>passphrase for the private key or pfx.</haxe_doc>
	</passphrase>
	<key>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>private key of the server in PEM format.</haxe_doc>
	</key>
	<host>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Host the client should connect to.
		Defaults to 'localhost'</haxe_doc>
	</host>
	<honorCipherOrder>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>When choosing a cipher, use the server's preferences instead of the client preferences.
		Default: true.</haxe_doc>
	</honorCipherOrder>
	<ecdhCurve>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>named curve to use for ECDH key agreement or false to disable ECDH.

		Defaults to prime256v1 (NIST P-256). Use `Crypto.getCurves` to obtain a list of available curve names.
		On recent releases, openssl ecparam -list_curves will also display the name and description
		of each available elliptic curve.</haxe_doc>
	</ecdhCurve>
	<dhparam>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Diffie Hellman parameters, required for Perfect Forward Secrecy.

		Use openssl dhparam to create it. Its key length should be greater than or equal to 1024 bits,
		otherwise it throws an error. It is strongly recommended to use 2048 bits or more for stronger security.
		If omitted or invalid, it is silently discarded and DHE ciphers won't be available.</haxe_doc>
	</dhparam>
	<crl>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>PEM encoded CRLs (Certificate Revocation List)</haxe_doc>
	</crl>
	<ciphers>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>ciphers to use or exclude.

		To mitigate BEAST attacks it is recommended that you use this option in conjunction with the `honorCipherOrder`
		option described below to prioritize the non-CBC cipher.

		Defaults to AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH.

		Consult the OpenSSL cipher list format documentation for details on the format.
		ECDH (Elliptic Curve Diffie-Hellman) ciphers are not yet supported.</haxe_doc>
	</ciphers>
	<checkServerIdentity>
		<x path="Null"><f a=":">
	<c path="String"/>
	<a/>
	<d/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>An override for checking server's hostname against the certificate.
		Should return an error if verification fails. Return `js.Lib.undefined` if passing.</haxe_doc>
	</checkServerIdentity>
	<cert>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>certificate key of the server in PEM format.</haxe_doc>
	</cert>
	<ca>
		<x path="Null"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>trusted certificates in PEM format.
		If this is omitted several well known "root" CAs will be used, like VeriSign.
		These are used to authorize connections.</haxe_doc>
	</ca>
	<NPNProtocols>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="String"/></c>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>possible NPN protocols. (Protocols should be ordered by their priority).</haxe_doc>
	</NPNProtocols>
</a></typedef>
	<class path="js.node.Tls" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Tls.hx" extern="1">
		<CLIENT_RENEG_LIMIT public="1" static="1">
			<x path="Int"/>
			<haxe_doc>renegotiation limit, default is 3.</haxe_doc>
		</CLIENT_RENEG_LIMIT>
		<CLIENT_RENEG_WINDOW public="1" static="1">
			<x path="Int"/>
			<haxe_doc>renegotiation window in seconds, default is 10 minutes.</haxe_doc>
		</CLIENT_RENEG_WINDOW>
		<SLAB_BUFFER_SIZE public="1" static="1">
			<x path="Int"/>
			<haxe_doc>Size of slab buffer used by all tls servers and clients. Default: 10 * 1024 * 1024.

		Don't change the defaults unless you know what you are doing.</haxe_doc>
		</SLAB_BUFFER_SIZE>
		<getCiphers public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an array with the names of the supported SSL ciphers.</haxe_doc>
		</getCiphers>
		<createServer public="1" set="method" static="1">
			<f a="options:?secureConnectionListener">
				<t path="js.node.TlsCreateServerOptions"/>
				<f a="">
					<c path="js.node.tls.TLSSocket"/>
					<x path="Void"/>
				</f>
				<c path="js.node.tls.Server"/>
			</f>
			<haxe_doc>Creates a new `Server`.
		The `connectionListener` argument is automatically set as a listener for the 'secureConnection' event.</haxe_doc>
		</createServer>
		<connect public="1" set="method" static="1">
			<f a="options:?callback">
				<t path="js.node.TlsConnectOptions"/>
				<f a=""><x path="Void"/></f>
				<c path="js.node.tls.TLSSocket"/>
			</f>
			<haxe_doc>Creates a new client connection to the given `port` and `host` (old API) or `options.port` and `options.host`.
		If `host` is omitted, it defaults to 'localhost'.</haxe_doc>
			<overloads>
				<connect public="1" set="method">
					<f a="port:?callback">
						<x path="Int"/>
						<f a=""><x path="Void"/></f>
						<c path="js.node.tls.TLSSocket"/>
					</f>
					<haxe_doc>Creates a new client connection to the given `port` and `host` (old API) or `options.port` and `options.host`.
		If `host` is omitted, it defaults to 'localhost'.</haxe_doc>
				</connect>
				<connect public="1" set="method">
					<f a="port:options:?callback">
						<x path="Int"/>
						<t path="js.node.TlsConnectOptions"/>
						<f a=""><x path="Void"/></f>
						<c path="js.node.tls.TLSSocket"/>
					</f>
					<haxe_doc>Creates a new client connection to the given `port` and `host` (old API) or `options.port` and `options.host`.
		If `host` is omitted, it defaults to 'localhost'.</haxe_doc>
				</connect>
				<connect public="1" set="method">
					<f a="port:host:?callback">
						<x path="Int"/>
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<c path="js.node.tls.TLSSocket"/>
					</f>
					<haxe_doc>Creates a new client connection to the given `port` and `host` (old API) or `options.port` and `options.host`.
		If `host` is omitted, it defaults to 'localhost'.</haxe_doc>
				</connect>
				<connect public="1" set="method">
					<f a="port:host:options:?callback">
						<x path="Int"/>
						<c path="String"/>
						<t path="js.node.TlsConnectOptions"/>
						<f a=""><x path="Void"/></f>
						<c path="js.node.tls.TLSSocket"/>
					</f>
					<haxe_doc>Creates a new client connection to the given `port` and `host` (old API) or `options.port` and `options.host`.
		If `host` is omitted, it defaults to 'localhost'.</haxe_doc>
				</connect>
			</overloads>
		</connect>
		<createSecureContext public="1" set="method" static="1">
			<f a="?details">
				<x path="Null"><t path="js.node.tls.SecureContextOptions"/></x>
				<c path="js.node.tls.SecureContext"/>
			</f>
			<haxe_doc>Creates a credentials object.</haxe_doc>
		</createSecureContext>
		<createSecurePair public="1" set="method" static="1">
			<f a="?context:?isServer:?requestCert:?rejectUnauthorized">
				<c path="js.node.tls.SecureContext"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.node.tls.SecurePair"/>
			</f>
			<haxe_doc>Creates a new secure pair object with two streams, one of which reads/writes encrypted data,
		and one reads/writes cleartext data.
		Generally the encrypted one is piped to/from an incoming encrypted data stream,
		and the cleartext one is used as a replacement for the initial encrypted stream.</haxe_doc>
		</createSecurePair>
		<haxe_doc>The tls module uses OpenSSL to provide Transport Layer Security
	and/or Secure Socket Layer: encrypted stream communication.</haxe_doc>
		<meta><m n=":jsRequire"><e>"tls"</e></m></meta>
	</class>
	<class path="js.node.Url" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Url.hx" extern="1">
		<domainToASCII public="1" set="method" static="1">
			<f a="domain">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the Punycode ASCII serialization of the `domain`. If `domain` is an invalid domain, the empty string is returned.

		It performs the inverse operation to `url.domainToUnicode()`.</haxe_doc>
		</domainToASCII>
		<domainToUnicode public="1" set="method" static="1">
			<f a="domain">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the Unicode serialization of the `domain`. If `domain` is an invalid domain, the empty string is returned.

		It performs the inverse operation to `url.dmainToASCII()`.</haxe_doc>
		</domainToUnicode>
		<fileURLToPath public="1" set="method" static="1">
			<f a="url">
				<c path="js.node.url.URL"/>
				<c path="String"/>
			</f>
			<haxe_doc>This function ensures the correct decodings of percent-encoded characters as well as ensuring a cross-platform valid absolute path string.</haxe_doc>
			<overloads><fileURLToPath public="1" set="method">
	<f a="url">
		<c path="String"/>
		<c path="String"/>
	</f>
	<haxe_doc>This function ensures the correct decodings of percent-encoded characters as well as ensuring a cross-platform valid absolute path string.</haxe_doc>
</fileURLToPath></overloads>
		</fileURLToPath>
		<format public="1" set="method" static="1">
			<f a="url:?options">
				<c path="js.node.url.URL"/>
				<x path="Null"><t path="js.node.UrlFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a customizable serialization of a URL `String` representation of a [WHATWG URL](https://nodejs.org/api/url.html#url_the_whatwg_url_api) object.

		The URL object has both a `toString()` method and href property that return string serializations of the URL.
		These are not, however, customizable in any way.
		The `url.format(URL[, options])` method allows for basic customization of the output.

		`format(urlObject:UrlObject)` and `format(urlObject:String)` are deprecated.</haxe_doc>
			<overloads>
				<format public="1" set="method">
					<f a="urlObject">
						<t path="js.node.UrlObject"/>
						<c path="String"/>
					</f>
					<haxe_doc>Returns a customizable serialization of a URL `String` representation of a [WHATWG URL](https://nodejs.org/api/url.html#url_the_whatwg_url_api) object.

		The URL object has both a `toString()` method and href property that return string serializations of the URL.
		These are not, however, customizable in any way.
		The `url.format(URL[, options])` method allows for basic customization of the output.

		`format(urlObject:UrlObject)` and `format(urlObject:String)` are deprecated.</haxe_doc>
				</format>
				<format public="1" set="method">
					<f a="urlObject">
						<c path="String"/>
						<c path="String"/>
					</f>
					<haxe_doc>Returns a customizable serialization of a URL `String` representation of a [WHATWG URL](https://nodejs.org/api/url.html#url_the_whatwg_url_api) object.

		The URL object has both a `toString()` method and href property that return string serializations of the URL.
		These are not, however, customizable in any way.
		The `url.format(URL[, options])` method allows for basic customization of the output.

		`format(urlObject:UrlObject)` and `format(urlObject:String)` are deprecated.</haxe_doc>
				</format>
			</overloads>
		</format>
		<pathToFileURL public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="js.node.url.URL"/>
			</f>
			<haxe_doc>This function ensures that `path` is resolved absolutely,
		and that the URL control characters are correctly encoded when converting into a File URL.</haxe_doc>
		</pathToFileURL>
		<parse public="1" set="method" static="1">
			<f a="urlString:?parseQueryString:?slashesDenoteHost">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<t path="js.node.UrlObject"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Takes a URL string, parses it, and returns a URL object.

		If `parseQueryString` is true, the `query` property will always be set to an object returned by the `Querystring.parse` method.
		If false, the `query` property on the returned URL object will be an unparsed, undecoded string.
		Defaults to false.

		If `slashesDenoteHost` is true, the first token after the literal string `//` and preceding the next `/` will be interpreted as the host.
		For instance, given `//foo/bar`, the result would be `{host: 'foo', pathname: '/bar'}` rather than `{pathname: '//foo/bar'}`.
		Defaults to false.</haxe_doc>
		</parse>
		<resolve public="1" set="method" static="1">
			<f a="from:to">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Resolves a target URL relative to a base URL in a manner similar to that of a Web browser resolving an anchor tag HREF.

		Examples:

		```haxe
		resolve('/one/two/three', 'four')         // '/one/two/four'
		resolve('http://example.com/', '/one')    // 'http://example.com/one'
		resolve('http://example.com/one', '/two') // 'http://example.com/two'
		```</haxe_doc>
		</resolve>
		<haxe_doc>The `url` module provides utilities for URL resolution and parsing.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":jsRequire"><e>"url"</e></m>
		</meta>
	</class>
	<typedef path="js.node.UrlFormatOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Url.hx" module="js.node.Url"><a>
	<unicode>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>`true` if Unicode characters appearing in the host component of the URL string should be encoded directly as opposed to being Punycode encoded.

		Default: `false`.</haxe_doc>
	</unicode>
	<search>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>`true` if the serialized URL string should include the search query, `false` otherwise.

		Default: `true`.</haxe_doc>
	</search>
	<fragment>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>`true` if the serialized URL string should include the fragment, `false` otherwise.

		Default: `true`.</haxe_doc>
	</fragment>
	<auth>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>`true` if the serialized URL string should include the username and password, `false` otherwise.

		Default: `true`.</haxe_doc>
	</auth>
</a></typedef>
	<typedef path="js.node.UrlObject" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Url.hx" module="js.node.Url">
		<a>
			<slashes>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>True if two ASCII forward-slash characters (`/`) are required following the colon in the `protocol`.</haxe_doc>
			</slashes>
			<search>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The entire "query string" portion of the URL, including the leading ASCII question mark (`?`) character.

		For example: '?query=string'

		No decoding of the query string is performed.</haxe_doc>
			</search>
			<query>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.DynamicAccess"><c path="String"/></x>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[Either the query string without the leading ASCII question mark (`?`),
		or an object returned by the `Querystring.parse` method.

		Whether the `query` property is a string or object is determined by the `parseQueryString` argument passed to `Url.parse`.

		For example: 'query=string' or {'query': 'string'}

		If returned as a string, no decoding of the query string is performed.
		If returned as an object, both keys and values are decoded.

		The type of this field can be implicitly converted to `String` or `DynamicAccess<String>`,
		where either one is expected, so if you know the actual type, just assign it
		to properly typed variable (e.g. var s:String = url.query)]]></haxe_doc>
			</query>
			<protocol>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The URL's lower-cased protocol scheme.

		For example: 'http:'</haxe_doc>
			</protocol>
			<port>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The numeric port portion of the `host` component.

		For example: '8080'</haxe_doc>
			</port>
			<pathname>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The entire path section of the URL. This is everything following the `host` (including the `port`) and
		before the start of the `query` or `hash` components, delimited by either the ASCII question mark (`?`) or
		hash (`#`) characters.

		For example '/p/a/t/h'

		No decoding of the path string is performed.</haxe_doc>
			</pathname>
			<path>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Concatenation of the `pathname` and `search` components.

		For example: '/p/a/t/h?query=string'

		No decoding of the path is performed.</haxe_doc>
			</path>
			<href>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The full URL string that was parsed with both the `protocol` and `host` components converted to lower-case.

		For example: 'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</haxe_doc>
			</href>
			<hostname>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The lower-cased host name portion of the `host` component without the `port` included.

		For example: 'host.com'</haxe_doc>
			</hostname>
			<host>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The full lower-cased host portion of the URL, including the `port` if specified.

		For example: 'host.com:8080'</haxe_doc>
			</host>
			<hash>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The "fragment" portion of the URL including the leading ASCII hash (`#`) character.

		For example: '#hash'</haxe_doc>
			</hash>
			<auth>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The username and password portion of the URL, also referred to as "userinfo".
		This string subset follows the `protocol` and double slashes (if present) and precedes the `host` component,
		delimited by an ASCII "at sign" (`@`).

		The format of the string is `{username}[:{password}]`, with the `[:{password}]` portion being optional.

		For example: 'user:pass'</haxe_doc>
			</auth>
		</a>
		<haxe_doc>Parsed URL objects have some or all of the following fields, depending on whether or not they exist in the URL string.
	Any parts that are not in the URL string will not be in the parsed object.</haxe_doc>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.node.Util" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Util.hx" extern="1">
		<callbackify public="1" set="method" static="1">
			<f a="original:args">
				<x path="haxe.Function"/>
				<x path="haxe.extern.Rest"><d/></x>
				<f a=":">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Null"><d/></x>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc><![CDATA[Takes an `async` function (or a function that returns a `Promise`) and returns a function following the
		error-first callback style, i.e. taking an `(err, value) => ...` callback as the last argument.

		@see https://nodejs.org/api/util.html#util_util_callbackify_original]]></haxe_doc>
		</callbackify>
		<debuglog public="1" set="method" static="1">
			<f a="section">
				<c path="String"/>
				<f a="">
					<x path="haxe.extern.Rest"><d/></x>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>The `util.debuglog()` method is used to create a function that conditionally writes debug messages to `stderr`
		based on the existence of the `NODE_DEBUG` environment variable.

		@see https://nodejs.org/api/util.html#util_util_debuglog_section</haxe_doc>
		</debuglog>
		<deprecate public="1" params="T" set="method" static="1">
			<f a="fun:msg:?code">
				<c path="deprecate.T"/>
				<c path="String"/>
				<c path="String"/>
				<c path="deprecate.T"/>
			</f>
			<haxe_doc>The `util.deprecate()` method wraps `fn` (which may be a function or class) in such a way that it is marked
		asdeprecated.

		@see https://nodejs.org/api/util.html#util_util_deprecate_fn_msg_code</haxe_doc>
		</deprecate>
		<format public="1" set="method" static="1">
			<f a="format:args">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>The `util.format()` method returns a formatted string using the first argument as a `printf`-like format string
		which can contain zero or more format specifiers.

		@see https://nodejs.org/api/util.html#util_util_format_format_args</haxe_doc>
			<overloads><format public="1" set="method">
	<f a="args">
		<x path="haxe.extern.Rest"><d/></x>
		<c path="String"/>
	</f>
	<haxe_doc>The `util.format()` method returns a formatted string using the first argument as a `printf`-like format string
		which can contain zero or more format specifiers.

		@see https://nodejs.org/api/util.html#util_util_format_format_args</haxe_doc>
</format></overloads>
		</format>
		<formatWithOptions public="1" set="method" static="1">
			<f a="inspectOptions:format:args">
				<t path="js.node.InspectOptions"/>
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>This function is identical to `util.format()`, except in that it takes an `inspectOptions` argument which
		specifies options that are passed along to `util.inspect()`.

		@see https://nodejs.org/api/util.html#util_util_formatwithoptions_inspectoptions_format_args</haxe_doc>
			<overloads><formatWithOptions public="1" set="method">
	<f a="inspectOptions:args">
		<t path="js.node.InspectOptions"/>
		<x path="haxe.extern.Rest"><d/></x>
		<c path="String"/>
	</f>
	<haxe_doc>This function is identical to `util.format()`, except in that it takes an `inspectOptions` argument which
		specifies options that are passed along to `util.inspect()`.

		@see https://nodejs.org/api/util.html#util_util_formatwithoptions_inspectoptions_format_args</haxe_doc>
</formatWithOptions></overloads>
		</formatWithOptions>
		<getSystemErrorName public="1" set="method" static="1">
			<f a="err">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the string name for a numeric error code that comes from a Node.js API.

		@see https://nodejs.org/api/util.html#util_util_getsystemerrorname_err</haxe_doc>
		</getSystemErrorName>
		<inherits public="1" set="method" static="1">
			<f a="constructor:superConstructor">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Inherit the prototype methods from one `constructor` into another.

		@see https://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor</haxe_doc>
		</inherits>
		<inspect public="1" set="method" static="1">
			<f a="object:?options">
				<d/>
				<x path="Null"><t path="js.node.InspectOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>The `util.inspect()` method returns a string representation of `object` that is intended for debugging.

		@see https://nodejs.org/api/util.html#util_util_inspect_object_options</haxe_doc>
			<overloads><inspect public="1" set="method">
	<f a="object:?showHidden:?depth:?colors">
		<d/>
		<x path="Bool"/>
		<x path="Int"/>
		<x path="Bool"/>
		<c path="String"/>
	</f>
	<haxe_doc>The `util.inspect()` method returns a string representation of `object` that is intended for debugging.

		@see https://nodejs.org/api/util.html#util_util_inspect_object_options</haxe_doc>
</inspect></overloads>
		</inspect>
		<isDeepStrictEqual public="1" set="method" static="1">
			<f a="val1:val2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if there is deep strict equality between `val1` and `val2`.

		@see https://nodejs.org/api/util.html#util_util_isdeepstrictequal_val1_val2</haxe_doc>
		</isDeepStrictEqual>
		<promisify public="1" set="method" static="1">
			<f a="original">
				<x path="haxe.Function"/>
				<f a="">
					<x path="haxe.extern.Rest"><d/></x>
					<c path="js.lib.Promise"><d/></c>
				</f>
			</f>
			<haxe_doc><![CDATA[Takes a function following the common error-first callback style, i.e. taking an `(err, value) => ...` callback
		as the last argument, and returns a version that returns promises.

		@see https://nodejs.org/api/util.html#util_util_promisify_original]]></haxe_doc>
		</promisify>
		<debug public="1" set="method" static="1">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"Use js.Node.console.error instead"</e></m></meta>
			<haxe_doc>Deprecated predecessor of `Console.error`.</haxe_doc>
		</debug>
		<error public="1" set="method" static="1">
			<f a="args">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"Use js.Node.console.error instead"</e></m></meta>
			<haxe_doc>Deprecated predecessor of console.error.</haxe_doc>
		</error>
		<isArray public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is an Array. false otherwise.</haxe_doc>
		</isArray>
		<isBoolean public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is a Bool. false otherwise.</haxe_doc>
		</isBoolean>
		<isBuffer public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is a Buffer. false otherwise.</haxe_doc>
		</isBuffer>
		<isDate public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is a Date. false otherwise.</haxe_doc>
		</isDate>
		<isError public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is an Error. false otherwise.</haxe_doc>
		</isError>
		<isFunction public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is a Function. false otherwise.</haxe_doc>
		</isFunction>
		<isNull public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is strictly null. false otherwise.</haxe_doc>
		</isNull>
		<isNullOrUndefined public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is null or undefined. false otherwise.</haxe_doc>
		</isNullOrUndefined>
		<isNumber public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is a Float. false otherwise.</haxe_doc>
		</isNumber>
		<isObject public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is strictly an Object and not a Function. false otherwise.</haxe_doc>
		</isObject>
		<isPrimitive public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is a primitive type. false otherwise.</haxe_doc>
		</isPrimitive>
		<isRegExp public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is a RegExp. false otherwise.</haxe_doc>
		</isRegExp>
		<isString public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is a String. false otherwise.</haxe_doc>
		</isString>
		<isSymbol public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is a Symbol. false otherwise.</haxe_doc>
		</isSymbol>
		<isUndefined public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Returns true if the given "object" is undefined. false otherwise.</haxe_doc>
		</isUndefined>
		<log public="1" set="method" static="1">
			<f a="args">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Output with timestamp on stdout.</haxe_doc>
		</log>
		<print public="1" set="method" static="1">
			<f a="args">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"Use js.Node.console.log instead"</e></m></meta>
			<haxe_doc>Deprecated predecessor of console.log.</haxe_doc>
		</print>
		<puts public="1" set="method" static="1">
			<f a="args">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"Use js.Node.console.log instead"</e></m></meta>
			<haxe_doc>Deprecated predecessor of console.log.</haxe_doc>
		</puts>
		<pump public="1" set="method" static="1">
			<f a="readableStream:writableStream:?callback">
				<c path="js.node.stream.IReadable"/>
				<c path="js.node.stream.IWritable"/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"Use `readableStream.pipe(writableStream)` instead"</e></m></meta>
			<haxe_doc>Deprecated predecessor of stream.pipe().</haxe_doc>
		</pump>
		<haxe_doc>The `util` module is primarily designed to support the needs of Node.js' own internal APIs.

	@see https://nodejs.org/api/util.html#util_util</haxe_doc>
		<meta><m n=":jsRequire"><e>"util"</e></m></meta>
	</class>
	<typedef path="js.node.InspectOptionsBase" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Util.hx" module="js.node.Util">
		<a>
			<showHidden>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If `true`, `object`'s non-enumerable symbols and properties are included in the formatted result.
		`WeakMap` and `WeakSet` entries are also included.

		Default: `false`.</haxe_doc>
			</showHidden>
			<depth>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Specifies the number of times to recurse while formatting `object`.
		This is useful for inspecting large objects. To recurse up to the maximum call stack size pass `Infinity` or
		`null`.

		Default: `2`.</haxe_doc>
			</depth>
			<colors>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If `true`, the output is styled with ANSI color codes.
		Colors are customizable.
		See Customizing `util.inspect` colors.

		Default: `false`.</haxe_doc>
			</colors>
		</a>
		<haxe_doc>Options object used by `Console.dir`.</haxe_doc>
	</typedef>
	<typedef path="js.node.InspectOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/Util.hx" module="js.node.Util">
		<a>
			<sorted>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<f a=":">
		<d/>
		<d/>
		<x path="Int"/>
	</f>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If set to `true` or a function, all properties of an object, and `Set` and `Map` entries are sorted in the
		resulting string.
		If set to `true` the default sort is used.
		If set to a function, it is used as a compare function.</haxe_doc>
			</sorted>
			<showProxy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If `true`, `Proxy` inspection includes the `target` and `handler` objects.

		Default: `false`.</haxe_doc>
			</showProxy>
			<showHidden>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If `true`, `object`'s non-enumerable symbols and properties are included in the formatted result.
		`WeakMap` and `WeakSet` entries are also included.

		Default: `false`.</haxe_doc>
			</showHidden>
			<maxArrayLength>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Specifies the maximum number of `Array`, `TypedArray`, `WeakMap` and `WeakSet` elements to include when
		formatting.
		Set to `null` or `Infinity` to show all elements.
		Set to `0` or negative to show no elements.

		Default: `100`.</haxe_doc>
			</maxArrayLength>
			<getters>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If set to `true`, getters are inspected.
		If set to `'get'`, only getters without a corresponding setter are inspected.
		If set to `'set'`, only getters with a corresponding setter are inspected.
		This might cause side effects depending on the getter function.

		Default: `false`.</haxe_doc>
			</getters>
			<depth>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Specifies the number of times to recurse while formatting `object`.
		This is useful for inspecting large objects. To recurse up to the maximum call stack size pass `Infinity` or
		`null`.

		Default: `2`.</haxe_doc>
			</depth>
			<customInspect>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If `false`, `[util.inspect.custom](depth, opts)` functions are not invoked.

		Default: `true`.</haxe_doc>
			</customInspect>
			<compact>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<x path="Int"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Setting this to `false` causes each object key to be displayed on a new line.
		It will also add new lines to text that is longer than `breakLength`.
		If set to a number, the most `n` inner elements are united on a single line as long as all properties fit into
		`breakLength`.
		Short array elements are also grouped together.
		No text will be reduced below 16 characters, no matter the `breakLength` size.
		For more information, see the example below.

		Default: `3`.</haxe_doc>
			</compact>
			<colors>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If `true`, the output is styled with ANSI color codes.
		Colors are customizable.
		See Customizing `util.inspect` colors.

		Default: `false`.</haxe_doc>
			</colors>
			<breakLength>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[The length at which input values are split across multiple lines.
		Set to `Infinity` to format the input as a single line (in combination with `compact` set to `true` or any
		number >= `1`).

		Default: `80`.]]></haxe_doc>
			</breakLength>
		</a>
		<haxe_doc>Options object used by `Util.inspect`.</haxe_doc>
	</typedef>
	<class path="js.node.buffer.Buffer" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/buffer/Buffer.hx" extern="1">
		<extends path="js.lib.Uint8Array"/>
		<alloc public="1" set="method" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding</haxe_doc>
			<overloads>
				<alloc public="1" set="method">
					<f a="size:fill:?encoding">
						<x path="Int"/>
						<c path="String"/>
						<c path="String"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding</haxe_doc>
				</alloc>
				<alloc public="1" set="method">
					<f a="size:fill">
						<x path="Int"/>
						<c path="js.lib.Uint8Array"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding</haxe_doc>
				</alloc>
				<alloc public="1" set="method">
					<f a="size:fill">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding</haxe_doc>
				</alloc>
			</overloads>
		</alloc>
		<allocUnsafe public="1" set="method" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `size` is larger than
		`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`
		is thrown. A zero-length `Buffer` is created if `size` is 0.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size</haxe_doc>
		</allocUnsafe>
		<allocUnsafeSlow public="1" set="method" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Allocates a new `Buffer` of `size` bytes. If `size` is larger than
		`buffer.constants.MAX_LENGTH` or smaller than 0, `ERR_INVALID_OPT_VALUE`
		is thrown. A zero-length `Buffer` is created if `size` is 0.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafeslow_size</haxe_doc>
		</allocUnsafeSlow>
		<byteLength public="1" set="method" static="1">
			<f a="string">
				<c path="js.node.buffer.Buffer"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the actual byte length of a string. This is not the same as
		`String.prototype.length` since that returns the number of characters in
		a string.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding</haxe_doc>
			<overloads>
				<byteLength public="1" set="method">
					<f a="string:?encoding">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the actual byte length of a string. This is not the same as
		`String.prototype.length` since that returns the number of characters in
		a string.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding</haxe_doc>
				</byteLength>
				<byteLength public="1" set="method">
					<f a="string">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the actual byte length of a string. This is not the same as
		`String.prototype.length` since that returns the number of characters in
		a string.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding</haxe_doc>
				</byteLength>
				<byteLength public="1" set="method">
					<f a="string">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the actual byte length of a string. This is not the same as
		`String.prototype.length` since that returns the number of characters in
		a string.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding</haxe_doc>
				</byteLength>
			</overloads>
		</byteLength>
		<_byteLength public="1" get="inline" set="null" line="108" static="1">
			<f a="string:?encoding">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"><e>"In haxe 3.3+, use Buffer.byteLength instead!"</e></m>
			</meta>
		</_byteLength>
		<compareBuffers public="1" set="method" static="1">
			<f a="buf1:buf2">
				<c path="js.lib.Uint8Array"/>
				<c path="js.lib.Uint8Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"compare"</e></m></meta>
			<haxe_doc>Compares `buf1` to `buf2` typically for the purpose of sorting arrays of
		`Buffer` instances. This is equivalent to calling `buf1.compare(buf2)`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_compare_buf1_buf2</haxe_doc>
		</compareBuffers>
		<concat public="1" params="T" set="method" static="1">
			<f a="list:?totalLength">
				<c path="Array"><c path="concat.T"/></c>
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Returns a new `Buffer` which is the result of concatenating all the `Buffer` instances in the `list` together.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_concat_list_totallength</haxe_doc>
		</concat>
		<from public="1" set="method" static="1">
			<f a="string:?encoding">
				<c path="String"/>
				<c path="String"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
			<overloads>
				<from public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="arrayBuffer:?byteOffset:?length">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="buffer">
						<c path="js.lib.Uint8Array"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="object:?offset:?length">
						<a/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
				</from>
				<from public="1" set="method">
					<f a="object:?encoding:?length">
						<a/>
						<c path="String"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Allocates a new `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length
		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</haxe_doc>
				</from>
			</overloads>
		</from>
		<isBuffer public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `obj` is a `Buffer`, `false` otherwise.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isbuffer_obj</haxe_doc>
		</isBuffer>
		<isEncoding public="1" set="method" static="1">
			<f a="encoding">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `encoding` contains a supported character encoding, or `false` otherwise.

		@see https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isencoding_encoding</haxe_doc>
		</isEncoding>
		<poolSize public="1" static="1">
			<x path="Int"/>
			<haxe_doc>This is the size (in bytes) of pre-allocated internal `Buffer` instances used for pooling. This value may be modified.

		@see https://nodejs.org/api/buffer.html#buffer_class_property_buffer_poolsize</haxe_doc>
		</poolSize>
		<byteOffset public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>When setting `byteOffset` in `Buffer.from(ArrayBuffer, byteOffset, length)`
		or sometimes when allocating a buffer smaller than `Buffer.poolSize` the
		buffer doesn't start from a zero offset on the underlying `ArrayBuffer`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_byteoffset</haxe_doc>
		</byteOffset>
		<INSPECT_MAX_BYTES public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Default: `50`

		Returns the maximum number of bytes that will be returned when `buf.inspect()` is called.
		This can be overridden by user modules.
		See `util.inspect()` for more details on `buf.inspect()` behavior.

		This is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.

		@see https://nodejs.org/api/buffer.html#buffer_buffer_inspect_max_bytes</haxe_doc>
		</INSPECT_MAX_BYTES>
		<get_INSPECT_MAX_BYTES get="inline" set="null" line="664" static="1"><f a=""><x path="Int"/></f></get_INSPECT_MAX_BYTES>
		<set_INSPECT_MAX_BYTES get="inline" set="null" line="667" static="1"><f a="bytes">
	<x path="Int"/>
	<x path="Int"/>
</f></set_INSPECT_MAX_BYTES>
		<kMaxLength public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>An alias for `buffer.constants.MAX_LENGTH`.

		This is a property on the `buffer` module returned by `require('buffer')`, not on the `Buffer` global or a `Buffer` instance.

		@see https://nodejs.org/api/buffer.html#buffer_buffer_kmaxlength</haxe_doc>
		</kMaxLength>
		<get_kMaxLength get="inline" set="null" line="680" static="1"><f a=""><x path="Int"/></f></get_kMaxLength>
		<transcode public="1" get="inline" set="null" line="690" static="1">
			<f a="source:fromEnc:toEnc">
				<c path="js.lib.Uint8Array"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Re-encodes the given `Buffer` or `Uint8Array` instance from one character encoding to another.
		Returns a new `Buffer` instance.

		@see https://nodejs.org/api/buffer.html#buffer_buffer_transcode_source_fromenc_toenc</haxe_doc>
		</transcode>
		<constants public="1" set="null" static="1">
			<t path="js.node.buffer.BufferConstants"/>
			<haxe_doc>`buffer.constants` is a property on the `buffer` module returned by `require('buffer')`,
		not on the `Buffer` global or a `Buffer` instance.

		@see https://nodejs.org/api/buffer.html#buffer_buffer_constants</haxe_doc>
		</constants>
		<get_constants get="inline" set="null" line="702" static="1"><f a=""><t path="js.node.buffer.BufferConstants"/></f></get_constants>
		<hxFromBytes public="1" get="inline" set="null" line="718" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Create `Buffer` object from `haxe.io.Bytes` using the same underlying data storage.
		Any modifications done using the returned object will be reflected in given `haxe.io.Bytes` object.</haxe_doc>
		</hxFromBytes>
		<compare public="1" set="method">
			<f a="target:?targetStart:?targetEnd:?sourceStart:?sourceEnd">
				<c path="js.lib.Uint8Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `buf` with `target` and returns a number indicating whether `buf` comes before, after,
		or is the same as `target` in sort order. Comparison is based on the actual sequence of bytes in each `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend</haxe_doc>
			<overloads><compare public="1" set="method">
	<f a="target">
		<c path="js.lib.Uint8Array"/>
		<x path="Int"/>
	</f>
	<haxe_doc>Compares `buf` with `target` and returns a number indicating whether `buf` comes before, after,
		or is the same as `target` in sort order. Comparison is based on the actual sequence of bytes in each `Buffer`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend</haxe_doc>
</compare></overloads>
		</compare>
		<copy public="1" set="method">
			<f a="target:?targetStart:?sourceStart:?sourceEnd">
				<c path="js.lib.Uint8Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies data from a region of `buf` to a region in `target` even if the `target` memory region overlaps with `buf`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend</haxe_doc>
			<overloads><copy public="1" set="method">
	<f a="target">
		<c path="js.lib.Uint8Array"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Copies data from a region of `buf` to a region in `target` even if the `target` memory region overlaps with `buf`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend</haxe_doc>
</copy></overloads>
		</copy>
		<entries public="1" set="method" override="1">
			<f a=""><t path="js.node.Iterator"><x path="js.node.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Creates and returns an iterator of `[index, byte]` pairs from the contents of `buf`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_entries</haxe_doc>
		</entries>
		<equals public="1" set="method">
			<f a="otherBuffer">
				<c path="js.lib.Uint8Array"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if both `buf` and `otherBuffer` have exactly the same bytes, `false` otherwise.

		@see https://nodejs.org/api/buffer.html#buffer_buf_equals_otherbuffer</haxe_doc>
		</equals>
		<fill public="1" set="method" override="1">
			<f a="value:?offset:?end:?encoding">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Fills `buf` with the specified `value`. If the `offset` and `end` are not given, the entire `buf` will be filled:

		@see https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding</haxe_doc>
			<overloads>
				<fill public="1" set="method">
					<f a="value:?offset:?end">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Fills `buf` with the specified `value`. If the `offset` and `end` are not given, the entire `buf` will be filled:

		@see https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding</haxe_doc>
				</fill>
				<fill public="1" set="method">
					<f a="value:?offset:?end">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.node.buffer.Buffer"/>
					</f>
					<haxe_doc>Fills `buf` with the specified `value`. If the `offset` and `end` are not given, the entire `buf` will be filled:

		@see https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding</haxe_doc>
				</fill>
			</overloads>
		</fill>
		<includes public="1" set="method" override="1">
			<f a="value:?byteOffset:?encoding">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Equivalent to `buf.indexOf() !== -1`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding</haxe_doc>
			<overloads>
				<includes public="1" set="method">
					<f a="value:?byteOffset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Equivalent to `buf.indexOf() !== -1`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding</haxe_doc>
				</includes>
				<includes public="1" set="method">
					<f a="value:?byteOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Equivalent to `buf.indexOf() !== -1`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding</haxe_doc>
				</includes>
			</overloads>
		</includes>
		<indexOf public="1" set="method" override="1">
			<f a="value:?byteOffset:?encoding">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>If `value` is:

		- a string, `value` is interpreted according to the character encoding in `encoding`.
		- a `Buffer` or Uint8Array, `value` will be used in its entirety. To compare a partial `Buffer`, use buf.slice().
		- a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding</haxe_doc>
			<overloads>
				<indexOf public="1" set="method">
					<f a="value:?byteOffset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>If `value` is:

		- a string, `value` is interpreted according to the character encoding in `encoding`.
		- a `Buffer` or Uint8Array, `value` will be used in its entirety. To compare a partial `Buffer`, use buf.slice().
		- a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding</haxe_doc>
				</indexOf>
				<indexOf public="1" set="method">
					<f a="value:?byteOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>If `value` is:

		- a string, `value` is interpreted according to the character encoding in `encoding`.
		- a `Buffer` or Uint8Array, `value` will be used in its entirety. To compare a partial `Buffer`, use buf.slice().
		- a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding</haxe_doc>
				</indexOf>
			</overloads>
		</indexOf>
		<keys public="1" set="method" override="1">
			<f a=""><t path="js.node.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Creates and returns an iterator of `buf` keys (indices).

		@see https://nodejs.org/api/buffer.html#buffer_buf_keys</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method" override="1">
			<f a="value:?byteOffset:?encoding">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Identical to `buf.indexOf()`, except the last occurrence of `value` is found
		rather than the first occurrence.

		@see https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding</haxe_doc>
			<overloads>
				<lastIndexOf public="1" set="method">
					<f a="value:?byteOffset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Identical to `buf.indexOf()`, except the last occurrence of `value` is found
		rather than the first occurrence.

		@see https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding</haxe_doc>
				</lastIndexOf>
				<lastIndexOf public="1" set="method">
					<f a="value:?byteOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Identical to `buf.indexOf()`, except the last occurrence of `value` is found
		rather than the first occurrence.

		@see https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding</haxe_doc>
				</lastIndexOf>
			</overloads>
		</lastIndexOf>
		<readDoubleBE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 64-bit double from `buf` at the specified `offset` with specified endian format
		(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublebe_offset</haxe_doc>
		</readDoubleBE>
		<readDoubleLE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 64-bit double from `buf` at the specified `offset` with specified endian format
		(`readDoubleBE()` returns big endian, `readDoubleLE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readdoublele_offset</haxe_doc>
		</readDoubleLE>
		<readFloatBE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 32-bit float from `buf` at the specified `offset` with specified endian format
		(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatbe_offset</haxe_doc>
		</readFloatBE>
		<readFloatLE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Reads a 32-bit float from `buf` at the specified `offset` with specified endian format
		(`readFloatBE()` returns big endian, `readFloatLE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readfloatle_offset</haxe_doc>
		</readFloatLE>
		<readInt8 public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 8-bit integer from `buf` at the specified `offset`.

		https://nodejs.org/api/buffer.html#buffer_buf_readint8_offset</haxe_doc>
		</readInt8>
		<readInt16BE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format
		(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readint16be_offset</haxe_doc>
		</readInt16BE>
		<readInt16LE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 16-bit integer from `buf` at the specified `offset` with the specified endian format
		(`readInt16BE()` returns big endian, `readInt16LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readint16le_offset</haxe_doc>
		</readInt16LE>
		<readInt32BE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 32-bit integer from buf at the specified offset with the specified endian format
		(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset</haxe_doc>
		</readInt32BE>
		<readInt32LE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a signed 32-bit integer from buf at the specified offset with the specified endian format
		(`readInt32BE()` returns big endian, `readInt32LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset</haxe_doc>
		</readInt32LE>
		<readIntBE public="1" set="method">
			<f a="offset:byteLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result
		as a two's complement signed value. Supports up to 48 bits of accuracy.

		@see https://nodejs.org/api/buffer.html#buffer_buf_readintbe_offset_bytelength</haxe_doc>
		</readIntBE>
		<readIntLE public="1" set="method">
			<f a="offset:byteLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result
		as a two's complement signed value. Supports up to 48 bits of accuracy.

		@see https://nodejs.org/api/buffer.html#buffer_buf_readintle_offset_bytelength</haxe_doc>
		</readIntLE>
		<readUInt8 public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 8-bit integer from `buf` at the specified `offset`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_readuint8_offset</haxe_doc>
		</readUInt8>
		<readUInt16BE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format
		`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16be_offset</haxe_doc>
		</readUInt16BE>
		<readUInt16LE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 16-bit integer from `buf` at the specified `offset` with specified endian format
		(`readUInt16BE()` returns big endian, `readUInt16LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readuint16le_offset</haxe_doc>
		</readUInt16LE>
		<readUInt32BE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format
		(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset</haxe_doc>
		</readUInt32BE>
		<readUInt32LE public="1" set="method">
			<f a="?offset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads an unsigned 32-bit integer from `buf` at the specified `offset` with specified endian format
		(`readUInt32BE()` returns big endian, `readUInt32LE()` returns little endian).

		@see https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset</haxe_doc>
		</readUInt32LE>
		<subarray public="1" set="method" override="1">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Returns a new `Buffer` that references the same memory as the original,
		but offset and cropped by the `start` and `end` indices.

		@see https://nodejs.org/api/buffer.html#buffer_buf_subarray_start_end</haxe_doc>
		</subarray>
		<slice public="1" set="method" override="1">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.node.buffer.Buffer"/>
			</f>
			<haxe_doc>Returns a new `Buffer` that references the same memory as the original,
		but offset and cropped by the `start` and `end` indices.

		@see https://nodejs.org/api/buffer.html#buffer_buf_slice_start_end</haxe_doc>
		</slice>
		<swap16 public="1" set="method">
			<f a=""><c path="js.node.buffer.Buffer"/></f>
			<haxe_doc>Interprets `buf` as an array of unsigned 16-bit integers and swaps the
		byte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`
		is not a multiple of 2.

		@see https://nodejs.org/api/buffer.html#buffer_buf_swap16</haxe_doc>
		</swap16>
		<swap32 public="1" set="method">
			<f a=""><c path="js.node.buffer.Buffer"/></f>
			<haxe_doc>Interprets `buf` as an array of unsigned 32-bit integers and swaps the
		byte order in-place. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length`
		is not a multiple of 4.

		@see https://nodejs.org/api/buffer.html#buffer_buf_swap32</haxe_doc>
		</swap32>
		<swap64 public="1" set="method">
			<f a=""><c path="js.node.buffer.Buffer"/></f>
			<haxe_doc>Interprets `buf` as an array of 64-bit numbers and swaps byte order in-place.
		Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 8.

		@see https://nodejs.org/api/buffer.html#buffer_buf_swap64</haxe_doc>
		</swap64>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON representation of `buf`. `JSON.stringify()` implicitly calls
		this function when stringifying a `Buffer` instance.

		@see https://nodejs.org/api/buffer.html#buffer_buf_tojson</haxe_doc>
		</toJSON>
		<toString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Decodes `buf` to a string according to the specified character encoding in `encoding`.
		`start` and `end` may be passed to decode only a subset of `buf`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end</haxe_doc>
			<overloads><toString public="1" set="method">
	<f a="?encoding:?start:?end">
		<c path="String"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<haxe_doc>Decodes `buf` to a string according to the specified character encoding in `encoding`.
		`start` and `end` may be passed to decode only a subset of `buf`.

		@see https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end</haxe_doc>
</toString></overloads>
		</toString>
		<values public="1" set="method" override="1">
			<f a=""><t path="js.node.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Creates and returns an iterator for `buf` values (bytes). This function is called automatically
		when a `Buffer` is used in a `for..of` statement.

		@see https://nodejs.org/api/buffer.html#buffer_buf_values</haxe_doc>
		</values>
		<write public="1" set="method">
			<f a="string:?offset:?length:?encoding">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Writes `string` to `buf` at `offset` according to the character encoding in `encoding`.
		The `length` parameter is the number of bytes to write.
		If `buf` did not contain enough space to fit the entire `string`, only part of string will be written.
		However, partially encoded characters will not be written.

		@see https://nodejs.org/api/buffer.html#buffer_buf_write_string_offset_length_encoding</haxe_doc>
		</write>
		<writeDoubleBE public="1" set="method">
			<f a="value:?offset">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).
		`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublebe_value_offset</haxe_doc>
		</writeDoubleBE>
		<writeDoubleLE public="1" set="method">
			<f a="value:?offset">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeDoubleBE()` writes big endian, `writeDoubleLE()` writes little endian).
		`value` should be a valid 64-bit double. Behavior is undefined when `value` is anything other than a 64-bit double.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writedoublele_value_offset</haxe_doc>
		</writeDoubleLE>
		<writeFloatBE public="1" set="method">
			<f a="value:?offset">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).
		`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatbe_value_offset</haxe_doc>
		</writeFloatBE>
		<writeFloatLE public="1" set="method">
			<f a="value:?offset">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeFloatBE()` writes big endian, `writeFloatLE()` writes little endian).
		`value` should be a valid 32-bit float. Behavior is undefined when `value` is anything other than a 32-bit float.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writefloatle_value_offset</haxe_doc>
		</writeFloatLE>
		<writeInt8 public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset`. `value` should be a valid signed 8-bit integer.
		Behavior is undefined when `value` is anything other than a signed 8-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeint8_value_offset</haxe_doc>
		</writeInt8>
		<writeInt16BE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).
		`value` should be a valid signed 16-bit integer.
		Behavior is undefined when value is anything other than a signed 16-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16be_value_offset</haxe_doc>
		</writeInt16BE>
		<writeInt16LE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeInt16BE()` writes big endian, `writeInt16LE()` writes little endian).
		`value` should be a valid signed 16-bit integer.
		Behavior is undefined when value is anything other than a signed 16-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeint16le_value_offset</haxe_doc>
		</writeInt16LE>
		<writeInt32BE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).
		`value` should be a valid signed 32-bit integer.
		Behavior is undefined when `value` is anything other than a signed 32-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32be_value_offset</haxe_doc>
		</writeInt32BE>
		<writeInt32LE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeInt32BE()` writes big endian, `writeInt32LE()` writes little endian).
		`value` should be a valid signed 32-bit integer.
		Behavior is undefined when `value` is anything other than a signed 32-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeint32le_value_offset</haxe_doc>
		</writeInt32LE>
		<writeIntBE public="1" set="method">
			<f a="value:offset:byteLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Writes `byteLength` bytes of `value` to `buf` at the specified `offset`.
		Supports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeintbe_value_offset_bytelength</haxe_doc>
		</writeIntBE>
		<writeIntLE public="1" set="method">
			<f a="value:offset:byteLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Writes `byteLength` bytes of `value` to `buf` at the specified `offset`.
		Supports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeintle_value_offset_bytelength</haxe_doc>
		</writeIntLE>
		<writeUInt8 public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset`. `value` should be a valid unsigned 8-bit integer.
		Behavior is undefined when `value` is anything other than an unsigned 8-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint8_value_offset</haxe_doc>
		</writeUInt8>
		<writeUInt16BE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).
		`value` should be a valid unsigned 16-bit integer.
		Behavior is undefined when `value` is anything other than an unsigned 16-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16be_value_offset</haxe_doc>
		</writeUInt16BE>
		<writeUInt16LE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeUInt16BE()` writes big endian, `writeUInt16LE()` writes little endian).
		`value` should be a valid unsigned 16-bit integer.
		Behavior is undefined when `value` is anything other than an unsigned 16-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint16le_value_offset</haxe_doc>
		</writeUInt16LE>
		<writeUInt32BE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).
		`value` should be a valid unsigned 32-bit integer.
		Behavior is undefined when `value` is anything other than an unsigned 32-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32be_value_offset</haxe_doc>
		</writeUInt32BE>
		<writeUInt32LE public="1" set="method">
			<f a="value:?offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes `value` to `buf` at the specified `offset` with specified endian format
		(`writeUInt32BE()` writes big endian, `writeUInt32LE()` writes little endian).
		`value` should be a valid unsigned 32-bit integer.
		Behavior is undefined when `value` is anything other than an unsigned 32-bit integer.

		@see https://nodejs.org/api/buffer.html#buffer_buf_writeuint32le_value_offset</haxe_doc>
		</writeUInt32LE>
		<hxToBytes public="1" get="inline" set="null" line="710">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Create `haxe.io.Bytes` object that uses the same underlying data storage as `this` buffer.
		Any modifications done using the returned object will be reflected in the `this` buffer.</haxe_doc>
		</hxToBytes>
		<new public="1" set="method">
			<f a="string:?encoding">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<haxe_doc>Allocates a new buffer.

		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":deprecated"/></meta>
					<haxe_doc>Allocates a new buffer.

		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="arrayBuffer:?byteOffset:?length">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":deprecated"/></meta>
					<haxe_doc>Allocates a new buffer.

		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="buffer">
						<x path="haxe.io.UInt8Array"/>
						<x path="Void"/>
					</f>
					<meta><m n=":deprecated"/></meta>
					<haxe_doc>Allocates a new buffer.

		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="size">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":deprecated"/></meta>
					<haxe_doc>Allocates a new buffer.

		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_array
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_arraybuffer_byteoffset_length
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_buffer
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_size
		@see https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Buffer` class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.

	@see https://nodejs.org/api/buffer.html#buffer_class_buffer</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":jsRequire">
				<e>"buffer"</e>
				<e>"Buffer"</e>
			</m>
		</meta>
	</class>
	<class path="js.node.buffer._Buffer.Helper" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/buffer/Buffer.hx" private="1" module="js.node.buffer.Buffer">
		<bytesOfBuffer public="1" set="method" line="726" static="1">
			<f a="b">
				<c path="js.node.buffer.Buffer"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</bytesOfBuffer>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dce"/>
		</meta>
	</class>
	<class path="js.node.buffer._Buffer.BufferModule" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/buffer/Buffer.hx" private="1" module="js.node.buffer.Buffer" extern="1">
		<INSPECT_MAX_BYTES public="1" static="1"><x path="Int"/></INSPECT_MAX_BYTES>
		<kMaxLength public="1" set="null" static="1"><x path="Int"/></kMaxLength>
		<transcode public="1" set="method" static="1"><f a="source:fromEnc:toEnc">
	<c path="js.lib.Uint8Array"/>
	<c path="String"/>
	<c path="String"/>
	<c path="js.node.buffer.Buffer"/>
</f></transcode>
		<constants public="1" set="null" static="1"><t path="js.node.buffer.BufferConstants"/></constants>
		<meta><m n=":jsRequire"><e>"buffer"</e></m></meta>
	</class>
	<typedef path="js.node.buffer.BufferConstants" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/buffer/Buffer.hx" module="js.node.buffer.Buffer"><a>
	<MAX_STRING_LENGTH set="null">
		<x path="Int"/>
		<haxe_doc>Represents the largest `length` that a `string` primitive can have, counted
		in UTF-16 code units.

		@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_string_length</haxe_doc>
	</MAX_STRING_LENGTH>
	<MAX_LENGTH set="null">
		<x path="Int"/>
		<haxe_doc>On 32-bit architectures, this value is `(2^30)-1` (`~1GB`).
		On 64-bit architectures, this value is `(2^31)-1` (`~2GB`).

		@see https://nodejs.org/api/buffer.html#buffer_buffer_constants_max_length</haxe_doc>
	</MAX_LENGTH>
</a></typedef>
	<abstract path="js.node.child_process.ChildProcessEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/child_process/ChildProcess.hx" module="js.node.child_process.ChildProcess">
		<this><x path="js.node.events.Event"><c path="js.node.child_process.ChildProcessEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.child_process.ChildProcessEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by `ChildProcess` objects.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.child_process._ChildProcess.ChildProcessEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/child_process/ChildProcess.hx" private="1" module="js.node.child_process.ChildProcess" extern="1" final="1">
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="50" static="1">
		<x path="js.node.child_process.ChildProcessEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when:
			1. The process could not be spawned, or
			2. The process could not be killed, or
			3. Sending a message to the child process failed for whatever reason.

		Note that the exit-event may or may not fire after an error has occured.
		If you are listening on both events to fire a function, remember to guard against calling your function twice.

		See also `ChildProcess.kill` and `ChildProcess.send`.</haxe_doc>
	</Error>
	<Exit public="1" get="inline" set="null" expr="cast &quot;exit&quot;" line="68" static="1">
		<x path="js.node.child_process.ChildProcessEvent"><f a=":">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "exit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This event is emitted after the child process ends.

		Listener arguments:
			code - the exit code, if it exited normally.
			signal - the signal passed to kill the child process, if it was killed by the parent.

		If the process terminated normally, `code` is the final exit code of the process, otherwise null.
		If the process terminated due to receipt of a signal, `signal` is the string name of the signal, otherwise null.

		Note that the child process stdio streams might still be open.

		Also, note that node establishes signal handlers for 'SIGINT' and 'SIGTERM',
		so it will not terminate due to receipt of those signals, it will exit.
		See waitpid(2).</haxe_doc>
	</Exit>
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="78" static="1">
		<x path="js.node.child_process.ChildProcessEvent"><f a=":">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This event is emitted when the stdio streams of a child process have all terminated.
		This is distinct from `Exit`, since multiple processes might share the same stdio streams.

		Listener arguments:
			code - the exit code, if it exited normally.
			signal - the signal passed to kill the child process, if it was killed by the parent.</haxe_doc>
	</Close>
	<Disconnect public="1" get="inline" set="null" expr="cast &quot;disconnect&quot;" line="84" static="1">
		<x path="js.node.child_process.ChildProcessEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "disconnect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This event is emitted after calling the `disconnect` method in the parent or in the child.
		After disconnecting it is no longer possible to send messages, and the `connected` property is false.</haxe_doc>
	</Disconnect>
	<Message public="1" get="inline" set="null" expr="cast &quot;message&quot;" line="95" static="1">
		<x path="js.node.child_process.ChildProcessEvent"><f a=":">
	<d/>
	<d/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "message"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Messages send by `send` are obtained using the message event.

		This event can also be listened on the `process` object to receive messages from the parent.

		Listener arguments:
			message - a parsed JSON object or primitive value
			sendHandle - a Socket or Server object</haxe_doc>
	</Message>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.child_process._ChildProcess.ChildProcessEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/child_process/ChildProcess.hx" private="1" module="js.node.child_process.ChildProcess" extern="1" final="1">
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="50" static="1">
			<x path="js.node.child_process.ChildProcessEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when:
			1. The process could not be spawned, or
			2. The process could not be killed, or
			3. Sending a message to the child process failed for whatever reason.

		Note that the exit-event may or may not fire after an error has occured.
		If you are listening on both events to fire a function, remember to guard against calling your function twice.

		See also `ChildProcess.kill` and `ChildProcess.send`.</haxe_doc>
		</Error>
		<Exit public="1" get="inline" set="null" expr="cast &quot;exit&quot;" line="68" static="1">
			<x path="js.node.child_process.ChildProcessEvent"><f a=":">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "exit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This event is emitted after the child process ends.

		Listener arguments:
			code - the exit code, if it exited normally.
			signal - the signal passed to kill the child process, if it was killed by the parent.

		If the process terminated normally, `code` is the final exit code of the process, otherwise null.
		If the process terminated due to receipt of a signal, `signal` is the string name of the signal, otherwise null.

		Note that the child process stdio streams might still be open.

		Also, note that node establishes signal handlers for 'SIGINT' and 'SIGTERM',
		so it will not terminate due to receipt of those signals, it will exit.
		See waitpid(2).</haxe_doc>
		</Exit>
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="78" static="1">
			<x path="js.node.child_process.ChildProcessEvent"><f a=":">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This event is emitted when the stdio streams of a child process have all terminated.
		This is distinct from `Exit`, since multiple processes might share the same stdio streams.

		Listener arguments:
			code - the exit code, if it exited normally.
			signal - the signal passed to kill the child process, if it was killed by the parent.</haxe_doc>
		</Close>
		<Disconnect public="1" get="inline" set="null" expr="cast &quot;disconnect&quot;" line="84" static="1">
			<x path="js.node.child_process.ChildProcessEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "disconnect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This event is emitted after calling the `disconnect` method in the parent or in the child.
		After disconnecting it is no longer possible to send messages, and the `connected` property is false.</haxe_doc>
		</Disconnect>
		<Message public="1" get="inline" set="null" expr="cast &quot;message&quot;" line="95" static="1">
			<x path="js.node.child_process.ChildProcessEvent"><f a=":">
	<d/>
	<d/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "message"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Messages send by `send` are obtained using the message event.

		This event can also be listened on the `process` object to receive messages from the parent.

		Listener arguments:
			message - a parsed JSON object or primitive value
			sendHandle - a Socket or Server object</haxe_doc>
		</Message>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.child_process.ChildProcessSendOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/child_process/ChildProcess.hx" module="js.node.child_process.ChildProcess"><a><keepOpen>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>Can be used when passing instances of `js.node.net.Socket`.

		When true, the socket is kept open in the sending process.

		Defaults to false.</haxe_doc>
</keepOpen></a></typedef>
	<class path="js.node.child_process.ChildProcess" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/child_process/ChildProcess.hx" extern="1">
		<extends path="js.node.events.EventEmitter"><c path="js.node.child_process.ChildProcess"/></extends>
		<stdin public="1" set="null">
			<c path="js.node.stream.IWritable"/>
			<haxe_doc>A Writable Stream that represents the child process's stdin.
		Closing this stream via `end` often causes the child process to terminate.

		If the child stdio streams are shared with the parent, then this will not be set.</haxe_doc>
		</stdin>
		<stdout public="1" set="null">
			<c path="js.node.stream.IReadable"/>
			<haxe_doc>A Readable Stream that represents the child process's stdout.

		If the child stdio streams are shared with the parent, then this will not be set.</haxe_doc>
		</stdout>
		<stderr public="1" set="null">
			<c path="js.node.stream.IReadable"/>
			<haxe_doc>A Readable Stream that represents the child process's stderr.

		If the child stdio streams are shared with the parent, then this will not be set.</haxe_doc>
		</stderr>
		<stdio public="1" set="null">
			<c path="Array"><c path="js.node.IStream"/></c>
			<haxe_doc>The parent end of the stdio pipes.</haxe_doc>
		</stdio>
		<pid public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The PID of the child process.</haxe_doc>
		</pid>
		<connected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Set to false after `disconnect' is called
		If `connected` is false, it is no longer possible to send messages.</haxe_doc>
		</connected>
		<kill public="1" set="method">
			<f a="?signal">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Send a signal to the child process.

		If no argument is given, the process will be sent 'SIGTERM'.
		See signal(7) for a list of available signals.

		May emit an 'error' event when the signal cannot be delivered.

		Sending a signal to a child process that has already exited is not an error
		but may have unforeseen consequences: if the PID (the process ID) has been reassigned to another process,
		the signal will be delivered to that process instead. What happens next is anyone's guess.

		Note that while the function is called `kill`, the signal delivered to the child process may not actually kill it.
		`kill` really just sends a signal to a process. See kill(2)</haxe_doc>
		</kill>
		<send public="1" set="method">
			<f a="message:?callback">
				<d/>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>When using `fork` you can write to the child using `send` and messages are received by a 'message' event on the child.

		In the child the `Process` object will have a `send` method, and process will emit objects each time it receives
		a message on its channel.

		Please note that the `send` method on both the parent and child are synchronous - sending large chunks of data is
		not advised (pipes can be used instead, see `spawn`).

		There is a special case when sending a {cmd: 'NODE_foo'} `message`. All messages containing a `NODE_` prefix in
		its cmd property will not be emitted in the 'message' event, since they are internal messages used by node core.
		Messages containing the prefix are emitted in the 'internalMessage' event, you should by all means avoid using
		this feature, it is subject to change without notice.

		The `sendHandle` option is for sending a TCP server or socket object to another process.
		The child will receive the object as its second argument to the message event.

		The `callback` option is a function that is invoked after the message is sent but before the target may have received it.
		It is called with a single argument: null on success, or an `Error` object on failure.

		Emits an 'error' event if the message cannot be sent, for example because the child process has already exited.

		Returns true under normal circumstances or false when the backlog of unsent messages exceeds a threshold that
		makes it unwise to send more. Use the callback mechanism to implement flow control.</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a="message:sendHandle:options:?callback">
						<d/>
						<d/>
						<t path="js.node.child_process.ChildProcessSendOptions"/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Bool"/>
					</f>
					<haxe_doc>When using `fork` you can write to the child using `send` and messages are received by a 'message' event on the child.

		In the child the `Process` object will have a `send` method, and process will emit objects each time it receives
		a message on its channel.

		Please note that the `send` method on both the parent and child are synchronous - sending large chunks of data is
		not advised (pipes can be used instead, see `spawn`).

		There is a special case when sending a {cmd: 'NODE_foo'} `message`. All messages containing a `NODE_` prefix in
		its cmd property will not be emitted in the 'message' event, since they are internal messages used by node core.
		Messages containing the prefix are emitted in the 'internalMessage' event, you should by all means avoid using
		this feature, it is subject to change without notice.

		The `sendHandle` option is for sending a TCP server or socket object to another process.
		The child will receive the object as its second argument to the message event.

		The `callback` option is a function that is invoked after the message is sent but before the target may have received it.
		It is called with a single argument: null on success, or an `Error` object on failure.

		Emits an 'error' event if the message cannot be sent, for example because the child process has already exited.

		Returns true under normal circumstances or false when the backlog of unsent messages exceeds a threshold that
		makes it unwise to send more. Use the callback mechanism to implement flow control.</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="message:sendHandle:?callback">
						<d/>
						<d/>
						<f a="">
							<c path="js.lib.Error"/>
							<x path="Void"/>
						</f>
						<x path="Bool"/>
					</f>
					<haxe_doc>When using `fork` you can write to the child using `send` and messages are received by a 'message' event on the child.

		In the child the `Process` object will have a `send` method, and process will emit objects each time it receives
		a message on its channel.

		Please note that the `send` method on both the parent and child are synchronous - sending large chunks of data is
		not advised (pipes can be used instead, see `spawn`).

		There is a special case when sending a {cmd: 'NODE_foo'} `message`. All messages containing a `NODE_` prefix in
		its cmd property will not be emitted in the 'message' event, since they are internal messages used by node core.
		Messages containing the prefix are emitted in the 'internalMessage' event, you should by all means avoid using
		this feature, it is subject to change without notice.

		The `sendHandle` option is for sending a TCP server or socket object to another process.
		The child will receive the object as its second argument to the message event.

		The `callback` option is a function that is invoked after the message is sent but before the target may have received it.
		It is called with a single argument: null on success, or an `Error` object on failure.

		Emits an 'error' event if the message cannot be sent, for example because the child process has already exited.

		Returns true under normal circumstances or false when the backlog of unsent messages exceeds a threshold that
		makes it unwise to send more. Use the callback mechanism to implement flow control.</haxe_doc>
				</send>
			</overloads>
		</send>
		<disconnect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the IPC channel between parent and child, allowing the child to exit gracefully once there are no other
		connections keeping it alive.

		After calling this method the `connected` flag will be set to false in both the parent and child,
		and it is no longer possible to send messages.

		The 'disconnect' event will be emitted when there are no messages in the process of being received,
		most likely immediately.

		Note that you can also call `process.disconnect` in the child process.</haxe_doc>
		</disconnect>
		<unref public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>By default, the parent will wait for the detached child to exit.
		To prevent the parent from waiting for a given child, use the `unref` method,
		and the parent's event loop will not include the child in its reference count.</haxe_doc>
		</unref>
		<haxe_doc>An object representing a child process.

	The `ChildProcess` class is not intended to be used directly. Use the spawn() or fork() module methods
	to create a `ChildProcess` instance.</haxe_doc>
	</class>
	<class path="js.node.console.Console" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/console/Console.hx" extern="1">
		<assert public="1" set="method">
			<f a="value:message">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>A simple assertion test that verifies whether `value` is truthy. If it is not, `Assertion` failed is logged.
		If provided, the error `message` is formatted using `util.format()` by passing along all message arguments. The output is used as the error message.

		@see https://nodejs.org/api/console.html#console_console_assert_value_message</haxe_doc>
		</assert>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>When `stdout` is a TTY, calling `console.clear()` will attempt to clear the TTY. When `stdout` is not a TTY, this method does nothing.

		@see https://nodejs.org/api/console.html#console_console_clear</haxe_doc>
		</clear>
		<count public="1" set="method">
			<f a="?label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Maintains an internal counter specific to `label` and outputs to `stdout` the number of times `console.count()` has been called with the given `label`.

		@see https://nodejs.org/api/console.html#console_console_count_label</haxe_doc>
		</count>
		<countReset public="1" set="method">
			<f a="?label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resets the internal counter specific to `label`.

		@see https://nodejs.org/api/console.html#console_console_countreset_label</haxe_doc>
		</countReset>
		<debug public="1" set="method">
			<f a="data:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>The `console.debug()` function is an alias for `console.log()`.

		@see https://nodejs.org/api/console.html#console_console_debug_data_args</haxe_doc>
		</debug>
		<dir public="1" set="method">
			<f a="obj:?options">
				<d/>
				<x path="Null"><t path="js.node.InspectOptionsBase"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Uses util.inspect() on `obj` and prints the resulting string to `stdout`. This function bypasses any custom `inspect()` function defined on `obj`.

		@see https://nodejs.org/api/console.html#console_console_dir_obj_options</haxe_doc>
		</dir>
		<dirxml public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>This method calls `console.log()` passing it the arguments received. This method does not produce any XML formatting.

		@see https://nodejs.org/api/console.html#console_console_dirxml_data</haxe_doc>
		</dirxml>
		<error public="1" set="method">
			<f a="data:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints to `stderr` with newline. Multiple arguments can be passed,
		with the first used as the primary message and all additional used as substitution values similar to printf(3)
		(the arguments are all passed to util.format()).

		@see https://nodejs.org/api/console.html#console_console_error_data_args</haxe_doc>
		</error>
		<group public="1" set="method">
			<f a="label">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>If one or more `label`s are provided, those are printed first without the additional indentation.

		@see https://nodejs.org/api/console.html#console_console_group_label</haxe_doc>
		</group>
		<groupCollapsed public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>An alias for console.group().

		@see https://nodejs.org/api/console.html#console_console_groupcollapsed</haxe_doc>
		</groupCollapsed>
		<groupEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Decreases indentation of subsequent lines by two spaces.

		@see https://nodejs.org/api/console.html#console_console_groupend</haxe_doc>
		</groupEnd>
		<info public="1" set="method">
			<f a="data:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>The `console.info()` function is an alias for console.log().

		@see https://nodejs.org/api/console.html#console_console_info_data_args</haxe_doc>
		</info>
		<log public="1" set="method">
			<f a="data:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints to `stdout` with newline. Multiple arguments can be passed,
		with the first used as the primary message and all additional used as substitution values similar to printf(3)
		(the arguments are all passed to util.format()).

		@see https://nodejs.org/api/console.html#console_console_log_data_args</haxe_doc>
		</log>
		<table public="1" set="method">
			<f a="tabularData:?properties">
				<d/>
				<c path="Array"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Try to construct a table with the columns of the properties of `tabularData` (or use `properties`)
		and rows of `tabularData` and log it. Falls back to just logging the argument if it can’t be parsed as tabular.

		@see https://nodejs.org/api/console.html#console_console_table_tabulardata_properties</haxe_doc>
		</table>
		<time public="1" set="method">
			<f a="?label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts a timer that can be used to compute the duration of an operation. Timers are identified by a unique `label`.
		Use the same `label` when calling console.timeEnd() to stop the timer and output the elapsed time in milliseconds to `stdout`.
		Timer durations are accurate to the sub-millisecond.

		@see https://nodejs.org/api/console.html#console_console_time_label</haxe_doc>
		</time>
		<timeEnd public="1" set="method">
			<f a="?label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops a timer that was previously started by calling console.time() and prints the result to `stdout`:

		@see https://nodejs.org/api/console.html#console_console_timeend_label</haxe_doc>
		</timeEnd>
		<timeLog public="1" set="method">
			<f a="?label:data">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>For a timer that was previously started by calling console.time(), prints the elapsed time and other `data` arguments to `stdout`:

		@see https://nodejs.org/api/console.html#console_console_timelog_label_data</haxe_doc>
		</timeLog>
		<trace public="1" set="method">
			<f a="message:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints to `stderr` the string `'Trace: '`, followed by the util.format() formatted message and stack trace to the current position in the code.

		@see https://nodejs.org/api/console.html#console_console_trace_message_args</haxe_doc>
		</trace>
		<warn public="1" set="method">
			<f a="data:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>The `console.warn()` function is an alias for console.error().

		@see https://nodejs.org/api/console.html#console_console_warn_data_args</haxe_doc>
		</warn>
		<markTimeline public="1" set="method">
			<f a="?label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method does not display anything unless used in the inspector. The `console.markTimeline()` method is the deprecated form of console.timeStamp().

		@see https://nodejs.org/api/console.html#console_console_marktimeline_label</haxe_doc>
		</markTimeline>
		<profile public="1" set="method">
			<f a="?label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method does not display anything unless used in the inspector.
		The `console.profile()` method starts a JavaScript CPU profile with an optional label until console.profileEnd() is called.
		The profile is then added to the Profile panel of the inspector.

		@see https://nodejs.org/api/console.html#console_console_profile_label</haxe_doc>
		</profile>
		<profileEnd public="1" set="method">
			<f a="?label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method does not display anything unless used in the inspector.
		Stops the current JavaScript CPU profiling session if one has been started and prints the report to the Profiles panel of the inspector.
		See console.profile() for an example.

		@see https://nodejs.org/api/console.html#console_console_profileend_label</haxe_doc>
		</profileEnd>
		<timeStamp public="1" set="method">
			<f a="?label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method does not display anything unless used in the inspector.
		The `console.timeStamp()` method adds an event with the label `'label'` to the Timeline panel of the inspector.

		@see https://nodejs.org/api/console.html#console_console_timestamp_label</haxe_doc>
		</timeStamp>
		<timeline public="1" set="method">
			<f a="?label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method does not display anything unless used in the inspector. The `console.timeline()` method is the deprecated form of console.time().

		@see https://nodejs.org/api/console.html#console_console_timeline_label</haxe_doc>
		</timeline>
		<timelineEnd public="1" set="method">
			<f a="?label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method does not display anything unless used in the inspector. The `console.timelineEnd()` method is the deprecated form of console.timeEnd().

		@see https://nodejs.org/api/console.html#console_console_timelineend_label</haxe_doc>
		</timelineEnd>
		<new public="1" set="method">
			<f a="stdout:?stderr:?ignoreerrors">
				<c path="js.node.stream.IWritable"/>
				<c path="js.node.stream.IWritable"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Console` with one or two writable stream instances. `stdout` is a writable stream to print log or info output.
		`stderr` is used for warning or error output. If `stderr` is not provided, `stdout` is used for stderr.

		@see https://nodejs.org/api/console.html#console_new_console_stdout_stderr_ignoreerrors</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="options">
		<t path="js.node.console.ConsoleOptions"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Creates a new `Console` with one or two writable stream instances. `stdout` is a writable stream to print log or info output.
		`stderr` is used for warning or error output. If `stderr` is not provided, `stdout` is used for stderr.

		@see https://nodejs.org/api/console.html#console_new_console_stdout_stderr_ignoreerrors</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>The `Console` class can be used to create a simple logger with configurable output streams
	and can be accessed using either `require('console').Console` or `console.Console` (or their destructured counterparts):

	@see https://nodejs.org/api/console.html#console_class_console</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"console"</e>
	<e>"Console"</e>
</m></meta>
	</class>
	<typedef path="js.node.console.ConsoleOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/console/Console.hx" module="js.node.console.Console"><a>
	<stdout>
		<c path="js.node.stream.IWritable"/>
		<haxe_doc>`stdout` is a writable stream to print log or info output.</haxe_doc>
	</stdout>
	<stderr>
		<c path="js.node.stream.IWritable"/>
		<meta><m n="optional"/></meta>
		<haxe_doc>`stderr` is used for warning or error output. If stderr is not provided, stdout is used for stderr.</haxe_doc>
	</stderr>
	<inspectOptions>
		<t path="js.node.InspectOptions"/>
		<meta><m n="optional"/></meta>
		<haxe_doc>Specifies options that are passed along to util.inspect().</haxe_doc>
	</inspectOptions>
	<ignoreErrors>
		<x path="Bool"/>
		<meta><m n="optional"/></meta>
		<haxe_doc>Ignore errors when writing to the underlying streams. Default: `true`.</haxe_doc>
	</ignoreErrors>
	<colorMode>
		<x path="haxe.extern.EitherType">
			<x path="Bool"/>
			<c path="String"/>
		</x>
		<meta><m n="optional"/></meta>
		<haxe_doc>Set color support for this `Console` instance. Setting to `true` enables coloring while inspecting values,
		setting to `'auto'` will make color support depend on the value of the `isTTY` property and the value returned by `getColorDepth()` on the respective stream.
		 This option can not be used, if `inspectOptions.colors` is set as well. Default: `'auto'`.</haxe_doc>
	</colorMode>
</a></typedef>
	<abstract path="js.node.events.EventEmitterEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/events/EventEmitter.hx" module="js.node.events.EventEmitter">
		<this><x path="js.node.events.Event"><c path="js.node.events.EventEmitterEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.events.EventEmitterEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by all `EventEmitter` instances.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.events._EventEmitter.EventEmitterEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1" final="1">
	<NewListener public="1" get="inline" set="null" expr="cast &quot;newListener&quot;" line="43" static="1">
		<x path="js.node.events.EventEmitterEvent"><f a="eventName:listener">
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<c path="js.lib.Symbol"/>
	</x>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "newListener"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `EventEmitter` instance will emit its own `'newListener'` event before
		a listener is added to its internal array of listeners.

		@see https://nodejs.org/api/events.html#events_event_newlistener</haxe_doc>
	</NewListener>
	<RemoveListener public="1" get="inline" set="null" expr="cast &quot;removeListener&quot;" line="54" static="1">
		<x path="js.node.events.EventEmitterEvent"><f a="eventName:listener">
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<c path="js.lib.Symbol"/>
	</x>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "removeListener"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'removeListener'` event is emitted after the `listener` is removed.

		@see https://nodejs.org/api/events.html#events_event_removelistener</haxe_doc>
	</RemoveListener>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.events._EventEmitter.EventEmitterEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1" final="1">
		<NewListener public="1" get="inline" set="null" expr="cast &quot;newListener&quot;" line="43" static="1">
			<x path="js.node.events.EventEmitterEvent"><f a="eventName:listener">
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<c path="js.lib.Symbol"/>
	</x>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "newListener"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `EventEmitter` instance will emit its own `'newListener'` event before
		a listener is added to its internal array of listeners.

		@see https://nodejs.org/api/events.html#events_event_newlistener</haxe_doc>
		</NewListener>
		<RemoveListener public="1" get="inline" set="null" expr="cast &quot;removeListener&quot;" line="54" static="1">
			<x path="js.node.events.EventEmitterEvent"><f a="eventName:listener">
	<x path="haxe.extern.EitherType">
		<c path="String"/>
		<c path="js.lib.Symbol"/>
	</x>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "removeListener"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'removeListener'` event is emitted after the `listener` is removed.

		@see https://nodejs.org/api/events.html#events_event_removelistener</haxe_doc>
		</RemoveListener>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.events.Event" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/events/EventEmitter.hx" module="js.node.events.EventEmitter">
		<from>
			<icast><c path="js.lib.Symbol"/></icast>
			<icast><c path="String"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="js.lib.Symbol"/></icast>
			<icast><c path="String"/></icast>
		</to>
		<haxe_doc>Abstract type for events. Its type parameter is a signature
	of a listener for a concrete event.</haxe_doc>
		<impl><class path="js.node.events._EventEmitter.Event_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1" final="1"/></impl>
	</abstract>
	<class path="js.node.events._EventEmitter.Event_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/events/EventEmitter.hx" private="1" module="js.node.events.EventEmitter" extern="1" final="1"/>
	<abstract path="js.node.fs.FSWatcherChangeType" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/FSWatcher.hx" module="js.node.fs.FSWatcher">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible types of changes for 'change' event.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.fs._FSWatcher.FSWatcherChangeType_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/FSWatcher.hx" private="1" module="js.node.fs.FSWatcher" extern="1" final="1">
	<Change public="1" get="inline" set="null" expr="cast &quot;change&quot;" line="37" static="1">
		<x path="js.node.fs.FSWatcherChangeType"/>
		<meta>
			<m n=":value"><e>cast "change"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Change>
	<Rename public="1" get="inline" set="null" expr="cast &quot;rename&quot;" line="38" static="1">
		<x path="js.node.fs.FSWatcherChangeType"/>
		<meta>
			<m n=":value"><e>cast "rename"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Rename>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.fs._FSWatcher.FSWatcherChangeType_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/FSWatcher.hx" private="1" module="js.node.fs.FSWatcher" extern="1" final="1">
		<Change public="1" get="inline" set="null" expr="cast &quot;change&quot;" line="37" static="1">
			<x path="js.node.fs.FSWatcherChangeType"/>
			<meta>
				<m n=":value"><e>cast "change"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Change>
		<Rename public="1" get="inline" set="null" expr="cast &quot;rename&quot;" line="38" static="1">
			<x path="js.node.fs.FSWatcherChangeType"/>
			<meta>
				<m n=":value"><e>cast "rename"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Rename>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.fs.FSWatcherEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/FSWatcher.hx" module="js.node.fs.FSWatcher">
		<this><x path="js.node.events.Event"><c path="js.node.fs.FSWatcherEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.fs.FSWatcherEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of the events emitted by `FSWatcher`.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.fs._FSWatcher.FSWatcherEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/FSWatcher.hx" private="1" module="js.node.fs.FSWatcher" extern="1" final="1">
	<Change public="1" get="inline" set="null" expr="cast &quot;change&quot;" line="52" static="1">
		<x path="js.node.fs.FSWatcherEvent"><f a=":">
	<x path="js.node.fs.FSWatcherChangeType"/>
	<t path="js.node.FsPath"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "change"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when something changes in a watched directory or file. See more details in `Fs.watch`.

		Listener arguments:
			event - The type of fs change
			filename - The filename that changed (if relevant/available)</haxe_doc>
	</Change>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="57" static="1">
		<x path="js.node.fs.FSWatcherEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when an error occurs.</haxe_doc>
	</Error>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.fs._FSWatcher.FSWatcherEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/FSWatcher.hx" private="1" module="js.node.fs.FSWatcher" extern="1" final="1">
		<Change public="1" get="inline" set="null" expr="cast &quot;change&quot;" line="52" static="1">
			<x path="js.node.fs.FSWatcherEvent"><f a=":">
	<x path="js.node.fs.FSWatcherChangeType"/>
	<t path="js.node.FsPath"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "change"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when something changes in a watched directory or file. See more details in `Fs.watch`.

		Listener arguments:
			event - The type of fs change
			filename - The filename that changed (if relevant/available)</haxe_doc>
		</Change>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="57" static="1">
			<x path="js.node.fs.FSWatcherEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when an error occurs.</haxe_doc>
		</Error>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.fs.FSWatcher" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/FSWatcher.hx" extern="1">
		<extends path="js.node.events.EventEmitter"><c path="js.node.fs.FSWatcher"/></extends>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop watching for changes on the given `FSWatcher`.</haxe_doc>
		</close>
		<haxe_doc>Objects returned from `Fs.watch` are of this type.</haxe_doc>
	</class>
	<abstract path="js.node.fs.ReadStreamEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/ReadStream.hx" module="js.node.fs.ReadStream">
		<this><x path="js.node.events.Event"><c path="js.node.fs.ReadStreamEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.fs.ReadStreamEvent.T"/></x></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.fs._ReadStream.ReadStreamEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/ReadStream.hx" private="1" module="js.node.fs.ReadStream" extern="1" final="1">
	<Open public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="35" static="1">
		<x path="js.node.fs.ReadStreamEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the `ReadStream`'s file is opened.

		Listener arguments:
			fd - file descriptor used by the `ReadStream`.</haxe_doc>
	</Open>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.fs._ReadStream.ReadStreamEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/ReadStream.hx" private="1" module="js.node.fs.ReadStream" extern="1" final="1">
		<Open public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="35" static="1">
			<x path="js.node.fs.ReadStreamEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the `ReadStream`'s file is opened.

		Listener arguments:
			fd - file descriptor used by the `ReadStream`.</haxe_doc>
		</Open>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.stream.IReadable" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Readable.hx" module="js.node.stream.Readable" extern="1" interface="1">
		<destroy public="1" set="method"><f a="?error">
	<c path="js.lib.Error"/>
	<c path="js.node.stream.IReadable"/>
</f></destroy>
		<destroyed public="1" set="null"><x path="Bool"/></destroyed>
		<isPaused public="1" set="method"><f a=""><x path="Bool"/></f></isPaused>
		<pause public="1" set="method"><f a=""><c path="js.node.stream.IReadable"/></f></pause>
		<pipe public="1" params="T" set="method"><f a="destination:?options">
	<c path="pipe.T"/>
	<a><end>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</end></a>
	<c path="pipe.T"/>
</f></pipe>
		<read public="1" set="method"><f a="?size">
	<x path="Int"/>
	<x path="Null"><d/></x>
</f></read>
		<readable public="1" set="null"><x path="Bool"/></readable>
		<readableEncoding public="1" set="null"><x path="Null"><c path="String"/></x></readableEncoding>
		<readableEnded public="1" set="null"><x path="Bool"/></readableEnded>
		<readableHighWaterMark public="1" set="null"><x path="Int"/></readableHighWaterMark>
		<readableLength public="1" set="null"><x path="Int"/></readableLength>
		<readableObjectMode public="1" set="null"><x path="Bool"/></readableObjectMode>
		<resume public="1" set="method"><f a=""><c path="js.node.stream.IReadable"/></f></resume>
		<setEncoding public="1" set="method"><f a="encoding">
	<c path="String"/>
	<c path="js.node.stream.IReadable"/>
</f></setEncoding>
		<unpipe public="1" set="method"><f a="?destination">
	<c path="js.node.stream.IWritable"/>
	<c path="js.node.stream.IReadable"/>
</f></unpipe>
		<unshift public="1" set="method"><f a="chunk:?encoding">
	<x path="Null"><d/></x>
	<c path="String"/>
	<x path="Void"/>
</f></unshift>
		<wrap public="1" set="method"><f a="stream">
	<d/>
	<c path="js.node.stream.IReadable"/>
</f></wrap>
		<haxe_doc>`IReadable` interface is used as "any Readable".

	See `Readable` for actual class documentation.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.stream.Readable" params="TSelf" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Readable.hx" extern="1">
		<extends path="js.node.Stream"><c path="js.node.stream.Readable.TSelf"/></extends>
		<from public="1" params="T" set="method" static="1"><f a="iterable:?options">
	<t path="js.node.Iterator"><c path="from.T"/></t>
	<x path="Null"><t path="js.node.stream.ReadableNewOptions"/></x>
	<c path="js.node.stream.IReadable"/>
</f></from>
		<destroy public="1" set="method">
			<f a="?error">
				<c path="js.lib.Error"/>
				<c path="js.node.stream.Readable.TSelf"/>
			</f>
			<haxe_doc>Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'` event unless `emitClose` is set in `false`.
		After this call, the readable stream will release any internal resources and subsequent calls to `push()` will be ignored.
		Implementors should not override this method, but instead implement `readable._destroy()`.

		@see https://nodejs.org/api/stream.html#stream_readable_destroy_error</haxe_doc>
		</destroy>
		<destroyed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` after `readable.destroy()` has been called.

		@see https://nodejs.org/api/stream.html#stream_readable_destroyed</haxe_doc>
		</destroyed>
		<isPaused public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>The `readable.isPaused()` method returns the current operating state of the `Readable`.
		This is used primarily by the mechanism that underlies the `readable.pipe()` method.
		In most typical cases, there will be no reason to use this method directly.

		@see https://nodejs.org/api/stream.html#stream_readable_ispaused</haxe_doc>
		</isPaused>
		<pause public="1" set="method">
			<f a=""><c path="js.node.stream.Readable.TSelf"/></f>
			<haxe_doc>The `readable.pause()` method will cause a stream in flowing mode to stop emitting `'data'` events,
		switching out of flowing mode. Any data that becomes available will remain in the internal buffer.

		@see https://nodejs.org/api/stream.html#stream_readable_pause</haxe_doc>
		</pause>
		<pipe public="1" params="T" set="method">
			<f a="destination:?options">
				<c path="pipe.T"/>
				<a><end>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</end></a>
				<c path="pipe.T"/>
			</f>
			<haxe_doc>The `readable.pipe()` method attaches a `Writable` stream to the `readable`,
		causing it to switch automatically into flowing mode and push all of its data to the attached `Writable`.
		The flow of data will be automatically managed so that the destination `Writable` stream
		is not overwhelmed by a faster `Readable` stream.

		@see https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options</haxe_doc>
		</pipe>
		<read public="1" set="method">
			<f a="?size">
				<x path="Int"/>
				<x path="Null"><d/></x>
			</f>
			<haxe_doc>The `readable.read()` method pulls some data out of the internal buffer and returns it.
		If no data available to be read, `null` is returned. By default,
		the data will be returned as a `Buffer` object unless an encoding has been specified using
		the `readable.setEncoding()` method or the stream is operating in object mode.

		@see https://nodejs.org/api/stream.html#stream_readable_read_size</haxe_doc>
		</read>
		<readable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` if it is safe to call `readable.read()`.

		@see https://nodejs.org/api/stream.html#stream_readable_readable</haxe_doc>
		</readable>
		<readableEncoding public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>Getter for the property `encoding` of a given `Readable` stream.
		The `encoding` property can be set using the `readable.setEncoding()` method.

		@see https://nodejs.org/api/stream.html#stream_readable_readableencoding</haxe_doc>
		</readableEncoding>
		<readableEnded public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Becomes `true` when `'end'` event is emitted.

		@see https://nodejs.org/api/stream.html#stream_readable_readableended</haxe_doc>
		</readableEnded>
		<readableHighWaterMark public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the value of `highWaterMark` passed when constructing this `Readable`.

		@see https://nodejs.org/api/stream.html#stream_readable_readablehighwatermark</haxe_doc>
		</readableHighWaterMark>
		<readableLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>This property contains the number of bytes (or objects) in the queue ready to be read.
		The value provides introspection data regarding the status of the `highWaterMark`.

		@see https://nodejs.org/api/stream.html#stream_readable_readablelength</haxe_doc>
		</readableLength>
		<readableObjectMode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Getter for the property `objectMode` of a given `Readable` stream.

		@see https://nodejs.org/api/stream.html#stream_readable_readableobjectmode</haxe_doc>
		</readableObjectMode>
		<resume public="1" set="method">
			<f a=""><c path="js.node.stream.Readable.TSelf"/></f>
			<haxe_doc>The `readable.resume()` method causes an explicitly paused `Readable` stream to resume emitting `'data'` events,
		switching the stream into flowing mode.

		@see https://nodejs.org/api/stream.html#stream_readable_resume</haxe_doc>
		</resume>
		<setEncoding public="1" set="method">
			<f a="encoding">
				<c path="String"/>
				<c path="js.node.stream.Readable.TSelf"/>
			</f>
			<haxe_doc>The `readable.setEncoding()` method sets the character encoding for data read from the `Readable` stream.

		@see https://nodejs.org/api/stream.html#stream_readable_setencoding_encoding</haxe_doc>
		</setEncoding>
		<unpipe public="1" set="method">
			<f a="?destination">
				<c path="js.node.stream.IWritable"/>
				<c path="js.node.stream.Readable.TSelf"/>
			</f>
			<haxe_doc>The `readable.unpipe()` method detaches a `Writable` stream previously attached using the `stream.pipe()` method.

		@see https://nodejs.org/api/stream.html#stream_readable_unpipe_destination</haxe_doc>
		</unpipe>
		<unshift public="1" set="method">
			<f a="chunk:?encoding">
				<x path="Null"><d/></x>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Passing `chunk` as `null` signals the end of the stream (EOF), after which no more data can be written.

		@see https://nodejs.org/api/stream.html#stream_readable_unshift_chunk_encoding</haxe_doc>
		</unshift>
		<wrap public="1" set="method">
			<f a="stream">
				<d/>
				<c path="js.node.stream.IReadable"/>
			</f>
			<haxe_doc>Prior to Node.js 0.10, streams did not implement the entire `stream` module API as it is currently defined.
		(See Compatibility for more information.)

		@see https://nodejs.org/api/stream.html#stream_readable_wrap_stream</haxe_doc>
		</wrap>
		<_read set="method">
			<f a="size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This function **MUST NOT** be called by application code directly.
		It should be implemented by child classes, and called by the internal `Readable` class methods only.

		@see https://nodejs.org/api/stream.html#stream_readable_read_size_1</haxe_doc>
		</_read>
		<_destroy set="method">
			<f a="err:callback">
				<x path="Null"><c path="js.lib.Error"/></x>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The `_destroy()` method is called by `readable.destroy()`.
		It can be overridden by child classes but it **must not** be called directly.

		@see https://nodejs.org/api/stream.html#stream_readable_destroy_err_callback</haxe_doc>
		</_destroy>
		<push set="method">
			<f a="chunk:?encoding">
				<x path="Null"><d/></x>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The `readable.push()` method is intended be called only by `Readable` implementers,
		and only from within the `readable._read()` method.

		@see https://nodejs.org/api/stream.html#stream_readable_push_chunk_encoding</haxe_doc>
		</push>
		<isTTY public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Terminal read streams (i.e. process.stdin) have this property set to true.
		It is false for any other read streams.

		@see https://nodejs.org/api/tty.html#tty_readstream_istty</haxe_doc>
		</isTTY>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.node.stream.ReadableNewOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@see https://nodejs.org/api/stream.html#stream_new_stream_readable_options</haxe_doc>
		</new>
		<haxe_doc>@see https://nodejs.org/api/stream.html#stream_class_stream_readable</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"stream"</e>
	<e>"Readable"</e>
</m></meta>
	</class>
	<class path="js.node.fs.ReadStream" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/ReadStream.hx" extern="1">
		<extends path="js.node.stream.Readable"><c path="js.node.fs.ReadStream"/></extends>
		<path public="1">
			<t path="js.node.FsPath"/>
			<haxe_doc>The path to the file the stream is reading from as specified in the first argument to `Fs.createReadStream`.

		If path is passed as a string, then readStream.path will be a string.
		If path is passed as a Buffer, then readStream.path will be a Buffer.</haxe_doc>
		</path>
		<haxe_doc>Readable file stream.</haxe_doc>
	</class>
	<class path="js.node.fs.Stats" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/Stats.hx" extern="1">
		<dev public="1"><x path="Int"/></dev>
		<ino public="1"><x path="Float"/></ino>
		<mode public="1"><x path="Int"/></mode>
		<nlink public="1"><x path="Int"/></nlink>
		<uid public="1"><x path="Int"/></uid>
		<gid public="1"><x path="Int"/></gid>
		<rdev public="1"><x path="Int"/></rdev>
		<size public="1"><x path="Float"/></size>
		<blksize public="1"><x path="Null"><x path="Int"/></x></blksize>
		<blocks public="1"><x path="Null"><x path="Float"/></x></blocks>
		<atime public="1">
			<c path="Date"/>
			<haxe_doc>"Access Time" - Time when file data last accessed.

		Changed by the mknod(2), utimes(2), and read(2) system calls.</haxe_doc>
		</atime>
		<mtime public="1">
			<c path="Date"/>
			<haxe_doc>"Modified Time" - Time when file data last modified.

		Changed by the mknod(2), utimes(2), and write(2) system calls.</haxe_doc>
		</mtime>
		<ctime public="1">
			<c path="Date"/>
			<haxe_doc>"Change Time" - Time when file status was last changed (inode data modification).

		Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls.</haxe_doc>
		</ctime>
		<birthtime public="1">
			<c path="Date"/>
			<haxe_doc>"Birth Time" - Time of file creation. Set once when the file is created.

		On filesystems where birthtime is not available, this field may instead hold either the ctime or 1970-01-01T00:00Z (ie, unix epoch timestamp 0).
		Note that this value may be greater than `atime` or `mtime` in this case. On Darwin and other FreeBSD variants,
		also set if the `atime` is explicitly set to an earlier value than the current birthtime using the utimes(2) system call.</haxe_doc>
		</birthtime>
		<isFile public="1" set="method"><f a=""><x path="Bool"/></f></isFile>
		<isDirectory public="1" set="method"><f a=""><x path="Bool"/></f></isDirectory>
		<isBlockDevice public="1" set="method"><f a=""><x path="Bool"/></f></isBlockDevice>
		<isCharacterDevice public="1" set="method"><f a=""><x path="Bool"/></f></isCharacterDevice>
		<isSymbolicLink public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Only valid with `Fs.lstat`.</haxe_doc>
		</isSymbolicLink>
		<isFIFO public="1" set="method"><f a=""><x path="Bool"/></f></isFIFO>
		<isSocket public="1" set="method"><f a=""><x path="Bool"/></f></isSocket>
		<haxe_doc>Objects returned from `Fs.stat`, `Fs.lstat` and `Fs.fstat` and their synchronous counterparts are of this type.</haxe_doc>
	</class>
	<abstract path="js.node.fs.WriteStreamEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/WriteStream.hx" module="js.node.fs.WriteStream">
		<this><x path="js.node.events.Event"><c path="js.node.fs.WriteStreamEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.fs.WriteStreamEvent.T"/></x></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.fs._WriteStream.WriteStreamEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/WriteStream.hx" private="1" module="js.node.fs.WriteStream" extern="1" final="1">
	<Open public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="35" static="1">
		<x path="js.node.fs.WriteStreamEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the `WriteStream`'s file is opened.

		Listener arguments:
			fd - file descriptor used by the `WriteStream`.</haxe_doc>
	</Open>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.fs._WriteStream.WriteStreamEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/WriteStream.hx" private="1" module="js.node.fs.WriteStream" extern="1" final="1">
		<Open public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="35" static="1">
			<x path="js.node.fs.WriteStreamEvent"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the `WriteStream`'s file is opened.

		Listener arguments:
			fd - file descriptor used by the `WriteStream`.</haxe_doc>
		</Open>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.stream.IWritable" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Writable.hx" module="js.node.stream.Writable" extern="1" interface="1">
		<cork public="1" set="method"><f a=""><x path="Void"/></f></cork>
		<destroy public="1" set="method"><f a="?error">
	<c path="js.lib.Error"/>
	<c path="js.node.stream.IWritable"/>
</f></destroy>
		<destroyed public="1" set="null"><x path="Bool"/></destroyed>
		<end public="1" set="method">
			<f a="chunk:?encoding:?callback">
				<d/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<f a=""><x path="Void"/></f>
					<f a="">
						<x path="Null"><c path="js.lib.Error"/></x>
						<x path="Void"/>
					</f>
				</x>
				<x path="Void"/>
			</f>
			<overloads><end public="1" set="method"><f a="?callback">
	<x path="haxe.extern.EitherType">
		<f a=""><x path="Void"/></f>
		<f a="">
			<x path="Null"><c path="js.lib.Error"/></x>
			<x path="Void"/>
		</f>
	</x>
	<x path="Void"/>
</f></end></overloads>
		</end>
		<setDefaultEncoding public="1" set="method"><f a="encoding">
	<c path="String"/>
	<c path="js.node.stream.IWritable"/>
</f></setDefaultEncoding>
		<uncork public="1" set="method"><f a=""><x path="Void"/></f></uncork>
		<writable public="1" set="null"><x path="Bool"/></writable>
		<writableEnded public="1" set="null"><x path="Bool"/></writableEnded>
		<writableFinished public="1" set="null"><x path="Bool"/></writableFinished>
		<writablehighWaterMark public="1" set="null"><x path="Int"/></writablehighWaterMark>
		<writableLength public="1" set="null"><x path="Int"/></writableLength>
		<writableObjectMode public="1" set="null"><x path="Bool"/></writableObjectMode>
		<write public="1" set="method"><f a="chunk:?encoding:?callback">
	<d/>
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<f a=""><x path="Void"/></f>
		<f a="">
			<x path="Null"><c path="js.lib.Error"/></x>
			<x path="Void"/>
		</f>
	</x>
	<x path="Bool"/>
</f></write>
		<isTTY public="1" set="null"><x path="Bool"/></isTTY>
		<haxe_doc>Writable interface used for type parameter constraints.
	See `Writable` for actual class documentation.</haxe_doc>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="js.node.stream.Writable" params="TSelf" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Writable.hx" extern="1">
		<extends path="js.node.Stream"><c path="js.node.stream.Writable.TSelf"/></extends>
		<cork public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The `writable.cork()` method forces all written data to be buffered in memory.
		The buffered data will be flushed when either the `stream.uncork()` or `stream.end()` methods are called.

		@see https://nodejs.org/api/stream.html#stream_writable_cork</haxe_doc>
		</cork>
		<destroy public="1" set="method">
			<f a="?error">
				<c path="js.lib.Error"/>
				<c path="js.node.stream.Writable.TSelf"/>
			</f>
			<haxe_doc>Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'` event unless `emitClose` is set in `false`.
		After this call, the writable stream has ended and subsequent calls to `write()` or `end()` will result in an `ERR_STREAM_DESTROYED` error.
		This is a destructive and immediate way to destroy a stream. Previous calls to `write()` may not have drained, and may trigger an `ERR_STREAM_DESTROYED` error.
		Use `end()` instead of destroy if data should flush before close, or wait for the `'drain'` event before destroying the stream.
		Implementors should not override this method, but instead implement `writable._destroy()`.

		@see https://nodejs.org/api/stream.html#stream_writable_destroy_error</haxe_doc>
		</destroy>
		<destroyed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` after `writable.destroy()` has been called.

		@see https://nodejs.org/api/stream.html#stream_writable_destroyed</haxe_doc>
		</destroyed>
		<end public="1" set="method">
			<f a="chunk:?encoding:?callback">
				<d/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<f a=""><x path="Void"/></f>
					<f a="">
						<x path="Null"><c path="js.lib.Error"/></x>
						<x path="Void"/>
					</f>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Calling the `writable.end()` method signals that no more data will be written to the Writable.
		The optional `chunk` and `encoding` arguments allow one final additional chunk of data to be written immediately before closing the stream.
		If provided, the optional `callback` function is attached as a listener for the 'finish' event.

		@see https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback</haxe_doc>
			<overloads><end public="1" set="method">
	<f a="?callback">
		<x path="haxe.extern.EitherType">
			<f a=""><x path="Void"/></f>
			<f a="">
				<x path="Null"><c path="js.lib.Error"/></x>
				<x path="Void"/>
			</f>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>Calling the `writable.end()` method signals that no more data will be written to the Writable.
		The optional `chunk` and `encoding` arguments allow one final additional chunk of data to be written immediately before closing the stream.
		If provided, the optional `callback` function is attached as a listener for the 'finish' event.

		@see https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback</haxe_doc>
</end></overloads>
		</end>
		<setDefaultEncoding public="1" set="method">
			<f a="encoding">
				<c path="String"/>
				<c path="js.node.stream.Writable.TSelf"/>
			</f>
			<haxe_doc>The `writable.setDefaultEncoding()` method sets the default `encoding` for a Writable stream.

		@see https://nodejs.org/api/stream.html#stream_writable_setdefaultencoding_encoding</haxe_doc>
		</setDefaultEncoding>
		<uncork public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The `writable.uncork()` method flushes all data buffered since `stream.cork()` was called.

		@see https://nodejs.org/api/stream.html#stream_writable_uncork</haxe_doc>
		</uncork>
		<writable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` if it is safe to call `writable.write()`.

		@see https://nodejs.org/api/stream.html#stream_writable_writable</haxe_doc>
		</writable>
		<writableEnded public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` after `writable.end()` has been called. This property
		does not indicate whether the data has been flushed, for this use
		`writable.writableFinished` instead.

		@see https://nodejs.org/api/stream.html#stream_writable_writableended</haxe_doc>
		</writableEnded>
		<writableFinished public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is set to `true` immediately before the 'finish' event is emitted.

		@see https://nodejs.org/api/stream.html#stream_writable_writablefinished</haxe_doc>
		</writableFinished>
		<writablehighWaterMark public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Return the value of `highWaterMark` passed when constructing this `Writable`.

		@see https://nodejs.org/api/stream.html#stream_writable_writablehighwatermark</haxe_doc>
		</writablehighWaterMark>
		<writableLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>This property contains the number of bytes (or objects) in the queue ready to be written.
		The value provides introspection data regarding the status of the `highWaterMark`.

		@see https://nodejs.org/api/stream.html#stream_writable_writablelength</haxe_doc>
		</writableLength>
		<writableObjectMode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Getter for the property `objectMode` of a given `Writable` stream.

		@see https://nodejs.org/api/stream.html#stream_writable_writableobjectmode</haxe_doc>
		</writableObjectMode>
		<write public="1" set="method">
			<f a="chunk:?encoding:?callback">
				<d/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<f a=""><x path="Void"/></f>
					<f a="">
						<x path="Null"><c path="js.lib.Error"/></x>
						<x path="Void"/>
					</f>
				</x>
				<x path="Bool"/>
			</f>
			<haxe_doc>The `writable.write()` method writes some data to the stream, and calls the supplied `callback` once the data has been fully handled.
		If an error occurs, the `callback` may or may not be called with the error as its first argument.
		To reliably detect write errors, add a listener for the `'error'` event.

		@see https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback</haxe_doc>
		</write>
		<_write set="method">
			<f a="chunk:encoding:callback">
				<d/>
				<c path="String"/>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>All `Writable` stream implementations must provide a `writable._write()` method to send data to the underlying resource.

		@see https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1</haxe_doc>
		</_write>
		<_writev set="method">
			<f a="chunks:callback">
				<c path="Array"><t path="js.node.stream.Chunk"/></c>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>This function **MUST NOT** be called by application code directly.
		It should be implemented by child classes, and called by the internal `Writable` class methods only.

		@see https://nodejs.org/api/stream.html#stream_writable_writev_chunks_callback</haxe_doc>
		</_writev>
		<_destroy set="method">
			<f a="err:callback">
				<x path="Null"><c path="js.lib.Error"/></x>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The `_destroy()` method is called by `writable.destroy()`.
		It can be overridden by child classes but it **must not** be called directly.

		@see https://nodejs.org/api/stream.html#stream_writable_destroy_err_callback</haxe_doc>
		</_destroy>
		<_final set="method">
			<f a="callback">
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The `_final()` method **must not** be called directly.
		t may be implemented by child classes, and if so, will be called by the internal `Writable` class methods only.

		@see https://nodejs.org/api/stream.html#stream_writable_final_callback</haxe_doc>
		</_final>
		<isTTY public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Terminal write streams (i.e. process.stdout) have this property set to true.
		It is false for any other write streams.

		@see https://nodejs.org/api/tty.html#tty_writestream_istty</haxe_doc>
		</isTTY>
		<new public="1" set="method">
			<f a="?options">
				<x path="js.node.stream.WritableNewOptionsAdapter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@see https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options</haxe_doc>
		</new>
		<haxe_doc>The Writable stream interface is an abstraction for a destination that you are writing data to.

	Examples of writable streams include:

		- http requests, on the client
		- http responses, on the server
		- fs write streams
		- zlib streams
		- crypto streams
		- tcp sockets
		- child process stdin
		- process.stdout, process.stderr</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"stream"</e>
	<e>"Writable"</e>
</m></meta>
	</class>
	<class path="js.node.fs.WriteStream" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/fs/WriteStream.hx" extern="1">
		<extends path="js.node.stream.Writable"><c path="js.node.fs.WriteStream"/></extends>
		<path public="1">
			<t path="js.node.FsPath"/>
			<haxe_doc>The path to the file the stream is writing to as specified in the first argument to `Fs.createWriteStream`.
		If path is passed as a string, then writeStream.path will be a string.
		If path is passed as a Buffer, then writeStream.path will be a Buffer.</haxe_doc>
		</path>
		<bytesWritten public="1">
			<x path="Int"/>
			<haxe_doc>The number of bytes written so far.
		Does not include data that is still queued for writing.</haxe_doc>
		</bytesWritten>
		<haxe_doc>Writable file stream.</haxe_doc>
	</class>
	<class path="js.node.http.Agent" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/Agent.hx" extern="1">
		<createConnection public="1" set="method">
			<f a="options:?callback">
				<t path="js.node.net.SocketConnectOptionsTcp"/>
				<f a="err:stream">
					<c path="js.lib.Error"/>
					<c path="js.node.net.Socket"/>
					<x path="Void"/>
				</f>
				<c path="js.node.net.Socket"/>
			</f>
			<haxe_doc>Produces a socket/stream to be used for HTTP requests.

		By default, this function is the same as `net.createConnection()`.
		However, custom agents may override this method in case greater flexibility is desired.

		A socket/stream can be supplied in one of two ways: by returning the socket/stream from this function,
		or by passing the socket/stream to `callback`.

		`callback` has a signature of `(err, stream)`.</haxe_doc>
		</createConnection>
		<keepSocketAlive public="1" set="method">
			<f a="socket">
				<c path="js.node.net.Socket"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when `socket` is detached from a request and could be persisted by the `Agent`.

		This method can be overridden by a particular `Agent` subclass.
		If this method returns a falsy value, the socket will be destroyed instead of persisting it for use with the next request.</haxe_doc>
		</keepSocketAlive>
		<reuseSocket public="1" set="method">
			<f a="socket:request">
				<c path="js.node.net.Socket"/>
				<c path="js.node.http.ClientRequest"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when `socket` is attached to `request` after being persisted because of the keep-alive options.

		This method can be overridden by a particular `Agent` subclass.</haxe_doc>
		</reuseSocket>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroy any sockets that are currently in use by the agent.

		It is usually not necessary to do this. However, if using an agent with `keepAlive` enabled,
		then it is best to explicitly shut down the agent when it will no longer be used. Otherwise,
		sockets may hang open for quite a long time before the server terminates them.</haxe_doc>
		</destroy>
		<freeSockets public="1" set="null">
			<x path="haxe.DynamicAccess"><c path="Array"><c path="js.node.net.Socket"/></c></x>
			<haxe_doc>An object which contains arrays of sockets currently awaiting use by the agent when keepAlive is enabled.
		Do not modify.</haxe_doc>
		</freeSockets>
		<getName public="1" set="method">
			<f a="options">
				<t path="js.node.HttpRequestOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get a unique name for a set of request options, to determine whether a connection can be reused.
		For an HTTP agent, this returns `host:port:localAddress` or `host:port:localAddress:family`.
		For an HTTPS agent, the name includes the CA, cert, ciphers, and other HTTPS/TLS-specific options that determine socket reusability.</haxe_doc>
		</getName>
		<maxFreeSockets public="1">
			<x path="Float"/>
			<haxe_doc>By default set to `256`.
		For agents with `keepAlive` enabled, this sets the maximum number of sockets that will be left open in the free state.</haxe_doc>
		</maxFreeSockets>
		<maxSockets public="1">
			<x path="Float"/>
			<haxe_doc>By default set to `Infinity`.
		Determines how many concurrent sockets the agent can have open per origin. Origin is the returned value of `getName()`.</haxe_doc>
		</maxSockets>
		<requests public="1" set="null">
			<x path="haxe.DynamicAccess"><c path="Array"><c path="js.node.http.ClientRequest"/></c></x>
			<haxe_doc>An object which contains queues of requests that have not yet been assigned to sockets.
		Do not modify.</haxe_doc>
		</requests>
		<sockets public="1" set="null">
			<x path="haxe.DynamicAccess"><c path="Array"><c path="js.node.net.Socket"/></c></x>
			<haxe_doc>An object which contains arrays of sockets currently in use by the agent.
		Do not modify.</haxe_doc>
		</sockets>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.node.http.HttpAgentOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>`options` in socket.connect() are also supported.

		The default `http.globalAgent` that is used by `http.request()` has all of these values set to their respective defaults.

		To configure any of them, a custom `http.Agent` instance must be created.</haxe_doc>
		</new>
		<haxe_doc>An `Agent` is responsible for managing connection persistence and reuse for HTTP clients.
	It maintains a queue of pending requests for a given host and port, reusing a single socket connection for each until the queue is empty,
	at which time the socket is either destroyed or put into a pool where it is kept to be used again for requests to the same host and port.
	Whether it is destroyed or pooled depends on the `keepAlive` option.

	Pooled connections have TCP Keep-Alive enabled for them, but servers may still close idle connections, in which case they will be removed
	from the pool and a new connection will be made when a new HTTP request is made for that host and port.
	Servers may also refuse to allow multiple requests over the same connection, in which case the connection will have to be remade for every
	request and cannot be pooled.
	The `Agent` will still make the requests to that server, but each one will occur over a new connection.

	When a connection is closed by the client or the server, it is removed from the pool.
	Any unused sockets in the pool will be unrefed so as not to keep the Node.js process running when there are no outstanding requests.
	(see [socket.unref()](https://nodejs.org/api/net.html#net_socket_unref)).

	It is good practice, to `destroy()` an Agent instance when it is no longer in use, because unused sockets consume OS resources.

	Sockets are removed from an agent when the socket emits either a `'close'` event or an `'agentRemove'` event.
	When intending to keep one HTTP request open for a long time without keeping it in the agent, something like the following may be done.

	An agent may also be used for an individual request. By providing `{agent: false}` as an option to the `http.get()` or `http.request()` functions,
	a one-time use `Agent` with default options will be used for the client connection.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"http"</e>
	<e>"Agent"</e>
</m></meta>
	</class>
	<typedef path="js.node.http.HttpAgentOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/Agent.hx" module="js.node.http.Agent">
		<a>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Socket timeout in milliseconds. This will set the timeout when the socket is created.</haxe_doc>
			</timeout>
			<maxSockets>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Maximum number of sockets to allow per host. Each request will use a new socket until the maximum is reached.

		Default: `Infinity`.</haxe_doc>
			</maxSockets>
			<maxFreeSockets>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Maximum number of sockets to leave open in a free state. Only relevant if `keepAlive` is set to `true`.

		Default: `256`.</haxe_doc>
			</maxFreeSockets>
			<keepAliveMsecs>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>When using the `keepAlive` option, specifies the [initial delay](https://nodejs.org/api/net.html#net_socket_setkeepalive_enable_initialdelay) for TCP Keep-Alive packets.
		Ignored when the `keepAlive` option is `false` or `undefined`.

		Default: `1000`.</haxe_doc>
			</keepAliveMsecs>
			<keepAlive>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Keep sockets around even when there are no outstanding requests, so they can be used for future requests
		without having to reestablish a TCP connection.
		Not to be confused with the `keep-alive` value of the `Connection` header.
		The `Connection: keep-alive` header is always sent when using an agent except when the `Connection` header
		is explicitly specified or when the `keepAlive` and `maxSockets` options are respectively set to `false` and `Infinity`,
		in which case `Connection: close` will be used.

		Default: `false`</haxe_doc>
			</keepAlive>
		</a>
		<haxe_doc>Options for `Agent` constructor.</haxe_doc>
	</typedef>
	<abstract path="js.node.http.ClientRequestEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/ClientRequest.hx" module="js.node.http.ClientRequest">
		<this><x path="js.node.events.Event"><c path="js.node.http.ClientRequestEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.http.ClientRequestEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by `ClientRequest`</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.http._ClientRequest.ClientRequestEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/ClientRequest.hx" private="1" module="js.node.http.ClientRequest" extern="1" final="1">
	<Abort public="1" get="inline" set="null" expr="cast &quot;abort&quot;" line="39" static="1">
		<x path="js.node.http.ClientRequestEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "abort"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the request has been aborted by the client.
		This event is only emitted on the first call to `abort()`.</haxe_doc>
	</Abort>
	<Connect public="1" get="inline" set="null" expr="cast &quot;connect&quot;" line="46" static="1">
		<x path="js.node.http.ClientRequestEvent"><f a="response:socket:head">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.net.Socket"/>
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "connect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted each time a server responds to a request with a `CONNECT` method.
		If this event is not being listened for, clients receiving a `CONNECT` method will have their connections closed.</haxe_doc>
	</Connect>
	<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="56" static="1">
		<x path="js.node.http.ClientRequestEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "continue"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the server sends a '100 Continue' HTTP response,
		usually because the request contained 'Expect: 100-continue'.
		This is an instruction that the client should send the request body.</haxe_doc>
	</Continue>
	<Information public="1" get="inline" set="null" expr="cast &quot;information&quot;" line="63" static="1">
		<x path="js.node.http.ClientRequestEvent"><f a="">
	<t path="js.node.http.InformationEventData"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "information"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the server sends a 1xx intermediate response (excluding 101 Upgrade).
		The listeners of this event will receive an object containing the HTTP version, status code, status message,
		key-value headers object, and array with the raw header names followed by their respective values.</haxe_doc>
	</Information>
	<Response public="1" get="inline" set="null" expr="cast &quot;response&quot;" line="68" static="1">
		<x path="js.node.http.ClientRequestEvent"><f a="">
	<c path="js.node.http.IncomingMessage"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "response"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when a response is received to this request. This event is emitted only once.</haxe_doc>
	</Response>
	<Socket public="1" get="inline" set="null" expr="cast &quot;socket&quot;" line="73" static="1">
		<x path="js.node.http.ClientRequestEvent"><f a="">
	<c path="js.node.net.Socket"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "socket"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted after a socket is assigned to this request.</haxe_doc>
	</Socket>
	<Timeout public="1" get="inline" set="null" expr="cast &quot;timeout&quot;" line="81" static="1">
		<x path="js.node.http.ClientRequestEvent"><f a="">
	<c path="js.node.net.Socket"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "timeout"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the underlying socket times out from inactivity.
		This only notifies that the socket has been idle. The request must be aborted manually.

		See also: [request.setTimeout()](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).</haxe_doc>
	</Timeout>
	<Upgrade public="1" get="inline" set="null" expr="cast &quot;upgrade&quot;" line="89" static="1">
		<x path="js.node.http.ClientRequestEvent"><f a="response:socket:head">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.net.Socket"/>
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "upgrade"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted each time a server responds to a request with an upgrade.
		If this event is not being listened for and the response status code is 101 Switching Protocols,
		clients receiving an upgrade header will have their connections closed.</haxe_doc>
	</Upgrade>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.http._ClientRequest.ClientRequestEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/ClientRequest.hx" private="1" module="js.node.http.ClientRequest" extern="1" final="1">
		<Abort public="1" get="inline" set="null" expr="cast &quot;abort&quot;" line="39" static="1">
			<x path="js.node.http.ClientRequestEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "abort"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the request has been aborted by the client.
		This event is only emitted on the first call to `abort()`.</haxe_doc>
		</Abort>
		<Connect public="1" get="inline" set="null" expr="cast &quot;connect&quot;" line="46" static="1">
			<x path="js.node.http.ClientRequestEvent"><f a="response:socket:head">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.net.Socket"/>
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "connect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted each time a server responds to a request with a `CONNECT` method.
		If this event is not being listened for, clients receiving a `CONNECT` method will have their connections closed.</haxe_doc>
		</Connect>
		<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="56" static="1">
			<x path="js.node.http.ClientRequestEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "continue"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the server sends a '100 Continue' HTTP response,
		usually because the request contained 'Expect: 100-continue'.
		This is an instruction that the client should send the request body.</haxe_doc>
		</Continue>
		<Information public="1" get="inline" set="null" expr="cast &quot;information&quot;" line="63" static="1">
			<x path="js.node.http.ClientRequestEvent"><f a="">
	<t path="js.node.http.InformationEventData"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "information"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the server sends a 1xx intermediate response (excluding 101 Upgrade).
		The listeners of this event will receive an object containing the HTTP version, status code, status message,
		key-value headers object, and array with the raw header names followed by their respective values.</haxe_doc>
		</Information>
		<Response public="1" get="inline" set="null" expr="cast &quot;response&quot;" line="68" static="1">
			<x path="js.node.http.ClientRequestEvent"><f a="">
	<c path="js.node.http.IncomingMessage"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "response"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when a response is received to this request. This event is emitted only once.</haxe_doc>
		</Response>
		<Socket public="1" get="inline" set="null" expr="cast &quot;socket&quot;" line="73" static="1">
			<x path="js.node.http.ClientRequestEvent"><f a="">
	<c path="js.node.net.Socket"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "socket"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted after a socket is assigned to this request.</haxe_doc>
		</Socket>
		<Timeout public="1" get="inline" set="null" expr="cast &quot;timeout&quot;" line="81" static="1">
			<x path="js.node.http.ClientRequestEvent"><f a="">
	<c path="js.node.net.Socket"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "timeout"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the underlying socket times out from inactivity.
		This only notifies that the socket has been idle. The request must be aborted manually.

		See also: [request.setTimeout()](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).</haxe_doc>
		</Timeout>
		<Upgrade public="1" get="inline" set="null" expr="cast &quot;upgrade&quot;" line="89" static="1">
			<x path="js.node.http.ClientRequestEvent"><f a="response:socket:head">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.net.Socket"/>
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "upgrade"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted each time a server responds to a request with an upgrade.
		If this event is not being listened for and the response status code is 101 Switching Protocols,
		clients receiving an upgrade header will have their connections closed.</haxe_doc>
		</Upgrade>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.http.ClientRequest" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/ClientRequest.hx" extern="1">
		<extends path="js.node.stream.Writable"><c path="js.node.http.ClientRequest"/></extends>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the request as aborting. Calling this will cause remaining data in the response to be dropped and the socket to be destroyed.</haxe_doc>
		</abort>
		<aborted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The request.aborted property will be true if the request has been aborted.</haxe_doc>
		</aborted>
		<connection public="1" set="null">
			<c path="js.node.net.Socket"/>
			<haxe_doc>See `request.socket`.</haxe_doc>
		</connection>
		<finished public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The `response.finished` property will be true if `response.end()` has been called.</haxe_doc>
		</finished>
		<flushHeaders public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush the request headers.

		For efficiency reasons, node.js normally buffers the request headers until you call `request.end()`
		or write the first chunk of request data. It then tries hard to pack the request headers and data
		into a single TCP packet.

		That's usually what you want (it saves a TCP round-trip) but not when the first data isn't sent
		until possibly much later. `flushHeaders` lets you bypass the optimization and kickstart the request.</haxe_doc>
		</flushHeaders>
		<getHeader public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
				</x>
			</f>
			<haxe_doc>Reads out a header on the request. The name is case-insensitive.
		The type of the return value depends on the arguments provided to `request.setHeader()`.</haxe_doc>
		</getHeader>
		<maxHeadersCount public="1">
			<x path="Null"><x path="Int"/></x>
			<haxe_doc>Limits maximum response headers count. If set to 0, no limit will be applied.

		Default: `2000`</haxe_doc>
		</maxHeadersCount>
		<path public="1" set="null">
			<c path="String"/>
			<haxe_doc>The request path.</haxe_doc>
		</path>
		<removeHeader public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a header that's already defined into headers object.</haxe_doc>
		</removeHeader>
		<setHeader public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a single header value for headers object.
		If this header already exists in the to-be-sent headers, its value will be replaced.
		Use an array of strings here to send multiple headers with the same name.
		Non-string values will be stored without modification. Therefore, `request.getHeader()` may return non-string values.
		However, the non-string values will be converted to strings for network transmission.</haxe_doc>
			<overloads><setHeader public="1" set="method">
	<f a="name:value">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Void"/>
	</f>
	<haxe_doc>Sets a single header value for headers object.
		If this header already exists in the to-be-sent headers, its value will be replaced.
		Use an array of strings here to send multiple headers with the same name.
		Non-string values will be stored without modification. Therefore, `request.getHeader()` may return non-string values.
		However, the non-string values will be converted to strings for network transmission.</haxe_doc>
</setHeader></overloads>
		</setHeader>
		<setNoDelay public="1" set="method">
			<f a="?noDelay">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Once a socket is assigned to this request and is connected
		`socket.setNoDelay` will be called.</haxe_doc>
		</setNoDelay>
		<setSocketKeepAlive public="1" set="method">
			<f a="enable:?initialDelay">
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Once a socket is assigned to this request and is connected
		`socket.setKeepAlive`() will be called.</haxe_doc>
			<overloads><setSocketKeepAlive public="1" set="method">
	<f a="?initialDelay">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Once a socket is assigned to this request and is connected
		`socket.setKeepAlive`() will be called.</haxe_doc>
</setSocketKeepAlive></overloads>
		</setSocketKeepAlive>
		<setTimeout public="1" set="method">
			<f a="timeout:?callback">
				<x path="Int"/>
				<f a="">
					<c path="js.node.net.Socket"/>
					<x path="Void"/>
				</f>
				<c path="js.node.http.ClientRequest"/>
			</f>
			<haxe_doc>Once a socket is assigned to this request and is connected `socket.setTimeout()` will be called.</haxe_doc>
		</setTimeout>
		<socket public="1" set="null">
			<c path="js.node.net.Socket"/>
			<haxe_doc>Reference to the underlying socket. Usually users will not want to access this property.
		In particular, the socket will not emit `'readable'` events because of how the protocol parser attaches to the socket.
		The `socket` may also be accessed via `request.connection`.</haxe_doc>
		</socket>
		<haxe_doc>This object is created internally and returned from http.request().
	It represents an in-progress request whose header has already been queued.
	The header is still mutable using the `setHeader(name, value)`, `getHeader(name)`, `removeHeader(name)` API.
	The actual header will be sent along with the first data chunk or when calling `request.end()`.

	To get the response, add a listener for `'response'` to the request object.
	`'response'` will be emitted from the request object when the response headers have been received.
	The `'response'` event is executed with one argument which is an instance of `http.IncomingMessage`.

	During the `'response'` event, one can add listeners to the response object; particularly to listen for the `'data'` event.

	If no `'response'` handler is added, then the response will be entirely discarded. However,
	if a `'response'` event handler is added, then the data from the response object *must* be consumed,
	either by calling `response.read()` whenever there is a `'readable'` event, or by adding a `'data'` handler,
	or by calling the `.resume()` method. Until the data is consumed, the `'end'` event will not fire.
	Also, until the data is read it will consume memory that can eventually lead to a 'process out of memory' error.

	Unlike the `request` object, if the response closes prematurely, the response object does not emit an `'error'` event
	but instead emits the `'aborted'` event.

	Node.js does not check whether Content-Length and the length of the body which has been transmitted are equal or not.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"http"</e>
	<e>"ClientRequest"</e>
</m></meta>
	</class>
	<typedef path="js.node.http.InformationEventData" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/ClientRequest.hx" module="js.node.http.ClientRequest"><a>
	<statusMessage><c path="String"/></statusMessage>
	<statusCode><x path="Int"/></statusCode>
	<rawHeaders><c path="Array"><c path="String"/></c></rawHeaders>
	<httpVersionMinor><x path="Int"/></httpVersionMinor>
	<httpVersionMajor><x path="Int"/></httpVersionMajor>
	<httpVersion><c path="String"/></httpVersion>
	<headers><x path="haxe.DynamicAccess"><c path="String"/></x></headers>
</a></typedef>
	<abstract path="js.node.http.IncomingMessageeEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/IncomingMessage.hx" module="js.node.http.IncomingMessage">
		<this><x path="js.node.events.Event"><c path="js.node.http.IncomingMessageeEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.http.IncomingMessageeEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by the `IncomingMessage` objects in addition to its parent class events.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.http._IncomingMessage.IncomingMessageeEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/IncomingMessage.hx" private="1" module="js.node.http.IncomingMessage" extern="1" final="1">
	<Aborted public="1" get="inline" set="null" expr="cast &quot;aborted&quot;" line="42" static="1">
		<x path="js.node.http.IncomingMessageeEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "aborted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the request has been aborted.</haxe_doc>
	</Aborted>
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="47" static="1">
		<x path="js.node.http.IncomingMessageeEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Indicates that the underlying connection was closed.</haxe_doc>
	</Close>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.http._IncomingMessage.IncomingMessageeEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/IncomingMessage.hx" private="1" module="js.node.http.IncomingMessage" extern="1" final="1">
		<Aborted public="1" get="inline" set="null" expr="cast &quot;aborted&quot;" line="42" static="1">
			<x path="js.node.http.IncomingMessageeEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "aborted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the request has been aborted.</haxe_doc>
		</Aborted>
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="47" static="1">
			<x path="js.node.http.IncomingMessageeEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Indicates that the underlying connection was closed.</haxe_doc>
		</Close>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.http.IncomingMessage" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/IncomingMessage.hx" extern="1">
		<extends path="js.node.stream.Readable"><c path="js.node.http.IncomingMessage"/></extends>
		<aborted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The `aborted` property will be `true` if the request has been aborted.</haxe_doc>
		</aborted>
		<complete public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The `complete` property will be `true` if a complete HTTP message has been received and successfully parsed.</haxe_doc>
		</complete>
		<destroy public="1" set="method" override="1">
			<f a="?error">
				<c path="js.lib.Error"/>
				<c path="js.node.http.IncomingMessage"/>
			</f>
			<haxe_doc>Calls `destroy()` on the socket that received the `IncomingMessage`.
		If `error` is provided, an `'error'` event is emitted and `error` is passed as an argument to any listeners on the event.</haxe_doc>
		</destroy>
		<headers public="1" set="null">
			<x path="haxe.DynamicAccess"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
			<haxe_doc>The request/response headers object.

		Key-value pairs of header names and values. Header names are lower-cased.

		Duplicates in raw headers are handled in the following ways, depending on the header name:

		- Duplicates of `age`, `authorization`, `content-length`, `content-type`, `etag`, `expires`, `from`, `host`, `if-modified-since`, `if-unmodified-since`,
		  `last-modified`, `location`, `max-forwards`, `proxy-authorization`, `referer`, `retry-after`, or `user-agent` are discarded.
		- `set-cookie` is always an array. Duplicates are added to the array.
		- For duplicate `cookie` headers, the values are joined together with '; '.
		- For all other headers, the values are joined together with ', '.</haxe_doc>
		</headers>
		<httpVersion public="1" set="null">
			<c path="String"/>
			<haxe_doc>In case of server request, the HTTP version sent by the client.
		In the case of client response, the HTTP version of the connected-to server.
		Probably either `'1.1'` or `'1.0'`.</haxe_doc>
		</httpVersion>
		<httpVersionMajor public="1" set="null">
			<x path="Int"/>
			<haxe_doc>HTTP Version first integer</haxe_doc>
		</httpVersionMajor>
		<httpVersionMinor public="1" set="null">
			<x path="Int"/>
			<haxe_doc>HTTP Version second integer</haxe_doc>
		</httpVersionMinor>
		<method public="1" set="null">
			<x path="js.node.http.Method"/>
			<haxe_doc>*Only valid for request obtained from* `Server`.

		The request method as a string.
		Read only. Example: `'GET'`, `'DELETE'`.</haxe_doc>
		</method>
		<rawHeaders public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>The raw request/response headers list exactly as they were received.

		The keys and values are in the same list. It is not a list of tuples. So, the even-numbered offsets are key values,
		and the odd-numbered offsets are the associated values.

		Header names are not lowercased, and duplicates are not merged.</haxe_doc>
		</rawHeaders>
		<rawTrailers public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>The raw request/response trailer keys and values exactly as they were received.
		Only populated at the `'end'` event.</haxe_doc>
		</rawTrailers>
		<setTimeout public="1" set="method">
			<f a="msecs:?callback">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `connection.setTimeout(msecs, callback)`.</haxe_doc>
		</setTimeout>
		<socket public="1" set="null">
			<c path="js.node.net.Socket"/>
			<haxe_doc>The `Socket` object associated with the connection.

		With HTTPS support, use `request.socket.getPeerCertificate()` to obtain the client's authentication details.</haxe_doc>
		</socket>
		<connection public="1" set="null">
			<c path="js.node.net.Socket"/>
			<haxe_doc>Alias for `socket`.</haxe_doc>
		</connection>
		<statusCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>*Only valid for response obtained from* `ClientRequest`.
		The 3-digit HTTP response status code. E.G. `404`.</haxe_doc>
		</statusCode>
		<statusMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>*Only valid for response obtained from* `ClientRequest`.
		The HTTP response status message (reason phrase). E.G. `OK` or `Internal Server Error`.</haxe_doc>
		</statusMessage>
		<trailers public="1" set="null">
			<x path="haxe.DynamicAccess"><c path="String"/></x>
			<haxe_doc>The request/response trailers object.
		Only populated after the `'end'` event.</haxe_doc>
		</trailers>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>*Only valid for request obtained from* `Server`.

		Request URL string. This contains only the URL that is present in the actual HTTP request.</haxe_doc>
		</url>
		<haxe_doc>An `IncomingMessage` object is created by `http.Server` or `http.ClientRequest` and passed as the first argument to the `'request'` and `'response'` event respectively.
	It may be used to access response status, headers and data.

	It implements the `Readable Stream` interface, as well as the following additional events, methods, and properties.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"http"</e>
	<e>"IncomingMessage"</e>
</m></meta>
	</class>
	<abstract path="js.node.http.Method" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/Method.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible HTTP methods as described in
	http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.http._Method.Method_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/Method.hx" private="1" module="js.node.http.Method" extern="1" final="1">
	<Acl public="1" get="inline" set="null" expr="cast &quot;ACL&quot;" line="30" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "ACL"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Acl>
	<Bind public="1" get="inline" set="null" expr="cast &quot;BIND&quot;" line="31" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "BIND"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Bind>
	<Checkout public="1" get="inline" set="null" expr="cast &quot;CHECKOUT&quot;" line="32" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "CHECKOUT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Checkout>
	<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="33" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "CONNECT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Connect>
	<Copy public="1" get="inline" set="null" expr="cast &quot;COPY&quot;" line="34" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "COPY"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Copy>
	<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="35" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "DELETE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Delete>
	<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="36" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "GET"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Get>
	<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="37" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "HEAD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Head>
	<Link public="1" get="inline" set="null" expr="cast &quot;LINK&apos;&quot;" line="38" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "LINK'"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Link>
	<Lock public="1" get="inline" set="null" expr="cast &quot;LOCK&apos;&quot;" line="39" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "LOCK'"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Lock>
	<MSearch public="1" get="inline" set="null" expr="cast &quot;M-SEARCH&apos;&quot;" line="40" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "M-SEARCH'"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MSearch>
	<Merge public="1" get="inline" set="null" expr="cast &quot;MERGE&apos;&quot;" line="41" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "MERGE'"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Merge>
	<Mkactivity public="1" get="inline" set="null" expr="cast &quot;MKACTIVITY&apos;&quot;" line="42" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "MKACTIVITY'"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Mkactivity>
	<Mkcalendar public="1" get="inline" set="null" expr="cast &quot;MKCALENDAR&apos;&quot;" line="43" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "MKCALENDAR'"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Mkcalendar>
	<Mkcol public="1" get="inline" set="null" expr="cast &quot;MKCOL&apos;&quot;" line="44" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "MKCOL'"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Mkcol>
	<Move public="1" get="inline" set="null" expr="cast &quot;MOVE&apos;&quot;" line="45" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "MOVE'"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Move>
	<Notify public="1" get="inline" set="null" expr="cast &quot;NOTIFY&apos;&quot;" line="46" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "NOTIFY'"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Notify>
	<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="47" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "OPTIONS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Options>
	<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="48" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "PATCH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Patch>
	<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="49" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "POST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Post>
	<Propfind public="1" get="inline" set="null" expr="cast &quot;PROPFIND&quot;" line="50" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "PROPFIND"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Propfind>
	<Proppatch public="1" get="inline" set="null" expr="cast &quot;PROPPATCH&quot;" line="51" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "PROPPATCH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Proppatch>
	<Purge public="1" get="inline" set="null" expr="cast &quot;PURGE&quot;" line="52" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "PURGE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Purge>
	<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="53" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "PUT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Put>
	<Rebind public="1" get="inline" set="null" expr="cast &quot;REBIND&quot;" line="54" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "REBIND"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Rebind>
	<Report public="1" get="inline" set="null" expr="cast &quot;REPORT&quot;" line="55" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "REPORT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Report>
	<Search public="1" get="inline" set="null" expr="cast &quot;SEARCH&quot;" line="56" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "SEARCH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Search>
	<Subscribe public="1" get="inline" set="null" expr="cast &quot;SUBSCRIBE&quot;" line="57" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "SUBSCRIBE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Subscribe>
	<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="58" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "TRACE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Trace>
	<Unbind public="1" get="inline" set="null" expr="cast &quot;UNBIND&quot;" line="59" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "UNBIND"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Unbind>
	<Unlink public="1" get="inline" set="null" expr="cast &quot;UNLINK&quot;" line="60" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "UNLINK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Unlink>
	<Unlock public="1" get="inline" set="null" expr="cast &quot;UNLOCK&quot;" line="61" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "UNLOCK"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Unlock>
	<Unsubscribe public="1" get="inline" set="null" expr="cast &quot;UNSUBSCRIBE&quot;" line="62" static="1">
		<x path="js.node.http.Method"/>
		<meta>
			<m n=":value"><e>cast "UNSUBSCRIBE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Unsubscribe>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.http._Method.Method_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/Method.hx" private="1" module="js.node.http.Method" extern="1" final="1">
		<Acl public="1" get="inline" set="null" expr="cast &quot;ACL&quot;" line="30" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "ACL"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Acl>
		<Bind public="1" get="inline" set="null" expr="cast &quot;BIND&quot;" line="31" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "BIND"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Bind>
		<Checkout public="1" get="inline" set="null" expr="cast &quot;CHECKOUT&quot;" line="32" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "CHECKOUT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Checkout>
		<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="33" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "CONNECT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Connect>
		<Copy public="1" get="inline" set="null" expr="cast &quot;COPY&quot;" line="34" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "COPY"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Copy>
		<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="35" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "DELETE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Delete>
		<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="36" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "GET"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Get>
		<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="37" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "HEAD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Head>
		<Link public="1" get="inline" set="null" expr="cast &quot;LINK&apos;&quot;" line="38" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "LINK'"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Link>
		<Lock public="1" get="inline" set="null" expr="cast &quot;LOCK&apos;&quot;" line="39" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "LOCK'"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Lock>
		<MSearch public="1" get="inline" set="null" expr="cast &quot;M-SEARCH&apos;&quot;" line="40" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "M-SEARCH'"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MSearch>
		<Merge public="1" get="inline" set="null" expr="cast &quot;MERGE&apos;&quot;" line="41" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "MERGE'"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Merge>
		<Mkactivity public="1" get="inline" set="null" expr="cast &quot;MKACTIVITY&apos;&quot;" line="42" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "MKACTIVITY'"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Mkactivity>
		<Mkcalendar public="1" get="inline" set="null" expr="cast &quot;MKCALENDAR&apos;&quot;" line="43" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "MKCALENDAR'"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Mkcalendar>
		<Mkcol public="1" get="inline" set="null" expr="cast &quot;MKCOL&apos;&quot;" line="44" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "MKCOL'"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Mkcol>
		<Move public="1" get="inline" set="null" expr="cast &quot;MOVE&apos;&quot;" line="45" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "MOVE'"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Move>
		<Notify public="1" get="inline" set="null" expr="cast &quot;NOTIFY&apos;&quot;" line="46" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "NOTIFY'"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Notify>
		<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="47" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "OPTIONS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Options>
		<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="48" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "PATCH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Patch>
		<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="49" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "POST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Post>
		<Propfind public="1" get="inline" set="null" expr="cast &quot;PROPFIND&quot;" line="50" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "PROPFIND"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Propfind>
		<Proppatch public="1" get="inline" set="null" expr="cast &quot;PROPPATCH&quot;" line="51" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "PROPPATCH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Proppatch>
		<Purge public="1" get="inline" set="null" expr="cast &quot;PURGE&quot;" line="52" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "PURGE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Purge>
		<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="53" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "PUT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Put>
		<Rebind public="1" get="inline" set="null" expr="cast &quot;REBIND&quot;" line="54" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "REBIND"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Rebind>
		<Report public="1" get="inline" set="null" expr="cast &quot;REPORT&quot;" line="55" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "REPORT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Report>
		<Search public="1" get="inline" set="null" expr="cast &quot;SEARCH&quot;" line="56" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "SEARCH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Search>
		<Subscribe public="1" get="inline" set="null" expr="cast &quot;SUBSCRIBE&quot;" line="57" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "SUBSCRIBE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Subscribe>
		<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="58" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "TRACE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Trace>
		<Unbind public="1" get="inline" set="null" expr="cast &quot;UNBIND&quot;" line="59" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "UNBIND"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Unbind>
		<Unlink public="1" get="inline" set="null" expr="cast &quot;UNLINK&quot;" line="60" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "UNLINK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Unlink>
		<Unlock public="1" get="inline" set="null" expr="cast &quot;UNLOCK&quot;" line="61" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "UNLOCK"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Unlock>
		<Unsubscribe public="1" get="inline" set="null" expr="cast &quot;UNSUBSCRIBE&quot;" line="62" static="1">
			<x path="js.node.http.Method"/>
			<meta>
				<m n=":value"><e>cast "UNSUBSCRIBE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Unsubscribe>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.http.ServerEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/Server.hx" module="js.node.http.Server">
		<this><x path="js.node.events.Event"><c path="js.node.http.ServerEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.http.ServerEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by `http.Server` class in addition to
	its parent `net.Server` class.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.http._Server.ServerEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/Server.hx" private="1" module="js.node.http.Server" extern="1" final="1">
	<CheckContinue public="1" get="inline" set="null" expr="cast &quot;checkContinue&quot;" line="50" static="1">
		<x path="js.node.http.ServerEvent"><f a="request:response">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.http.ServerResponse"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "checkContinue"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted each time a request with an HTTP Expect: `100-continue` is received.
		If this event is not listened for, the server will automatically respond with a `100 Continue` as appropriate.

		Handling this event involves calling `response.writeContinue` if the client should continue
		to send the request body, or generating an appropriate HTTP response (e.g. 400 Bad Request) if the client
		should not continue to send the request body.

		When this event is emitted and handled, the 'request' event will not be emitted.</haxe_doc>
	</CheckContinue>
	<CheckExpectation public="1" get="inline" set="null" expr="cast &quot;checkExpectation&quot;" line="62" static="1">
		<x path="js.node.http.ServerEvent"><f a="request:response">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.http.ServerResponse"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "checkExpectation"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted each time a request with an HTTP `Expect` header is received, where the value is not `100-continue`.
		If this event is not listened for, the server will automatically respond with a `417 Expectation Failed` as appropriate.

		When this event is emitted and handled, the `'request'` event will not be emitted.</haxe_doc>
	</CheckExpectation>
	<ClientError public="1" get="inline" set="null" expr="cast &quot;clientError&quot;" line="76" static="1">
		<x path="js.node.http.ServerEvent"><f a="exception:socket">
	<c path="js.lib.Error"/>
	<c path="js.node.net.Socket"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "clientError"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If a client connection emits an `'error'` event, it will be forwarded here.
		Listener of this event is responsible for closing/destroying the underlying socket.
		For example, one may wish to more gracefully close the socket with a custom HTTP response instead of abruptly severing the connection.

		Default behavior is to try close the socket with a HTTP '400 Bad Request', or a HTTP '431 Request Header Fields Too Large'
		in the case of a `HPE_HEADER_OVERFLOW` error. If the socket is not writable it is immediately destroyed.</haxe_doc>
	</ClientError>
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="84" static="1">
		<x path="js.node.http.ServerEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the server closes.</haxe_doc>
	</Close>
	<Connect public="1" get="inline" set="null" expr="cast &quot;connect&quot;" line="94" static="1">
		<x path="js.node.http.ServerEvent"><f a="request:socekt:head">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.net.Socket"/>
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "connect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted each time a client requests an HTTP `CONNECT` method.
		If this event is not listened for, then clients requesting a `CONNECT` method will have their connections closed.

		After this event is emitted, the request's socket will not have a `'data'` event listener,
		meaning it will need to be bound in order to handle data sent to the server on that socket.</haxe_doc>
	</Connect>
	<Connection public="1" get="inline" set="null" expr="cast &quot;connection&quot;" line="111" static="1">
		<x path="js.node.http.ServerEvent"><f a="">
	<c path="js.node.net.Socket"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "connection"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This event is emitted when a new TCP stream is established.
		`socket` is typically an object of type net.Socket. Usually users will not want to access this event.
		In particular, the socket will not emit `'readable'` events because of how the protocol parser attaches to the socket.
		The `socket` can also be accessed at `request.connection`.

		This event can also be explicitly emitted by users to inject connections into the HTTP server. In that case,
		any `Duplex` stream can be passed.

		If `socket.setTimeout()` is called here, the timeout will be replaced with `server.keepAliveTimeout`
		when the socket has served a request (if `server.keepAliveTimeout` is non-zero).</haxe_doc>
	</Connection>
	<Request public="1" get="inline" set="null" expr="cast &quot;request&quot;" line="118" static="1">
		<x path="js.node.http.ServerEvent"><f a="request:response">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.http.ServerResponse"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "request"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted each time there is a request.
		There may be multiple requests per connection (in the case of HTTP Keep-Alive connections).</haxe_doc>
	</Request>
	<Upgrade public="1" get="inline" set="null" expr="cast &quot;upgrade&quot;" line="131" static="1">
		<x path="js.node.http.ServerEvent"><f a="request:socket:buffer">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.net.Socket"/>
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "upgrade"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted each time a client requests an HTTP upgrade.
		Listening to this event is optional and clients cannot insist on a protocol change.

		After this event is emitted, the request's socket will not have a `'data'` event listener,
		meaning it will need to be bound in order to handle data sent to the server on that socket.</haxe_doc>
	</Upgrade>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.http._Server.ServerEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/Server.hx" private="1" module="js.node.http.Server" extern="1" final="1">
		<CheckContinue public="1" get="inline" set="null" expr="cast &quot;checkContinue&quot;" line="50" static="1">
			<x path="js.node.http.ServerEvent"><f a="request:response">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.http.ServerResponse"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "checkContinue"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted each time a request with an HTTP Expect: `100-continue` is received.
		If this event is not listened for, the server will automatically respond with a `100 Continue` as appropriate.

		Handling this event involves calling `response.writeContinue` if the client should continue
		to send the request body, or generating an appropriate HTTP response (e.g. 400 Bad Request) if the client
		should not continue to send the request body.

		When this event is emitted and handled, the 'request' event will not be emitted.</haxe_doc>
		</CheckContinue>
		<CheckExpectation public="1" get="inline" set="null" expr="cast &quot;checkExpectation&quot;" line="62" static="1">
			<x path="js.node.http.ServerEvent"><f a="request:response">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.http.ServerResponse"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "checkExpectation"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted each time a request with an HTTP `Expect` header is received, where the value is not `100-continue`.
		If this event is not listened for, the server will automatically respond with a `417 Expectation Failed` as appropriate.

		When this event is emitted and handled, the `'request'` event will not be emitted.</haxe_doc>
		</CheckExpectation>
		<ClientError public="1" get="inline" set="null" expr="cast &quot;clientError&quot;" line="76" static="1">
			<x path="js.node.http.ServerEvent"><f a="exception:socket">
	<c path="js.lib.Error"/>
	<c path="js.node.net.Socket"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "clientError"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If a client connection emits an `'error'` event, it will be forwarded here.
		Listener of this event is responsible for closing/destroying the underlying socket.
		For example, one may wish to more gracefully close the socket with a custom HTTP response instead of abruptly severing the connection.

		Default behavior is to try close the socket with a HTTP '400 Bad Request', or a HTTP '431 Request Header Fields Too Large'
		in the case of a `HPE_HEADER_OVERFLOW` error. If the socket is not writable it is immediately destroyed.</haxe_doc>
		</ClientError>
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="84" static="1">
			<x path="js.node.http.ServerEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the server closes.</haxe_doc>
		</Close>
		<Connect public="1" get="inline" set="null" expr="cast &quot;connect&quot;" line="94" static="1">
			<x path="js.node.http.ServerEvent"><f a="request:socekt:head">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.net.Socket"/>
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "connect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted each time a client requests an HTTP `CONNECT` method.
		If this event is not listened for, then clients requesting a `CONNECT` method will have their connections closed.

		After this event is emitted, the request's socket will not have a `'data'` event listener,
		meaning it will need to be bound in order to handle data sent to the server on that socket.</haxe_doc>
		</Connect>
		<Connection public="1" get="inline" set="null" expr="cast &quot;connection&quot;" line="111" static="1">
			<x path="js.node.http.ServerEvent"><f a="">
	<c path="js.node.net.Socket"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "connection"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This event is emitted when a new TCP stream is established.
		`socket` is typically an object of type net.Socket. Usually users will not want to access this event.
		In particular, the socket will not emit `'readable'` events because of how the protocol parser attaches to the socket.
		The `socket` can also be accessed at `request.connection`.

		This event can also be explicitly emitted by users to inject connections into the HTTP server. In that case,
		any `Duplex` stream can be passed.

		If `socket.setTimeout()` is called here, the timeout will be replaced with `server.keepAliveTimeout`
		when the socket has served a request (if `server.keepAliveTimeout` is non-zero).</haxe_doc>
		</Connection>
		<Request public="1" get="inline" set="null" expr="cast &quot;request&quot;" line="118" static="1">
			<x path="js.node.http.ServerEvent"><f a="request:response">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.http.ServerResponse"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "request"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted each time there is a request.
		There may be multiple requests per connection (in the case of HTTP Keep-Alive connections).</haxe_doc>
		</Request>
		<Upgrade public="1" get="inline" set="null" expr="cast &quot;upgrade&quot;" line="131" static="1">
			<x path="js.node.http.ServerEvent"><f a="request:socket:buffer">
	<c path="js.node.http.IncomingMessage"/>
	<c path="js.node.net.Socket"/>
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "upgrade"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted each time a client requests an HTTP upgrade.
		Listening to this event is optional and clients cannot insist on a protocol change.

		After this event is emitted, the request's socket will not have a `'data'` event listener,
		meaning it will need to be bound in order to handle data sent to the server on that socket.</haxe_doc>
		</Upgrade>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.net.Server" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Server.hx" extern="1">
		<extends path="js.node.events.EventEmitter"><c path="js.node.net.Server"/></extends>
		<listen public="1" set="method">
			<f a="options:?callback">
				<x path="haxe.extern.EitherType">
					<t path="js.node.net.ServerListenOptionsTcp"/>
					<t path="js.node.net.ServerListenOptionsUnix"/>
				</x>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Begin accepting connections on the specified `port` and `hostname`.

		If the `hostname` is omitted, the server will accept connections on any IPv6 address (::) when IPv6 is available,
		or any IPv4 address (0.0.0.0) otherwise.
		A `port` value of zero will assign a random port.

		`backlog` is the maximum length of the queue of pending connections. The actual length will be determined
		by your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux.
		The default value of this parameter is 511 (not 512).

		When `path` is provided, start a local socket server listening for connections on the given path.

		When `handle` is provided, it should be either a server or socket (anything with an underlying `_handle` member),
		or a {fd: <n>} object. This will cause the server to accept connections on the specified handle,
		but it is presumed that the file descriptor or handle has already been bound to a port or domain socket.
		Listening on a file descriptor is not supported on Windows.

		This function is asynchronous. When the server has been bound, 'listening' event will be emitted.
		The last parameter `callback` will be added as an listener for the 'listening' event.]]></haxe_doc>
			<overloads>
				<listen public="1" set="method">
					<f a="path:?callback">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[Begin accepting connections on the specified `port` and `hostname`.

		If the `hostname` is omitted, the server will accept connections on any IPv6 address (::) when IPv6 is available,
		or any IPv4 address (0.0.0.0) otherwise.
		A `port` value of zero will assign a random port.

		`backlog` is the maximum length of the queue of pending connections. The actual length will be determined
		by your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux.
		The default value of this parameter is 511 (not 512).

		When `path` is provided, start a local socket server listening for connections on the given path.

		When `handle` is provided, it should be either a server or socket (anything with an underlying `_handle` member),
		or a {fd: <n>} object. This will cause the server to accept connections on the specified handle,
		but it is presumed that the file descriptor or handle has already been bound to a port or domain socket.
		Listening on a file descriptor is not supported on Windows.

		This function is asynchronous. When the server has been bound, 'listening' event will be emitted.
		The last parameter `callback` will be added as an listener for the 'listening' event.]]></haxe_doc>
				</listen>
				<listen public="1" set="method">
					<f a="handle:?callback">
						<x path="haxe.extern.EitherType">
							<d/>
							<a><fd><x path="Int"/></fd></a>
						</x>
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[Begin accepting connections on the specified `port` and `hostname`.

		If the `hostname` is omitted, the server will accept connections on any IPv6 address (::) when IPv6 is available,
		or any IPv4 address (0.0.0.0) otherwise.
		A `port` value of zero will assign a random port.

		`backlog` is the maximum length of the queue of pending connections. The actual length will be determined
		by your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux.
		The default value of this parameter is 511 (not 512).

		When `path` is provided, start a local socket server listening for connections on the given path.

		When `handle` is provided, it should be either a server or socket (anything with an underlying `_handle` member),
		or a {fd: <n>} object. This will cause the server to accept connections on the specified handle,
		but it is presumed that the file descriptor or handle has already been bound to a port or domain socket.
		Listening on a file descriptor is not supported on Windows.

		This function is asynchronous. When the server has been bound, 'listening' event will be emitted.
		The last parameter `callback` will be added as an listener for the 'listening' event.]]></haxe_doc>
				</listen>
				<listen public="1" set="method">
					<f a="port:?callback">
						<x path="Int"/>
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[Begin accepting connections on the specified `port` and `hostname`.

		If the `hostname` is omitted, the server will accept connections on any IPv6 address (::) when IPv6 is available,
		or any IPv4 address (0.0.0.0) otherwise.
		A `port` value of zero will assign a random port.

		`backlog` is the maximum length of the queue of pending connections. The actual length will be determined
		by your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux.
		The default value of this parameter is 511 (not 512).

		When `path` is provided, start a local socket server listening for connections on the given path.

		When `handle` is provided, it should be either a server or socket (anything with an underlying `_handle` member),
		or a {fd: <n>} object. This will cause the server to accept connections on the specified handle,
		but it is presumed that the file descriptor or handle has already been bound to a port or domain socket.
		Listening on a file descriptor is not supported on Windows.

		This function is asynchronous. When the server has been bound, 'listening' event will be emitted.
		The last parameter `callback` will be added as an listener for the 'listening' event.]]></haxe_doc>
				</listen>
				<listen public="1" set="method">
					<f a="port:backlog:?callback">
						<x path="Int"/>
						<x path="Int"/>
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[Begin accepting connections on the specified `port` and `hostname`.

		If the `hostname` is omitted, the server will accept connections on any IPv6 address (::) when IPv6 is available,
		or any IPv4 address (0.0.0.0) otherwise.
		A `port` value of zero will assign a random port.

		`backlog` is the maximum length of the queue of pending connections. The actual length will be determined
		by your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux.
		The default value of this parameter is 511 (not 512).

		When `path` is provided, start a local socket server listening for connections on the given path.

		When `handle` is provided, it should be either a server or socket (anything with an underlying `_handle` member),
		or a {fd: <n>} object. This will cause the server to accept connections on the specified handle,
		but it is presumed that the file descriptor or handle has already been bound to a port or domain socket.
		Listening on a file descriptor is not supported on Windows.

		This function is asynchronous. When the server has been bound, 'listening' event will be emitted.
		The last parameter `callback` will be added as an listener for the 'listening' event.]]></haxe_doc>
				</listen>
				<listen public="1" set="method">
					<f a="port:hostname:?callback">
						<x path="Int"/>
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[Begin accepting connections on the specified `port` and `hostname`.

		If the `hostname` is omitted, the server will accept connections on any IPv6 address (::) when IPv6 is available,
		or any IPv4 address (0.0.0.0) otherwise.
		A `port` value of zero will assign a random port.

		`backlog` is the maximum length of the queue of pending connections. The actual length will be determined
		by your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux.
		The default value of this parameter is 511 (not 512).

		When `path` is provided, start a local socket server listening for connections on the given path.

		When `handle` is provided, it should be either a server or socket (anything with an underlying `_handle` member),
		or a {fd: <n>} object. This will cause the server to accept connections on the specified handle,
		but it is presumed that the file descriptor or handle has already been bound to a port or domain socket.
		Listening on a file descriptor is not supported on Windows.

		This function is asynchronous. When the server has been bound, 'listening' event will be emitted.
		The last parameter `callback` will be added as an listener for the 'listening' event.]]></haxe_doc>
				</listen>
				<listen public="1" set="method">
					<f a="port:hostname:backlog:?callback">
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<f a=""><x path="Void"/></f>
						<x path="Void"/>
					</f>
					<haxe_doc><![CDATA[Begin accepting connections on the specified `port` and `hostname`.

		If the `hostname` is omitted, the server will accept connections on any IPv6 address (::) when IPv6 is available,
		or any IPv4 address (0.0.0.0) otherwise.
		A `port` value of zero will assign a random port.

		`backlog` is the maximum length of the queue of pending connections. The actual length will be determined
		by your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux.
		The default value of this parameter is 511 (not 512).

		When `path` is provided, start a local socket server listening for connections on the given path.

		When `handle` is provided, it should be either a server or socket (anything with an underlying `_handle` member),
		or a {fd: <n>} object. This will cause the server to accept connections on the specified handle,
		but it is presumed that the file descriptor or handle has already been bound to a port or domain socket.
		Listening on a file descriptor is not supported on Windows.

		This function is asynchronous. When the server has been bound, 'listening' event will be emitted.
		The last parameter `callback` will be added as an listener for the 'listening' event.]]></haxe_doc>
				</listen>
			</overloads>
		</listen>
		<close public="1" set="method">
			<f a="?callback">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops the server from accepting new connections and keeps existing connections.
		This function is asynchronous, the server is finally closed when all connections are ended
		and the server emits a 'close' event.

		The optional callback will be called once the 'close' event occurs. Unlike that event,
		it will be called with an Error as its only argument if the server was not open when it was closed.</haxe_doc>
			<overloads><close public="1" set="method">
	<f a="callback">
		<f a="">
			<c path="js.lib.Error"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<haxe_doc>Stops the server from accepting new connections and keeps existing connections.
		This function is asynchronous, the server is finally closed when all connections are ended
		and the server emits a 'close' event.

		The optional callback will be called once the 'close' event occurs. Unlike that event,
		it will be called with an Error as its only argument if the server was not open when it was closed.</haxe_doc>
</close></overloads>
		</close>
		<address public="1" set="method">
			<f a=""><t path="js.node.net.SocketAdress"/></f>
			<haxe_doc>Returns the bound address, the address family name and port of the server as reported by the operating system.
		Useful to find which port was assigned when giving getting an OS-assigned address.</haxe_doc>
		</address>
		<unref public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Calling `unref` on a server will allow the program to exit if this is the only active server in the event system.
		If the server is already `unref`d calling `unref` again will have no effect.</haxe_doc>
		</unref>
		<ref public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Opposite of `unref`, calling `ref` on a previously `unref`d server
		will not let the program exit if it's the only server left (the default behavior).

		If the server is `ref`d calling `ref` again will have no effect.</haxe_doc>
		</ref>
		<listening public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether or not the server is listening for connections.</haxe_doc>
		</listening>
		<maxConnections public="1">
			<x path="Int"/>
			<haxe_doc>Set this property to reject connections when the server's connection count gets high.
		It is not recommended to use this option once a socket has been sent to a child with child_process.fork().</haxe_doc>
		</maxConnections>
		<connections public="1" set="null">
			<x path="Null"><x path="Int"/></x>
			<meta><m n=":deprecated"><e>"please use `getConnections` instead"</e></m></meta>
			<haxe_doc>The number of concurrent connections on the server.

		This becomes null when sending a socket to a child with child_process.fork().
		To poll forks and get current number of active connections use asynchronous `getConnections` instead.</haxe_doc>
		</connections>
		<getConnections public="1" set="method">
			<f a="callback">
				<f a=":">
					<c path="js.lib.Error"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Asynchronously get the number of concurrent connections on the server.
		Works when sockets were sent to forks.</haxe_doc>
		</getConnections>
		<haxe_doc>This class is used to create a TCP or local server.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"net"</e>
	<e>"Server"</e>
</m></meta>
	</class>
	<class path="js.node.http.Server" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/Server.hx" extern="1">
		<extends path="js.node.net.Server"/>
		<headersTimeout public="1">
			<x path="Int"/>
			<haxe_doc>Limit the amount of time the parser will wait to receive the complete HTTP headers.

		In case of inactivity, the rules defined in `server.timeout` apply.
		However, that inactivity based timeout would still allow the connection to be kept open
		if the headers are being sent very slowly (by default, up to a byte per 2 minutes).
		In order to prevent this, whenever header data arrives an additional check is made that
		more than `server.headersTimeout` milliseconds has not passed since the connection was established.
		If the check fails, a `'timeout'` event is emitted on the server object, and (by default) the socket is destroyed.
		See [server.timeout](https://nodejs.org/api/http.html#http_server_timeout) for more information on how timeout behavior can be customized.

		Default: `40000`</haxe_doc>
		</headersTimeout>
		<maxHeadersCount public="1">
			<x path="Null"><x path="Int"/></x>
			<haxe_doc>Limits maximum incoming headers count. If set to 0, no limit will be applied.

		Default: `2000`</haxe_doc>
		</maxHeadersCount>
		<setTimeout public="1" set="method">
			<f a="msecs:?callback">
				<x path="Int"/>
				<f a="">
					<c path="js.node.net.Socket"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the timeout value for sockets, and emits a `'timeout'` event on the Server object,
		passing the socket as an argument, if a timeout occurs.

		If there is a `'timeout'` event listener on the Server object, then it will be called with the timed-out socket as an argument.

		By default, the Server's timeout value is 2 minutes, and sockets are destroyed automatically if they time out.
		However, if a callback is assigned to the Server's `'timeout'` event, timeouts must be handled explicitly.

		To change the default timeout use the `--http-server-default-timeout` flag.</haxe_doc>
		</setTimeout>
		<timeout public="1">
			<x path="Int"/>
			<haxe_doc>The number of milliseconds of inactivity before a socket is presumed to have timed out.

		A value of `0` will disable the timeout behavior on incoming connections.

		The socket timeout logic is set up on connection, so changing this value only affects new connections to the server,
		not any existing connections.

		To change the default timeout use the `--http-server-default-timeout` flag.

		Default: `120000` (2 minutes)</haxe_doc>
		</timeout>
		<keepAliveTimeout public="1">
			<x path="Int"/>
			<haxe_doc>The number of milliseconds of inactivity a server needs to wait for additional incoming data,
		after it has finished writing the last response, before a socket will be destroyed.
		If the server receives new data before the keep-alive timeout has fired, it will reset the regular inactivity timeout, i.e., `server.timeout`.

		A value of `0` will disable the keep-alive timeout behavior on incoming connections
		A value of 0 makes the http server behave similarly to Node.js versions prior to 8.0.0, which did not have a keep-alive timeout.

		The socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.

		Default: `5000` (5 seconds).</haxe_doc>
		</keepAliveTimeout>
		<haxe_doc>This class inherits `from net.Server`.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"http"</e>
	<e>"Server"</e>
</m></meta>
	</class>
	<abstract path="js.node.http.ServerResponseEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/ServerResponse.hx" module="js.node.http.ServerResponse">
		<this><x path="js.node.events.Event"><c path="js.node.http.ServerResponseEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.http.ServerResponseEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by the `ServerResponse` objects in addition to its parent class events.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.http._ServerResponse.ServerResponseEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/ServerResponse.hx" private="1" module="js.node.http.ServerResponse" extern="1" final="1">
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="37" static="1">
		<x path="js.node.http.ServerResponseEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Indicates that the underlying connection was terminated.</haxe_doc>
	</Close>
	<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="45" static="1">
		<x path="js.node.http.ServerResponseEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "finish"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the response has been sent.
		More specifically, this event is emitted when the last segment of the response header
		and body have been handed off to the operating system for transmission over the network.
		It does not imply that the client has received anything yet.</haxe_doc>
	</Finish>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.http._ServerResponse.ServerResponseEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/ServerResponse.hx" private="1" module="js.node.http.ServerResponse" extern="1" final="1">
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="37" static="1">
			<x path="js.node.http.ServerResponseEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Indicates that the underlying connection was terminated.</haxe_doc>
		</Close>
		<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="45" static="1">
			<x path="js.node.http.ServerResponseEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "finish"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the response has been sent.
		More specifically, this event is emitted when the last segment of the response header
		and body have been handed off to the operating system for transmission over the network.
		It does not imply that the client has received anything yet.</haxe_doc>
		</Finish>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.http.ServerResponse" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/http/ServerResponse.hx" extern="1">
		<extends path="js.node.stream.Writable"><c path="js.node.http.ServerResponse"/></extends>
		<addTrailers public="1" set="method">
			<f a="headers">
				<x path="haxe.DynamicAccess"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>This method adds HTTP trailing headers (a header but at the end of the message) to the response.

		Trailers will only be emitted if chunked encoding is used for the response;
		if it is not (e.g., if the request was HTTP/1.0), they will be silently discarded.

		Note that HTTP requires the 'Trailer' header to be sent if you intend to emit trailers,
		with a list of the header fields in its value.</haxe_doc>
			<overloads><addTrailers public="1" set="method">
	<f a="headers">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="Void"/>
	</f>
	<haxe_doc>This method adds HTTP trailing headers (a header but at the end of the message) to the response.

		Trailers will only be emitted if chunked encoding is used for the response;
		if it is not (e.g., if the request was HTTP/1.0), they will be silently discarded.

		Note that HTTP requires the 'Trailer' header to be sent if you intend to emit trailers,
		with a list of the header fields in its value.</haxe_doc>
</addTrailers></overloads>
		</addTrailers>
		<connection public="1" set="null">
			<c path="js.node.net.Socket"/>
			<haxe_doc>See `socket`.</haxe_doc>
		</connection>
		<finished public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The `finished` property will be true if `end()` has been called.</haxe_doc>
		</finished>
		<flushHeaders public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flushes the response headers.
		See also: [request.flushHeaders()](https://nodejs.org/api/http.html#http_request_flushheaders).</haxe_doc>
		</flushHeaders>
		<getHeader public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
				</x>
			</f>
			<haxe_doc>Reads out a header that's already been queued but not sent to the client.
		The name is case-insensitive. The type of the return value depends on the arguments provided to `setHeader()`.</haxe_doc>
		</getHeader>
		<getHeaderNames public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an array containing the unique names of the current outgoing headers. All header names are lowercase.</haxe_doc>
		</getHeaderNames>
		<getHeaders public="1" set="method">
			<f a=""><x path="haxe.DynamicAccess"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x></f>
			<haxe_doc>Returns a shallow copy of the current outgoing headers. Since a shallow copy is used,
		array values may be mutated without additional calls to various header-related http module methods.
		The keys of the returned object are the header names and the values are the respective header values. All header names are lowercase.

		The object returned by the `getHeaders()` method does not prototypically inherit from the JavaScript Object.
		This means that typical `Object` methods such as `obj.toString()`, `obj.hasOwnProperty()`, and others are not defined and will not work.</haxe_doc>
		</getHeaders>
		<hasHeader public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the header identified by `name` is currently set in the outgoing headers.
		The header name matching is case-insensitive.</haxe_doc>
		</hasHeader>
		<headersSent public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Boolean (read-only). True if headers were sent, false otherwise.</haxe_doc>
		</headersSent>
		<removeHeader public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a header that's queued for implicit sending.</haxe_doc>
		</removeHeader>
		<sendDate public="1">
			<x path="Bool"/>
			<haxe_doc>When true, the Date header will be automatically generated and sent in the response if it is not already present in the headers.
		Defaults to true.

		This should only be disabled for testing; HTTP requires the Date header in responses.</haxe_doc>
		</sendDate>
		<setHeader public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a single header value for implicit headers.
		If this header already exists in the to-be-sent headers, its value will be replaced.
		Use an array of strings here to send multiple headers with the same name.
		Non-string values will be stored without modification.
		Therefore, `getHeader()` may return non-string values.
		However, the non-string values will be converted to strings for network transmission.</haxe_doc>
			<overloads><setHeader public="1" set="method">
	<f a="name:value">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Void"/>
	</f>
	<haxe_doc>Sets a single header value for implicit headers.
		If this header already exists in the to-be-sent headers, its value will be replaced.
		Use an array of strings here to send multiple headers with the same name.
		Non-string values will be stored without modification.
		Therefore, `getHeader()` may return non-string values.
		However, the non-string values will be converted to strings for network transmission.</haxe_doc>
</setHeader></overloads>
		</setHeader>
		<setTimeout public="1" set="method">
			<f a="msecs:?callback">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Socket's timeout value to `msecs`.
		If a callback is provided, then it is added as a listener on the `'timeout'` event on the response object.

		If no `'timeout'` listener is added to the request, the response, or the server, then sockets are destroyed when they time out.
		If a handler is assigned to the request, the response, or the server's `'timeout'` events, timed out sockets must be handled explicitly.</haxe_doc>
		</setTimeout>
		<socket public="1" set="null">
			<c path="js.node.net.Socket"/>
			<haxe_doc>Reference to the underlying socket. Usually users will not want to access this property.
		In particular, the socket will not emit `'readable'` events because of how the protocol parser attaches to the socket.
		After `end()`, the property is nulled. The `socket` may also be accessed via `connection`.</haxe_doc>
		</socket>
		<statusCode public="1">
			<x path="Int"/>
			<haxe_doc>When using implicit headers (not calling `writeHead` explicitly), this property controls the status code
		that will be sent to the client when the headers get flushed.

		After response header was sent to the client, this property indicates the status code which was sent out.</haxe_doc>
		</statusCode>
		<statusMessage public="1">
			<c path="String"/>
			<haxe_doc>When using implicit headers (not calling `writeHead()` explicitly),
		this property controls the status message that will be sent to the client when the headers get flushed.
		If this is left as `undefined` then the standard message for the status code will be used.

		After response header was sent to the client, this property indicates the status message which was sent out.</haxe_doc>
		</statusMessage>
		<writeContinue public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sends a HTTP/1.1 100 Continue message to the client, indicating that the request body should be sent.
		See the `'checkContinue'` event on `Server`.</haxe_doc>
		</writeContinue>
		<writeHead public="1" set="method">
			<f a="statusCode:reasonPhrase:?headers">
				<x path="Int"/>
				<c path="String"/>
				<x path="haxe.DynamicAccess"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends a response header to the request.
		The status code is a 3-digit HTTP status code, like `404`. The last argument, `headers`, are the response headers.
		Optionally one can give a human-readable `statusMessage` as the second argument.

		This method must only be called once on a message and it must be called before `end()` is called.

		If `write()` or `end()` are called before calling this, the implicit/mutable headers will be calculated and call this function.

		When headers have been set with `setHeader()`, they will be merged with any headers passed to `writeHead()`, with the headers passed to `writeHead()` given precedence.

		If this method is called and `setHeader()` has not been called, it will directly write the supplied header values onto the network channel without caching internally,
		and the `getHeader()` on the header will not yield the expected result.
		If progressive population of headers is desired with potential future retrieval and modification, use `setHeader()` instead.

		`Content-Length` is given in bytes not characters.
		The above example works because the string `'hello world'` contains only single byte characters.
		If the body contains higher coded characters then `Buffer.byteLength()` should be used to determine the number of bytes in a given encoding.
		And Node.js does not check whether `Content-Length` and the length of the body which has been transmitted are equal or not.

		Attempting to set a header field name or value that contains invalid characters will result in a `TypeError` being thrown.</haxe_doc>
			<overloads><writeHead public="1" set="method">
	<f a="statusCode:?headers">
		<x path="Int"/>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>Sends a response header to the request.
		The status code is a 3-digit HTTP status code, like `404`. The last argument, `headers`, are the response headers.
		Optionally one can give a human-readable `statusMessage` as the second argument.

		This method must only be called once on a message and it must be called before `end()` is called.

		If `write()` or `end()` are called before calling this, the implicit/mutable headers will be calculated and call this function.

		When headers have been set with `setHeader()`, they will be merged with any headers passed to `writeHead()`, with the headers passed to `writeHead()` given precedence.

		If this method is called and `setHeader()` has not been called, it will directly write the supplied header values onto the network channel without caching internally,
		and the `getHeader()` on the header will not yield the expected result.
		If progressive population of headers is desired with potential future retrieval and modification, use `setHeader()` instead.

		`Content-Length` is given in bytes not characters.
		The above example works because the string `'hello world'` contains only single byte characters.
		If the body contains higher coded characters then `Buffer.byteLength()` should be used to determine the number of bytes in a given encoding.
		And Node.js does not check whether `Content-Length` and the length of the body which has been transmitted are equal or not.

		Attempting to set a header field name or value that contains invalid characters will result in a `TypeError` being thrown.</haxe_doc>
</writeHead></overloads>
		</writeHead>
		<writeProcessing public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sends a HTTP/1.1 102 Processing message to the client, indicating that the request body should be sent.</haxe_doc>
		</writeProcessing>
		<haxe_doc>This object is created internally by an HTTP server — not by the user.
	It is passed as the second parameter to the 'request' event.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"http"</e>
	<e>"ServerResponse"</e>
</m></meta>
	</class>
	<class path="js.node.https.Agent" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/https/Agent.hx" extern="1">
		<extends path="js.node.http.Agent"/>
		<new public="1" set="method"><f a="?options">
	<x path="Null"><t path="js.node.https.HttpsAgentOptions"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>An Agent object for HTTPS similar to `http.Agent`.
	See [https.request](https://nodejs.org/api/http.html#http_http_request_options_callback) for more information.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"https"</e>
	<e>"Agent"</e>
</m></meta>
	</class>
	<typedef path="js.node.https.HttpsAgentOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/https/Agent.hx" module="js.node.https.Agent"><a>
	<timeout>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Socket timeout in milliseconds. This will set the timeout when the socket is created.</haxe_doc>
	</timeout>
	<servername>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the value of [Server Name Indication extension](https://en.wikipedia.org/wiki/Server_Name_Indication) to be sent to the server.
		Use empty string `''` to disable sending the extension.

		Default: hostname of the target server, unless the target server is specified using an IP address, in which case the default is `''` (no extension).</haxe_doc>
	</servername>
	<maxSockets>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Maximum number of sockets to allow per host. Each request will use a new socket until the maximum is reached.

		Default: `Infinity`.</haxe_doc>
	</maxSockets>
	<maxFreeSockets>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Maximum number of sockets to leave open in a free state. Only relevant if `keepAlive` is set to `true`.

		Default: `256`.</haxe_doc>
	</maxFreeSockets>
	<maxCachedSessions>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>maximum number of TLS cached sessions. Use `0` to disable TLS session caching.

		Default: `100`.</haxe_doc>
	</maxCachedSessions>
	<keepAliveMsecs>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>When using the `keepAlive` option, specifies the [initial delay](https://nodejs.org/api/net.html#net_socket_setkeepalive_enable_initialdelay) for TCP Keep-Alive packets.
		Ignored when the `keepAlive` option is `false` or `undefined`.

		Default: `1000`.</haxe_doc>
	</keepAliveMsecs>
	<keepAlive>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Keep sockets around even when there are no outstanding requests, so they can be used for future requests
		without having to reestablish a TCP connection.
		Not to be confused with the `keep-alive` value of the `Connection` header.
		The `Connection: keep-alive` header is always sent when using an agent except when the `Connection` header
		is explicitly specified or when the `keepAlive` and `maxSockets` options are respectively set to `false` and `Infinity`,
		in which case `Connection: close` will be used.

		Default: `false`</haxe_doc>
	</keepAlive>
</a></typedef>
	<class path="js.node.tls.Server" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/Server.hx" extern="1">
		<extends path="js.node.net.Server"/>
		<getTicketKeys public="1" set="method">
			<f a=""><t path="js.node.Buffer"/></f>
			<haxe_doc>Returns `Buffer` instance holding the keys currently used for encryption/decryption of the TLS Session Tickets.</haxe_doc>
		</getTicketKeys>
		<setTicketKeys public="1" set="method">
			<f a="keys">
				<t path="js.node.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates the keys for encryption/decryption of the TLS Session Tickets.

		NOTE: the buffer should be 48 bytes long. See server `ticketKeys` option for
		more information on how it is going to be used.

		NOTE: the change is effective only for the future server connections. Existing or currently pending
		server connections will use previous keys.</haxe_doc>
		</setTicketKeys>
		<addContext public="1" set="method">
			<f a="hostname:credentials">
				<c path="String"/>
				<t path="js.node.tls.SecureContextOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add secure context that will be used if client request's SNI hostname
		is matching passed hostname (wildcards can be used).</haxe_doc>
		</addContext>
		<haxe_doc>This class is a subclass of `net.Server` and has the same methods on it.
	Instead of accepting just raw TCP connections, this accepts encrypted connections using TLS or SSL.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"tls"</e>
	<e>"Server"</e>
</m></meta>
	</class>
	<class path="js.node.https.Server" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/https/Server.hx" extern="1">
		<extends path="js.node.tls.Server"/>
		<haxe_doc>This class is a subclass of `tls.Server` and emits events same as `http.Server`.
	See [http.Server](https://nodejs.org/api/http.html#http_class_http_server) for more information.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"https"</e>
	<e>"Server"</e>
</m></meta>
	</class>
	<abstract path="js.node.net.ServerEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Server.hx" module="js.node.net.Server">
		<this><x path="js.node.events.Event"><c path="js.node.net.ServerEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.net.ServerEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by the `Server` objects</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.net._Server.ServerEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Server.hx" private="1" module="js.node.net.Server" extern="1" final="1">
	<Listening public="1" get="inline" set="null" expr="cast &quot;listening&quot;" line="41" static="1">
		<x path="js.node.net.ServerEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "listening"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the server has been bound after calling `Server.listen`.</haxe_doc>
	</Listening>
	<Connection public="1" get="inline" set="null" expr="cast &quot;connection&quot;" line="46" static="1">
		<x path="js.node.net.ServerEvent"><f a="">
	<c path="js.node.net.Socket"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "connection"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when a new connection is made.</haxe_doc>
	</Connection>
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="52" static="1">
		<x path="js.node.net.ServerEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the server closes.
		Note that if connections exist, this event is not emitted until all connections are ended.</haxe_doc>
	</Close>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="58" static="1">
		<x path="js.node.net.ServerEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when an error occurs.
		The 'close' event will be called directly following this event. See example in discussion of server.listen.</haxe_doc>
	</Error>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.net._Server.ServerEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Server.hx" private="1" module="js.node.net.Server" extern="1" final="1">
		<Listening public="1" get="inline" set="null" expr="cast &quot;listening&quot;" line="41" static="1">
			<x path="js.node.net.ServerEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "listening"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the server has been bound after calling `Server.listen`.</haxe_doc>
		</Listening>
		<Connection public="1" get="inline" set="null" expr="cast &quot;connection&quot;" line="46" static="1">
			<x path="js.node.net.ServerEvent"><f a="">
	<c path="js.node.net.Socket"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "connection"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when a new connection is made.</haxe_doc>
		</Connection>
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="52" static="1">
			<x path="js.node.net.ServerEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the server closes.
		Note that if connections exist, this event is not emitted until all connections are ended.</haxe_doc>
		</Close>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="58" static="1">
			<x path="js.node.net.ServerEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when an error occurs.
		The 'close' event will be called directly following this event. See example in discussion of server.listen.</haxe_doc>
		</Error>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.net._Server.ServerListenOptionsBase" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Server.hx" private="1" module="js.node.net.Server"><a><exclusive>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</exclusive></a></typedef>
	<typedef path="js.node.net.ServerListenOptionsTcp" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Server.hx" module="js.node.net.Server">
		<a>
			<port>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</port>
			<host>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</host>
			<exclusive>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</exclusive>
			<backlog>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</backlog>
		</a>
		<haxe_doc>Options for the `Server.listen` method (TCP version).</haxe_doc>
	</typedef>
	<typedef path="js.node.net.ServerListenOptionsUnix" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Server.hx" module="js.node.net.Server">
		<a>
			<path>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</path>
			<exclusive>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</exclusive>
		</a>
		<haxe_doc>Options for the `Server.listen` method (UNIX version).</haxe_doc>
	</typedef>
	<abstract path="js.node.net.SocketEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<this><x path="js.node.events.Event"><c path="js.node.net.SocketEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.net.SocketEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events for `Socket` objects.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.net._Socket.SocketEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" private="1" module="js.node.net.Socket" extern="1" final="1">
	<Lookup public="1" get="inline" set="null" expr="cast &quot;lookup&quot;" line="42" static="1">
		<x path="js.node.net.SocketEvent"><f a="::">
	<x path="Null"><c path="js.lib.Error"/></x>
	<c path="String"/>
	<x path="js.node.DnsAddressFamily"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "lookup"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted after resolving the hostname but before connecting.
		Not applicable to UNIX sockets.</haxe_doc>
	</Lookup>
	<Connect public="1" get="inline" set="null" expr="cast &quot;connect&quot;" line="47" static="1">
		<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "connect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when a socket connection is successfully established. See `Socket.connect`.</haxe_doc>
	</Connect>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="56" static="1">
		<x path="js.node.net.SocketEvent"><f a="">
	<x path="haxe.extern.EitherType">
		<t path="js.node.Buffer"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when data is received.
		The argument data will be a `Buffer` or `String`.
		Encoding of data is set by `Socket.setEncoding`.

		Note that the data will be lost if there is no listener when a Socket emits a 'data' event.</haxe_doc>
	</Data>
	<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="66" static="1">
		<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the other end of the socket sends a FIN packet.

		By default (allowHalfOpen == false) the socket will destroy its file descriptor once
		it has written out its pending write queue. However, by setting allowHalfOpen == true
		the socket will not automatically `end` its side allowing the user to write arbitrary amounts of data,
		with the caveat that the user is required to `end` their side now.</haxe_doc>
	</End>
	<Timeout public="1" get="inline" set="null" expr="cast &quot;timeout&quot;" line="74" static="1">
		<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "timeout"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted if the socket times out from inactivity.
		This is only to notify that the socket has been idle
		The user must manually close the connection.
		See also: `Socket.setTimeout`</haxe_doc>
	</Timeout>
	<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="80" static="1">
		<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "drain"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the write buffer becomes empty. Can be used to throttle uploads.
		See also: the return values of `Socket.write`</haxe_doc>
	</Drain>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="85" static="1">
		<x path="js.node.net.SocketEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when an error occurs. The 'close' event will be called directly following this event.</haxe_doc>
	</Error>
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="94" static="1">
		<x path="js.node.net.SocketEvent"><f a="">
	<x path="Bool"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted once the socket is fully closed.
		The argument `had_error` is a boolean which says if the socket was closed due to a transmission error.

		Listener arguments:
			had_error - true if the socket had a transmission error</haxe_doc>
	</Close>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.net._Socket.SocketEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" private="1" module="js.node.net.Socket" extern="1" final="1">
		<Lookup public="1" get="inline" set="null" expr="cast &quot;lookup&quot;" line="42" static="1">
			<x path="js.node.net.SocketEvent"><f a="::">
	<x path="Null"><c path="js.lib.Error"/></x>
	<c path="String"/>
	<x path="js.node.DnsAddressFamily"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "lookup"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted after resolving the hostname but before connecting.
		Not applicable to UNIX sockets.</haxe_doc>
		</Lookup>
		<Connect public="1" get="inline" set="null" expr="cast &quot;connect&quot;" line="47" static="1">
			<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "connect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when a socket connection is successfully established. See `Socket.connect`.</haxe_doc>
		</Connect>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="56" static="1">
			<x path="js.node.net.SocketEvent"><f a="">
	<x path="haxe.extern.EitherType">
		<t path="js.node.Buffer"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when data is received.
		The argument data will be a `Buffer` or `String`.
		Encoding of data is set by `Socket.setEncoding`.

		Note that the data will be lost if there is no listener when a Socket emits a 'data' event.</haxe_doc>
		</Data>
		<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="66" static="1">
			<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the other end of the socket sends a FIN packet.

		By default (allowHalfOpen == false) the socket will destroy its file descriptor once
		it has written out its pending write queue. However, by setting allowHalfOpen == true
		the socket will not automatically `end` its side allowing the user to write arbitrary amounts of data,
		with the caveat that the user is required to `end` their side now.</haxe_doc>
		</End>
		<Timeout public="1" get="inline" set="null" expr="cast &quot;timeout&quot;" line="74" static="1">
			<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "timeout"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted if the socket times out from inactivity.
		This is only to notify that the socket has been idle
		The user must manually close the connection.
		See also: `Socket.setTimeout`</haxe_doc>
		</Timeout>
		<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="80" static="1">
			<x path="js.node.net.SocketEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "drain"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the write buffer becomes empty. Can be used to throttle uploads.
		See also: the return values of `Socket.write`</haxe_doc>
		</Drain>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="85" static="1">
			<x path="js.node.net.SocketEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when an error occurs. The 'close' event will be called directly following this event.</haxe_doc>
		</Error>
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="94" static="1">
			<x path="js.node.net.SocketEvent"><f a="">
	<x path="Bool"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted once the socket is fully closed.
		The argument `had_error` is a boolean which says if the socket was closed due to a transmission error.

		Listener arguments:
			had_error - true if the socket had a transmission error</haxe_doc>
		</Close>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.net.SocketOptionsBase" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" module="js.node.net.Socket"><a><allowHalfOpen>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>If true, then the socket won't automatically send a FIN packet
		when the other end of the socket sends a FIN packet.

		The socket becomes non-readable, but still writable. You should call the `end` method explicitly.
		See `end` event for more information.

		Default: false</haxe_doc>
</allowHalfOpen></a></typedef>
	<typedef path="js.node.net.SocketOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>allow writes on this socket (NOTE: Works only when `fd` is passed)</haxe_doc>
			</writable>
			<readable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>allow reads on this socket (NOTE: Works only when `fd` is passed)</haxe_doc>
			</readable>
			<fd>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>allows you to specify the existing file descriptor of socket.</haxe_doc>
			</fd>
			<allowHalfOpen>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If true, then the socket won't automatically send a FIN packet
		when the other end of the socket sends a FIN packet.

		The socket becomes non-readable, but still writable. You should call the `end` method explicitly.
		See `end` event for more information.

		Default: false</haxe_doc>
			</allowHalfOpen>
		</a>
		<haxe_doc>Options for creating new `Socket` object.</haxe_doc>
	</typedef>
	<typedef path="js.node.net.SocketConnectOptionsTcp" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<a>
			<port>
				<x path="Int"/>
				<haxe_doc>Port the client should connect to</haxe_doc>
			</port>
			<lookup>
				<x path="Null"><f a="::">
	<c path="String"/>
	<t path="js.node.DnsLookupOptions"/>
	<t path="js.node.DnsLookupCallbackSingle"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Custom lookup function. Defaults to `Dns.lookup`.</haxe_doc>
			</lookup>
			<localPort>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Local port to bind to for network connections.</haxe_doc>
			</localPort>
			<localAddress>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Local interface to bind to for network connections.</haxe_doc>
			</localAddress>
			<host>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Host the client should connect to.
		Defaults to 'localhost'.</haxe_doc>
			</host>
			<family>
				<x path="Null"><x path="js.node.DnsAddressFamily"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Version of IP stack. Defaults to 4.</haxe_doc>
			</family>
		</a>
		<haxe_doc>Options for the `Socket.connect` method (TCP version).</haxe_doc>
	</typedef>
	<typedef path="js.node.net.SocketConnectOptionsUnix" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<a><path>
	<c path="String"/>
	<haxe_doc>Path the client should connect to</haxe_doc>
</path></a>
		<haxe_doc>Options for the `Socket.connect` method (Local domain socket version).</haxe_doc>
	</typedef>
	<typedef path="js.node.net.SocketAdress" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<a>
			<port>
				<x path="Int"/>
				<haxe_doc>Connection port.</haxe_doc>
			</port>
			<family>
				<x path="js.node.net.SocketAdressFamily"/>
				<haxe_doc>IP Family.</haxe_doc>
			</family>
			<address>
				<c path="String"/>
				<haxe_doc>IP Address.</haxe_doc>
			</address>
		</a>
		<haxe_doc>Bound address, the address family name and port of the socket as reported by the operating system.</haxe_doc>
	</typedef>
	<abstract path="js.node.net.SocketAdressFamily" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" module="js.node.net.Socket">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Enumeration of possible socket family values.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.net._Socket.SocketAdressFamily_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" private="1" module="js.node.net.Socket" extern="1" final="1">
	<IPv4 public="1" get="inline" set="null" expr="cast &quot;IPv4&quot;" line="202" static="1">
		<x path="js.node.net.SocketAdressFamily"/>
		<meta>
			<m n=":value"><e>cast "IPv4"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IPv4>
	<IPv6 public="1" get="inline" set="null" expr="cast &quot;IPv6&quot;" line="203" static="1">
		<x path="js.node.net.SocketAdressFamily"/>
		<meta>
			<m n=":value"><e>cast "IPv6"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IPv6>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.net._Socket.SocketAdressFamily_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" private="1" module="js.node.net.Socket" extern="1" final="1">
		<IPv4 public="1" get="inline" set="null" expr="cast &quot;IPv4&quot;" line="202" static="1">
			<x path="js.node.net.SocketAdressFamily"/>
			<meta>
				<m n=":value"><e>cast "IPv4"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IPv4>
		<IPv6 public="1" get="inline" set="null" expr="cast &quot;IPv6&quot;" line="203" static="1">
			<x path="js.node.net.SocketAdressFamily"/>
			<meta>
				<m n=":value"><e>cast "IPv6"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IPv6>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.stream.IDuplex" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Duplex.hx" module="js.node.stream.Duplex" extern="1" interface="1"><meta><m n=":remove"/></meta></class>
	<class path="js.node.stream.Duplex" params="TSelf" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Duplex.hx" extern="1">
		<extends path="js.node.stream.Readable"><c path="js.node.stream.Duplex.TSelf"/></extends>
		<cork public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The `writable.cork()` method forces all written data to be buffered in memory.
		The buffered data will be flushed when either the `stream.uncork()` or `stream.end()` methods are called.

		@see https://nodejs.org/api/stream.html#stream_writable_cork</haxe_doc>
		</cork>
		<end public="1" set="method">
			<f a="chunk:?encoding:?callback">
				<d/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<f a=""><x path="Void"/></f>
					<f a="">
						<x path="Null"><c path="js.lib.Error"/></x>
						<x path="Void"/>
					</f>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Calling the `writable.end()` method signals that no more data will be written to the Writable.
		The optional `chunk` and `encoding` arguments allow one final additional chunk of data to be written immediately before closing the stream.
		If provided, the optional `callback` function is attached as a listener for the 'finish' event.

		@see https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback</haxe_doc>
			<overloads><end public="1" set="method">
	<f a="?callback">
		<x path="haxe.extern.EitherType">
			<f a=""><x path="Void"/></f>
			<f a="">
				<x path="Null"><c path="js.lib.Error"/></x>
				<x path="Void"/>
			</f>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>Calling the `writable.end()` method signals that no more data will be written to the Writable.
		The optional `chunk` and `encoding` arguments allow one final additional chunk of data to be written immediately before closing the stream.
		If provided, the optional `callback` function is attached as a listener for the 'finish' event.

		@see https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback</haxe_doc>
</end></overloads>
		</end>
		<setDefaultEncoding public="1" set="method">
			<f a="encoding">
				<c path="String"/>
				<c path="js.node.stream.Duplex.TSelf"/>
			</f>
			<haxe_doc>The `writable.setDefaultEncoding()` method sets the default `encoding` for a Writable stream.

		@see https://nodejs.org/api/stream.html#stream_writable_setdefaultencoding_encoding</haxe_doc>
		</setDefaultEncoding>
		<uncork public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The `writable.uncork()` method flushes all data buffered since `stream.cork()` was called.

		@see https://nodejs.org/api/stream.html#stream_writable_uncork</haxe_doc>
		</uncork>
		<writable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` if it is safe to call `writable.write()`.

		@see https://nodejs.org/api/stream.html#stream_writable_writable</haxe_doc>
		</writable>
		<writableEnded public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `true` after `writable.end()` has been called. This property
		does not indicate whether the data has been flushed, for this use
		`writable.writableFinished` instead.

		@see https://nodejs.org/api/stream.html#stream_writable_writableended</haxe_doc>
		</writableEnded>
		<writableFinished public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is set to `true` immediately before the 'finish' event is emitted.

		@see https://nodejs.org/api/stream.html#stream_writable_writablefinished</haxe_doc>
		</writableFinished>
		<writablehighWaterMark public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Return the value of `highWaterMark` passed when constructing this `Writable`.

		@see https://nodejs.org/api/stream.html#stream_writable_writablehighwatermark</haxe_doc>
		</writablehighWaterMark>
		<writableLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>This property contains the number of bytes (or objects) in the queue ready to be written.
		The value provides introspection data regarding the status of the `highWaterMark`.

		@see https://nodejs.org/api/stream.html#stream_writable_writablelength</haxe_doc>
		</writableLength>
		<writableObjectMode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Getter for the property `objectMode` of a given `Writable` stream.

		@see https://nodejs.org/api/stream.html#stream_writable_writableobjectmode</haxe_doc>
		</writableObjectMode>
		<write public="1" set="method">
			<f a="chunk:?encoding:?callback">
				<d/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<f a=""><x path="Void"/></f>
					<f a="">
						<x path="Null"><c path="js.lib.Error"/></x>
						<x path="Void"/>
					</f>
				</x>
				<x path="Bool"/>
			</f>
			<haxe_doc>The `writable.write()` method writes some data to the stream, and calls the supplied `callback` once the data has been fully handled.
		If an error occurs, the `callback` may or may not be called with the error as its first argument.
		To reliably detect write errors, add a listener for the `'error'` event.

		@see https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback</haxe_doc>
		</write>
		<_write set="method">
			<f a="chunk:encoding:callback">
				<d/>
				<c path="String"/>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>All `Writable` stream implementations must provide a `writable._write()` method to send data to the underlying resource.

		@see https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1</haxe_doc>
		</_write>
		<_writev set="method">
			<f a="chunks:callback">
				<c path="Array"><t path="js.node.stream.Chunk"/></c>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>This function MUST NOT be called by application code directly.
		It should be implemented by child classes, and called by the internal `Writable` class methods only.

		@see https://nodejs.org/api/stream.html#stream_writable_writev_chunks_callback</haxe_doc>
		</_writev>
		<_final set="method">
			<f a="callback">
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The `_final()` method must not be called directly.
		t may be implemented by child classes, and if so, will be called by the internal `Writable` class methods only.

		@see https://nodejs.org/api/stream.html#stream_writable_final_callback</haxe_doc>
		</_final>
		<destroy public="1" set="method" override="1">
			<f a="?error">
				<c path="js.lib.Error"/>
				<c path="js.node.stream.Duplex.TSelf"/>
			</f>
			<haxe_doc>Destroy the stream.
		Optionally emit an `'error'` event, and emit a `'close'` event unless `emitClose` is set in `false`.

		@see https://nodejs.org/api/stream.html#stream_writable_destroy_error
		@see https://nodejs.org/api/stream.html#stream_readable_destroy_error</haxe_doc>
		</destroy>
		<_destroy set="method" override="1">
			<f a="err:callback">
				<x path="Null"><c path="js.lib.Error"/></x>
				<f a="">
					<x path="Null"><c path="js.lib.Error"/></x>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>The `_destroy()` method is called by `destroy()`.
		It can be overridden by child classes but it **must not** be called directly.

		@see https://nodejs.org/api/stream.html#stream_writable_destroy_err_callback
		@see https://nodejs.org/api/stream.html#stream_readable_destroy_err_callback</haxe_doc>
		</_destroy>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.node.stream.DuplexNewOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@see https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options
		@see https://nodejs.org/api/stream.html#stream_new_stream_readable_options</haxe_doc>
		</new>
		<haxe_doc>Duplex streams are streams that implement both the `Readable` and `Writable` interfaces.

	@see https://nodejs.org/api/stream.html#stream_class_stream_duplex</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"stream"</e>
	<e>"Duplex"</e>
</m></meta>
	</class>
	<class path="js.node.net.Socket" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/net/Socket.hx" extern="1">
		<extends path="js.node.stream.Duplex"><c path="js.node.net.Socket"/></extends>
		<connect public="1" set="method">
			<f a="options:?connectListener">
				<x path="haxe.extern.EitherType">
					<t path="js.node.net.SocketConnectOptionsTcp"/>
					<t path="js.node.net.SocketConnectOptionsUnix"/>
				</x>
				<f a=""><x path="Void"/></f>
				<c path="js.node.net.Socket"/>
			</f>
			<haxe_doc>Opens the connection for a given socket.

		If `port` and `host` are given, then the socket will be opened as a TCP socket,
		if `host` is omitted, localhost will be assumed.
		If a `path` is given, the socket will be opened as a unix socket to that path.

		Normally this method is not needed, as `Net.createConnection` opens the socket.
		Use this only if you are implementing a custom `Socket`.

		This function is asynchronous. When the 'connect' event is emitted the socket is established.
		If there is a problem connecting, the 'connect' event will not be emitted,
		the 'error' event will be emitted with the exception

		The `connectListener` parameter will be added as an listener for the 'connect' event.</haxe_doc>
			<overloads>
				<connect public="1" set="method">
					<f a="path:?connectListener">
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<c path="js.node.net.Socket"/>
					</f>
					<haxe_doc>Opens the connection for a given socket.

		If `port` and `host` are given, then the socket will be opened as a TCP socket,
		if `host` is omitted, localhost will be assumed.
		If a `path` is given, the socket will be opened as a unix socket to that path.

		Normally this method is not needed, as `Net.createConnection` opens the socket.
		Use this only if you are implementing a custom `Socket`.

		This function is asynchronous. When the 'connect' event is emitted the socket is established.
		If there is a problem connecting, the 'connect' event will not be emitted,
		the 'error' event will be emitted with the exception

		The `connectListener` parameter will be added as an listener for the 'connect' event.</haxe_doc>
				</connect>
				<connect public="1" set="method">
					<f a="port:?connectListener">
						<x path="Int"/>
						<f a=""><x path="Void"/></f>
						<c path="js.node.net.Socket"/>
					</f>
					<haxe_doc>Opens the connection for a given socket.

		If `port` and `host` are given, then the socket will be opened as a TCP socket,
		if `host` is omitted, localhost will be assumed.
		If a `path` is given, the socket will be opened as a unix socket to that path.

		Normally this method is not needed, as `Net.createConnection` opens the socket.
		Use this only if you are implementing a custom `Socket`.

		This function is asynchronous. When the 'connect' event is emitted the socket is established.
		If there is a problem connecting, the 'connect' event will not be emitted,
		the 'error' event will be emitted with the exception

		The `connectListener` parameter will be added as an listener for the 'connect' event.</haxe_doc>
				</connect>
				<connect public="1" set="method">
					<f a="port:host:?connectListener">
						<x path="Int"/>
						<c path="String"/>
						<f a=""><x path="Void"/></f>
						<c path="js.node.net.Socket"/>
					</f>
					<haxe_doc>Opens the connection for a given socket.

		If `port` and `host` are given, then the socket will be opened as a TCP socket,
		if `host` is omitted, localhost will be assumed.
		If a `path` is given, the socket will be opened as a unix socket to that path.

		Normally this method is not needed, as `Net.createConnection` opens the socket.
		Use this only if you are implementing a custom `Socket`.

		This function is asynchronous. When the 'connect' event is emitted the socket is established.
		If there is a problem connecting, the 'connect' event will not be emitted,
		the 'error' event will be emitted with the exception

		The `connectListener` parameter will be added as an listener for the 'connect' event.</haxe_doc>
				</connect>
			</overloads>
		</connect>
		<bufferSize public="1">
			<x path="Int"/>
			<haxe_doc>`Socket` has the property that `socket.write` always works. This is to help users get up and running quickly.
		The computer cannot always keep up with the amount of data that is written to a socket - the network connection
		simply might be too slow. Node will internally queue up the data written to a socket and send it out over the
		wire when it is possible. (Internally it is polling on the socket's file descriptor for being writable).

		The consequence of this internal buffering is that memory may grow. This property shows the number of characters
		currently buffered to be written. (Number of characters is approximately equal to the number of bytes to be written,
		but the buffer may contain strings, and the strings are lazily encoded, so the exact number of bytes is not known.)

		Users who experience large or growing `bufferSize` should attempt to "throttle" the data flows
		in their program with `pause` and `resume`.</haxe_doc>
		</bufferSize>
		<destroy public="1" set="method" override="1">
			<f a="?exception">
				<c path="js.lib.Error"/>
				<x path="Void"/>
			</f>
			<haxe_doc>A boolean value that indicates if the connection is destroyed or not.
		Once a connection is destroyed no further data can be transferred using it.

		define in Stream/Readable.hx</haxe_doc>
		</destroy>
		<setTimeout public="1" set="method">
			<f a="timeout:?callback">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the socket to timeout after `timeout` milliseconds of inactivity on the socket.
		By default `Socket` do not have a timeout.

		When an idle timeout is triggered the socket will receive a 'timeout' event but the connection will not be severed.
		The user must manually `end` or `destroy` the socket.

		If `timeout` is 0, then the existing idle timeout is disabled.

		The optional `callback` parameter will be added as a one time listener for the 'timeout' event.</haxe_doc>
		</setTimeout>
		<setNoDelay public="1" set="method">
			<f a="?noDelay">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables the Nagle algorithm.
		By default TCP connections use the Nagle algorithm, they buffer data before sending it off.
		Setting true for `noDelay` will immediately fire off data each time `write` is called.
		`noDelay` defaults to true.</haxe_doc>
		</setNoDelay>
		<setKeepAlive public="1" set="method">
			<f a="enable:?initialDelay">
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enable/disable keep-alive functionality, and optionally set the initial delay
		before the first keepalive probe is sent on an idle socket.

		`enable` defaults to false.

		Set `initialDelay` (in milliseconds) to set the delay between the last data packet received and
		the first keepalive probe.

		Setting 0 for `initialDelay` will leave the value unchanged from the default (or previous) setting.
		Defaults to 0.</haxe_doc>
			<overloads><setKeepAlive public="1" set="method">
	<f a="?initialDelay">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Enable/disable keep-alive functionality, and optionally set the initial delay
		before the first keepalive probe is sent on an idle socket.

		`enable` defaults to false.

		Set `initialDelay` (in milliseconds) to set the delay between the last data packet received and
		the first keepalive probe.

		Setting 0 for `initialDelay` will leave the value unchanged from the default (or previous) setting.
		Defaults to 0.</haxe_doc>
</setKeepAlive></overloads>
		</setKeepAlive>
		<address public="1" set="method">
			<f a=""><t path="js.node.net.SocketAdress"/></f>
			<haxe_doc>Returns the bound address, the address family name and port of the socket as reported by the operating system.</haxe_doc>
		</address>
		<unref public="1" set="method">
			<f a=""><c path="js.node.net.Socket"/></f>
			<haxe_doc>Calling `unref` on a socket will allow the program to exit if this is the only active socket in the event system.
		If the socket is already `unref`d calling `unref` again will have no effect.</haxe_doc>
		</unref>
		<ref public="1" set="method">
			<f a=""><c path="js.node.net.Socket"/></f>
			<haxe_doc>Opposite of `unref`, calling `ref` on a previously `unref`d socket will not let the program exit
		if it's the only socket left (the default behavior).
		If the socket is `ref`d calling `ref` again will have no effect.</haxe_doc>
		</ref>
		<remoteAddress public="1" set="null">
			<c path="String"/>
			<haxe_doc>The string representation of the remote IP address.
		For example, '74.125.127.100' or '2001:4860:a005::68'.</haxe_doc>
		</remoteAddress>
		<remoteFamily public="1" set="null">
			<x path="js.node.net.SocketAdressFamily"/>
			<haxe_doc>The string representation of the remote IP family.
		'IPv4' or 'IPv6'.</haxe_doc>
		</remoteFamily>
		<remotePort public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The numeric representation of the remote port. For example, 80 or 21.</haxe_doc>
		</remotePort>
		<localAddress public="1" set="null">
			<c path="String"/>
			<haxe_doc>The string representation of the local IP address the remote client is connecting on.
		For example, if you are listening on '0.0.0.0' and the client connects on '192.168.1.1',
		the value would be '192.168.1.1'.</haxe_doc>
		</localAddress>
		<localPort public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The numeric representation of the local port. For example, 80 or 21.</haxe_doc>
		</localPort>
		<bytesRead public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The amount of received bytes.</haxe_doc>
		</bytesRead>
		<bytesWritten public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The amount of bytes sent.</haxe_doc>
		</bytesWritten>
		<encrypted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Always true for TLSSocket instances.

		May be used to distinguish TLS sockets from regular ones.</haxe_doc>
		</encrypted>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.node.net.SocketOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a new socket object.</haxe_doc>
		</new>
		<meta><m n=":jsRequire">
	<e>"net"</e>
	<e>"Socket"</e>
</m></meta>
	</class>
	<abstract path="js.node.stream.DuplexEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Duplex.hx" module="js.node.stream.Duplex">
		<this><x path="js.node.events.Event"><c path="js.node.stream.DuplexEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.stream.DuplexEvent.T"/></x></icast></to>
		<haxe_doc>Writable streams are an abstraction for a destination to which data is written.

	@see https://nodejs.org/api/stream.html#stream_writable_streams</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.stream._Duplex.DuplexEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Duplex.hx" private="1" module="js.node.stream.Duplex" extern="1" final="1">
	<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="50" static="1">
		<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "drain"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If a call to stream.write(chunk) returns `false`, the `'drain'` event will be emitted
		when it is appropriate to resume writing data to the stream.

		@see https://nodejs.org/api/stream.html#stream_event_drain</haxe_doc>
	</Drain>
	<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="60" static="1">
		<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "finish"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'finish'` event is emitted after the stream.end() method has been called,
		and all data has been flushed to the underlying system.

		@see https://nodejs.org/api/stream.html#stream_event_finish</haxe_doc>
	</Finish>
	<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="68" static="1">
		<x path="js.node.stream.DuplexEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "pipe"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'pipe'` event is emitted when the stream.pipe() method is called on a readable stream,
		adding this writable to its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_pipe</haxe_doc>
	</Pipe>
	<Unpipe public="1" get="inline" set="null" expr="cast &quot;unpipe&quot;" line="76" static="1">
		<x path="js.node.stream.DuplexEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "unpipe"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'unpipe'` event is emitted when the stream.unpipe() method is called on a Readable stream,
		removing this Writable from its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_unpipe</haxe_doc>
	</Unpipe>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="91" static="1">
		<x path="js.node.stream.DuplexEvent"><f a="">
	<d/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'data'` event is emitted whenever the stream is relinquishing ownership of
		a chunk of data to a consumer. This may occur whenever the stream is switched
		in flowing mode by calling `readable.pipe()`, `readable.resume()`, or by
		attaching a listener callback to the `'data'` event. The `'data'` event will
		also be emitted whenever the `readable.read()` method is called and a chunk of
		data is available to be returned.

		@see https://nodejs.org/api/stream.html#stream_event_data</haxe_doc>
	</Data>
	<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="99" static="1">
		<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'end'` event is emitted when there is no more data to be consumed from
		the stream.

		@see https://nodejs.org/api/stream.html#stream_event_end</haxe_doc>
	</End>
	<Pause public="1" get="inline" set="null" expr="cast &quot;pause&quot;" line="109" static="1">
		<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "pause"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'pause'` event is emitted when `stream.pause()` is called
		and `readableFlowing` is not `false`.

		@see https://nodejs.org/api/stream.html#stream_event_pause</haxe_doc>
	</Pause>
	<Readable public="1" get="inline" set="null" expr="cast &quot;readable&quot;" line="118" static="1">
		<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "readable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'readable'` event is emitted when there is data available to be read from
		the stream. In some cases, attaching a listener for the `'readable'` event will
		cause some amount of data to be read into an internal buffer.

		@see https://nodejs.org/api/stream.html#stream_event_readable</haxe_doc>
	</Readable>
	<Resume public="1" get="inline" set="null" expr="cast &quot;resume&quot;" line="126" static="1">
		<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "resume"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'resume'` event is emitted when `stream.resume()` is
		called and `readableFlowing` is not `true`.

		@see https://nodejs.org/api/stream.html#stream_event_resume</haxe_doc>
	</Resume>
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="138" static="1">
		<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'close'` event is emitted when the stream and any of its underlying
		resources (a file descriptor, for example) have been closed.
		The event indicates that no more events will be emitted, and no further computation will occur.

		@see https://nodejs.org/api/stream.html#stream_event_close
		@see https://nodejs.org/api/stream.html#stream_event_close_1</haxe_doc>
	</Close>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="144" static="1">
		<x path="js.node.stream.DuplexEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>@see https://nodejs.org/api/stream.html#stream_event_error
		@see https://nodejs.org/api/stream.html#stream_event_error_1</haxe_doc>
	</Error>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.stream._Duplex.DuplexEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Duplex.hx" private="1" module="js.node.stream.Duplex" extern="1" final="1">
		<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="50" static="1">
			<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "drain"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If a call to stream.write(chunk) returns `false`, the `'drain'` event will be emitted
		when it is appropriate to resume writing data to the stream.

		@see https://nodejs.org/api/stream.html#stream_event_drain</haxe_doc>
		</Drain>
		<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="60" static="1">
			<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "finish"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'finish'` event is emitted after the stream.end() method has been called,
		and all data has been flushed to the underlying system.

		@see https://nodejs.org/api/stream.html#stream_event_finish</haxe_doc>
		</Finish>
		<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="68" static="1">
			<x path="js.node.stream.DuplexEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "pipe"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'pipe'` event is emitted when the stream.pipe() method is called on a readable stream,
		adding this writable to its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_pipe</haxe_doc>
		</Pipe>
		<Unpipe public="1" get="inline" set="null" expr="cast &quot;unpipe&quot;" line="76" static="1">
			<x path="js.node.stream.DuplexEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "unpipe"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'unpipe'` event is emitted when the stream.unpipe() method is called on a Readable stream,
		removing this Writable from its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_unpipe</haxe_doc>
		</Unpipe>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="91" static="1">
			<x path="js.node.stream.DuplexEvent"><f a="">
	<d/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'data'` event is emitted whenever the stream is relinquishing ownership of
		a chunk of data to a consumer. This may occur whenever the stream is switched
		in flowing mode by calling `readable.pipe()`, `readable.resume()`, or by
		attaching a listener callback to the `'data'` event. The `'data'` event will
		also be emitted whenever the `readable.read()` method is called and a chunk of
		data is available to be returned.

		@see https://nodejs.org/api/stream.html#stream_event_data</haxe_doc>
		</Data>
		<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="99" static="1">
			<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'end'` event is emitted when there is no more data to be consumed from
		the stream.

		@see https://nodejs.org/api/stream.html#stream_event_end</haxe_doc>
		</End>
		<Pause public="1" get="inline" set="null" expr="cast &quot;pause&quot;" line="109" static="1">
			<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "pause"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'pause'` event is emitted when `stream.pause()` is called
		and `readableFlowing` is not `false`.

		@see https://nodejs.org/api/stream.html#stream_event_pause</haxe_doc>
		</Pause>
		<Readable public="1" get="inline" set="null" expr="cast &quot;readable&quot;" line="118" static="1">
			<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "readable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'readable'` event is emitted when there is data available to be read from
		the stream. In some cases, attaching a listener for the `'readable'` event will
		cause some amount of data to be read into an internal buffer.

		@see https://nodejs.org/api/stream.html#stream_event_readable</haxe_doc>
		</Readable>
		<Resume public="1" get="inline" set="null" expr="cast &quot;resume&quot;" line="126" static="1">
			<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "resume"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'resume'` event is emitted when `stream.resume()` is
		called and `readableFlowing` is not `true`.

		@see https://nodejs.org/api/stream.html#stream_event_resume</haxe_doc>
		</Resume>
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="138" static="1">
			<x path="js.node.stream.DuplexEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'close'` event is emitted when the stream and any of its underlying
		resources (a file descriptor, for example) have been closed.
		The event indicates that no more events will be emitted, and no further computation will occur.

		@see https://nodejs.org/api/stream.html#stream_event_close
		@see https://nodejs.org/api/stream.html#stream_event_close_1</haxe_doc>
		</Close>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="144" static="1">
			<x path="js.node.stream.DuplexEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>@see https://nodejs.org/api/stream.html#stream_event_error
		@see https://nodejs.org/api/stream.html#stream_event_error_1</haxe_doc>
		</Error>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.stream.DuplexNewOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Duplex.hx" module="js.node.stream.Duplex">
		<a>
			<writev>
				<x path="Null"><f a="chunks:callback">
	<c path="Array"><t path="js.node.stream.Chunk"/></c>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`writev` <Function> Implementation for the stream._writev() method.]]></haxe_doc>
			</writev>
			<write>
				<x path="Null"><f a="chunk:encoding:callback">
	<d/>
	<c path="String"/>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`write` <Function> Implementation for the stream._write() method.]]></haxe_doc>
			</write>
			<writableObjectMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets `objectMode` for writable side of the stream. Has no effect if `objectMode` is `true`. Default: `false`.</haxe_doc>
			</writableObjectMode>
			<writableHighWaterMark>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets `highWaterMark` for the writable side of the stream. Has no effect if `highWaterMark` is provided.</haxe_doc>
			</writableHighWaterMark>
			<readableObjectMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets `objectMode` for readable side of the stream. Has no effect if `objectMode` is `true`. Default: `false`.</haxe_doc>
			</readableObjectMode>
			<readableHighWaterMark>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sets `highWaterMark` for the readable side of the stream. Has no effect if `highWaterMark` is provided.</haxe_doc>
			</readableHighWaterMark>
			<read>
				<x path="Null"><f a="size">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Implementation for the `stream._read()` method.</haxe_doc>
			</read>
			<objectMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether this stream should behave as a stream of objects.
		Meaning that `stream.read(n)` returns a single value instead of a `Buffer` of size `n`.
		Default: `false`.</haxe_doc>
			</objectMode>
			<highWaterMark>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource.
		Default: `16384` (16kb), or `16` for `objectMode` streams.</haxe_doc>
			</highWaterMark>
			<final_>
				<x path="Null"><f a="error">
	<x path="Null"><c path="js.lib.Error"/></x>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`final` <Function> Implementation for the stream._final() method.]]></haxe_doc>
			</final_>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If specified, then buffers will be decoded to strings using the specified encoding.
		Default: `null`.</haxe_doc>
			</encoding>
			<emitClose>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the stream should emit `'close'` after it has been destroyed.
		Default: `true`.</haxe_doc>
			</emitClose>
			<destroy>
				<x path="Null"><f a="err:callback">
	<x path="Null"><c path="js.lib.Error"/></x>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Implementation for the `stream._destroy()` method.</haxe_doc>
			</destroy>
			<defaultEncoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`defaultEncoding` <string> The default encoding that is used when no encoding is specified as an argument to stream.write().
		Default: `'utf8'`.]]></haxe_doc>
			</defaultEncoding>
			<decodeStrings>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`decodeStrings` <boolean> Whether to encode `string`s passed to stream.write() to `Buffer`s (with the encoding specified in the stream.write() call) before passing them to stream._write().
		Other types of data are not converted (i.e. `Buffer`s are not decoded into `string`s). Setting to false will prevent strings from being converted.
		Default: `true`.]]></haxe_doc>
			</decodeStrings>
			<autoDestroy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether this stream should automatically call `.destroy()` on itself after ending.
		Default: `false`.</haxe_doc>
			</autoDestroy>
			<allowHalfOpen>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If set to `false`, then the stream will automatically end the writable side when the readable side ends. Default: `true`.</haxe_doc>
			</allowHalfOpen>
		</a>
		<haxe_doc>Passed to both `Writable` and `Readable` constructors. Also has the following fields:

	@see https://nodejs.org/api/stream.html#stream_new_stream_duplex_options</haxe_doc>
	</typedef>
	<abstract path="js.node.stream.ReadableEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Readable.hx" module="js.node.stream.Readable">
		<this><x path="js.node.events.Event"><c path="js.node.stream.ReadableEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.stream.ReadableEvent.T"/></x></icast></to>
		<haxe_doc>Readable streams are an abstraction for a source from which data is consumed.

	@see https://nodejs.org/api/stream.html#stream_readable_streams</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.stream._Readable.ReadableEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Readable.hx" private="1" module="js.node.stream.Readable" extern="1" final="1">
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="48" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'close'` event is emitted when the stream and any of its underlying
		resources (a file descriptor, for example) have been closed.
		The event indicates that no more events will be emitted, and no further computation will occur.

		@see https://nodejs.org/api/stream.html#stream_event_close_1</haxe_doc>
	</Close>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="60" static="1">
		<x path="js.node.stream.ReadableEvent"><f a="">
	<d/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'data'` event is emitted whenever the stream is relinquishing ownership of
		a chunk of data to a consumer. This may occur whenever the stream is switched
		in flowing mode by calling `readable.pipe()`, `readable.resume()`, or by
		attaching a listener callback to the `'data'` event. The `'data'` event will
		also be emitted whenever the `readable.read()` method is called and a chunk of
		data is available to be returned.

		@see https://nodejs.org/api/stream.html#stream_event_data</haxe_doc>
	</Data>
	<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="68" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'end'` event is emitted when there is no more data to be consumed from
		the stream.

		@see https://nodejs.org/api/stream.html#stream_event_end</haxe_doc>
	</End>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="78" static="1">
		<x path="js.node.stream.ReadableEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'error'` event may be emitted by a `Readable` implementation at any time.
		Typically, this may occur if the underlying stream is unable to generate data
		due to an underlying internal failure, or when a stream implementation attempts
		to push an invalid chunk of data.

		@see https://nodejs.org/api/stream.html#stream_event_error_1</haxe_doc>
	</Error>
	<Pause public="1" get="inline" set="null" expr="cast &quot;pause&quot;" line="86" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "pause"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'pause'` event is emitted when `stream.pause()` is called
		and `readableFlowing` is not `false`.

		@see https://nodejs.org/api/stream.html#stream_event_pause</haxe_doc>
	</Pause>
	<Readable public="1" get="inline" set="null" expr="cast &quot;readable&quot;" line="95" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "readable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'readable'` event is emitted when there is data available to be read from
		the stream. In some cases, attaching a listener for the `'readable'` event will
		cause some amount of data to be read into an internal buffer.

		@see https://nodejs.org/api/stream.html#stream_event_readable</haxe_doc>
	</Readable>
	<Resume public="1" get="inline" set="null" expr="cast &quot;resume&quot;" line="103" static="1">
		<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "resume"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'resume'` event is emitted when `stream.resume()` is
		called and `readableFlowing` is not `true`.

		@see https://nodejs.org/api/stream.html#stream_event_resume</haxe_doc>
	</Resume>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.stream._Readable.ReadableEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Readable.hx" private="1" module="js.node.stream.Readable" extern="1" final="1">
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="48" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'close'` event is emitted when the stream and any of its underlying
		resources (a file descriptor, for example) have been closed.
		The event indicates that no more events will be emitted, and no further computation will occur.

		@see https://nodejs.org/api/stream.html#stream_event_close_1</haxe_doc>
		</Close>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="60" static="1">
			<x path="js.node.stream.ReadableEvent"><f a="">
	<d/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'data'` event is emitted whenever the stream is relinquishing ownership of
		a chunk of data to a consumer. This may occur whenever the stream is switched
		in flowing mode by calling `readable.pipe()`, `readable.resume()`, or by
		attaching a listener callback to the `'data'` event. The `'data'` event will
		also be emitted whenever the `readable.read()` method is called and a chunk of
		data is available to be returned.

		@see https://nodejs.org/api/stream.html#stream_event_data</haxe_doc>
		</Data>
		<End public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="68" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'end'` event is emitted when there is no more data to be consumed from
		the stream.

		@see https://nodejs.org/api/stream.html#stream_event_end</haxe_doc>
		</End>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="78" static="1">
			<x path="js.node.stream.ReadableEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'error'` event may be emitted by a `Readable` implementation at any time.
		Typically, this may occur if the underlying stream is unable to generate data
		due to an underlying internal failure, or when a stream implementation attempts
		to push an invalid chunk of data.

		@see https://nodejs.org/api/stream.html#stream_event_error_1</haxe_doc>
		</Error>
		<Pause public="1" get="inline" set="null" expr="cast &quot;pause&quot;" line="86" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "pause"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'pause'` event is emitted when `stream.pause()` is called
		and `readableFlowing` is not `false`.

		@see https://nodejs.org/api/stream.html#stream_event_pause</haxe_doc>
		</Pause>
		<Readable public="1" get="inline" set="null" expr="cast &quot;readable&quot;" line="95" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "readable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'readable'` event is emitted when there is data available to be read from
		the stream. In some cases, attaching a listener for the `'readable'` event will
		cause some amount of data to be read into an internal buffer.

		@see https://nodejs.org/api/stream.html#stream_event_readable</haxe_doc>
		</Readable>
		<Resume public="1" get="inline" set="null" expr="cast &quot;resume&quot;" line="103" static="1">
			<x path="js.node.stream.ReadableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "resume"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'resume'` event is emitted when `stream.resume()` is
		called and `readableFlowing` is not `true`.

		@see https://nodejs.org/api/stream.html#stream_event_resume</haxe_doc>
		</Resume>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.stream.ReadableNewOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Readable.hx" module="js.node.stream.Readable">
		<a>
			<read>
				<x path="Null"><f a="size">
	<x path="Int"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Implementation for the `stream._read()` method.</haxe_doc>
			</read>
			<objectMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether this stream should behave as a stream of objects.
		Meaning that `stream.read(n)` returns a single value instead of a `Buffer` of size `n`.
		Default: `false`.</haxe_doc>
			</objectMode>
			<highWaterMark>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource.
		Default: `16384` (16kb), or `16` for `objectMode` streams.</haxe_doc>
			</highWaterMark>
			<encoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If specified, then buffers will be decoded to strings using the specified encoding.
		Default: `null`.</haxe_doc>
			</encoding>
			<emitClose>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the stream should emit `'close'` after it has been destroyed.
		Default: `true`.</haxe_doc>
			</emitClose>
			<destroy>
				<x path="Null"><f a="err:callback">
	<x path="Null"><c path="js.lib.Error"/></x>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Implementation for the `stream._destroy()` method.</haxe_doc>
			</destroy>
			<autoDestroy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether this stream should automatically call `.destroy()` on itself after ending.
		Default: `false`.</haxe_doc>
			</autoDestroy>
		</a>
		<haxe_doc>Options for `Readable` private constructor.
	For stream implementors only, see node.js API documentation</haxe_doc>
	</typedef>
	<abstract path="js.node.stream.WritableEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Writable.hx" module="js.node.stream.Writable">
		<this><x path="js.node.events.Event"><c path="js.node.stream.WritableEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.stream.WritableEvent.T"/></x></icast></to>
		<haxe_doc>Writable streams are an abstraction for a destination to which data is written.

	@see https://nodejs.org/api/stream.html#stream_writable_streams</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.stream._Writable.WritableEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Writable.hx" private="1" module="js.node.stream.Writable" extern="1" final="1">
	<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="51" static="1">
		<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "close"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'close'` event is emitted when the stream and any of its underlying resources
		(a file descriptor, for example) have been closed.
		The event indicates that no more events will be emitted, and no further computation will occur.

		@see https://nodejs.org/api/stream.html#stream_event_close</haxe_doc>
	</Close>
	<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="59" static="1">
		<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "drain"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If a call to stream.write(chunk) returns `false`, the `'drain'` event will be emitted
		when it is appropriate to resume writing data to the stream.

		@see https://nodejs.org/api/stream.html#stream_event_drain</haxe_doc>
	</Drain>
	<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="67" static="1">
		<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'error'` event is emitted if an `error` occurred while writing or piping data.
		The listener callback is passed a single Error argument when called.

		@see https://nodejs.org/api/stream.html#stream_event_error</haxe_doc>
	</Error>
	<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="75" static="1">
		<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "finish"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'finish'` event is emitted after the stream.end() method has been called,
		and all data has been flushed to the underlying system.

		@see https://nodejs.org/api/stream.html#stream_event_finish</haxe_doc>
	</Finish>
	<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="83" static="1">
		<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "pipe"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'pipe'` event is emitted when the stream.pipe() method is called on a readable stream,
		adding this writable to its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_pipe</haxe_doc>
	</Pipe>
	<Unpipe public="1" get="inline" set="null" expr="cast &quot;unpipe&quot;" line="91" static="1">
		<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "unpipe"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `'unpipe'` event is emitted when the stream.unpipe() method is called on a Readable stream,
		removing this Writable from its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_unpipe</haxe_doc>
	</Unpipe>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.stream._Writable.WritableEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Writable.hx" private="1" module="js.node.stream.Writable" extern="1" final="1">
		<Close public="1" get="inline" set="null" expr="cast &quot;close&quot;" line="51" static="1">
			<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "close"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'close'` event is emitted when the stream and any of its underlying resources
		(a file descriptor, for example) have been closed.
		The event indicates that no more events will be emitted, and no further computation will occur.

		@see https://nodejs.org/api/stream.html#stream_event_close</haxe_doc>
		</Close>
		<Drain public="1" get="inline" set="null" expr="cast &quot;drain&quot;" line="59" static="1">
			<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "drain"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If a call to stream.write(chunk) returns `false`, the `'drain'` event will be emitted
		when it is appropriate to resume writing data to the stream.

		@see https://nodejs.org/api/stream.html#stream_event_drain</haxe_doc>
		</Drain>
		<Error public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="67" static="1">
			<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'error'` event is emitted if an `error` occurred while writing or piping data.
		The listener callback is passed a single Error argument when called.

		@see https://nodejs.org/api/stream.html#stream_event_error</haxe_doc>
		</Error>
		<Finish public="1" get="inline" set="null" expr="cast &quot;finish&quot;" line="75" static="1">
			<x path="js.node.stream.WritableEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "finish"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'finish'` event is emitted after the stream.end() method has been called,
		and all data has been flushed to the underlying system.

		@see https://nodejs.org/api/stream.html#stream_event_finish</haxe_doc>
		</Finish>
		<Pipe public="1" get="inline" set="null" expr="cast &quot;pipe&quot;" line="83" static="1">
			<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "pipe"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'pipe'` event is emitted when the stream.pipe() method is called on a readable stream,
		adding this writable to its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_pipe</haxe_doc>
		</Pipe>
		<Unpipe public="1" get="inline" set="null" expr="cast &quot;unpipe&quot;" line="91" static="1">
			<x path="js.node.stream.WritableEvent"><f a="">
	<c path="js.node.stream.IReadable"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "unpipe"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `'unpipe'` event is emitted when the stream.unpipe() method is called on a Readable stream,
		removing this Writable from its set of destinations.

		@see https://nodejs.org/api/stream.html#stream_event_unpipe</haxe_doc>
		</Unpipe>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.stream.WritableNewOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Writable.hx" module="js.node.stream.Writable">
		<a>
			<writev>
				<x path="Null"><f a="chunks:callback">
	<c path="Array"><t path="js.node.stream.Chunk"/></c>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`writev` <Function> Implementation for the stream._writev() method.]]></haxe_doc>
			</writev>
			<write>
				<x path="Null"><f a="chunk:encoding:callback">
	<d/>
	<c path="String"/>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`write` <Function> Implementation for the stream._write() method.]]></haxe_doc>
			</write>
			<objectMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`objectMode` <boolean> Whether or not the stream.write(anyObj) is a valid operation. When set,
		it becomes possible to write JavaScript values other than string, `Buffer` or `Uint8Array` if supported by the stream implementation.
		Default: `false`.]]></haxe_doc>
			</objectMode>
			<highWaterMark>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`highWaterMark` <number> Buffer level when stream.write() starts returning `false`. Default: `16384` (16kb), or 16 for `objectMode` streams.]]></haxe_doc>
			</highWaterMark>
			<final_>
				<x path="Null"><f a="error">
	<x path="Null"><c path="js.lib.Error"/></x>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`final` <Function> Implementation for the stream._final() method.]]></haxe_doc>
			</final_>
			<emitClose>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`emitClose` <boolean> Whether or not the stream should emit `'close'` after it has been destroyed.
		Default: `true`.]]></haxe_doc>
			</emitClose>
			<destroy>
				<x path="Null"><f a="error:callback">
	<x path="Null"><c path="js.lib.Error"/></x>
	<f a="">
		<x path="Null"><c path="js.lib.Error"/></x>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`destroy` <Function> Implementation for the stream._destroy() method.]]></haxe_doc>
			</destroy>
			<defaultEncoding>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`defaultEncoding` <string> The default encoding that is used when no encoding is specified as an argument to stream.write().
		Default: `'utf8'`.]]></haxe_doc>
			</defaultEncoding>
			<decodeStrings>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`decodeStrings` <boolean> Whether to encode `string`s passed to stream.write() to `Buffer`s (with the encoding specified in the stream.write() call) before passing them to stream._write().
		Other types of data are not converted (i.e. `Buffer`s are not decoded into `string`s). Setting to false will prevent strings from being converted.
		Default: `true`.]]></haxe_doc>
			</decodeStrings>
			<autoDestroy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[`autoDestroy` <boolean> Whether this stream should automatically call .destroy() on itself after ending. Default: false.]]></haxe_doc>
			</autoDestroy>
		</a>
		<haxe_doc>@see https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options</haxe_doc>
	</typedef>
	<abstract path="js.node.stream.WritableNewOptionsAdapter" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Writable.hx" module="js.node.stream.Writable">
		<from><icast field="from"><t path="js.node.stream.WritableNewOptions"/></icast></from>
		<this><t path="js.node.stream.WritableNewOptions"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="js.node.stream._Writable.WritableNewOptionsAdapter_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Writable.hx" private="1" module="js.node.stream.Writable" final="1"><from public="1" set="method" line="345" static="1">
	<f a="options">
		<t path="js.node.stream.WritableNewOptions"/>
		<x path="js.node.stream.WritableNewOptionsAdapter"/>
	</f>
	<meta><m n=":from"/></meta>
</from></class></impl>
	</abstract>
	<class path="js.node.stream._Writable.WritableNewOptionsAdapter_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Writable.hx" private="1" module="js.node.stream.Writable" final="1"><from public="1" set="method" line="345" static="1">
	<f a="options">
		<t path="js.node.stream.WritableNewOptions"/>
		<x path="js.node.stream.WritableNewOptionsAdapter"/>
	</f>
	<meta><m n=":from"/></meta>
</from></class>
	<typedef path="js.node.stream.Chunk" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/stream/Writable.hx" module="js.node.stream.Writable"><a>
	<encoding><c path="String"/></encoding>
	<chunk><d/></chunk>
</a></typedef>
	<typedef path="js.node.tls.SecureContextOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/SecureContext.hx" module="js.node.tls.SecureContext"><a>
	<sessionIdContext>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>opaque identifier for session resumption.
		If `requestCert` is true, the default is MD5 hash value generated from command-line.
		Otherwise, the default is not provided.</haxe_doc>
	</sessionIdContext>
	<secureProtocol>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The SSL method to use, e.g. SSLv3_method to force SSL version 3.
		The possible values depend on your installation of OpenSSL and are defined in the constant SSL_METHODS.</haxe_doc>
	</secureProtocol>
	<pfx>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>private key, certificate and CA certs of the server in PFX or PKCS12 format.</haxe_doc>
	</pfx>
	<passphrase>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>passphrase for the private key or pfx.</haxe_doc>
	</passphrase>
	<key>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>private key of the server in PEM format.</haxe_doc>
	</key>
	<honorCipherOrder>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>When choosing a cipher, use the server's preferences instead of the client preferences.
		Default: true.</haxe_doc>
	</honorCipherOrder>
	<ecdhCurve>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>named curve to use for ECDH key agreement or false to disable ECDH.

		Defaults to prime256v1 (NIST P-256). Use `Crypto.getCurves` to obtain a list of available curve names.
		On recent releases, openssl ecparam -list_curves will also display the name and description
		of each available elliptic curve.</haxe_doc>
	</ecdhCurve>
	<dhparam>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Diffie Hellman parameters, required for Perfect Forward Secrecy.

		Use openssl dhparam to create it. Its key length should be greater than or equal to 1024 bits,
		otherwise it throws an error. It is strongly recommended to use 2048 bits or more for stronger security.
		If omitted or invalid, it is silently discarded and DHE ciphers won't be available.</haxe_doc>
	</dhparam>
	<crl>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>PEM encoded CRLs (Certificate Revocation List)</haxe_doc>
	</crl>
	<ciphers>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>ciphers to use or exclude.

		To mitigate BEAST attacks it is recommended that you use this option in conjunction with the `honorCipherOrder`
		option described below to prioritize the non-CBC cipher.

		Defaults to AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH.

		Consult the OpenSSL cipher list format documentation for details on the format.
		ECDH (Elliptic Curve Diffie-Hellman) ciphers are not yet supported.</haxe_doc>
	</ciphers>
	<cert>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>certificate key of the server in PEM format.</haxe_doc>
	</cert>
	<ca>
		<x path="Null"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="js.node.Buffer"/>
</x></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>trusted certificates in PEM format.
		If this is omitted several well known "root" CAs will be used, like VeriSign.
		These are used to authorize connections.</haxe_doc>
	</ca>
</a></typedef>
	<class path="js.node.tls.SecureContext" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/SecureContext.hx" extern="1"/>
	<abstract path="js.node.tls.SecurePairEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/SecurePair.hx" module="js.node.tls.SecurePair">
		<this><x path="js.node.events.Event"><c path="js.node.tls.SecurePairEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.tls.SecurePairEvent.T"/></x></icast></to>
		<haxe_doc>Events emitted by `SecurePair`.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.tls._SecurePair.SecurePairEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/SecurePair.hx" private="1" module="js.node.tls.SecurePair" extern="1" final="1">
	<Secure public="1" get="inline" set="null" expr="cast &quot;secure&quot;" line="38" static="1">
		<x path="js.node.tls.SecurePairEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "secure"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The event is emitted from the `SecurePair` once the pair has successfully established a secure connection.

		Similarly to the checking for the server 'secureConnection' event,
		`SecurePair.cleartext.authorized` should be checked to confirm whether
		the certificate used properly authorized.</haxe_doc>
	</Secure>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.tls._SecurePair.SecurePairEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/SecurePair.hx" private="1" module="js.node.tls.SecurePair" extern="1" final="1">
		<Secure public="1" get="inline" set="null" expr="cast &quot;secure&quot;" line="38" static="1">
			<x path="js.node.tls.SecurePairEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "secure"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The event is emitted from the `SecurePair` once the pair has successfully established a secure connection.

		Similarly to the checking for the server 'secureConnection' event,
		`SecurePair.cleartext.authorized` should be checked to confirm whether
		the certificate used properly authorized.</haxe_doc>
		</Secure>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.node.tls.SecurePair" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/SecurePair.hx" extern="1">
		<extends path="js.node.events.EventEmitter"><c path="js.node.tls.SecurePair"/></extends>
		<cleartext public="1" set="null"><c path="js.node.tls.TLSSocket"/></cleartext>
		<encrypted public="1" set="null"><c path="js.node.stream.IDuplex"/></encrypted>
		<haxe_doc>Returned by `Tls.createSecurePair`.</haxe_doc>
	</class>
	<abstract path="js.node.tls.ServerEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/Server.hx" module="js.node.tls.Server">
		<this><x path="js.node.events.Event"><c path="js.node.tls.ServerEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.tls.ServerEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by `Server` in addition to its parent classes.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.tls._Server.ServerEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/Server.hx" private="1" module="js.node.tls.Server" extern="1" final="1">
	<SecureConnection public="1" get="inline" set="null" expr="cast &quot;secureConnection&quot;" line="42" static="1">
		<x path="js.node.tls.ServerEvent"><f a="">
	<c path="js.node.tls.TLSSocket"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "secureConnection"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This event is emitted after a new connection has been successfully handshaked.</haxe_doc>
	</SecureConnection>
	<ClientError public="1" get="inline" set="null" expr="cast &quot;clientError&quot;" line="52" static="1">
		<x path="js.node.tls.ServerEvent"><f a=":">
	<c path="js.lib.Error"/>
	<c path="js.node.tls.TLSSocket"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "clientError"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>When a client connection emits an 'error' event before secure connection is established -
		it will be forwarded here.

		Listener arguments:
			exception - error object
			securePair - the `TLSSocket` that the error originated from</haxe_doc>
	</ClientError>
	<NewSession public="1" get="inline" set="null" expr="cast &quot;newSession&quot;" line="65" static="1">
		<x path="js.node.tls.ServerEvent"><f a="::">
	<t path="js.node.Buffer"/>
	<t path="js.node.Buffer"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "newSession"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted on creation of TLS session.
		May be used to store sessions in external storage.

		`callback` must be invoked eventually, otherwise no data will be sent or received from secure connection.

		Listener arguments:
			sessionId
			sessionData
			callback</haxe_doc>
	</NewSession>
	<ResumeSession public="1" get="inline" set="null" expr="cast &quot;resumeSession&quot;" line="81" static="1">
		<x path="js.node.tls.ServerEvent"><f a=":">
	<t path="js.node.Buffer"/>
	<f a=":?">
		<c path="js.lib.Error"/>
		<t path="js.node.Buffer"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "resumeSession"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when client wants to resume previous TLS session.

		Event listener may perform lookup in external storage using given sessionId,
		and invoke callback(null, sessionData) once finished.

		If session can't be resumed (i.e. doesn't exist in storage) one may call callback(null, null).

		Calling callback(err) will terminate incoming connection and destroy socket.

		Listener arguments:
			sessionId
			callback</haxe_doc>
	</ResumeSession>
	<OCSPRequest public="1" get="inline" set="null" expr="cast &quot;OCSPRequest&quot;" line="94" static="1">
		<x path="js.node.tls.ServerEvent"><f a="::">
	<t path="js.node.Buffer"/>
	<t path="js.node.Buffer"/>
	<f a=":?">
		<c path="js.lib.Error"/>
		<t path="js.node.Buffer"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "OCSPRequest"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Emitted when the client sends a certificate status request.
		You could parse server's current certificate to obtain OCSP url and certificate id,
		and after obtaining OCSP response invoke `callback(null, resp)`, where `resp` is a `Buffer` instance.
		Both certificate and issuer are a Buffer DER-representations of the primary and issuer's certificates.
		They could be used to obtain OCSP certificate id and OCSP endpoint url.

		Alternatively, `callback(null, null)` could be called, meaning that there is no OCSP response.

		Calling `callback(err)` will result in a `socket.destroy(err)` call.</haxe_doc>
	</OCSPRequest>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.tls._Server.ServerEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/Server.hx" private="1" module="js.node.tls.Server" extern="1" final="1">
		<SecureConnection public="1" get="inline" set="null" expr="cast &quot;secureConnection&quot;" line="42" static="1">
			<x path="js.node.tls.ServerEvent"><f a="">
	<c path="js.node.tls.TLSSocket"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "secureConnection"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This event is emitted after a new connection has been successfully handshaked.</haxe_doc>
		</SecureConnection>
		<ClientError public="1" get="inline" set="null" expr="cast &quot;clientError&quot;" line="52" static="1">
			<x path="js.node.tls.ServerEvent"><f a=":">
	<c path="js.lib.Error"/>
	<c path="js.node.tls.TLSSocket"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "clientError"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>When a client connection emits an 'error' event before secure connection is established -
		it will be forwarded here.

		Listener arguments:
			exception - error object
			securePair - the `TLSSocket` that the error originated from</haxe_doc>
		</ClientError>
		<NewSession public="1" get="inline" set="null" expr="cast &quot;newSession&quot;" line="65" static="1">
			<x path="js.node.tls.ServerEvent"><f a="::">
	<t path="js.node.Buffer"/>
	<t path="js.node.Buffer"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "newSession"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted on creation of TLS session.
		May be used to store sessions in external storage.

		`callback` must be invoked eventually, otherwise no data will be sent or received from secure connection.

		Listener arguments:
			sessionId
			sessionData
			callback</haxe_doc>
		</NewSession>
		<ResumeSession public="1" get="inline" set="null" expr="cast &quot;resumeSession&quot;" line="81" static="1">
			<x path="js.node.tls.ServerEvent"><f a=":">
	<t path="js.node.Buffer"/>
	<f a=":?">
		<c path="js.lib.Error"/>
		<t path="js.node.Buffer"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "resumeSession"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when client wants to resume previous TLS session.

		Event listener may perform lookup in external storage using given sessionId,
		and invoke callback(null, sessionData) once finished.

		If session can't be resumed (i.e. doesn't exist in storage) one may call callback(null, null).

		Calling callback(err) will terminate incoming connection and destroy socket.

		Listener arguments:
			sessionId
			callback</haxe_doc>
		</ResumeSession>
		<OCSPRequest public="1" get="inline" set="null" expr="cast &quot;OCSPRequest&quot;" line="94" static="1">
			<x path="js.node.tls.ServerEvent"><f a="::">
	<t path="js.node.Buffer"/>
	<t path="js.node.Buffer"/>
	<f a=":?">
		<c path="js.lib.Error"/>
		<t path="js.node.Buffer"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "OCSPRequest"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Emitted when the client sends a certificate status request.
		You could parse server's current certificate to obtain OCSP url and certificate id,
		and after obtaining OCSP response invoke `callback(null, resp)`, where `resp` is a `Buffer` instance.
		Both certificate and issuer are a Buffer DER-representations of the primary and issuer's certificates.
		They could be used to obtain OCSP certificate id and OCSP endpoint url.

		Alternatively, `callback(null, null)` could be called, meaning that there is no OCSP response.

		Calling `callback(err)` will result in a `socket.destroy(err)` call.</haxe_doc>
		</OCSPRequest>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.node.tls.TLSSocketEvent" params="T" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/TLSSocket.hx" module="js.node.tls.TLSSocket">
		<this><x path="js.node.events.Event"><c path="js.node.tls.TLSSocketEvent.T"/></x></this>
		<to><icast><x path="js.node.events.Event"><c path="js.node.tls.TLSSocketEvent.T"/></x></icast></to>
		<haxe_doc>Enumeration of events emitted by `TLSSocket` objects in addition to its parent class events.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.node.tls._TLSSocket.TLSSocketEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/TLSSocket.hx" private="1" module="js.node.tls.TLSSocket" extern="1" final="1">
	<SecureConnect public="1" get="inline" set="null" expr="cast &quot;secureConnect&quot;" line="50" static="1">
		<x path="js.node.tls.TLSSocketEvent"><f a=""><x path="Void"/></f></x>
		<meta>
			<m n=":value"><e>cast "secureConnect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This event is emitted after a new connection has been successfully handshaked.

		The listener will be called no matter if the server's certificate was authorized or not.

		It is up to the user to test `TLSSocket.authorized` to see if the server certificate
		was signed by one of the specified CAs. If `TLSSocket.authorized` is false then the error
		can be found in `TLSSocket.authorizationError`. Also if NPN was used - you can
		check `TLSSocket.npnProtocol` for negotiated protocol.</haxe_doc>
	</SecureConnect>
	<OCSPResponse public="1" get="inline" set="null" expr="cast &quot;OCSPResponse&quot;" line="60" static="1">
		<x path="js.node.tls.TLSSocketEvent"><f a="">
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></x>
		<meta>
			<m n=":value"><e>cast "OCSPResponse"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This event will be emitted if `requestOCSP` option was set.

		`response` is a `Buffer` object, containing server's OCSP response.

		Traditionally, the response is a signed object from the server's CA
		that contains information about server's certificate revocation status.</haxe_doc>
	</OCSPResponse>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.node.tls._TLSSocket.TLSSocketEvent_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/TLSSocket.hx" private="1" module="js.node.tls.TLSSocket" extern="1" final="1">
		<SecureConnect public="1" get="inline" set="null" expr="cast &quot;secureConnect&quot;" line="50" static="1">
			<x path="js.node.tls.TLSSocketEvent"><f a=""><x path="Void"/></f></x>
			<meta>
				<m n=":value"><e>cast "secureConnect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This event is emitted after a new connection has been successfully handshaked.

		The listener will be called no matter if the server's certificate was authorized or not.

		It is up to the user to test `TLSSocket.authorized` to see if the server certificate
		was signed by one of the specified CAs. If `TLSSocket.authorized` is false then the error
		can be found in `TLSSocket.authorizationError`. Also if NPN was used - you can
		check `TLSSocket.npnProtocol` for negotiated protocol.</haxe_doc>
		</SecureConnect>
		<OCSPResponse public="1" get="inline" set="null" expr="cast &quot;OCSPResponse&quot;" line="60" static="1">
			<x path="js.node.tls.TLSSocketEvent"><f a="">
	<t path="js.node.Buffer"/>
	<x path="Void"/>
</f></x>
			<meta>
				<m n=":value"><e>cast "OCSPResponse"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This event will be emitted if `requestOCSP` option was set.

		`response` is a `Buffer` object, containing server's OCSP response.

		Traditionally, the response is a signed object from the server's CA
		that contains information about server's certificate revocation status.</haxe_doc>
		</OCSPResponse>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.node.tls.TLSSocketOptions" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/TLSSocket.hx" module="js.node.tls.TLSSocket"><a>
	<session>
		<x path="Null"><t path="js.node.Buffer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A Buffer instance, containing TLS session.</haxe_doc>
	</session>
	<server>
		<x path="Null"><c path="js.node.net.Server"/></x>
		<meta><m n=":optional"/></meta>
	</server>
	<secureContext>
		<x path="Null"><c path="js.node.tls.SecureContext"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>An optional TLS context object from `Tls.createSecureContext`</haxe_doc>
	</secureContext>
	<requestOCSP>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true - OCSP status request extension would be added to client hello,
		and OCSPResponse event will be emitted on socket before establishing secure communication</haxe_doc>
	</requestOCSP>
	<requestCert>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true the server will request a certificate from clients that connect
		and attempt to verify that certificate.
		Default: false.</haxe_doc>
	</requestCert>
	<rejectUnauthorized>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true the server will reject any connection which is not authorized with the list of supplied CAs.
		This option only has an effect if `requestCert` is true.
		Default: false.</haxe_doc>
	</rejectUnauthorized>
	<isServer>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true - TLS socket will be instantiated in server-mode</haxe_doc>
	</isServer>
	<SNICallback>
		<x path="Null"><f a="servername:cb">
	<c path="String"/>
	<f a="">
		<c path="js.lib.Error"/>
		<c path="js.node.tls.SecureContext"/>
	</f>
	<x path="Void"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A function that will be called if client supports SNI TLS extension.
		Two argument will be passed to it: `servername`, and `cb`.
		SNICallback should invoke `cb(null, ctx)`, where `ctx` is a SecureContext instance.
		(You can use tls.createSecureContext(...) to get proper `SecureContext`).
		If `SNICallback` wasn't provided - default callback with high-level API will be used.</haxe_doc>
	</SNICallback>
	<NPNProtocols>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="String"/></c>
	<t path="js.node.Buffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>possible NPN protocols. (Protocols should be ordered by their priority).</haxe_doc>
	</NPNProtocols>
</a></typedef>
	<class path="js.node.tls.TLSSocket" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/tls/TLSSocket.hx" extern="1">
		<extends path="js.node.net.Socket"/>
		<authorized public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>true if the peer certificate was signed by one of the specified CAs, otherwise false</haxe_doc>
		</authorized>
		<authorizationError public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The reason why the peer's certificate has not been verified.

		This property becomes available only when `authorized` is false.</haxe_doc>
		</authorizationError>
		<npnProtocol public="1" set="null">
			<c path="String"/>
			<haxe_doc>Negotiated protocol name.</haxe_doc>
		</npnProtocol>
		<getPeerCertificate public="1" set="method">
			<f a="?detailed">
				<x path="Bool"/>
				<d/>
			</f>
			<haxe_doc>Returns an object representing the peer's certificate.

		The returned object has some properties corresponding to the field of the certificate.
		If `detailed` argument is true - the full chain with issuer property will be returned,
		if false - only the top certificate without issuer property.</haxe_doc>
		</getPeerCertificate>
		<getCipher public="1" set="method">
			<f a=""><a>
	<version><c path="String"/></version>
	<name><c path="String"/></name>
</a></f>
			<haxe_doc>Returns an object representing the cipher name and the SSL/TLS protocol version of the current connection.

		Example: { name: 'AES256-SHA', version: 'TLSv1/SSLv3' }

		See SSL_CIPHER_get_name() and SSL_CIPHER_get_version() in http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_CIPHERS for more information.</haxe_doc>
		</getCipher>
		<renegotiate public="1" set="method">
			<f a="options:?callback">
				<a>
					<requestCert>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</requestCert>
					<rejectUnauthorized>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</rejectUnauthorized>
				</a>
				<f a="">
					<c path="js.lib.Error"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Initiate TLS renegotiation process.

		The `options` may contain the following fields: rejectUnauthorized, requestCert (See `Tls.createServer` for details).

		`callback(err)` will be executed with null as err, once the renegotiation is successfully completed.

		NOTE: Can be used to request peer's certificate after the secure connection has been established.
		ANOTHER NOTE: When running as the server, socket will be destroyed with an error after handshakeTimeout timeout.</haxe_doc>
		</renegotiate>
		<setMaxSendFragment public="1" set="method">
			<f a="size">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Set maximum TLS fragment size (default and maximum value is: 16384, minimum is: 512).

		Returns true on success, false otherwise.

		Smaller fragment size decreases buffering latency on the client: large fragments are buffered by the TLS layer
		until the entire fragment is received and its integrity is verified; large fragments can span multiple roundtrips,
		and their processing can be delayed due to packet loss or reordering. However, smaller fragments add
		extra TLS framing bytes and CPU overhead, which may decrease overall server throughput.</haxe_doc>
		</setMaxSendFragment>
		<getProtocol public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the negotiated SSL/TLS protocol version of the current connection.

		'unknown' will be returned for connected sockets that have not completed the handshaking process.
		`null` will be returned for server sockets or disconnected client sockets.</haxe_doc>
		</getProtocol>
		<getSession public="1" set="method">
			<f a=""><x path="Null"><t path="js.node.Buffer"/></x></f>
			<haxe_doc>Return ASN.1 encoded TLS session or null if none was negotiated.
		Could be used to speed up handshake establishment when reconnecting to the server.</haxe_doc>
		</getSession>
		<getTLSTicket public="1" set="method">
			<f a=""><x path="Null"><t path="js.node.Buffer"/></x></f>
			<haxe_doc>NOTE: Works only with client TLS sockets.

		Useful only for debugging, for session reuse provide session option to tls.connect.

		Return TLS session ticket or null if none was negotiated.</haxe_doc>
		</getTLSTicket>
		<new public="1" set="method">
			<f a="socket:options">
				<c path="js.node.net.Socket"/>
				<t path="js.node.tls.TLSSocketOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a new TLSSocket object from existing TCP socket.</haxe_doc>
		</new>
		<haxe_doc>This is a wrapped version of `net.Socket` that does transparent encryption
	of written data and all required TLS negotiation.

	Its `encrypted` field is always true.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"tls"</e>
	<e>"TLSSocket"</e>
</m></meta>
	</class>
	<class path="js.node.url.URL" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/url/URL.hx" extern="1">
		<hash public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the fragment portion of the URL.</haxe_doc>
		</hash>
		<host public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the host portion of the URL.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the hostname portion of the URL
		The key difference between `url.host` and `url.hostname` is that `url.hostname` does not include the port.</haxe_doc>
		</hostname>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the serialized URL.</haxe_doc>
		</href>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Gets the read-only serialization of the URL's origin.</haxe_doc>
		</origin>
		<password public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the password portion of the URL.</haxe_doc>
		</password>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the path portion of the URL.</haxe_doc>
		</pathname>
		<port public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the port portion of the URL.

		The port value may be a number or a string containing a number in the range `0` to `65535` (inclusive).
		Setting the value to the default port of the `URL` objects given `protocol` will result in the port value becoming the empty string (`''`).</haxe_doc>
		</port>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the protocol portion of the URL.</haxe_doc>
		</protocol>
		<search public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the serialized query portion of the URL.</haxe_doc>
		</search>
		<searchParams public="1" set="null">
			<c path="js.node.url.URLSearchParams"/>
			<haxe_doc>Gets the `URLSearchParams` object representing the query parameters of the URL.
		This property is read-only; to replace the entirety of query parameters of the URL, use the `url.search` setter.
		See [URLSearchParams](https://nodejs.org/api/url.html#url_class_urlsearchparams) documentation for details.</haxe_doc>
		</searchParams>
		<username public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the username portion of the URL.</haxe_doc>
		</username>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>The `toString()` method on the `URL` object returns the serialized URL.
		The value returned is equivalent to that of `url.href` and `url.toJSON()`.

		Because of the need for standard compliance, this method does not allow users to customize the serialization process of the URL.
		For more flexibility, `require('url').format()` method might be of interest.</haxe_doc>
		</toString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>The `toJSON()` method on the `URL` object returns the serialized URL.
		The value returned is equivalent to that of `url.href` and `url.toString()`.

		This method is automatically called when an `URL` object is serialized with `JSON.stringify()`.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="input:?base">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `URL` object by parsing the `input` relative to the `base`.
		If `base` is passed as a string, it will be parsed equivalent to `new URL(base)`.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="input:?base">
		<c path="String"/>
		<c path="js.node.url.URL"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Creates a new `URL` object by parsing the `input` relative to the `base`.
		If `base` is passed as a string, it will be parsed equivalent to `new URL(base)`.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>Browser-compatible URL class, implemented by following the WHATWG URL Standard.
	[Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"url"</e>
	<e>"URL"</e>
</m></meta>
	</class>
	<class path="js.node.url.URLSearchParams" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/url/URLSearchParams.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Append a new name-value pair to the query string.</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove all name-value pairs whose name is `name`.</haxe_doc>
		</delete>
		<entries public="1" set="method">
			<f a=""><t path="js.node.Iterator"><x path="js.node.url.URLSearchParamsEntry"/></t></f>
			<haxe_doc>Returns an ES6 `Iterator` over each of the name-value pairs in the query.
		Each item of the iterator is a JavaScript `Array`.
		The first item of the `Array` is the `name`, the second item of the `Array` is the `value`.</haxe_doc>
		</entries>
		<forEach public="1" set="method">
			<f a="fn:?thisArg">
				<f a="value:name:searchParams">
					<c path="String"/>
					<c path="String"/>
					<c path="js.node.url.URLSearchParams"/>
					<x path="Void"/>
				</f>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Iterates over each name-value pair in the query and invokes the given function.</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="fn:?thisArg">
						<f a="value">
							<c path="String"/>
							<x path="Void"/>
						</f>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>Iterates over each name-value pair in the query and invokes the given function.</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="fn:?thisArg">
						<f a="value:name">
							<c path="String"/>
							<c path="String"/>
							<x path="Void"/>
						</f>
						<d/>
						<x path="Void"/>
					</f>
					<haxe_doc>Iterates over each name-value pair in the query and invokes the given function.</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the first name-value pair whose name is `name`.
		If there are no such pairs, `null` is returned.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the values of all name-value pairs whose name is `name`.
		If there are no such pairs, an empty array is returned.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if there is at least one name-value pair whose name is `name`.</haxe_doc>
		</has>
		<keys public="1" set="method">
			<f a=""><t path="js.node.Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an ES6 `Iterator` over the names of each name-value pair.</haxe_doc>
		</keys>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value in the `URLSearchParams` object associated with `name` to `value`.
		If there are any pre-existing name-value pairs whose names are `name`, set the first such pair's value to `value` and remove all others.
		If not, append the name-value pair to the query string.</haxe_doc>
		</set>
		<sort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sort all existing name-value pairs in-place by their names. Sorting is done with a [stable sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability),
		so relative order between name-value pairs with the same name is preserved.

		This method can be used, in particular, to increase cache hits.</haxe_doc>
		</sort>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the search parameters serialized as a string, with characters percent-encoded where necessary.</haxe_doc>
		</toString>
		<values public="1" set="method">
			<f a=""><t path="js.node.Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an ES6 `Iterator` over the values of each name-value pair.</haxe_doc>
		</values>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="init">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="obj">
	<d><c path="String"/></d>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="array">
	<c path="Array"><x path="js.node.url.URLSearchParamsEntry"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="iter">
	<t path="js.node.Iterator"><x path="js.node.url.URLSearchParamsEntry"/></t>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `URLSearchParams` API provides read and write access to the query of a `URL`.
	The `URLSearchParams` class can also be used standalone with one of the four following constructors.
	The `URLSearchParams` class is also available on the global object.

	The WHATWG `URLSearchParams` interface and the `querystring` module have similar purpose,
	but the purpose of the querystring module is more general, as it allows the customization of delimiter characters (`&` and` `=`). On the other hand, this API is designed purely for URL query strings.]]></haxe_doc>
		<meta><m n=":jsRequire">
	<e>"url"</e>
	<e>"URLSearchParams"</e>
</m></meta>
	</class>
	<abstract path="js.node.url.URLSearchParamsEntry" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/url/URLSearchParams.hx" module="js.node.url.URLSearchParams">
		<this><c path="Array"><c path="String"/></c></this>
		<haxe_doc>The name-value pair access helper for `js.node.url.URLSearchParams.entries()`.</haxe_doc>
		<impl><class path="js.node.url._URLSearchParams.URLSearchParamsEntry_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/url/URLSearchParams.hx" private="1" module="js.node.url.URLSearchParams" final="1">
	<name public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
	</name>
	<value public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
	</value>
	<_new public="1" set="method" line="128" static="1">
		<f a="name:value">
			<c path="String"/>
			<c path="String"/>
			<x path="js.node.url.URLSearchParamsEntry"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_name get="inline" set="null" line="132" static="1">
		<f a="this">
			<c path="Array"><c path="String"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_name>
	<get_value get="inline" set="null" line="136" static="1">
		<f a="this">
			<c path="Array"><c path="String"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_value>
</class></impl>
	</abstract>
	<class path="js.node.url._URLSearchParams.URLSearchParamsEntry_Impl_" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/js/node/url/URLSearchParams.hx" private="1" module="js.node.url.URLSearchParams" final="1">
		<name public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
		</name>
		<value public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
		</value>
		<_new public="1" set="method" line="128" static="1">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="js.node.url.URLSearchParamsEntry"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_name get="inline" set="null" line="132" static="1">
			<f a="this">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_name>
		<get_value get="inline" set="null" line="136" static="1">
			<f a="this">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_value>
	</class>
	<typedef path="sys.FileStat" params="" file="/usr/local/lib/haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
	<class path="sys.FileSystem" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/sys/FileSystem.hx">
		<exists public="1" set="method" line="14" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` exists.</haxe_doc>
		</exists>
		<createDirectory public="1" set="method" line="41" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a directory specified by `path`.

		This method is recursive: The parent directories don't have to exist.

		If the directory cannot be created, an exception is thrown.</haxe_doc>
		</createDirectory>
		<haxe_doc>This class provides information about files and directories.

	If `null` is passed as a file path to any function in this class, the
	result is unspecified, and may differ from target to target.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dce"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io.FileInput" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<fd><x path="Int"/></fd>
		<pos><x path="Int"/></pos>
		<readByte public="1" set="method" line="20"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="36"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="52"><f a=""><x path="Void"/></f></close>
		<seek public="1" set="method" line="56"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="67"><f a=""><x path="Int"/></f></tell>
		<eof public="1" set="method" line="71"><f a=""><x path="Bool"/></f></eof>
		<new set="method" line="15">
			<f a="fd">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>sys.io.File</e></m></meta>
		</new>
		<haxe_doc>Use `sys.io.File.read` to create a `FileInput`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io.FileOutput" params="" file="/usr/local/lib/haxeLibrary/hxnodejs/12,1,0/src/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<fd><x path="Int"/></fd>
		<pos><x path="Int"/></pos>
		<writeByte public="1" set="method" line="20"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="27"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="34"><f a=""><x path="Void"/></f></close>
		<seek public="1" set="method" line="38"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="49"><f a=""><x path="Int"/></f></tell>
		<new set="method" line="15">
			<f a="fd">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>sys.io.File</e></m></meta>
		</new>
		<haxe_doc>Use `sys.io.File.write` to create a `FileOutput`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="sys.io.FileSeek" params="" file="/usr/local/lib/haxe/std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
</haxe>